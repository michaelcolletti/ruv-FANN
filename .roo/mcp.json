{
  "mcpServers": {
    "ruv-swarm": {
      "command": "npx",
      "args": [
        "ruv-swarm",
        "mcp",
        "start",
        "--protocol=stdio"
      ],
      "env": {},
      "cwd": "/workspaces/ruv-FANN/ruv-swarm/npm",
      "description": "ruv-swarm distributed agent orchestration with neural network performance",
      "capabilities": {
        "tools": {
          "swarm_init": "Initialize swarm topology (mesh, hierarchical, ring, star)",
          "swarm_status": "Get current swarm status and agent information",
          "swarm_monitor": "Monitor swarm activity in real-time",
          "agent_spawn": "Spawn new agents with specified capabilities",
          "agent_list": "List all active agents in the swarm",
          "agent_metrics": "Get performance metrics for agents",
          "task_orchestrate": "Orchestrate distributed tasks across the swarm",
          "task_status": "Check progress of running tasks",
          "task_results": "Retrieve results from completed tasks",
          "benchmark_run": "Execute performance benchmarks",
          "features_detect": "Detect runtime features and capabilities",
          "memory_usage": "Get current memory usage statistics",
          "neural_status": "Get neural agent status and performance metrics",
          "neural_train": "Train neural agents with sample tasks",
          "neural_patterns": "Get cognitive pattern information",
          "daa_init": "Initialize DAA (Decentralized Autonomous Agents) service",
          "daa_agent_create": "Create autonomous agents with learning capabilities",
          "daa_agent_adapt": "Trigger agent adaptation based on feedback",
          "daa_workflow_create": "Create autonomous workflows with DAA coordination",
          "daa_workflow_execute": "Execute DAA workflows with autonomous agents",
          "daa_knowledge_share": "Share knowledge between autonomous agents",
          "daa_learning_status": "Get learning progress and status for DAA agents",
          "daa_cognitive_pattern": "Analyze or change cognitive patterns for agents",
          "daa_meta_learning": "Enable meta-learning capabilities across domains",
          "daa_performance_metrics": "Get comprehensive DAA performance metrics"
        },
        "resources": {
          "swarm_config": "Access swarm configuration and topology settings",
          "agent_state": "Access agent state and status information",
          "task_queue": "Access task queue and orchestration status",
          "performance_metrics": "Access real-time performance data"
        }
      },
      "metadata": {
        "name": "ruv-swarm",
        "version": "0.3.0",
        "author": "rUv Contributors",
        "license": "MIT OR Apache-2.0",
        "repository": "https://github.com/ruvnet/ruv-FANN",
        "documentation": "https://github.com/ruvnet/ruv-FANN/tree/main/ruv-swarm",
        "homepage": "https://github.com/ruvnet/ruv-FANN#readme",
        "keywords": [
          "neural-network",
          "wasm",
          "webassembly",
          "machine-learning",
          "swarm",
          "ai",
          "orchestration",
          "multi-agent",
          "distributed-computing",
          "cognitive-diversity",
          "claude-code",
          "mcp"
        ]
      },
      "configuration": {
        "default_topology": "mesh",
        "default_max_agents": 5,
        "default_strategy": "balanced",
        "persistence": "memory",
        "transport": "websocket",
        "wasm_optimization": true,
        "simd_support": "auto",
        "debug_mode": false,
        "daa_enabled": true,
        "daa_learning_rate": 0.001,
        "daa_memory_persistence": true,
        "daa_cognitive_patterns": [
          "convergent",
          "divergent",
          "lateral",
          "systems",
          "critical",
          "adaptive"
        ],
        "daa_meta_learning": true,
        "daa_knowledge_sharing": true
      },
      "alwaysAllow": [
        "swarm_init",
        "swarm_status",
        "swarm_monitor",
        "agent_spawn",
        "agent_list",
        "agent_metrics"
      ]
    }
  },
  "globalSettings": {
    "logLevel": "info",
    "timeout": 30000,
    "retryAttempts": 3,
    "enableTelemetry": false
  },
  "$schema": "https://spec.modelcontextprotocol.io/schema/mcp.json",
  "version": "2024-11-05"
}