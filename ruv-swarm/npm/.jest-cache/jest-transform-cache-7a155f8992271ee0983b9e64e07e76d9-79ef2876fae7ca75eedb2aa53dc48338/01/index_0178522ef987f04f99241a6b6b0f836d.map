{"version":3,"names":["cov_b7ezsq2ai","actualCoverage","asyncGeneratorStep","n","t","e","r","o","a","c","i","u","value","done","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","ownKeys","Object","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","push","_objectSpread","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","configurable","writable","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","ClaudeIntegrationCore","ClaudeDocsGenerator","RemoteWrapperGenerator","ClaudeIntegrationOrchestrator","constructor","options","b","f","s","autoSetup","forceSetup","workingDir","process","cwd","packageName","core","docs","remote","setupIntegration","_this","console","log","results","timestamp","Date","toISOString","success","modules","generateAll","createAll","initialize","error","message","manualSetup","instructions","invokeClaudeWithPrompt","prompt","_this2","checkStatus","_this3","status","claudeAvailable","isClaudeAvailable","filesExist","checkExistingFiles","cleanup","_this4","fs","require","promises","path","filesToRemove","removedFiles","file","filePath","join","rm","recursive","force","setupClaudeIntegration","_setupClaudeIntegration","orchestrator","invokeClaudeWithSwarm","_x","_invokeClaudeWithSwarm"],"sources":["index.js"],"sourcesContent":["/**\n * Main Claude Code integration orchestrator\n * Coordinates all integration modules for modular, remote-capable setup\n */\n\nimport { ClaudeIntegrationCore } from './core.js';\nimport { ClaudeDocsGenerator } from './docs.js';\nimport { RemoteWrapperGenerator } from './remote.js';\n\nclass ClaudeIntegrationOrchestrator {\n  constructor(options = {}) {\n    this.options = {\n      autoSetup: options.autoSetup || false,\n      forceSetup: options.forceSetup || false,\n      workingDir: options.workingDir || process.cwd(),\n      packageName: options.packageName || 'ruv-swarm',\n      ...options,\n    };\n\n    // Initialize modules\n    this.core = new ClaudeIntegrationCore(this.options);\n    this.docs = new ClaudeDocsGenerator(this.options);\n    this.remote = new RemoteWrapperGenerator(this.options);\n  }\n\n  /**\n     * Setup complete Claude Code integration\n     */\n  async setupIntegration() {\n    console.log('üöÄ Setting up modular Claude Code integration...');\n    console.log('   Working directory:', this.options.workingDir);\n    console.log('   Force setup:', this.options.forceSetup);\n    console.log('   Auto setup MCP:', this.options.autoSetup);\n\n    try {\n      const results = {\n        timestamp: new Date().toISOString(),\n        workingDir: this.options.workingDir,\n        success: true,\n        modules: {},\n      };\n\n      // Step 1: Generate documentation\n      console.log('\\nüìö Step 1: Documentation Generation');\n      results.modules.docs = await this.docs.generateAll();\n\n      // Step 2: Setup remote capabilities\n      console.log('\\nüåê Step 2: Remote Execution Setup');\n      results.modules.remote = await this.remote.createAll();\n\n      // Step 3: Initialize core integration (if auto setup enabled)\n      if (this.options.autoSetup) {\n        console.log('\\nüîß Step 3: Core Integration Setup');\n        try {\n          results.modules.core = await this.core.initialize();\n        } catch (error) {\n          console.log('‚ö†Ô∏è  Core integration setup failed (manual setup required)');\n          console.log('   Error:', error.message);\n          results.modules.core = {\n            success: false,\n            error: error.message,\n            manualSetup: true,\n          };\n        }\n      } else {\n        console.log('\\nüí° Step 3: Manual Core Setup Required');\n        results.modules.core = {\n          success: true,\n          manualSetup: true,\n          instructions: [\n            'Run: claude mcp add ruv-swarm npx ruv-swarm mcp start',\n            'Test with: mcp__ruv-swarm__agent_spawn',\n          ],\n        };\n      }\n\n      // Summary\n      console.log('\\n‚úÖ Modular Claude Code integration setup complete!');\n      console.log('\\nüìã What was created:');\n      console.log('   üìÑ claude.md - Main configuration guide');\n      console.log('   üìÅ .claude/commands/ - Command documentation');\n      console.log('   üîß Cross-platform wrapper scripts');\n      console.log('   ü§ñ Claude helper scripts');\n      console.log('   üåê Remote execution support');\n\n      console.log('\\nüîó Next steps:');\n      if (results.modules.core.manualSetup) {\n        console.log('   1. claude mcp add ruv-swarm npx ruv-swarm mcp start');\n        console.log('   2. Test with MCP tools: mcp__ruv-swarm__agent_spawn');\n      } else {\n        console.log('   1. Test with MCP tools: mcp__ruv-swarm__agent_spawn');\n      }\n      console.log('   3. Check .claude/commands/ for detailed usage guides');\n      console.log('   4. Use wrapper scripts for remote execution');\n\n      return results;\n\n    } catch (error) {\n      console.error('‚ùå Integration setup failed:', error.message);\n      throw error;\n    }\n  }\n\n  /**\n     * Invoke Claude with a prompt using the core module\n     */\n  async invokeClaudeWithPrompt(prompt) {\n    return await this.core.invokeClaudeWithPrompt(prompt);\n  }\n\n  /**\n     * Check integration status\n     */\n  async checkStatus() {\n    console.log('üîç Checking Claude Code integration status...');\n\n    try {\n      const status = {\n        claudeAvailable: await this.core.isClaudeAvailable(),\n        filesExist: await this.core.checkExistingFiles(),\n        workingDir: this.options.workingDir,\n        timestamp: new Date().toISOString(),\n      };\n\n      console.log('Claude CLI available:', status.claudeAvailable ? '‚úÖ' : '‚ùå');\n      console.log('Integration files exist:', status.filesExist ? '‚úÖ' : '‚ùå');\n\n      return status;\n    } catch (error) {\n      console.error('‚ùå Status check failed:', error.message);\n      throw error;\n    }\n  }\n\n  /**\n     * Clean up integration files\n     */\n  async cleanup() {\n    console.log('üßπ Cleaning up Claude Code integration files...');\n\n    const fs = require('fs').promises;\n    const path = require('path');\n\n    try {\n      const filesToRemove = [\n        'claude.md',\n        '.claude',\n        this.options.packageName,\n        `${this.options.packageName }.bat`,\n        `${this.options.packageName }.ps1`,\n        'claude-swarm.sh',\n        'claude-swarm.bat',\n      ];\n\n      const removedFiles = [];\n\n      for (const file of filesToRemove) {\n        try {\n          const filePath = path.join(this.options.workingDir, file);\n          await fs.rm(filePath, { recursive: true, force: true });\n          removedFiles.push(file);\n        } catch {\n          // File doesn't exist, continue\n        }\n      }\n\n      console.log('‚úÖ Cleanup complete. Removed:', removedFiles.join(', '));\n      return { success: true, removedFiles };\n\n    } catch (error) {\n      console.error('‚ùå Cleanup failed:', error.message);\n      throw error;\n    }\n  }\n}\n\n// Convenience function for simple setup\nasync function setupClaudeIntegration(options = {}) {\n  const orchestrator = new ClaudeIntegrationOrchestrator(options);\n  return await orchestrator.setupIntegration();\n}\n\n// Convenience function for Claude invocation\nasync function invokeClaudeWithSwarm(prompt, options = {}) {\n  const orchestrator = new ClaudeIntegrationOrchestrator(options);\n  return await orchestrator.invokeClaudeWithPrompt(prompt);\n}\n\nexport {\n  ClaudeIntegrationOrchestrator,\n  setupClaudeIntegration,\n  invokeClaudeWithSwarm,\n  // Export individual modules for advanced usage\n  ClaudeIntegrationCore,\n  ClaudeDocsGenerator,\n  RemoteWrapperGenerator,\n};"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}