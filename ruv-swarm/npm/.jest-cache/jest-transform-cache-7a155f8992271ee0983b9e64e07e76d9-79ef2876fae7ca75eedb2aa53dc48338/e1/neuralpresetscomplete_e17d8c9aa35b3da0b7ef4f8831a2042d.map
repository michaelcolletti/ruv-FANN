{"version":3,"names":["cov_m2kw6bkkg","actualCoverage","asyncGeneratorStep","n","t","e","r","o","a","c","i","u","value","done","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","CognitivePatternEvolution","MetaLearningFramework","COMPLETE_NEURAL_PRESETS","s","transformer","bert_base","name","description","model","config","dimensions","heads","layers","ffDimensions","dropoutRate","maxSequenceLength","vocabSize","cognitivePatterns","performance","expectedAccuracy","inferenceTime","memoryUsage","trainingTime","useCase","gpt_small","t5_base","encoderLayers","decoderLayers","cnn","efficientnet_b0","inputShape","convLayers","filters","kernelSize","stride","padding","outputSize","yolov5_small","backbone","neck","head","anchors","lstm","bilstm_sentiment","inputSize","hiddenSize","numLayers","bidirectional","lstm_timeseries","sequenceLength","returnSequence","gru","gru_translator","attention","autoencoder","vae_mnist","latentDimensions","betaKL","dae_denoising","bottleneckSize","denoisingNoise","activation","gnn","gcn_citation","nodeDimensions","hiddenDimensions","outputDimensions","gat_molecular","attentionHeads","hiddenUnits","resnet","resnet50_imagenet","numBlocks","blockDepth","initialChannels","multihead_attention","useCausalMask","diffusion","ddpm_mnist","timesteps","betaSchedule","imageSize","channels","modelChannels","neural_ode","node_dynamics","solverMethod","tolerance","timeDimension","capsnet","capsnet_mnist","primaryCaps","digitCaps","routingIterations","capsuleDimensions","snn","lif_classifier","neuronModel","threshold","decay","timeWindow","codingScheme","ntm","ntm_copy","memorySize","controllerSize","numHeads","shiftRange","memnn","memnn_qa","memorySlots","hops","embeddingSize","temporalEncoding","nca","nca_growth","updateRule","cellStates","gridSize","hypernet","hypernet_adaptive","hyperDim","targetLayers","maml","maml_fewshot","innerLR","outerLR","innerSteps","numWays","numShots","nas","darts_cifar","searchSpace","epochs","moe","moe_nlp","numExperts","expertCapacity","routerType","nerf","nerf_3d","positionEncoding","directionEncoding","hiddenLayers","wavenet","wavenet_tts","dilationChannels","residualChannels","skipChannels","dilationDepth","dilationRepeat","pointnet","pointnet_seg","pointFeatures","globalFeatures","numClasses","samplingGroups","world_model","world_model_rl","visionModel","memoryModel","latentSize","flow","realvp_generation","flowType","couplingLayers","ebm","ebm_generation","energyFunction","samplingSteps","stepSize","noise","neural_process","cnp_regression","latentDim","contextPoints","encoderHidden","decoderHidden","set_transformer","set_anomaly","inducingPoints","CognitivePatternSelector","constructor","f","patternEvolution","metaLearning","selectPatternsForPreset","modelType","presetName","taskContext","b","_COMPLETE_NEURAL_PRES","preset","console","warn","patterns","requiresCreativity","enhanceCreativity","requiresPrecision","enhancePrecision","requiresAdaptation","enhanceAdaptation","complexity","handleHighComplexity","ensurePatternDiversity","includes","push","length","filter","p","hasAnalytical","some","hasCreative","diversity","calculatePatternDiversity","selectMostDiverse","Set","patternTypes","analytical","creative","systemic","diversityScore","typesCovered","forEach","pattern","Object","entries","type","typePatterns","add","size","keys","currentDiversity","targetCount","selected","values","available","getPresetRecommendations","requirements","recommendations","presets","toLowerCase","score","calculatePresetScore","sort","slice","maxInferenceTime","parseInt","maxMemoryUsage","minAccuracy","accuracy","parseFloat","cognitivePreference","hasPreferred","Math","max","min","NeuralAdaptationEngine","adaptationHistory","Map","crossSessionMemory","performanceBaselines","initializeAdaptation","agentId","_this","_COMPLETE_NEURAL_PRES2","set","baselinePerformance","adaptations","sessionCount","totalTrainingTime","performanceGains","recordAdaptation","adaptationResult","_this2","history","get","timestamp","Date","now","sessionId","result","performanceGain","calculatePerformanceGain","updateCrossSessionMemory","baseline","baselineAccuracy","currentAccuracy","accuracyGain","relativeGain","efficiency","_this3","memoryKey","has","memory","insights","splice","getAdaptationRecommendations","_this4","analyzePatternEffectiveness","hyperparameters","suggestHyperparameters","trainingStrategy","recommendTrainingStrategy","patternPerformance","adaptation","gain","totalGain","count","stats","effectiveness","avgGain","frequency","successfulAdaptations","learningRate","batchSize","hyperparams","trainingConfig","round","recentPerformance","isImproving","every","strategy","exportAdaptationInsights","totalAgents","modelTypes","overallPerformance","avgAccuracyGain","totalAdaptations","bestPractices","modelKey","bestGain","modelStats"],"sources":["neural-presets-complete.js"],"sourcesContent":["/**\n * Complete Neural Model Presets Integration\n * 27+ Production-Ready Neural Network Architectures with Cognitive Patterns\n */\n\nimport { CognitivePatternEvolution } from '../cognitive-pattern-evolution.js';\nimport { MetaLearningFramework } from '../meta-learning-framework.js';\n\n// Comprehensive neural model presets with cognitive patterns\nexport const COMPLETE_NEURAL_PRESETS = {\n  // 1. Transformer Models\n  transformer: {\n    bert_base: {\n      name: 'BERT Base',\n      description: 'Bidirectional encoder for language understanding',\n      model: 'transformer',\n      config: {\n        dimensions: 768,\n        heads: 12,\n        layers: 12,\n        ffDimensions: 3072,\n        dropoutRate: 0.1,\n        maxSequenceLength: 512,\n        vocabSize: 30522\n      },\n      cognitivePatterns: ['convergent', 'systems', 'abstract'],\n      performance: {\n        expectedAccuracy: '92-95%',\n        inferenceTime: '15ms',\n        memoryUsage: '420MB',\n        trainingTime: '4 days on 16 TPUs'\n      },\n      useCase: 'Text classification, sentiment analysis, named entity recognition'\n    },\n    gpt_small: {\n      name: 'GPT Small',\n      description: 'Generative pre-trained transformer for text generation',\n      model: 'transformer',\n      config: {\n        dimensions: 768,\n        heads: 12,\n        layers: 12,\n        ffDimensions: 3072,\n        dropoutRate: 0.1,\n        maxSequenceLength: 1024,\n        vocabSize: 50257\n      },\n      cognitivePatterns: ['divergent', 'lateral', 'abstract'],\n      performance: {\n        expectedAccuracy: '88-92%',\n        inferenceTime: '20ms',\n        memoryUsage: '510MB',\n        trainingTime: '2 weeks on 8 V100s'\n      },\n      useCase: 'Text generation, creative writing, code completion'\n    },\n    t5_base: {\n      name: 'T5 Base',\n      description: 'Text-to-text transformer for unified NLP tasks',\n      model: 'transformer',\n      config: {\n        dimensions: 768,\n        heads: 12,\n        encoderLayers: 12,\n        decoderLayers: 12,\n        ffDimensions: 3072,\n        dropoutRate: 0.1\n      },\n      cognitivePatterns: ['systems', 'convergent', 'critical'],\n      performance: {\n        expectedAccuracy: '90-94%',\n        inferenceTime: '25ms',\n        memoryUsage: '850MB',\n        trainingTime: '3 weeks on 32 TPUs'\n      },\n      useCase: 'Translation, summarization, question answering'\n    }\n  },\n\n  // 2. CNN Models\n  cnn: {\n    efficientnet_b0: {\n      name: 'EfficientNet-B0',\n      description: 'Efficient convolutional network for image classification',\n      model: 'cnn',\n      config: {\n        inputShape: [224, 224, 3],\n        convLayers: [\n          { filters: 32, kernelSize: 3, stride: 2, padding: 'same' },\n          { filters: 16, kernelSize: 3, stride: 1, padding: 'same' },\n          { filters: 24, kernelSize: 3, stride: 2, padding: 'same' },\n          { filters: 40, kernelSize: 3, stride: 2, padding: 'same' },\n          { filters: 80, kernelSize: 3, stride: 1, padding: 'same' },\n          { filters: 112, kernelSize: 3, stride: 1, padding: 'same' },\n          { filters: 192, kernelSize: 3, stride: 2, padding: 'same' },\n          { filters: 320, kernelSize: 3, stride: 1, padding: 'same' }\n        ],\n        outputSize: 1000\n      },\n      cognitivePatterns: ['critical', 'convergent', 'abstract'],\n      performance: {\n        expectedAccuracy: '77.1% top-1',\n        inferenceTime: '4.9ms',\n        memoryUsage: '5.3MB',\n        trainingTime: '23 hours on 8 TPUs'\n      },\n      useCase: 'Image classification, feature extraction'\n    },\n    yolov5_small: {\n      name: 'YOLOv5 Small',\n      description: 'Real-time object detection network',\n      model: 'cnn',\n      config: {\n        inputShape: [640, 640, 3],\n        backbone: 'CSPDarknet',\n        neck: 'PANet',\n        head: 'YOLOv5Head',\n        anchors: [[10,13, 16,30, 33,23], [30,61, 62,45, 59,119], [116,90, 156,198, 373,326]]\n      },\n      cognitivePatterns: ['systems', 'critical', 'convergent'],\n      performance: {\n        expectedAccuracy: '37.4% mAP',\n        inferenceTime: '6.4ms',\n        memoryUsage: '16MB',\n        trainingTime: '3 days on 1 V100'\n      },\n      useCase: 'Real-time object detection, autonomous driving'\n    }\n  },\n\n  // 3. RNN Models (LSTM/GRU)\n  lstm: {\n    bilstm_sentiment: {\n      name: 'BiLSTM Sentiment Analyzer',\n      description: 'Bidirectional LSTM for sentiment analysis',\n      model: 'lstm',\n      config: {\n        inputSize: 300,\n        hiddenSize: 256,\n        numLayers: 2,\n        outputSize: 3,\n        bidirectional: true,\n        dropoutRate: 0.3\n      },\n      cognitivePatterns: ['convergent', 'systems', 'critical'],\n      performance: {\n        expectedAccuracy: '89-91%',\n        inferenceTime: '8ms',\n        memoryUsage: '45MB',\n        trainingTime: '4 hours on 1 GPU'\n      },\n      useCase: 'Sentiment analysis, emotion detection'\n    },\n    lstm_timeseries: {\n      name: 'LSTM Time Series Predictor',\n      description: 'LSTM for multi-step time series forecasting',\n      model: 'lstm',\n      config: {\n        inputSize: 10,\n        hiddenSize: 128,\n        numLayers: 3,\n        outputSize: 1,\n        sequenceLength: 100,\n        returnSequence: false\n      },\n      cognitivePatterns: ['systems', 'convergent', 'abstract'],\n      performance: {\n        expectedAccuracy: '92% R²',\n        inferenceTime: '5ms',\n        memoryUsage: '25MB',\n        trainingTime: '2 hours on 1 GPU'\n      },\n      useCase: 'Stock prediction, weather forecasting, demand prediction'\n    }\n  },\n\n  // 4. GRU Models\n  gru: {\n    gru_translator: {\n      name: 'GRU Neural Translator',\n      description: 'GRU-based sequence-to-sequence translator',\n      model: 'gru',\n      config: {\n        inputSize: 512,\n        hiddenSize: 512,\n        numLayers: 4,\n        outputSize: 10000,\n        bidirectional: true,\n        attention: true\n      },\n      cognitivePatterns: ['systems', 'abstract', 'convergent'],\n      performance: {\n        expectedAccuracy: '32.4 BLEU',\n        inferenceTime: '15ms',\n        memoryUsage: '120MB',\n        trainingTime: '5 days on 4 GPUs'\n      },\n      useCase: 'Machine translation, text summarization'\n    }\n  },\n\n  // 5. Autoencoder Models\n  autoencoder: {\n    vae_mnist: {\n      name: 'VAE for MNIST',\n      description: 'Variational autoencoder for digit generation',\n      model: 'vae',\n      config: {\n        inputSize: 784,\n        encoderLayers: [512, 256],\n        latentDimensions: 20,\n        decoderLayers: [256, 512],\n        betaKL: 1.0\n      },\n      cognitivePatterns: ['divergent', 'abstract', 'lateral'],\n      performance: {\n        expectedAccuracy: '98% reconstruction',\n        inferenceTime: '2ms',\n        memoryUsage: '8MB',\n        trainingTime: '30 minutes on 1 GPU'\n      },\n      useCase: 'Digit generation, anomaly detection'\n    },\n    dae_denoising: {\n      name: 'Denoising Autoencoder',\n      description: 'Autoencoder for image denoising',\n      model: 'autoencoder',\n      config: {\n        inputSize: 4096,\n        encoderLayers: [2048, 1024, 512],\n        bottleneckSize: 256,\n        denoisingNoise: 0.3,\n        activation: 'relu'\n      },\n      cognitivePatterns: ['convergent', 'critical', 'systems'],\n      performance: {\n        expectedAccuracy: '28.5 PSNR',\n        inferenceTime: '4ms',\n        memoryUsage: '32MB',\n        trainingTime: '2 hours on 1 GPU'\n      },\n      useCase: 'Image denoising, feature extraction'\n    }\n  },\n\n  // 6. GNN Models\n  gnn: {\n    gcn_citation: {\n      name: 'GCN Citation Network',\n      description: 'Graph convolutional network for citation networks',\n      model: 'gnn',\n      config: {\n        nodeDimensions: 1433,\n        hiddenDimensions: 16,\n        outputDimensions: 7,\n        numLayers: 2,\n        dropoutRate: 0.5\n      },\n      cognitivePatterns: ['systems', 'abstract', 'lateral'],\n      performance: {\n        expectedAccuracy: '81.5%',\n        inferenceTime: '10ms',\n        memoryUsage: '50MB',\n        trainingTime: '10 minutes on 1 GPU'\n      },\n      useCase: 'Citation network classification, social network analysis'\n    },\n    gat_molecular: {\n      name: 'GAT Molecular Property',\n      description: 'Graph attention network for molecular property prediction',\n      model: 'gat',\n      config: {\n        nodeDimensions: 64,\n        attentionHeads: 8,\n        hiddenUnits: 256,\n        numLayers: 3,\n        outputDimensions: 1\n      },\n      cognitivePatterns: ['critical', 'systems', 'convergent'],\n      performance: {\n        expectedAccuracy: '89% R²',\n        inferenceTime: '12ms',\n        memoryUsage: '75MB',\n        trainingTime: '8 hours on 2 GPUs'\n      },\n      useCase: 'Drug discovery, molecular property prediction'\n    }\n  },\n\n  // 7. ResNet Models\n  resnet: {\n    resnet50_imagenet: {\n      name: 'ResNet-50 ImageNet',\n      description: 'Deep residual network for image classification',\n      model: 'resnet',\n      config: {\n        numBlocks: 16,\n        blockDepth: 3,\n        hiddenDimensions: 2048,\n        initialChannels: 64,\n        inputShape: [224, 224, 3],\n        outputDimensions: 1000\n      },\n      cognitivePatterns: ['convergent', 'critical', 'systems'],\n      performance: {\n        expectedAccuracy: '76.1% top-1',\n        inferenceTime: '25ms',\n        memoryUsage: '98MB',\n        trainingTime: '8 days on 8 V100s'\n      },\n      useCase: 'Image classification, transfer learning backbone'\n    }\n  },\n\n  // 8. Attention Models\n  attention: {\n    multihead_attention: {\n      name: 'Multi-Head Attention',\n      description: 'Stand-alone multi-head attention mechanism',\n      model: 'attention',\n      config: {\n        heads: 8,\n        dimensions: 512,\n        dropoutRate: 0.1,\n        useCausalMask: false\n      },\n      cognitivePatterns: ['systems', 'abstract', 'convergent'],\n      performance: {\n        expectedAccuracy: 'task-dependent',\n        inferenceTime: '3ms',\n        memoryUsage: '15MB',\n        trainingTime: 'varies'\n      },\n      useCase: 'Attention mechanism component, sequence modeling'\n    }\n  },\n\n  // 9. Diffusion Models\n  diffusion: {\n    ddpm_mnist: {\n      name: 'DDPM MNIST Generator',\n      description: 'Denoising diffusion probabilistic model',\n      model: 'diffusion',\n      config: {\n        timesteps: 1000,\n        betaSchedule: 'cosine',\n        imageSize: 28,\n        channels: 1,\n        modelChannels: 128\n      },\n      cognitivePatterns: ['divergent', 'lateral', 'abstract'],\n      performance: {\n        expectedAccuracy: '3.17 FID',\n        inferenceTime: '1000ms',\n        memoryUsage: '200MB',\n        trainingTime: '2 days on 4 GPUs'\n      },\n      useCase: 'Image generation, data augmentation'\n    }\n  },\n\n  // 10. Neural ODE Models\n  neural_ode: {\n    node_dynamics: {\n      name: 'Neural ODE Dynamics',\n      description: 'Continuous-time dynamics modeling',\n      model: 'neural_ode',\n      config: {\n        solverMethod: 'dopri5',\n        tolerance: 1e-6,\n        hiddenDimensions: 64,\n        timeDimension: 1\n      },\n      cognitivePatterns: ['systems', 'abstract', 'convergent'],\n      performance: {\n        expectedAccuracy: '95% trajectory',\n        inferenceTime: '50ms',\n        memoryUsage: '30MB',\n        trainingTime: '6 hours on 1 GPU'\n      },\n      useCase: 'Physical system modeling, continuous processes'\n    }\n  },\n\n  // 11. Capsule Networks\n  capsnet: {\n    capsnet_mnist: {\n      name: 'CapsNet MNIST',\n      description: 'Capsule network with dynamic routing',\n      model: 'capsnet',\n      config: {\n        primaryCaps: 32,\n        digitCaps: 10,\n        routingIterations: 3,\n        capsuleDimensions: 16\n      },\n      cognitivePatterns: ['lateral', 'systems', 'abstract'],\n      performance: {\n        expectedAccuracy: '99.23%',\n        inferenceTime: '15ms',\n        memoryUsage: '35MB',\n        trainingTime: '10 hours on 1 GPU'\n      },\n      useCase: 'Viewpoint-invariant recognition, part-whole relationships'\n    }\n  },\n\n  // 12. Spiking Neural Networks\n  snn: {\n    lif_classifier: {\n      name: 'LIF Spiking Classifier',\n      description: 'Leaky integrate-and-fire spiking neural network',\n      model: 'snn',\n      config: {\n        neuronModel: 'lif',\n        threshold: 1.0,\n        decay: 0.95,\n        timeWindow: 100,\n        codingScheme: 'rate'\n      },\n      cognitivePatterns: ['systems', 'critical', 'convergent'],\n      performance: {\n        expectedAccuracy: '92%',\n        inferenceTime: '100ms',\n        memoryUsage: '10MB',\n        trainingTime: '4 hours on 1 GPU'\n      },\n      useCase: 'Energy-efficient inference, neuromorphic computing'\n    }\n  },\n\n  // 13. Neural Turing Machines\n  ntm: {\n    ntm_copy: {\n      name: 'NTM Copy Task',\n      description: 'Neural Turing machine for sequence copying',\n      model: 'ntm',\n      config: {\n        memorySize: [128, 20],\n        controllerSize: 100,\n        numHeads: 1,\n        shiftRange: 3\n      },\n      cognitivePatterns: ['systems', 'abstract', 'convergent'],\n      performance: {\n        expectedAccuracy: '99.9%',\n        inferenceTime: '20ms',\n        memoryUsage: '45MB',\n        trainingTime: '12 hours on 1 GPU'\n      },\n      useCase: 'Algorithm learning, external memory tasks'\n    }\n  },\n\n  // 14. Memory Networks\n  memnn: {\n    memnn_qa: {\n      name: 'MemNN Question Answering',\n      description: 'End-to-end memory network for QA',\n      model: 'memnn',\n      config: {\n        memorySlots: 100,\n        hops: 3,\n        embeddingSize: 50,\n        temporalEncoding: true\n      },\n      cognitivePatterns: ['convergent', 'systems', 'critical'],\n      performance: {\n        expectedAccuracy: '95% on bAbI',\n        inferenceTime: '8ms',\n        memoryUsage: '25MB',\n        trainingTime: '2 hours on 1 GPU'\n      },\n      useCase: 'Question answering, reasoning tasks'\n    }\n  },\n\n  // 15. Neural Cellular Automata\n  nca: {\n    nca_growth: {\n      name: 'NCA Pattern Growth',\n      description: 'Neural cellular automata for pattern formation',\n      model: 'nca',\n      config: {\n        channels: 16,\n        updateRule: 'sobel',\n        cellStates: 16,\n        gridSize: [64, 64]\n      },\n      cognitivePatterns: ['divergent', 'lateral', 'systems'],\n      performance: {\n        expectedAccuracy: 'qualitative',\n        inferenceTime: '5ms/step',\n        memoryUsage: '15MB',\n        trainingTime: '6 hours on 1 GPU'\n      },\n      useCase: 'Pattern generation, self-organization studies'\n    }\n  },\n\n  // 16. HyperNetworks\n  hypernet: {\n    hypernet_adaptive: {\n      name: 'Adaptive HyperNetwork',\n      description: 'Network that generates weights for target network',\n      model: 'hypernet',\n      config: {\n        hyperDim: 512,\n        targetLayers: ['conv1', 'conv2', 'fc1'],\n        embeddingSize: 128\n      },\n      cognitivePatterns: ['abstract', 'lateral', 'systems'],\n      performance: {\n        expectedAccuracy: '94%',\n        inferenceTime: '30ms',\n        memoryUsage: '80MB',\n        trainingTime: '15 hours on 2 GPUs'\n      },\n      useCase: 'Adaptive networks, few-shot learning'\n    }\n  },\n\n  // 17. Meta-Learning Models\n  maml: {\n    maml_fewshot: {\n      name: 'MAML Few-Shot',\n      description: 'Model-agnostic meta-learning',\n      model: 'maml',\n      config: {\n        innerLR: 0.01,\n        outerLR: 0.001,\n        innerSteps: 5,\n        numWays: 5,\n        numShots: 1\n      },\n      cognitivePatterns: ['abstract', 'divergent', 'critical'],\n      performance: {\n        expectedAccuracy: '95% 5-way 1-shot',\n        inferenceTime: '50ms',\n        memoryUsage: '40MB',\n        trainingTime: '24 hours on 4 GPUs'\n      },\n      useCase: 'Few-shot learning, rapid adaptation'\n    }\n  },\n\n  // 18. Neural Architecture Search\n  nas: {\n    darts_cifar: {\n      name: 'DARTS CIFAR-10',\n      description: 'Differentiable architecture search',\n      model: 'nas',\n      config: {\n        searchSpace: 'darts_space',\n        epochs: 50,\n        channels: 36,\n        layers: 20\n      },\n      cognitivePatterns: ['divergent', 'critical', 'systems'],\n      performance: {\n        expectedAccuracy: '97.24%',\n        inferenceTime: '15ms',\n        memoryUsage: '60MB',\n        trainingTime: '4 days on 1 GPU'\n      },\n      useCase: 'AutoML, architecture optimization'\n    }\n  },\n\n  // 19. Mixture of Experts\n  moe: {\n    moe_nlp: {\n      name: 'MoE Language Model',\n      description: 'Sparse mixture of experts for NLP',\n      model: 'moe',\n      config: {\n        numExperts: 8,\n        expertCapacity: 2,\n        hiddenSize: 512,\n        routerType: 'top2'\n      },\n      cognitivePatterns: ['systems', 'divergent', 'abstract'],\n      performance: {\n        expectedAccuracy: '91% perplexity',\n        inferenceTime: '12ms',\n        memoryUsage: '400MB',\n        trainingTime: '1 week on 8 GPUs'\n      },\n      useCase: 'Large-scale language modeling, multi-task learning'\n    }\n  },\n\n  // 20. Neural Radiance Fields\n  nerf: {\n    nerf_3d: {\n      name: 'NeRF 3D Reconstruction',\n      description: 'Neural radiance field for 3D scene reconstruction',\n      model: 'nerf',\n      config: {\n        positionEncoding: 10,\n        directionEncoding: 4,\n        hiddenLayers: 8,\n        hiddenSize: 256\n      },\n      cognitivePatterns: ['abstract', 'systems', 'lateral'],\n      performance: {\n        expectedAccuracy: '30 PSNR',\n        inferenceTime: '100ms/ray',\n        memoryUsage: '200MB',\n        trainingTime: '2 days on 1 GPU'\n      },\n      useCase: '3D reconstruction, novel view synthesis'\n    }\n  },\n\n  // 21. WaveNet\n  wavenet: {\n    wavenet_tts: {\n      name: 'WaveNet TTS',\n      description: 'WaveNet for text-to-speech synthesis',\n      model: 'wavenet',\n      config: {\n        dilationChannels: 32,\n        residualChannels: 32,\n        skipChannels: 512,\n        dilationDepth: 10,\n        dilationRepeat: 3\n      },\n      cognitivePatterns: ['convergent', 'systems', 'critical'],\n      performance: {\n        expectedAccuracy: '4.5 MOS',\n        inferenceTime: '500ms/second',\n        memoryUsage: '150MB',\n        trainingTime: '1 week on 8 GPUs'\n      },\n      useCase: 'Speech synthesis, audio generation'\n    }\n  },\n\n  // 22. PointNet\n  pointnet: {\n    pointnet_seg: {\n      name: 'PointNet++ Segmentation',\n      description: 'Point cloud segmentation network',\n      model: 'pointnet',\n      config: {\n        pointFeatures: 3,\n        globalFeatures: 1024,\n        numClasses: 50,\n        samplingGroups: 3\n      },\n      cognitivePatterns: ['systems', 'critical', 'abstract'],\n      performance: {\n        expectedAccuracy: '85.1% mIoU',\n        inferenceTime: '40ms',\n        memoryUsage: '90MB',\n        trainingTime: '20 hours on 2 GPUs'\n      },\n      useCase: '3D point cloud analysis, robotics'\n    }\n  },\n\n  // 23. World Models\n  world_model: {\n    world_model_rl: {\n      name: 'World Model RL',\n      description: 'World model for reinforcement learning',\n      model: 'world_model',\n      config: {\n        visionModel: 'vae',\n        memoryModel: 'mdn_rnn',\n        latentSize: 32,\n        hiddenSize: 256\n      },\n      cognitivePatterns: ['systems', 'abstract', 'divergent'],\n      performance: {\n        expectedAccuracy: '900 score',\n        inferenceTime: '10ms',\n        memoryUsage: '120MB',\n        trainingTime: '3 days on 4 GPUs'\n      },\n      useCase: 'Model-based RL, environment simulation'\n    }\n  },\n\n  // 24. Normalizing Flows\n  flow: {\n    realvp_generation: {\n      name: 'RealNVP Generation',\n      description: 'Real-valued non-volume preserving flow',\n      model: 'normalizing_flow',\n      config: {\n        flowType: 'real_nvp',\n        couplingLayers: 8,\n        hiddenUnits: 512,\n        numBlocks: 2\n      },\n      cognitivePatterns: ['divergent', 'abstract', 'lateral'],\n      performance: {\n        expectedAccuracy: '3.49 bits/dim',\n        inferenceTime: '20ms',\n        memoryUsage: '100MB',\n        trainingTime: '2 days on 4 GPUs'\n      },\n      useCase: 'Density estimation, generative modeling'\n    }\n  },\n\n  // 25. Energy-Based Models\n  ebm: {\n    ebm_generation: {\n      name: 'EBM Generator',\n      description: 'Energy-based generative model',\n      model: 'ebm',\n      config: {\n        energyFunction: 'mlp',\n        samplingSteps: 100,\n        stepSize: 10,\n        noise: 0.005\n      },\n      cognitivePatterns: ['divergent', 'critical', 'systems'],\n      performance: {\n        expectedAccuracy: '7.85 FID',\n        inferenceTime: '200ms',\n        memoryUsage: '80MB',\n        trainingTime: '3 days on 2 GPUs'\n      },\n      useCase: 'Generative modeling, density estimation'\n    }\n  },\n\n  // 26. Neural Processes\n  neural_process: {\n    cnp_regression: {\n      name: 'CNP Regression',\n      description: 'Conditional neural process for regression',\n      model: 'neural_process',\n      config: {\n        latentDim: 128,\n        contextPoints: 10,\n        encoderHidden: [128, 128],\n        decoderHidden: [128, 128]\n      },\n      cognitivePatterns: ['abstract', 'systems', 'convergent'],\n      performance: {\n        expectedAccuracy: '0.15 MSE',\n        inferenceTime: '5ms',\n        memoryUsage: '30MB',\n        trainingTime: '4 hours on 1 GPU'\n      },\n      useCase: 'Few-shot regression, uncertainty estimation'\n    }\n  },\n\n  // 27. Set Transformer\n  set_transformer: {\n    set_anomaly: {\n      name: 'Set Anomaly Detection',\n      description: 'Set transformer for anomaly detection',\n      model: 'set_transformer',\n      config: {\n        inducingPoints: 32,\n        dimensions: 128,\n        numHeads: 4,\n        numBlocks: 4\n      },\n      cognitivePatterns: ['critical', 'systems', 'convergent'],\n      performance: {\n        expectedAccuracy: '95% AUC',\n        inferenceTime: '15ms',\n        memoryUsage: '50MB',\n        trainingTime: '6 hours on 1 GPU'\n      },\n      useCase: 'Anomaly detection on sets, point cloud analysis'\n    }\n  }\n};\n\n/**\n * Cognitive Pattern Selector\n * Automatically selects cognitive patterns based on model and task\n */\nexport class CognitivePatternSelector {\n  constructor() {\n    this.patternEvolution = new CognitivePatternEvolution();\n    this.metaLearning = new MetaLearningFramework();\n  }\n\n  /**\n   * Select optimal cognitive patterns for a neural model preset\n   * @param {string} modelType - Type of neural model\n   * @param {string} presetName - Name of the preset\n   * @param {object} taskContext - Context about the task\n   */\n  selectPatternsForPreset(modelType, presetName, taskContext = {}) {\n    const preset = COMPLETE_NEURAL_PRESETS[modelType]?.[presetName];\n    if (!preset) {\n      console.warn(`Preset not found: ${modelType}/${presetName}`);\n      return ['convergent']; // Default fallback\n    }\n\n    // Start with preset's recommended patterns\n    let patterns = [...preset.cognitivePatterns];\n\n    // Adjust based on task context\n    if (taskContext.requiresCreativity) {\n      patterns = this.enhanceCreativity(patterns);\n    }\n\n    if (taskContext.requiresPrecision) {\n      patterns = this.enhancePrecision(patterns);\n    }\n\n    if (taskContext.requiresAdaptation) {\n      patterns = this.enhanceAdaptation(patterns);\n    }\n\n    if (taskContext.complexity === 'high') {\n      patterns = this.handleHighComplexity(patterns);\n    }\n\n    // Ensure pattern diversity\n    patterns = this.ensurePatternDiversity(patterns);\n\n    return patterns;\n  }\n\n  /**\n   * Enhance patterns for creative tasks\n   */\n  enhanceCreativity(patterns) {\n    if (!patterns.includes('divergent')) {\n      patterns.push('divergent');\n    }\n    if (!patterns.includes('lateral') && patterns.length < 4) {\n      patterns.push('lateral');\n    }\n    return patterns;\n  }\n\n  /**\n   * Enhance patterns for precision tasks\n   */\n  enhancePrecision(patterns) {\n    if (!patterns.includes('convergent')) {\n      patterns.push('convergent');\n    }\n    if (!patterns.includes('critical') && patterns.length < 4) {\n      patterns.push('critical');\n    }\n    // Remove highly exploratory patterns for precision\n    return patterns.filter(p => p !== 'divergent' || patterns.length > 2);\n  }\n\n  /**\n   * Enhance patterns for adaptive tasks\n   */\n  enhanceAdaptation(patterns) {\n    if (!patterns.includes('systems')) {\n      patterns.push('systems');\n    }\n    if (!patterns.includes('abstract') && patterns.length < 4) {\n      patterns.push('abstract');\n    }\n    return patterns;\n  }\n\n  /**\n   * Handle high complexity tasks\n   */\n  handleHighComplexity(patterns) {\n    // For high complexity, ensure both analytical and creative patterns\n    const hasAnalytical = patterns.some(p => ['convergent', 'critical', 'systems'].includes(p));\n    const hasCreative = patterns.some(p => ['divergent', 'lateral', 'abstract'].includes(p));\n\n    if (!hasAnalytical) {\n      patterns.push('systems');\n    }\n    if (!hasCreative) {\n      patterns.push('abstract');\n    }\n\n    return patterns;\n  }\n\n  /**\n   * Ensure pattern diversity\n   */\n  ensurePatternDiversity(patterns) {\n    // Limit to maximum 4 patterns\n    if (patterns.length > 4) {\n      // Keep the most diverse set\n      const diversity = this.calculatePatternDiversity(patterns);\n      patterns = this.selectMostDiverse(patterns, diversity, 4);\n    }\n\n    // Ensure at least 2 patterns for robustness\n    if (patterns.length < 2) {\n      if (!patterns.includes('convergent')) {\n        patterns.push('convergent');\n      } else {\n        patterns.push('systems');\n      }\n    }\n\n    return [...new Set(patterns)]; // Remove duplicates\n  }\n\n  /**\n   * Calculate diversity score for pattern combinations\n   */\n  calculatePatternDiversity(patterns) {\n    const patternTypes = {\n      analytical: ['convergent', 'critical'],\n      creative: ['divergent', 'lateral'],\n      systemic: ['systems', 'abstract']\n    };\n\n    let diversityScore = 0;\n    const typesCovered = new Set();\n\n    patterns.forEach(pattern => {\n      Object.entries(patternTypes).forEach(([type, typePatterns]) => {\n        if (typePatterns.includes(pattern)) {\n          typesCovered.add(type);\n        }\n      });\n    });\n\n    diversityScore = typesCovered.size / Object.keys(patternTypes).length;\n    return diversityScore;\n  }\n\n  /**\n   * Select most diverse pattern combination\n   */\n  selectMostDiverse(patterns, currentDiversity, targetCount) {\n    if (patterns.length <= targetCount) return patterns;\n\n    // Simple heuristic: keep patterns that maximize type coverage\n    const selected = [];\n    const patternTypes = {\n      analytical: ['convergent', 'critical'],\n      creative: ['divergent', 'lateral'],\n      systemic: ['systems', 'abstract']\n    };\n\n    // First, ensure one pattern from each type if possible\n    Object.values(patternTypes).forEach(typePatterns => {\n      const available = patterns.filter(p => typePatterns.includes(p));\n      if (available.length > 0 && selected.length < targetCount) {\n        selected.push(available[0]);\n      }\n    });\n\n    // Fill remaining slots with most unique patterns\n    patterns.forEach(pattern => {\n      if (!selected.includes(pattern) && selected.length < targetCount) {\n        selected.push(pattern);\n      }\n    });\n\n    return selected;\n  }\n\n  /**\n   * Get preset recommendations based on use case\n   */\n  getPresetRecommendations(useCase, requirements = {}) {\n    const recommendations = [];\n\n    Object.entries(COMPLETE_NEURAL_PRESETS).forEach(([modelType, presets]) => {\n      Object.entries(presets).forEach(([presetName, preset]) => {\n        if (preset.useCase.toLowerCase().includes(useCase.toLowerCase())) {\n          const score = this.calculatePresetScore(preset, requirements);\n          recommendations.push({\n            modelType,\n            presetName,\n            preset,\n            score,\n            cognitivePatterns: this.selectPatternsForPreset(modelType, presetName, requirements)\n          });\n        }\n      });\n    });\n\n    // Sort by score\n    recommendations.sort((a, b) => b.score - a.score);\n\n    return recommendations.slice(0, 5); // Top 5 recommendations\n  }\n\n  /**\n   * Calculate preset score based on requirements\n   */\n  calculatePresetScore(preset, requirements) {\n    let score = 1.0;\n\n    // Check performance requirements\n    if (requirements.maxInferenceTime) {\n      const inferenceTime = parseInt(preset.performance.inferenceTime);\n      if (inferenceTime <= requirements.maxInferenceTime) {\n        score += 0.2;\n      } else {\n        score -= 0.3;\n      }\n    }\n\n    if (requirements.maxMemoryUsage) {\n      const memoryUsage = parseInt(preset.performance.memoryUsage);\n      if (memoryUsage <= requirements.maxMemoryUsage) {\n        score += 0.2;\n      } else {\n        score -= 0.3;\n      }\n    }\n\n    if (requirements.minAccuracy) {\n      const accuracy = parseFloat(preset.performance.expectedAccuracy);\n      if (accuracy >= requirements.minAccuracy) {\n        score += 0.3;\n      } else {\n        score -= 0.2;\n      }\n    }\n\n    // Cognitive pattern alignment\n    if (requirements.cognitivePreference) {\n      const hasPreferred = preset.cognitivePatterns.some(p => \n        p === requirements.cognitivePreference\n      );\n      if (hasPreferred) {\n        score += 0.2;\n      }\n    }\n\n    return Math.max(0, Math.min(2, score));\n  }\n}\n\n/**\n * Neural Adaptation Engine\n * Enables cross-session learning and adaptation\n */\nexport class NeuralAdaptationEngine {\n  constructor() {\n    this.adaptationHistory = new Map();\n    this.crossSessionMemory = new Map();\n    this.performanceBaselines = new Map();\n  }\n\n  /**\n   * Initialize adaptation for a model preset\n   */\n  async initializeAdaptation(agentId, modelType, presetName) {\n    const preset = COMPLETE_NEURAL_PRESETS[modelType]?.[presetName];\n    if (!preset) return;\n\n    this.adaptationHistory.set(agentId, {\n      modelType,\n      presetName,\n      baselinePerformance: preset.performance,\n      adaptations: [],\n      sessionCount: 0,\n      totalTrainingTime: 0,\n      performanceGains: []\n    });\n\n    this.performanceBaselines.set(`${modelType}/${presetName}`, preset.performance);\n  }\n\n  /**\n   * Record adaptation results\n   */\n  async recordAdaptation(agentId, adaptationResult) {\n    const history = this.adaptationHistory.get(agentId);\n    if (!history) return;\n\n    history.adaptations.push({\n      timestamp: Date.now(),\n      sessionId: history.sessionCount++,\n      result: adaptationResult,\n      performanceGain: this.calculatePerformanceGain(adaptationResult, history.baselinePerformance)\n    });\n\n    // Update cross-session memory\n    await this.updateCrossSessionMemory(agentId, adaptationResult);\n  }\n\n  /**\n   * Calculate performance gain from adaptation\n   */\n  calculatePerformanceGain(result, baseline) {\n    const baselineAccuracy = parseFloat(baseline.expectedAccuracy) || 0;\n    const currentAccuracy = result.accuracy || 0;\n    \n    return {\n      accuracyGain: currentAccuracy - baselineAccuracy,\n      relativeGain: baselineAccuracy > 0 ? (currentAccuracy - baselineAccuracy) / baselineAccuracy : 0,\n      efficiency: result.trainingTime ? baseline.trainingTime / result.trainingTime : 1\n    };\n  }\n\n  /**\n   * Update cross-session memory\n   */\n  async updateCrossSessionMemory(agentId, adaptationResult) {\n    const memoryKey = `agent_${agentId}_adaptations`;\n    \n    if (!this.crossSessionMemory.has(memoryKey)) {\n      this.crossSessionMemory.set(memoryKey, []);\n    }\n\n    const memory = this.crossSessionMemory.get(memoryKey);\n    memory.push({\n      timestamp: Date.now(),\n      patterns: adaptationResult.cognitivePatterns || [],\n      performance: adaptationResult.performance || {},\n      insights: adaptationResult.insights || []\n    });\n\n    // Keep only recent memories (last 100)\n    if (memory.length > 100) {\n      memory.splice(0, memory.length - 100);\n    }\n  }\n\n  /**\n   * Get adaptation recommendations\n   */\n  async getAdaptationRecommendations(agentId) {\n    const history = this.adaptationHistory.get(agentId);\n    if (!history || history.adaptations.length < 3) {\n      return null; // Need more data\n    }\n\n    const recommendations = {\n      patterns: this.analyzePatternEffectiveness(history),\n      hyperparameters: this.suggestHyperparameters(history),\n      trainingStrategy: this.recommendTrainingStrategy(history)\n    };\n\n    return recommendations;\n  }\n\n  /**\n   * Analyze pattern effectiveness from history\n   */\n  analyzePatternEffectiveness(history) {\n    const patternPerformance = new Map();\n\n    history.adaptations.forEach(adaptation => {\n      const patterns = adaptation.result.cognitivePatterns || [];\n      const gain = adaptation.performanceGain.accuracyGain;\n\n      patterns.forEach(pattern => {\n        if (!patternPerformance.has(pattern)) {\n          patternPerformance.set(pattern, { totalGain: 0, count: 0 });\n        }\n        const stats = patternPerformance.get(pattern);\n        stats.totalGain += gain;\n        stats.count++;\n      });\n    });\n\n    // Calculate average gain per pattern\n    const effectiveness = [];\n    patternPerformance.forEach((stats, pattern) => {\n      effectiveness.push({\n        pattern,\n        avgGain: stats.totalGain / stats.count,\n        frequency: stats.count\n      });\n    });\n\n    effectiveness.sort((a, b) => b.avgGain - a.avgGain);\n    return effectiveness;\n  }\n\n  /**\n   * Suggest hyperparameters based on history\n   */\n  suggestHyperparameters(history) {\n    // Analyze successful adaptations\n    const successfulAdaptations = history.adaptations.filter(a => \n      a.performanceGain.accuracyGain > 0\n    );\n\n    if (successfulAdaptations.length === 0) {\n      return {\n        learningRate: 0.001,\n        batchSize: 32,\n        epochs: 10\n      };\n    }\n\n    // Extract and average successful hyperparameters\n    const hyperparams = {\n      learningRate: 0,\n      batchSize: 0,\n      epochs: 0\n    };\n\n    successfulAdaptations.forEach(adaptation => {\n      const config = adaptation.result.trainingConfig || {};\n      hyperparams.learningRate += config.learningRate || 0.001;\n      hyperparams.batchSize += config.batchSize || 32;\n      hyperparams.epochs += config.epochs || 10;\n    });\n\n    const count = successfulAdaptations.length;\n    return {\n      learningRate: hyperparams.learningRate / count,\n      batchSize: Math.round(hyperparams.batchSize / count),\n      epochs: Math.round(hyperparams.epochs / count)\n    };\n  }\n\n  /**\n   * Recommend training strategy\n   */\n  recommendTrainingStrategy(history) {\n    const recentPerformance = history.adaptations.slice(-5);\n    const isImproving = recentPerformance.every((a, i) => \n      i === 0 || a.performanceGain.accuracyGain >= recentPerformance[i-1].performanceGain.accuracyGain\n    );\n\n    if (isImproving) {\n      return {\n        strategy: 'continue_current',\n        description: 'Current approach is showing consistent improvement',\n        recommendations: ['Maintain current learning rate', 'Consider increasing batch size']\n      };\n    } else {\n      return {\n        strategy: 'explore_alternatives',\n        description: 'Performance has plateaued',\n        recommendations: [\n          'Try different cognitive patterns',\n          'Reduce learning rate',\n          'Implement learning rate scheduling',\n          'Consider data augmentation'\n        ]\n      };\n    }\n  }\n\n  /**\n   * Export adaptation insights\n   */\n  exportAdaptationInsights() {\n    const insights = {\n      totalAgents: this.adaptationHistory.size,\n      modelTypes: {},\n      overallPerformance: {\n        avgAccuracyGain: 0,\n        totalAdaptations: 0\n      },\n      bestPractices: []\n    };\n\n    this.adaptationHistory.forEach((history, agentId) => {\n      const modelKey = `${history.modelType}/${history.presetName}`;\n      \n      if (!insights.modelTypes[modelKey]) {\n        insights.modelTypes[modelKey] = {\n          count: 0,\n          avgGain: 0,\n          bestGain: 0\n        };\n      }\n\n      const modelStats = insights.modelTypes[modelKey];\n      modelStats.count++;\n\n      history.adaptations.forEach(adaptation => {\n        const gain = adaptation.performanceGain.accuracyGain;\n        modelStats.avgGain += gain;\n        modelStats.bestGain = Math.max(modelStats.bestGain, gain);\n        insights.overallPerformance.avgAccuracyGain += gain;\n        insights.overallPerformance.totalAdaptations++;\n      });\n    });\n\n    // Calculate averages\n    Object.values(insights.modelTypes).forEach(stats => {\n      if (stats.count > 0) {\n        stats.avgGain /= stats.count;\n      }\n    });\n\n    if (insights.overallPerformance.totalAdaptations > 0) {\n      insights.overallPerformance.avgAccuracyGain /= insights.overallPerformance.totalAdaptations;\n    }\n\n    return insights;\n  }\n}\n\n// All components are already exported above"],"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","ignoreList":[]}