{"version":3,"names":["cov_imjaqkj1d","actualCoverage","asyncGeneratorStep","n","t","e","r","o","a","c","i","u","value","done","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","path","promises","fs","wasmModule","s","wasmInstance","WASMLoader","constructor","options","b","f","useSIMD","detectSIMDSupport","wasmPath","join","URL","import","meta","url","pathname","debug","WebAssembly","validate","simdTest","Uint8Array","console","warn","loadModule","_this","wasmJsPath","wasmBindings","error","moduleFile","wasmFilePath","wasmBuffer","window","response","fetch","arrayBuffer","readFile","imports","env","memory","Memory","initial","maximum","result","instantiate","module","instance","log","Error","message","WorkerPool","size","workers","queue","initialized","initialize","_this2","execute","task","terminate","forEach","worker","RuvSwarm","wasmSwarm","_wasmSwarm","_options","_workerPool","parallel","workerPoolSize","loader","bindings","default","module_or_path","features","RuntimeFeatures","simd","simd_available","threads","threads_available","memoryLimit","memory_limit","getRuntimeFeatures","exports","simdAvailable","threadsAvailable","getVersion","require","version","get_version","getMemoryUsage","get_wasm_memory_usage","createSwarm","config","_this3","swarm","SwarmWrapper","_swarm","_retryAttempts","retryAttempts","_retryDelay","retryDelay","name","agentCount","agent_count","maxAgents","max_agents","spawn","_this4","_retryOperation","agent","AgentWrapper","orchestrate","_this5","getAgents","get_agents","getStatus","get_status","operation","_this6","lastError","attempt","setTimeout","wasmAgent","_agent","id","agentType","agent_type","status","tasksCompleted","tasks_completed","_this7","getMetrics","get_metrics","getCapabilities","get_capabilities","reset","consoleLog","console_log","consoleError","console_error","consoleWarn","console_warn","formatJsError","format_js_error","toString","NeuralAgent","NeuralAgentFactory","NeuralNetwork","COGNITIVE_PATTERNS","AGENT_COGNITIVE_PROFILES","DAAService","daaService"],"sources":["index.js"],"sourcesContent":["/**\n * @ruv/swarm - High-performance neural network swarm orchestration in WebAssembly\n * Enhanced version with progressive WASM loading and full feature set\n */\n\n// Re-export the enhanced implementation\nexport * from './index-enhanced.js';\n\n/* Legacy exports for backward compatibility */\nimport path from 'path';\nimport { promises as fs } from 'fs';\n\n// Lazy-loaded WASM module\nlet wasmModule = null;\nlet wasmInstance = null;\n\n/**\n * WASM loader with feature detection and caching\n */\nclass WASMLoader {\n  constructor(options = {}) {\n    this.useSIMD = options.useSIMD && this.detectSIMDSupport();\n    this.wasmPath = options.wasmPath || path.join(new URL('.', import.meta.url).pathname, '..', 'wasm');\n    this.debug = options.debug || false;\n  }\n\n  detectSIMDSupport() {\n    try {\n      // WebAssembly SIMD feature detection\n      if (typeof WebAssembly !== 'undefined' && WebAssembly.validate) {\n        // Test SIMD instruction\n        const simdTest = new Uint8Array([\n          0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00,\n          0x01, 0x05, 0x01, 0x60, 0x00, 0x01, 0x7b, 0x03,\n          0x02, 0x01, 0x00, 0x0a, 0x0a, 0x01, 0x08, 0x00,\n          0x41, 0x00, 0xfd, 0x0f, 0x26, 0x0b,\n        ]);\n        return WebAssembly.validate(simdTest);\n      }\n    } catch (e) {\n      if (this.debug) {\n        console.warn('SIMD detection failed:', e);\n      }\n    }\n    return false;\n  }\n\n  async loadModule() {\n    if (wasmModule) {\n      return wasmModule;\n    }\n\n    // Use the generated WASM bindings directly (ES module import)\n    try {\n      const wasmJsPath = path.join(this.wasmPath, 'ruv_swarm_wasm.js');\n      const wasmBindings = await import(path.resolve(wasmJsPath));\n      wasmModule = wasmBindings;\n      return wasmModule;\n    } catch (error) {\n      if (this.debug) {\n        console.error('Failed to load WASM bindings:', error);\n      }\n    }\n\n    // Fallback to manual loading\n    const moduleFile = this.useSIMD ? 'ruv_swarm_simd.wasm' : 'ruv_swarm_wasm_bg.wasm';\n    const wasmFilePath = path.join(this.wasmPath, moduleFile);\n\n    try {\n      let wasmBuffer;\n\n      if (typeof window !== 'undefined') {\n        // Browser environment\n        const response = await fetch(wasmFilePath);\n        wasmBuffer = await response.arrayBuffer();\n      } else {\n        // Node.js environment\n        wasmBuffer = await fs.readFile(wasmFilePath);\n      }\n\n      const imports = {\n        // Add any required imports here\n        env: {\n          memory: new WebAssembly.Memory({ initial: 256, maximum: 4096 }),\n        },\n      };\n\n      const result = await WebAssembly.instantiate(wasmBuffer, imports);\n      wasmModule = result.module;\n      wasmInstance = result.instance;\n\n      if (this.debug) {\n        console.log(`Loaded WASM module: ${moduleFile}`);\n      }\n\n      return result;\n    } catch (error) {\n      throw new Error(`Failed to load WASM module: ${error.message}`);\n    }\n  }\n}\n\n/**\n * Worker pool for parallel execution\n */\nclass WorkerPool {\n  constructor(size = 4) {\n    this.size = size;\n    this.workers = [];\n    this.queue = [];\n    this.initialized = false;\n  }\n\n  async initialize() {\n    if (this.initialized) {\n      return;\n    }\n\n    // In Node.js, use worker_threads\n    if (typeof window === 'undefined') {\n      // const { Worker } = require('worker_threads');\n      for (let i = 0; i < this.size; i++) {\n        // TODO: Create worker thread\n      }\n    } else {\n      // In browser, use Web Workers\n      for (let i = 0; i < this.size; i++) {\n        // TODO: Create web worker\n      }\n    }\n\n    this.initialized = true;\n  }\n\n  async execute(task) {\n    // TODO: Implement worker pool execution\n    return task;\n  }\n\n  terminate() {\n    this.workers.forEach(worker => {\n      if (worker.terminate) {\n        worker.terminate();\n      }\n    });\n    this.workers = [];\n    this.initialized = false;\n  }\n}\n\n/**\n * Main RuvSwarm class\n */\nclass RuvSwarm {\n  constructor(wasmSwarm, options = {}) {\n    this._wasmSwarm = wasmSwarm;\n    this._options = options;\n    this._workerPool = null;\n\n    if (options.parallel) {\n      this._workerPool = new WorkerPool(options.workerPoolSize || 4);\n    }\n  }\n\n  static async initialize(options = {}) {\n    const loader = new WASMLoader(options);\n    // const wasmResult = await loader.loadModule();\n\n    // Load the WASM bindings (ES module import with proper file URL)\n    const wasmJsPath = path.join(loader.wasmPath, 'ruv_swarm_wasm.js');\n    const bindings = await import(path.resolve(wasmJsPath));\n\n    // Initialize WASM module with file buffer for Node.js\n    if (bindings.default) {\n      const wasmPath = path.join(loader.wasmPath, 'ruv_swarm_wasm_bg.wasm');\n      const wasmBuffer = await fs.readFile(wasmPath);\n      await bindings.default({ module_or_path: wasmBuffer });\n    }\n\n    // Get runtime features\n    const features = new bindings.RuntimeFeatures();\n    if (options.debug) {\n      console.log('Runtime features:', {\n        simd: features.simd_available,\n        threads: features.threads_available,\n        memoryLimit: features.memory_limit,\n      });\n    }\n\n    return new RuvSwarm(bindings, options);\n  }\n\n  static detectSIMDSupport() {\n    const loader = new WASMLoader();\n    return loader.detectSIMDSupport();\n  }\n\n  static getRuntimeFeatures() {\n    if (!wasmInstance) {\n      throw new Error('RuvSwarm not initialized. Call RuvSwarm.initialize() first.');\n    }\n\n    const features = new wasmInstance.exports.RuntimeFeatures();\n    return {\n      simdAvailable: features.simd_available,\n      threadsAvailable: features.threads_available,\n      memoryLimit: features.memory_limit,\n    };\n  }\n\n  static getVersion() {\n    if (!wasmInstance) {\n      return require('../package.json').version;\n    }\n    return wasmInstance.exports.get_version();\n  }\n\n  static getMemoryUsage() {\n    if (!wasmInstance) {\n      return 0;\n    }\n    return wasmInstance.exports.get_wasm_memory_usage();\n  }\n\n  async createSwarm(config) {\n    try {\n      const swarm = new this._wasmSwarm.RuvSwarm(config);\n      return new SwarmWrapper(swarm, this._options);\n    } catch (error) {\n      throw new Error(`Failed to create swarm: ${error.message}`);\n    }\n  }\n}\n\n/**\n * Swarm wrapper class\n */\nclass SwarmWrapper {\n  constructor(wasmSwarm, options = {}) {\n    this._swarm = wasmSwarm;\n    this._options = options;\n    this._retryAttempts = options.retryAttempts || 3;\n    this._retryDelay = options.retryDelay || 1000;\n  }\n\n  get name() {\n    return this._swarm.name;\n  }\n\n  get agentCount() {\n    return this._swarm.agent_count;\n  }\n\n  get maxAgents() {\n    return this._swarm.max_agents;\n  }\n\n  async spawn(config) {\n    return await this._retryOperation(async() => {\n      const agent = await this._swarm.spawn(config);\n      return new AgentWrapper(agent, this._options);\n    });\n  }\n\n  async orchestrate(task) {\n    return await this._retryOperation(async() => {\n      return await this._swarm.orchestrate(task);\n    });\n  }\n\n  getAgents() {\n    return this._swarm.get_agents();\n  }\n\n  getStatus() {\n    return this._swarm.get_status();\n  }\n\n  async _retryOperation(operation) {\n    let lastError;\n\n    for (let attempt = 0; attempt < this._retryAttempts; attempt++) {\n      try {\n        return await operation();\n      } catch (error) {\n        lastError = error;\n        if (attempt < this._retryAttempts - 1) {\n          await new Promise(resolve => setTimeout(resolve, this._retryDelay));\n        }\n      }\n    }\n\n    throw lastError;\n  }\n}\n\n/**\n * Agent wrapper class\n */\nclass AgentWrapper {\n  constructor(wasmAgent, options = {}) {\n    this._agent = wasmAgent;\n    this._options = options;\n  }\n\n  get id() {\n    return this._agent.id;\n  }\n\n  get agentType() {\n    return this._agent.agent_type;\n  }\n\n  get status() {\n    return this._agent.status;\n  }\n\n  get tasksCompleted() {\n    return this._agent.tasks_completed;\n  }\n\n  async execute(task) {\n    return await this._agent.execute(task);\n  }\n\n  getMetrics() {\n    return this._agent.get_metrics();\n  }\n\n  getCapabilities() {\n    return this._agent.get_capabilities();\n  }\n\n  reset() {\n    this._agent.reset();\n  }\n}\n\n// Re-export utility functions\nconst consoleLog = (message) => {\n  if (wasmInstance && wasmInstance.exports.console_log) {\n    wasmInstance.exports.console_log(message);\n  } else {\n    console.log(message);\n  }\n};\n\nconst consoleError = (message) => {\n  if (wasmInstance && wasmInstance.exports.console_error) {\n    wasmInstance.exports.console_error(message);\n  } else {\n    console.error(message);\n  }\n};\n\nconst consoleWarn = (message) => {\n  if (wasmInstance && wasmInstance.exports.console_warn) {\n    wasmInstance.exports.console_warn(message);\n  } else {\n    console.warn(message);\n  }\n};\n\nconst formatJsError = (error) => {\n  if (wasmInstance && wasmInstance.exports.format_js_error) {\n    return wasmInstance.exports.format_js_error(error);\n  }\n  return error.toString();\n};\n\n// Import neural agent capabilities\nimport {\n  NeuralAgent,\n  NeuralAgentFactory,\n  NeuralNetwork,\n  COGNITIVE_PATTERNS,\n  AGENT_COGNITIVE_PROFILES,\n} from './neural-agent.js';\n\n// Import DAA service for comprehensive agent management\nimport { DAAService, daaService } from './daa-service.js';\n\n// Legacy exports - these are now provided by index-enhanced.js\n// Export all the legacy functions and classes directly\nexport {\n  RuvSwarm,\n  consoleLog,\n  consoleError,\n  consoleWarn,\n  formatJsError,\n  // Neural agent exports\n  NeuralAgent,\n  NeuralAgentFactory,\n  NeuralNetwork,\n  COGNITIVE_PATTERNS,\n  AGENT_COGNITIVE_PROFILES,\n  // DAA service exports\n  DAAService,\n  daaService,\n};"],"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","ignoreList":[]}