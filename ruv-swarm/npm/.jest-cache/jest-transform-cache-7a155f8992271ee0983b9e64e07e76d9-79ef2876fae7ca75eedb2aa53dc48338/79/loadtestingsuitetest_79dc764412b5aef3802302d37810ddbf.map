{"version":3,"names":["RuvSwarm","require","EventEmitter","fs","promises","os","LoadTestingSuite","constructor","testResults","timestamp","Date","toISOString","systemInfo","platform","process","arch","nodeVersion","version","cpus","length","totalMemory","totalmem","freeMemory","freemem","scenarios","performance","maxConcurrentAgents","avgResponseTime","throughput","errorRate","memoryPeak","cpuPeak","passed","metrics","responseTimes","memorySnapshots","errors","throughputData","monitoringInterval","runLoadTests","_this","_asyncToGenerator","console","log","logSystemInfo","startSystemMonitoring","runGradualLoadTest","runBurstLoadTest","runSustainedLoadTest","runMixedWorkloadTest","runStressTest","generateLoadTestReport","error","stopSystemMonitoring","toFixed","setInterval","memUsage","memoryUsage","cpuUsage","push","now","heapUsed","heapTotal","external","Math","max","clearInterval","_this2","scenario","name","startTime","agents","spawnTimes","executionTimes","ruvSwarm","initialize","enableNeuralNetworks","enableForecasting","loadingStrategy","swarm","createSwarm","topology","maxAgents","strategy","batch","batchStartTime","batchPromises","i","spawnPromise","spawn","type","then","agent","catch","phase","message","Promise","all","batchSpawnTime","time","agentsSpawned","taskPromises","map","resolve","taskStart","execute","task","timeout","setTimeout","duration","_this3","spawnTime","firstResponseTime","allResponsesTime","spawnStartTime","spawnPromises","Array","from","_","spawnedAgents","filter","execStartTime","firstResponseReceived","responseTime","validResponses","t","round","reduce","a","b","_this4","tasksCompleted","avgTaskTime","memoryGrowth","memoryOptimization","initialMemory","testDuration","endTime","taskTimes","taskCounter","_ref","taskTime","_x","_x2","apply","arguments","elapsed","remaining","finalMemory","_this5","coders","researchers","analysts","optimizers","coordinators","tasksByType","avgTimesByType","agentTypes","count","typePromises","typeAgents","workloadPromises","Object","entries","_ref2","agentType","slice","_ref3","tasks","getTasksForType","description","_x4","_x5","_x3","forEach","times","totalAgents","values","flat","totalTasks","_this6","maxAgentsReached","failurePoint","memoryAtFailure","agentSpawnFailures","taskExecutionFailures","systemErrors","currentAgents","batchSize","maxBatchSize","targetCount","newAgents","spawnedBatch","allSettled","memoryMB","agentCount","memory","reason","min","agentIndex","taskSets","coder","researcher","analyst","optimizer","coordinator","_this7","passedScenarios","s","totalScenarios","report","_objectSpread","summary","failedScenarios","successRate","overallPassed","reportPath","writeFile","JSON","stringify","_runLoadTests","loadTester","results","exit","main","module","exports"],"sources":["load-testing-suite.test.js"],"sourcesContent":["\n\n/**\n * Load Testing Suite for ruv-swarm\n * Tests concurrent operation of 50+ agents with stress testing scenarios\n */\n\nconst { RuvSwarm } = require('../src/index-enhanced');\nconst { EventEmitter } = require('events');\nconst fs = require('fs').promises;\nconst os = require('os');\n\nclass LoadTestingSuite extends EventEmitter {\n    constructor() {\n        super();\n        this.testResults = {\n            timestamp: new Date().toISOString(),\n            systemInfo: {\n                platform: process.platform,\n                arch: process.arch,\n                nodeVersion: process.version,\n                cpus: os.cpus().length,\n                totalMemory: os.totalmem(),\n                freeMemory: os.freemem()\n            },\n            scenarios: [],\n            performance: {\n                maxConcurrentAgents: 0,\n                avgResponseTime: 0,\n                throughput: 0,\n                errorRate: 0,\n                memoryPeak: 0,\n                cpuPeak: 0\n            },\n            passed: false\n        };\n        this.metrics = {\n            responseTimes: [],\n            memorySnapshots: [],\n            errors: [],\n            throughputData: []\n        };\n        this.monitoringInterval = null;\n    }\n\n    async runLoadTests() {\n        console.log('🔥 Starting Load Testing Suite');\n        console.log('==============================\\n');\n\n        this.logSystemInfo();\n        this.startSystemMonitoring();\n\n        try {\n            // Scenario 1: Gradual load increase (10 → 60 agents)\n            await this.runGradualLoadTest();\n\n            // Scenario 2: Burst load test (0 → 50 agents instantly)\n            await this.runBurstLoadTest();\n\n            // Scenario 3: Sustained load test (50 agents for 5 minutes)\n            await this.runSustainedLoadTest();\n\n            // Scenario 4: Mixed workload test (different agent types)\n            await this.runMixedWorkloadTest();\n\n            // Scenario 5: Stress test (pushing to failure point)\n            await this.runStressTest();\n\n            // Generate comprehensive report\n            await this.generateLoadTestReport();\n\n        } catch (error) {\n            console.error('❌ Load testing failed:', error);\n            throw error;\n        } finally {\n            this.stopSystemMonitoring();\n        }\n\n        return this.testResults;\n    }\n\n    logSystemInfo() {\n        console.log('📊 System Information:');\n        console.log(`   Platform: ${this.testResults.systemInfo.platform} ${this.testResults.systemInfo.arch}`);\n        console.log(`   Node.js: ${this.testResults.systemInfo.nodeVersion}`);\n        console.log(`   CPUs: ${this.testResults.systemInfo.cpus}`);\n        console.log(`   Memory: ${(this.testResults.systemInfo.totalMemory / 1024 / 1024 / 1024).toFixed(1)}GB total`);\n        console.log(`   Free: ${(this.testResults.systemInfo.freeMemory / 1024 / 1024 / 1024).toFixed(1)}GB\\n`);\n    }\n\n    startSystemMonitoring() {\n        this.monitoringInterval = setInterval(() => {\n            const memUsage = process.memoryUsage();\n            const cpuUsage = process.cpuUsage();\n            \n            this.metrics.memorySnapshots.push({\n                timestamp: Date.now(),\n                heapUsed: memUsage.heapUsed,\n                heapTotal: memUsage.heapTotal,\n                external: memUsage.external\n            });\n\n            // Update peak values\n            this.testResults.performance.memoryPeak = Math.max(\n                this.testResults.performance.memoryPeak,\n                memUsage.heapUsed\n            );\n        }, 1000);\n    }\n\n    stopSystemMonitoring() {\n        if (this.monitoringInterval) {\n            clearInterval(this.monitoringInterval);\n        }\n    }\n\n    async runGradualLoadTest() {\n        console.log('📈 Scenario 1: Gradual Load Increase (10 → 60 agents)');\n        \n        const scenario = {\n            name: 'Gradual Load Increase',\n            startTime: Date.now(),\n            agents: [],\n            metrics: {\n                spawnTimes: [],\n                executionTimes: [],\n                errors: []\n            },\n            passed: false\n        };\n\n        try {\n            const ruvSwarm = await RuvSwarm.initialize({\n                enableNeuralNetworks: true,\n                enableForecasting: true,\n                loadingStrategy: 'progressive'\n            });\n\n            const swarm = await ruvSwarm.createSwarm({\n                topology: 'hierarchical',\n                maxAgents: 70,\n                strategy: 'parallel'\n            });\n\n            // Gradually increase load from 10 to 60 agents\n            for (let batch = 10; batch <= 60; batch += 10) {\n                console.log(`   Spawning batch: ${batch} agents...`);\n                \n                const batchStartTime = Date.now();\n                const batchPromises = [];\n\n                for (let i = scenario.agents.length; i < batch; i++) {\n                    const spawnPromise = swarm.spawn({\n                        type: ['coder', 'researcher', 'analyst', 'optimizer'][i % 4],\n                        name: `gradual-agent-${i}`\n                    }).then(agent => {\n                        scenario.agents.push(agent);\n                        return agent;\n                    }).catch(error => {\n                        scenario.metrics.errors.push({\n                            phase: 'spawn',\n                            agent: i,\n                            error: error.message\n                        });\n                        return null;\n                    });\n                    \n                    batchPromises.push(spawnPromise);\n                }\n\n                await Promise.all(batchPromises);\n                const batchSpawnTime = Date.now() - batchStartTime;\n                scenario.metrics.spawnTimes.push({\n                    batch,\n                    time: batchSpawnTime,\n                    agentsSpawned: scenario.agents.length\n                });\n\n                console.log(`     Spawned ${scenario.agents.length} agents in ${batchSpawnTime}ms`);\n\n                // Execute tasks for current batch\n                const taskPromises = scenario.agents.map((agent, i) => {\n                    if (!agent) return Promise.resolve();\n                    \n                    const taskStart = Date.now();\n                    return agent.execute({\n                        task: `Gradual load task ${i}: Calculate fibonacci(${20 + (i % 10)})`,\n                        timeout: 15000\n                    }).then(() => {\n                        scenario.metrics.executionTimes.push(Date.now() - taskStart);\n                    }).catch(error => {\n                        scenario.metrics.errors.push({\n                            phase: 'execution',\n                            agent: i,\n                            error: error.message\n                        });\n                    });\n                });\n\n                await Promise.all(taskPromises);\n\n                // Brief pause between batches\n                await new Promise(resolve => setTimeout(resolve, 2000));\n            }\n\n            scenario.passed = scenario.agents.length >= 50 && scenario.metrics.errors.length < 5;\n            this.testResults.performance.maxConcurrentAgents = Math.max(\n                this.testResults.performance.maxConcurrentAgents,\n                scenario.agents.length\n            );\n\n            console.log(`   ✅ Completed: ${scenario.agents.length} agents, ${scenario.metrics.errors.length} errors`);\n\n        } catch (error) {\n            scenario.error = error.message;\n            console.log(`   ❌ Failed: ${error.message}`);\n        }\n\n        scenario.duration = Date.now() - scenario.startTime;\n        this.testResults.scenarios.push(scenario);\n        console.log('');\n    }\n\n    async runBurstLoadTest() {\n        console.log('💥 Scenario 2: Burst Load Test (0 → 50 agents instantly)');\n        \n        const scenario = {\n            name: 'Burst Load Test',\n            startTime: Date.now(),\n            agents: [],\n            metrics: {\n                spawnTime: 0,\n                firstResponseTime: 0,\n                allResponsesTime: 0,\n                errors: []\n            },\n            passed: false\n        };\n\n        try {\n            const ruvSwarm = await RuvSwarm.initialize({\n                enableNeuralNetworks: true,\n                enableForecasting: false, // Reduce overhead for burst test\n                loadingStrategy: 'immediate'\n            });\n\n            const swarm = await ruvSwarm.createSwarm({\n                topology: 'mesh',\n                maxAgents: 60,\n                strategy: 'parallel'\n            });\n\n            // Spawn all 50 agents simultaneously\n            console.log('   Spawning 50 agents simultaneously...');\n            const spawnStartTime = Date.now();\n            \n            const spawnPromises = Array.from({ length: 50 }, (_, i) =>\n                swarm.spawn({\n                    type: 'coder',\n                    name: `burst-agent-${i}`\n                }).catch(error => {\n                    scenario.metrics.errors.push({\n                        phase: 'spawn',\n                        agent: i,\n                        error: error.message\n                    });\n                    return null;\n                })\n            );\n\n            const spawnedAgents = await Promise.all(spawnPromises);\n            scenario.agents = spawnedAgents.filter(agent => agent !== null);\n            scenario.metrics.spawnTime = Date.now() - spawnStartTime;\n\n            console.log(`     Spawned ${scenario.agents.length}/50 agents in ${scenario.metrics.spawnTime}ms`);\n\n            // Execute tasks simultaneously\n            console.log('   Executing tasks simultaneously...');\n            const execStartTime = Date.now();\n            let firstResponseReceived = false;\n\n            const taskPromises = scenario.agents.map((agent, i) => {\n                const taskStart = Date.now();\n                return agent.execute({\n                    task: `Burst task ${i}: Sort array of 1000 random numbers`,\n                    timeout: 20000\n                }).then(() => {\n                    const responseTime = Date.now() - taskStart;\n                    if (!firstResponseReceived) {\n                        scenario.metrics.firstResponseTime = Date.now() - execStartTime;\n                        firstResponseReceived = true;\n                    }\n                    return responseTime;\n                }).catch(error => {\n                    scenario.metrics.errors.push({\n                        phase: 'execution',\n                        agent: i,\n                        error: error.message\n                    });\n                    return null;\n                });\n            });\n\n            const responseTimes = await Promise.all(taskPromises);\n            scenario.metrics.allResponsesTime = Date.now() - execStartTime;\n            \n            const validResponses = responseTimes.filter(t => t !== null);\n            this.metrics.responseTimes.push(...validResponses);\n\n            scenario.passed = scenario.agents.length >= 45 && scenario.metrics.errors.length < 10;\n\n            console.log(`   First response: ${scenario.metrics.firstResponseTime}ms`);\n            console.log(`   All responses: ${scenario.metrics.allResponsesTime}ms`);\n            console.log(`   Average response: ${validResponses.length > 0 ? Math.round(validResponses.reduce((a, b) => a + b, 0) / validResponses.length) : 'N/A'}ms`);\n            console.log(`   Errors: ${scenario.metrics.errors.length}`);\n\n        } catch (error) {\n            scenario.error = error.message;\n            console.log(`   ❌ Failed: ${error.message}`);\n        }\n\n        scenario.duration = Date.now() - scenario.startTime;\n        this.testResults.scenarios.push(scenario);\n        console.log('');\n    }\n\n    async runSustainedLoadTest() {\n        console.log('⏰ Scenario 3: Sustained Load Test (50 agents for 5 minutes)');\n        \n        const scenario = {\n            name: 'Sustained Load Test',\n            startTime: Date.now(),\n            agents: [],\n            metrics: {\n                tasksCompleted: 0,\n                avgTaskTime: 0,\n                memoryGrowth: 0,\n                errors: []\n            },\n            passed: false\n        };\n\n        try {\n            const ruvSwarm = await RuvSwarm.initialize({\n                enableNeuralNetworks: true,\n                enableForecasting: true,\n                memoryOptimization: true\n            });\n\n            const swarm = await ruvSwarm.createSwarm({\n                topology: 'mesh',\n                maxAgents: 60,\n                strategy: 'balanced'\n            });\n\n            // Spawn 50 agents\n            const spawnPromises = Array.from({ length: 50 }, (_, i) =>\n                swarm.spawn({\n                    type: ['coder', 'researcher', 'analyst'][i % 3],\n                    name: `sustained-agent-${i}`\n                })\n            );\n\n            scenario.agents = await Promise.all(spawnPromises);\n            console.log(`   Spawned ${scenario.agents.length} agents`);\n\n            const initialMemory = process.memoryUsage().heapUsed;\n            const testDuration = 5 * 60 * 1000; // 5 minutes\n            const endTime = Date.now() + testDuration;\n            const taskTimes = [];\n\n            let taskCounter = 0;\n\n            console.log('   Running sustained load for 5 minutes...');\n            \n            while (Date.now() < endTime) {\n                const batchPromises = scenario.agents.map(async (agent, i) => {\n                    const taskStart = Date.now();\n                    try {\n                        await agent.execute({\n                            task: `Sustained task ${taskCounter}: Process data batch ${taskCounter % 100}`,\n                            timeout: 10000\n                        });\n                        const taskTime = Date.now() - taskStart;\n                        taskTimes.push(taskTime);\n                        scenario.metrics.tasksCompleted++;\n                        return true;\n                    } catch (error) {\n                        scenario.metrics.errors.push({\n                            phase: 'sustained_execution',\n                            agent: i,\n                            task: taskCounter,\n                            error: error.message\n                        });\n                        return false;\n                    }\n                });\n\n                await Promise.all(batchPromises);\n                taskCounter++;\n\n                // Brief pause to prevent overwhelming\n                await new Promise(resolve => setTimeout(resolve, 1000));\n\n                // Log progress every minute\n                if (taskCounter % 50 === 0) {\n                    const elapsed = Date.now() - scenario.startTime;\n                    const remaining = endTime - Date.now();\n                    console.log(`     Progress: ${Math.round(elapsed / 1000)}s elapsed, ${Math.round(remaining / 1000)}s remaining`);\n                    console.log(`     Tasks completed: ${scenario.metrics.tasksCompleted}, Errors: ${scenario.metrics.errors.length}`);\n                }\n            }\n\n            const finalMemory = process.memoryUsage().heapUsed;\n            scenario.metrics.memoryGrowth = finalMemory - initialMemory;\n            scenario.metrics.avgTaskTime = taskTimes.length > 0 \n                ? Math.round(taskTimes.reduce((a, b) => a + b, 0) / taskTimes.length)\n                : 0;\n\n            scenario.passed = scenario.metrics.tasksCompleted >= 1000 && \n                             scenario.metrics.errors.length < 50 &&\n                             scenario.metrics.memoryGrowth < 200 * 1024 * 1024; // Less than 200MB growth\n\n            console.log(`   Tasks completed: ${scenario.metrics.tasksCompleted}`);\n            console.log(`   Average task time: ${scenario.metrics.avgTaskTime}ms`);\n            console.log(`   Memory growth: ${Math.round(scenario.metrics.memoryGrowth / 1024 / 1024)}MB`);\n            console.log(`   Error rate: ${((scenario.metrics.errors.length / scenario.metrics.tasksCompleted) * 100).toFixed(2)}%`);\n\n        } catch (error) {\n            scenario.error = error.message;\n            console.log(`   ❌ Failed: ${error.message}`);\n        }\n\n        scenario.duration = Date.now() - scenario.startTime;\n        this.testResults.scenarios.push(scenario);\n        console.log('');\n    }\n\n    async runMixedWorkloadTest() {\n        console.log('🎭 Scenario 4: Mixed Workload Test (different agent types)');\n        \n        const scenario = {\n            name: 'Mixed Workload Test',\n            startTime: Date.now(),\n            agents: {\n                coders: [],\n                researchers: [],\n                analysts: [],\n                optimizers: [],\n                coordinators: []\n            },\n            metrics: {\n                tasksByType: {},\n                avgTimesByType: {},\n                errors: []\n            },\n            passed: false\n        };\n\n        try {\n            const ruvSwarm = await RuvSwarm.initialize({\n                enableNeuralNetworks: true,\n                enableForecasting: true,\n                loadingStrategy: 'progressive'\n            });\n\n            const swarm = await ruvSwarm.createSwarm({\n                topology: 'hierarchical',\n                maxAgents: 60,\n                strategy: 'specialized'\n            });\n\n            // Spawn different types of agents\n            const agentTypes = [\n                { type: 'coder', count: 15 },\n                { type: 'researcher', count: 12 },\n                { type: 'analyst', count: 10 },\n                { type: 'optimizer', count: 8 },\n                { type: 'coordinator', count: 5 }\n            ];\n\n            console.log('   Spawning mixed agent types...');\n            for (const { type, count } of agentTypes) {\n                const typePromises = Array.from({ length: count }, (_, i) =>\n                    swarm.spawn({ type, name: `${type}-${i}` })\n                );\n                \n                const typeAgents = await Promise.all(typePromises);\n                scenario.agents[type + 's'] = typeAgents;\n                scenario.metrics.tasksByType[type] = 0;\n                scenario.metrics.avgTimesByType[type] = [];\n                \n                console.log(`     ${type}: ${typeAgents.length} agents`);\n            }\n\n            // Execute type-specific tasks\n            console.log('   Executing type-specific workloads...');\n            \n            const workloadPromises = Object.entries(scenario.agents).map(async ([agentType, agents]) => {\n                const type = agentType.slice(0, -1); // Remove 's' suffix\n                \n                return Promise.all(agents.map(async (agent, i) => {\n                    const tasks = this.getTasksForType(type, i);\n                    \n                    for (const task of tasks) {\n                        const taskStart = Date.now();\n                        try {\n                            await agent.execute({\n                                task: task.description,\n                                timeout: task.timeout\n                            });\n                            \n                            const taskTime = Date.now() - taskStart;\n                            scenario.metrics.avgTimesByType[type].push(taskTime);\n                            scenario.metrics.tasksByType[type]++;\n                            \n                        } catch (error) {\n                            scenario.metrics.errors.push({\n                                phase: 'mixed_workload',\n                                agentType: type,\n                                agent: i,\n                                task: task.description,\n                                error: error.message\n                            });\n                        }\n                    }\n                }));\n            });\n\n            await Promise.all(workloadPromises);\n\n            // Calculate averages\n            Object.entries(scenario.metrics.avgTimesByType).forEach(([type, times]) => {\n                scenario.metrics.avgTimesByType[type] = times.length > 0\n                    ? Math.round(times.reduce((a, b) => a + b, 0) / times.length)\n                    : 0;\n            });\n\n            const totalAgents = Object.values(scenario.agents).flat().length;\n            const totalTasks = Object.values(scenario.metrics.tasksByType).reduce((a, b) => a + b, 0);\n            \n            scenario.passed = totalAgents >= 50 && \n                             totalTasks >= 150 && \n                             scenario.metrics.errors.length < 15;\n\n            console.log(`   Total agents: ${totalAgents}`);\n            console.log(`   Total tasks: ${totalTasks}`);\n            console.log(`   Tasks by type:`, scenario.metrics.tasksByType);\n            console.log(`   Avg times by type:`, scenario.metrics.avgTimesByType);\n            console.log(`   Errors: ${scenario.metrics.errors.length}`);\n\n        } catch (error) {\n            scenario.error = error.message;\n            console.log(`   ❌ Failed: ${error.message}`);\n        }\n\n        scenario.duration = Date.now() - scenario.startTime;\n        this.testResults.scenarios.push(scenario);\n        console.log('');\n    }\n\n    async runStressTest() {\n        console.log('🔥 Scenario 5: Stress Test (pushing to failure point)');\n        \n        const scenario = {\n            name: 'Stress Test',\n            startTime: Date.now(),\n            maxAgentsReached: 0,\n            failurePoint: null,\n            metrics: {\n                memoryAtFailure: 0,\n                agentSpawnFailures: 0,\n                taskExecutionFailures: 0,\n                systemErrors: []\n            },\n            passed: false\n        };\n\n        try {\n            const ruvSwarm = await RuvSwarm.initialize({\n                enableNeuralNetworks: true,\n                enableForecasting: false,\n                loadingStrategy: 'immediate'\n            });\n\n            const swarm = await ruvSwarm.createSwarm({\n                topology: 'mesh',\n                maxAgents: 200, // High limit for stress testing\n                strategy: 'parallel'\n            });\n\n            console.log('   Progressively increasing load until failure...');\n            \n            let currentAgents = [];\n            let batchSize = 10;\n            let maxBatchSize = 50;\n\n            for (let targetCount = 10; targetCount <= 150; targetCount += batchSize) {\n                console.log(`   Attempting to reach ${targetCount} agents...`);\n                \n                try {\n                    // Spawn additional agents\n                    const newAgents = [];\n                    const spawnPromises = [];\n                    \n                    for (let i = currentAgents.length; i < targetCount; i++) {\n                        spawnPromises.push(\n                            swarm.spawn({\n                                type: 'coder',\n                                name: `stress-agent-${i}`\n                            }).then(agent => {\n                                newAgents.push(agent);\n                                return agent;\n                            }).catch(error => {\n                                scenario.metrics.agentSpawnFailures++;\n                                scenario.metrics.systemErrors.push({\n                                    phase: 'spawn',\n                                    agent: i,\n                                    error: error.message\n                                });\n                                return null;\n                            })\n                        );\n                    }\n\n                    const spawnedBatch = await Promise.all(spawnPromises);\n                    currentAgents.push(...spawnedBatch.filter(agent => agent !== null));\n                    scenario.maxAgentsReached = currentAgents.length;\n\n                    console.log(`     Successfully spawned ${currentAgents.length} agents`);\n\n                    // Test execution with current agent count\n                    const taskPromises = currentAgents.map((agent, i) => {\n                        if (!agent) return Promise.resolve();\n                        \n                        return agent.execute({\n                            task: `Stress test task ${i}: Heavy computation`,\n                            timeout: 10000\n                        }).catch(error => {\n                            scenario.metrics.taskExecutionFailures++;\n                            scenario.metrics.systemErrors.push({\n                                phase: 'execution',\n                                agent: i,\n                                error: error.message\n                            });\n                        });\n                    });\n\n                    await Promise.allSettled(taskPromises);\n\n                    // Check memory usage\n                    const memUsage = process.memoryUsage();\n                    const memoryMB = memUsage.heapUsed / 1024 / 1024;\n                    \n                    console.log(`     Memory usage: ${memoryMB.toFixed(1)}MB`);\n                    console.log(`     Spawn failures: ${scenario.metrics.agentSpawnFailures}`);\n                    console.log(`     Execution failures: ${scenario.metrics.taskExecutionFailures}`);\n\n                    // Check if we're approaching limits\n                    if (memoryMB > 1000 || scenario.metrics.agentSpawnFailures > 10) {\n                        scenario.failurePoint = {\n                            agentCount: currentAgents.length,\n                            memory: memoryMB,\n                            reason: memoryMB > 1000 ? 'memory_limit' : 'spawn_failures'\n                        };\n                        console.log(`   Failure point reached: ${scenario.failurePoint.reason}`);\n                        break;\n                    }\n\n                    // Increase batch size for efficiency, but cap it\n                    batchSize = Math.min(batchSize + 5, maxBatchSize);\n\n                } catch (error) {\n                    scenario.failurePoint = {\n                        agentCount: currentAgents.length,\n                        memory: process.memoryUsage().heapUsed / 1024 / 1024,\n                        reason: 'system_error',\n                        error: error.message\n                    };\n                    console.log(`   System error at ${currentAgents.length} agents: ${error.message}`);\n                    break;\n                }\n\n                // Brief pause between stress increments\n                await new Promise(resolve => setTimeout(resolve, 2000));\n            }\n\n            scenario.metrics.memoryAtFailure = process.memoryUsage().heapUsed / 1024 / 1024;\n            scenario.passed = scenario.maxAgentsReached >= 80; // Minimum threshold for stress test\n\n            console.log(`   Maximum agents reached: ${scenario.maxAgentsReached}`);\n            console.log(`   Failure point:`, scenario.failurePoint || 'No failure reached');\n            console.log(`   Memory at end: ${scenario.metrics.memoryAtFailure.toFixed(1)}MB`);\n\n        } catch (error) {\n            scenario.error = error.message;\n            console.log(`   ❌ Failed: ${error.message}`);\n        }\n\n        scenario.duration = Date.now() - scenario.startTime;\n        this.testResults.scenarios.push(scenario);\n        console.log('');\n    }\n\n    getTasksForType(type, agentIndex) {\n        const taskSets = {\n            coder: [\n                { description: `Code review task ${agentIndex}: Analyze function complexity`, timeout: 8000 },\n                { description: `Implementation task ${agentIndex}: Write sorting algorithm`, timeout: 12000 },\n                { description: `Debug task ${agentIndex}: Find memory leak`, timeout: 10000 }\n            ],\n            researcher: [\n                { description: `Research task ${agentIndex}: Literature review on AI`, timeout: 15000 },\n                { description: `Analysis task ${agentIndex}: Trend analysis`, timeout: 12000 }\n            ],\n            analyst: [\n                { description: `Data analysis ${agentIndex}: Process dataset`, timeout: 10000 },\n                { description: `Statistical analysis ${agentIndex}: Correlation study`, timeout: 8000 }\n            ],\n            optimizer: [\n                { description: `Optimization task ${agentIndex}: Algorithm tuning`, timeout: 15000 },\n                { description: `Performance task ${agentIndex}: Bottleneck analysis`, timeout: 12000 }\n            ],\n            coordinator: [\n                { description: `Coordination task ${agentIndex}: Task scheduling`, timeout: 6000 },\n                { description: `Management task ${agentIndex}: Resource allocation`, timeout: 8000 }\n            ]\n        };\n\n        return taskSets[type] || [{ description: `Generic task ${agentIndex}`, timeout: 8000 }];\n    }\n\n    async generateLoadTestReport() {\n        console.log('📄 Generating Load Test Report...');\n\n        // Calculate overall metrics\n        const passedScenarios = this.testResults.scenarios.filter(s => s.passed).length;\n        const totalScenarios = this.testResults.scenarios.length;\n        \n        this.testResults.performance.avgResponseTime = this.metrics.responseTimes.length > 0\n            ? Math.round(this.metrics.responseTimes.reduce((a, b) => a + b, 0) / this.metrics.responseTimes.length)\n            : 0;\n\n        this.testResults.performance.errorRate = this.metrics.errors.length > 0\n            ? ((this.metrics.errors.length / (this.metrics.responseTimes.length + this.metrics.errors.length)) * 100).toFixed(2)\n            : 0;\n\n        this.testResults.performance.memoryPeak = this.testResults.performance.memoryPeak / 1024 / 1024; // Convert to MB\n\n        this.testResults.passed = passedScenarios >= 4; // At least 4/5 scenarios must pass\n\n        const report = {\n            ...this.testResults,\n            summary: {\n                totalScenarios,\n                passedScenarios,\n                failedScenarios: totalScenarios - passedScenarios,\n                successRate: ((passedScenarios / totalScenarios) * 100).toFixed(1) + '%',\n                overallPassed: this.testResults.passed\n            }\n        };\n\n        // Save detailed report\n        const reportPath = '/workspaces/ruv-FANN/ruv-swarm/npm/test/load-test-report.json';\n        await fs.writeFile(reportPath, JSON.stringify(report, null, 2));\n\n        // Console summary\n        console.log('\\n🎯 LOAD TEST SUMMARY');\n        console.log('====================');\n        console.log(`Scenarios Passed: ${passedScenarios}/${totalScenarios} (${report.summary.successRate})`);\n        console.log(`Max Concurrent Agents: ${this.testResults.performance.maxConcurrentAgents}`);\n        console.log(`Average Response Time: ${this.testResults.performance.avgResponseTime}ms`);\n        console.log(`Error Rate: ${this.testResults.performance.errorRate}%`);\n        console.log(`Peak Memory Usage: ${this.testResults.performance.memoryPeak.toFixed(1)}MB`);\n        console.log(`Overall Status: ${this.testResults.passed ? '✅ PASSED' : '❌ FAILED'}`);\n\n        console.log('\\n📋 Scenario Results:');\n        this.testResults.scenarios.forEach(scenario => {\n            console.log(`   ${scenario.passed ? '✅' : '❌'} ${scenario.name} (${scenario.duration}ms)`);\n        });\n\n        console.log(`\\n📄 Detailed report saved to: ${reportPath}`);\n\n        return report;\n    }\n}\n\n// Main execution\nasync function runLoadTests() {\n    try {\n        const loadTester = new LoadTestingSuite();\n        const results = await loadTester.runLoadTests();\n        \n        process.exit(results.passed ? 0 : 1);\n    } catch (error) {\n        console.error('💥 Load testing failed:', error);\n        process.exit(1);\n    }\n}\n\nif (require.main === module) {\n    runLoadTests();\n}\n\nmodule.exports = { LoadTestingSuite };"],"mappings":"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","ignoreList":[]}