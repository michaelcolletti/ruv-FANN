{"version":3,"names":["jest","require","mockRuvSwarm","initialize","fn","createSwarm","features","neural_networks","forecasting","cognitive_diversity","simd_support","wasmLoader","getTotalMemoryUsage","getModuleStatus","core","loaded","mockPersistence","createAgent","getActiveSwarms","getSwarmAgents","unstable_mockModule","RuvSwarm","SwarmPersistence","ValidationError","SwarmError","AgentError","TaskError","NeuralError","WasmError","ErrorFactory","ErrorContext","ValidationUtils","EnhancedMCPTools","describe","mcpTools","beforeEach","clearAllMocks","test","error","expect","name","toBe","code","field","value","expectedType","getSuggestions","toContain","swarmId","operation","agentId","agentType","taskId","taskType","networkId","modelType","module","validationError","createError","toBeInstanceOf","swarmError","agentError","originalError","Error","wrappedError","wrapError","message","details","context","set","get","toObject","toEqual","timestamp","clear","enrichedError","enrichError","tool","validParams","topology","maxAgents","strategy","result","validateParams","minimalParams","invalidParams","toThrow","type","capabilities","iterations","learningRate","maliciousInput","sanitized","sanitizeInput","not","consoleSpy","spyOn","console","mockImplementation","handledError","handleError","errorLog","toHaveLength","severity","mockRestore","determineSeverity","wasmError","criticalError","isRecoverable","timeoutError","genericError","params","validateToolParams","stats","getErrorStats","total","bySeverity","medium","high","byTool","swarm_init","agent_spawn","task_orchestrate","i","recentLogs","getErrorLogs","_asyncToGenerator","mockRejectedValue","rejects","mockResolvedValue","id","agents","Map","spawn","find","log","toBeDefined","doc","getSchemaDoc","parameters","allowedValues","range","min","max","schemas","getAllSchemas","length","toBeGreaterThan","validUUID","invalidUUID","isValidUUID"],"sources":["error-handling-validation.test.js"],"sourcesContent":["/**\n * Comprehensive Error Handling and Validation Tests\n * Tests the new error handling system for all MCP tools\n */\n\nconst { jest } = require('@jest/globals');\n\n// Mock dependencies\nconst mockRuvSwarm = {\n  initialize: jest.fn(),\n  createSwarm: jest.fn(),\n  features: {\n    neural_networks: true,\n    forecasting: true,\n    cognitive_diversity: true,\n    simd_support: true\n  },\n  wasmLoader: {\n    getTotalMemoryUsage: jest.fn(() => 1024 * 1024),\n    getModuleStatus: jest.fn(() => ({ core: { loaded: true } }))\n  }\n};\n\nconst mockPersistence = {\n  createSwarm: jest.fn(),\n  createAgent: jest.fn(),\n  getActiveSwarms: jest.fn(() => []),\n  getSwarmAgents: jest.fn(() => [])\n};\n\n// Import the modules with mocking\njest.unstable_mockModule('../src/index-enhanced.js', () => ({\n  RuvSwarm: {\n    initialize: jest.fn(() => mockRuvSwarm)\n  }\n}));\n\njest.unstable_mockModule('../src/persistence.js', () => ({\n  SwarmPersistence: jest.fn(() => mockPersistence)\n}));\n\n// Now import the modules under test\nconst { \n  ValidationError,\n  SwarmError,\n  AgentError,\n  TaskError,\n  NeuralError,\n  WasmError,\n  ErrorFactory,\n  ErrorContext\n} = await import('../src/errors.js');\n\nconst { ValidationUtils } = await import('../src/schemas.js');\nconst { EnhancedMCPTools } = await import('../src/mcp-tools-enhanced.js');\n\ndescribe('Error Handling System', () => {\n  let mcpTools;\n\n  beforeEach(() => {\n    mcpTools = new EnhancedMCPTools();\n    jest.clearAllMocks();\n  });\n\n  describe('Custom Error Classes', () => {\n    test('ValidationError should include field and value information', () => {\n      const error = new ValidationError('Invalid value', 'testField', 'badValue', 'string');\n      \n      expect(error.name).toBe('ValidationError');\n      expect(error.code).toBe('VALIDATION_ERROR');\n      expect(error.field).toBe('testField');\n      expect(error.value).toBe('badValue');\n      expect(error.expectedType).toBe('string');\n      expect(error.getSuggestions()).toContain('Check the \\'testField\\' parameter');\n    });\n\n    test('SwarmError should include swarm context', () => {\n      const error = new SwarmError('Swarm not found', 'test-swarm-id', 'initialization');\n      \n      expect(error.name).toBe('SwarmError');\n      expect(error.code).toBe('SWARM_ERROR');\n      expect(error.swarmId).toBe('test-swarm-id');\n      expect(error.operation).toBe('initialization');\n      expect(error.getSuggestions()).toContain('Verify the swarm ID is correct');\n    });\n\n    test('AgentError should include agent context', () => {\n      const error = new AgentError('Agent not found', 'test-agent-id', 'researcher', 'spawn');\n      \n      expect(error.name).toBe('AgentError');\n      expect(error.code).toBe('AGENT_ERROR');\n      expect(error.agentId).toBe('test-agent-id');\n      expect(error.agentType).toBe('researcher');\n      expect(error.operation).toBe('spawn');\n    });\n\n    test('TaskError should include task context', () => {\n      const error = new TaskError('Task timeout', 'test-task-id', 'analysis', 'execution');\n      \n      expect(error.name).toBe('TaskError');\n      expect(error.code).toBe('TASK_ERROR');\n      expect(error.taskId).toBe('test-task-id');\n      expect(error.taskType).toBe('analysis');\n      expect(error.operation).toBe('execution');\n      expect(error.getSuggestions()).toContain('Increase task timeout duration');\n    });\n\n    test('NeuralError should include neural network context', () => {\n      const error = new NeuralError('Training failed', 'test-nn-id', 'training', 'lstm');\n      \n      expect(error.name).toBe('NeuralError');\n      expect(error.code).toBe('NEURAL_ERROR');\n      expect(error.networkId).toBe('test-nn-id');\n      expect(error.operation).toBe('training');\n      expect(error.modelType).toBe('lstm');\n    });\n\n    test('WasmError should include module context', () => {\n      const error = new WasmError('Module not loaded', 'core', 'initialization');\n      \n      expect(error.name).toBe('WasmError');\n      expect(error.code).toBe('WASM_ERROR');\n      expect(error.module).toBe('core');\n      expect(error.operation).toBe('initialization');\n      expect(error.getSuggestions()).toContain('Check WASM module availability');\n    });\n  });\n\n  describe('ErrorFactory', () => {\n    test('should create appropriate error types', () => {\n      const validationError = ErrorFactory.createError('validation', 'Invalid input', {\n        field: 'test',\n        value: 'bad',\n        expectedType: 'number'\n      });\n      expect(validationError).toBeInstanceOf(ValidationError);\n\n      const swarmError = ErrorFactory.createError('swarm', 'Swarm failed', {\n        swarmId: 'test-id',\n        operation: 'init'\n      });\n      expect(swarmError).toBeInstanceOf(SwarmError);\n\n      const agentError = ErrorFactory.createError('agent', 'Agent failed', {\n        agentId: 'test-id',\n        agentType: 'researcher'\n      });\n      expect(agentError).toBeInstanceOf(AgentError);\n    });\n\n    test('should wrap existing errors with context', () => {\n      const originalError = new Error('Original error');\n      const wrappedError = ErrorFactory.wrapError(originalError, 'wasm', {\n        module: 'core',\n        operation: 'load'\n      });\n      \n      expect(wrappedError).toBeInstanceOf(WasmError);\n      expect(wrappedError.message).toContain('WASM: Original error');\n      expect(wrappedError.details.originalError.message).toBe('Original error');\n    });\n  });\n\n  describe('ErrorContext', () => {\n    test('should manage error context', () => {\n      const context = new ErrorContext();\n      context.set('operation', 'test');\n      context.set('timestamp', '2023-01-01');\n      \n      expect(context.get('operation')).toBe('test');\n      expect(context.toObject()).toEqual({\n        operation: 'test',\n        timestamp: '2023-01-01'\n      });\n      \n      context.clear();\n      expect(context.toObject()).toEqual({});\n    });\n\n    test('should enrich errors with context', () => {\n      const context = new ErrorContext();\n      context.set('tool', 'swarm_init');\n      context.set('operation', 'test');\n      \n      const error = new ValidationError('Test error');\n      const enrichedError = context.enrichError(error);\n      \n      expect(enrichedError.details.context).toEqual({\n        tool: 'swarm_init',\n        operation: 'test'\n      });\n    });\n  });\n});\n\ndescribe('Validation System', () => {\n  describe('ValidationUtils', () => {\n    test('should validate swarm_init parameters correctly', () => {\n      const validParams = {\n        topology: 'mesh',\n        maxAgents: 10,\n        strategy: 'balanced'\n      };\n      \n      const result = ValidationUtils.validateParams(validParams, 'swarm_init');\n      expect(result.topology).toBe('mesh');\n      expect(result.maxAgents).toBe(10);\n      expect(result.strategy).toBe('balanced');\n    });\n\n    test('should apply default values for missing parameters', () => {\n      const minimalParams = {};\n      \n      const result = ValidationUtils.validateParams(minimalParams, 'swarm_init');\n      expect(result.topology).toBe('mesh');\n      expect(result.maxAgents).toBe(5);\n      expect(result.strategy).toBe('balanced');\n    });\n\n    test('should reject invalid enum values', () => {\n      const invalidParams = {\n        topology: 'invalid-topology'\n      };\n      \n      expect(() => {\n        ValidationUtils.validateParams(invalidParams, 'swarm_init');\n      }).toThrow(ValidationError);\n    });\n\n    test('should reject out-of-range numbers', () => {\n      const invalidParams = {\n        maxAgents: 200 // Max is 100\n      };\n      \n      expect(() => {\n        ValidationUtils.validateParams(invalidParams, 'swarm_init');\n      }).toThrow(ValidationError);\n    });\n\n    test('should validate agent_spawn parameters', () => {\n      const validParams = {\n        type: 'researcher',\n        name: 'Test Agent',\n        capabilities: ['analysis', 'research']\n      };\n      \n      const result = ValidationUtils.validateParams(validParams, 'agent_spawn');\n      expect(result.type).toBe('researcher');\n      expect(result.name).toBe('Test Agent');\n      expect(result.capabilities).toEqual(['analysis', 'research']);\n    });\n\n    test('should validate neural_train parameters', () => {\n      const validParams = {\n        agentId: 'test-agent-123',\n        iterations: 50,\n        learningRate: 0.01,\n        modelType: 'feedforward'\n      };\n      \n      const result = ValidationUtils.validateParams(validParams, 'neural_train');\n      expect(result.agentId).toBe('test-agent-123');\n      expect(result.iterations).toBe(50);\n      expect(result.learningRate).toBe(0.01);\n      expect(result.modelType).toBe('feedforward');\n    });\n\n    test('should reject invalid learning rates', () => {\n      const invalidParams = {\n        agentId: 'test-agent',\n        learningRate: 2.0 // Max is 1.0\n      };\n      \n      expect(() => {\n        ValidationUtils.validateParams(invalidParams, 'neural_train');\n      }).toThrow(ValidationError);\n    });\n\n    test('should sanitize string inputs', () => {\n      const maliciousInput = '<script>alert(\\\"xss\\\")</script>';\n      const sanitized = ValidationUtils.sanitizeInput(maliciousInput);\n      \n      expect(sanitized).not.toContain('<script>');\n      expect(sanitized).not.toContain('</script>');\n    });\n  });\n});\n\ndescribe('Enhanced MCP Tools Error Handling', () => {\n  let mcpTools;\n\n  beforeEach(() => {\n    mcpTools = new EnhancedMCPTools();\n    jest.clearAllMocks();\n  });\n\n  describe('Error Handler', () => {\n    test('should handle and log errors properly', () => {\n      const originalError = new ValidationError('Test validation error', 'testField');\n      \n      // Capture console output\n      const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();\n      \n      const handledError = mcpTools.handleError(originalError, 'swarm_init', 'test_operation', {});\n      \n      expect(handledError).toBeInstanceOf(ValidationError);\n      expect(mcpTools.errorLog).toHaveLength(1);\n      expect(mcpTools.errorLog[0].tool).toBe('swarm_init');\n      expect(mcpTools.errorLog[0].operation).toBe('test_operation');\n      expect(mcpTools.errorLog[0].severity).toBe('medium');\n      \n      consoleSpy.mockRestore();\n    });\n\n    test('should determine error severity correctly', () => {\n      const validationError = new ValidationError('Validation failed');\n      expect(mcpTools.determineSeverity(validationError)).toBe('medium');\n      \n      const wasmError = new WasmError('WASM module failed');\n      expect(mcpTools.determineSeverity(wasmError)).toBe('high');\n      \n      const criticalError = new Error('Database corrupt');\n      expect(mcpTools.determineSeverity(criticalError)).toBe('low');\n    });\n\n    test('should determine error recoverability', () => {\n      const validationError = new ValidationError('Invalid input');\n      expect(mcpTools.isRecoverable(validationError)).toBe(true);\n      \n      const timeoutError = new TaskError('Task timeout');\n      expect(mcpTools.isRecoverable(timeoutError)).toBe(true);\n      \n      const genericError = new Error('Unknown error');\n      expect(mcpTools.isRecoverable(genericError)).toBe(false);\n    });\n  });\n\n  describe('Parameter Validation', () => {\n    test('should validate tool parameters', () => {\n      const params = {\n        topology: 'mesh',\n        maxAgents: 10\n      };\n      \n      const result = mcpTools.validateToolParams(params, 'swarm_init');\n      expect(result.topology).toBe('mesh');\n      expect(result.maxAgents).toBe(10);\n    });\n\n    test('should throw ValidationError for invalid parameters', () => {\n      const params = {\n        topology: 'invalid'\n      };\n      \n      expect(() => {\n        mcpTools.validateToolParams(params, 'swarm_init');\n      }).toThrow(ValidationError);\n    });\n  });\n\n  describe('Error Statistics', () => {\n    test('should track error statistics', () => {\n      // Simulate some errors\n      mcpTools.handleError(new ValidationError('Error 1'), 'swarm_init', 'op1');\n      mcpTools.handleError(new WasmError('Error 2'), 'agent_spawn', 'op2');\n      mcpTools.handleError(new TaskError('Error 3'), 'task_orchestrate', 'op3');\n      \n      const stats = mcpTools.getErrorStats();\n      \n      expect(stats.total).toBe(3);\n      expect(stats.bySeverity.medium).toBe(2); // ValidationError + TaskError\n      expect(stats.bySeverity.high).toBe(1);   // WasmError\n      expect(stats.byTool.swarm_init).toBe(1);\n      expect(stats.byTool.agent_spawn).toBe(1);\n      expect(stats.byTool.task_orchestrate).toBe(1);\n    });\n\n    test('should return recent error logs', () => {\n      // Add some errors\n      for (let i = 0; i < 5; i++) {\n        mcpTools.handleError(new Error(`Error ${i}`), 'test_tool', 'test_op');\n      }\n      \n      const recentLogs = mcpTools.getErrorLogs(3);\n      expect(recentLogs).toHaveLength(3);\n      expect(recentLogs[2].error.message).toBe('Error 4'); // Most recent\n    });\n  });\n\n  describe('Integration with MCP Tools', () => {\n    test('swarm_init should use enhanced error handling', async () => {\n      // Mock to throw an error\n      mockRuvSwarm.createSwarm = jest.fn().mockRejectedValue(new Error('WASM module not loaded'));\n      \n      await expect(mcpTools.swarm_init({})).rejects.toThrow();\n      \n      // Check that error was logged\n      expect(mcpTools.errorLog).toHaveLength(1);\n      expect(mcpTools.errorLog[0].tool).toBe('swarm_init');\n    });\n\n    test('should handle validation errors in swarm_init', async () => {\n      const invalidParams = {\n        topology: 'invalid-topology',\n        maxAgents: 'not-a-number'\n      };\n      \n      await expect(mcpTools.swarm_init(invalidParams)).rejects.toThrow(ValidationError);\n    });\n\n    test('agent_spawn should use enhanced error handling', async () => {\n      // First initialize a swarm\n      mockRuvSwarm.createSwarm = jest.fn().mockResolvedValue({\n        id: 'test-swarm',\n        agents: new Map(),\n        maxAgents: 5,\n        spawn: jest.fn().mockRejectedValue(new Error('Neural network initialization failed'))\n      });\n      \n      await mcpTools.swarm_init({});\n      \n      await expect(mcpTools.agent_spawn({ type: 'researcher' })).rejects.toThrow();\n      \n      // Check that error was logged with proper context\n      const agentError = mcpTools.errorLog.find(log => log.tool === 'agent_spawn');\n      expect(agentError).toBeDefined();\n      expect(agentError.error.message).toContain('Neural network error');\n    });\n  });\n});\n\ndescribe('Schema Validation', () => {\n  test('should provide schema documentation', () => {\n    const doc = ValidationUtils.getSchemaDoc('swarm_init');\n    \n    expect(doc.tool).toBe('swarm_init');\n    expect(doc.parameters.topology).toBeDefined();\n    expect(doc.parameters.topology.type).toBe('string');\n    expect(doc.parameters.topology.allowedValues).toContain('mesh');\n    expect(doc.parameters.maxAgents.range.min).toBe(1);\n    expect(doc.parameters.maxAgents.range.max).toBe(100);\n  });\n\n  test('should list all available schemas', () => {\n    const schemas = ValidationUtils.getAllSchemas();\n    \n    expect(schemas).toContain('swarm_init');\n    expect(schemas).toContain('agent_spawn');\n    expect(schemas).toContain('task_orchestrate');\n    expect(schemas).toContain('neural_train');\n    expect(schemas.length).toBeGreaterThan(20); // Should have 25+ tools\n  });\n\n  test('should validate UUID format', () => {\n    const validUUID = '123e4567-e89b-12d3-a456-426614174000';\n    const invalidUUID = 'not-a-uuid';\n    \n    expect(ValidationUtils.isValidUUID(validUUID)).toBe(true);\n    expect(ValidationUtils.isValidUUID(invalidUUID)).toBe(false);\n  });\n});"],"mappings":"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","ignoreList":[]}