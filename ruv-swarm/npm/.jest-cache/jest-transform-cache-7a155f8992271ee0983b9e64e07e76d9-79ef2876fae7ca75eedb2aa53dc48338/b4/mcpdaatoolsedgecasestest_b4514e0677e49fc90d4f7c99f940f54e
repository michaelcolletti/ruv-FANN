c8b9dc8cc7452d57e837604a7fcc567c
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * Edge Cases and E2E Tests for src/mcp-daa-tools.js
 * Comprehensive coverage for DAA MCP Tools integration
 */

import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';
import { DAA_MCPTools, daaMcpTools } from '../../src/mcp-daa-tools.js';

// Mock the DAA service
const mockDaaService = {
  initialize: vi.fn().mockResolvedValue(true),
  getCapabilities: vi.fn().mockReturnValue(['autonomous', 'learning', 'coordination']),
  createAgent: vi.fn().mockImplementation(/*#__PURE__*/function () {
    var _ref = _asyncToGenerator(function* (config) {
      return {
        id: config.id,
        cognitivePattern: config.cognitivePattern,
        capabilities: new Set(config.capabilities || []),
        created: Date.now()
      };
    });
    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }()),
  adaptAgent: vi.fn().mockImplementation(/*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(function* (agentId, feedback) {
      return {
        previousPattern: 'convergent',
        newPattern: 'adaptive',
        improvement: 0.15,
        insights: ['Pattern adaptation successful', 'Performance improved']
      };
    });
    return function (_x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }()),
  createWorkflow: vi.fn().mockImplementation(/*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator(function* (id, steps, dependencies) {
      return {
        id,
        steps: steps || [],
        dependencies: dependencies || {},
        status: 'created'
      };
    });
    return function (_x4, _x5, _x6) {
      return _ref3.apply(this, arguments);
    };
  }()),
  executeWorkflow: vi.fn().mockImplementation(/*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator(function* (workflowId, options) {
      return {
        complete: true,
        stepsCompleted: 5,
        totalSteps: 5,
        executionTime: 1250,
        agentsInvolved: options.agentIds || ['agent-1', 'agent-2'],
        stepResults: [{
          step: 1,
          result: 'success'
        }, {
          step: 2,
          result: 'success'
        }, {
          step: 3,
          result: 'success'
        }, {
          step: 4,
          result: 'success'
        }, {
          step: 5,
          result: 'success'
        }]
      };
    });
    return function (_x7, _x8) {
      return _ref4.apply(this, arguments);
    };
  }()),
  shareKnowledge: vi.fn().mockImplementation(/*#__PURE__*/function () {
    var _ref5 = _asyncToGenerator(function* (sourceId, targetIds, knowledge) {
      return {
        updatedAgents: targetIds.length,
        transferRate: 0.95
      };
    });
    return function (_x9, _x0, _x1) {
      return _ref5.apply(this, arguments);
    };
  }()),
  getAgentLearningStatus: vi.fn().mockImplementation(/*#__PURE__*/function () {
    var _ref6 = _asyncToGenerator(function* (agentId) {
      return {
        totalCycles: 42,
        avgProficiency: 0.87,
        domains: ['language', 'vision', 'reasoning'],
        adaptationRate: 0.23,
        neuralModelsCount: 7,
        persistentMemorySize: 1024 * 1024,
        performanceTrend: 'improving',
        detailedMetrics: {
          accuracy: 0.92,
          speed: 0.85,
          efficiency: 0.78
        }
      };
    });
    return function (_x10) {
      return _ref6.apply(this, arguments);
    };
  }()),
  getSystemLearningStatus: vi.fn().mockImplementation(/*#__PURE__*/_asyncToGenerator(function* () {
    return {
      totalCycles: 156,
      avgProficiency: 0.83,
      domains: ['nlp', 'cv', 'rl', 'graph'],
      adaptationRate: 0.19,
      neuralModelsCount: 12,
      persistentMemorySize: 8 * 1024 * 1024,
      performanceTrend: 'stable'
    };
  })),
  analyzeCognitivePatterns: vi.fn().mockImplementation(/*#__PURE__*/function () {
    var _ref8 = _asyncToGenerator(function* (agentId) {
      return {
        patterns: ['convergent', 'systems', 'adaptive'],
        effectiveness: {
          convergent: 0.89,
          systems: 0.76,
          adaptive: 0.91
        },
        recommendations: ['Increase adaptive pattern usage', 'Optimize convergent thinking'],
        optimizationScore: 0.85
      };
    });
    return function (_x11) {
      return _ref8.apply(this, arguments);
    };
  }()),
  setCognitivePattern: vi.fn().mockImplementation(/*#__PURE__*/function () {
    var _ref9 = _asyncToGenerator(function* (agentId, pattern) {
      return {
        previousPattern: 'convergent',
        success: true,
        expectedImprovement: 0.12
      };
    });
    return function (_x12, _x13) {
      return _ref9.apply(this, arguments);
    };
  }()),
  performMetaLearning: vi.fn().mockImplementation(/*#__PURE__*/function () {
    var _ref0 = _asyncToGenerator(function* (config) {
      return {
        knowledgeItems: 47,
        updatedAgents: 8,
        proficiencyGain: 0.18,
        insights: ['Cross-domain transfer successful', 'New patterns emerged']
      };
    });
    return function (_x14) {
      return _ref0.apply(this, arguments);
    };
  }()),
  getPerformanceMetrics: vi.fn().mockImplementation(/*#__PURE__*/function () {
    var _ref1 = _asyncToGenerator(function* (config) {
      return {
        totalAgents: 15,
        activeAgents: 12,
        tasksCompleted: 1847,
        avgTaskTime: 2341,
        learningCycles: 89,
        successRate: 0.94,
        adaptationScore: 0.87,
        knowledgeSharingCount: 234,
        crossDomainTransfers: 45,
        tokenReduction: 0.32,
        parallelGain: 2.8,
        memoryOptimization: 0.45,
        neuralModelsActive: 9,
        avgInferenceTime: 15.6,
        totalTrainingIterations: 12847
      };
    });
    return function (_x15) {
      return _ref1.apply(this, arguments);
    };
  }())
};

// Mock the enhanced MCP tools
const mockMcpTools = {
  recordToolMetrics: vi.fn(),
  activeSwarms: new Map([['test-swarm-1', {
    agents: new Map(),
    maxAgents: 10
  }], ['test-swarm-2', {
    agents: new Map(),
    maxAgents: 5
  }]])
};
describe('MCP DAA Tools Edge Cases and E2E Tests', () => {
  let daaTools;
  beforeEach(() => {
    vi.clearAllMocks();

    // Create fresh instance for each test
    daaTools = new DAA_MCPTools(mockMcpTools);

    // Mock the daaService import
    vi.doMock('../../src/daa-service.js', () => ({
      daaService: mockDaaService
    }));
  });
  afterEach(() => {
    vi.restoreAllMocks();
  });
  describe('Initialization Edge Cases', () => {
    it('should handle multiple initialization calls gracefully', /*#__PURE__*/_asyncToGenerator(function* () {
      yield daaTools.ensureInitialized();
      yield daaTools.ensureInitialized();
      yield daaTools.ensureInitialized();
      expect(mockDaaService.initialize).toHaveBeenCalledTimes(1);
      expect(daaTools.daaInitialized).toBe(true);
    }));
    it('should handle initialization failure', /*#__PURE__*/_asyncToGenerator(function* () {
      mockDaaService.initialize.mockRejectedValueOnce(new Error('Init failed'));
      yield expect(daaTools.ensureInitialized()).rejects.toThrow('Init failed');
      expect(daaTools.daaInitialized).toBe(false);
    }));
    it('should handle concurrent initialization calls', /*#__PURE__*/_asyncToGenerator(function* () {
      const promises = Array.from({
        length: 5
      }, () => daaTools.ensureInitialized());
      yield Promise.all(promises);
      expect(mockDaaService.initialize).toHaveBeenCalledTimes(1);
      expect(daaTools.daaInitialized).toBe(true);
    }));
  });
  describe('daa_init Edge Cases', () => {
    it('should handle successful initialization with default parameters', /*#__PURE__*/_asyncToGenerator(function* () {
      const result = yield daaTools.daa_init({});
      expect(result).toEqual({
        initialized: true,
        features: {
          autonomousLearning: true,
          peerCoordination: true,
          persistenceMode: 'auto',
          neuralIntegration: true,
          cognitivePatterns: 6
        },
        capabilities: ['autonomous', 'learning', 'coordination'],
        timestamp: expect.any(String)
      });
      expect(mockMcpTools.recordToolMetrics).toHaveBeenCalledWith('daa_init', expect.any(Number), 'success');
    }));
    it('should handle custom initialization parameters', /*#__PURE__*/_asyncToGenerator(function* () {
      const params = {
        enableLearning: false,
        enableCoordination: false,
        persistenceMode: 'memory'
      };
      const result = yield daaTools.daa_init(params);
      expect(result.features).toEqual({
        autonomousLearning: false,
        peerCoordination: false,
        persistenceMode: 'memory',
        neuralIntegration: true,
        cognitivePatterns: 6
      });
    }));
    it('should handle initialization errors gracefully', /*#__PURE__*/_asyncToGenerator(function* () {
      mockDaaService.initialize.mockRejectedValueOnce(new Error('Service unavailable'));
      yield expect(daaTools.daa_init({})).rejects.toThrow('Service unavailable');
      expect(mockMcpTools.recordToolMetrics).toHaveBeenCalledWith('daa_init', expect.any(Number), 'error', 'Service unavailable');
    }));
    it('should handle missing metrics recorder gracefully', /*#__PURE__*/_asyncToGenerator(function* () {
      const daaToolsNoMetrics = new DAA_MCPTools(null);
      const result = yield daaToolsNoMetrics.daa_init({});
      expect(result.initialized).toBe(true);
      // Should not throw even without metrics recorder
    }));
  });
  describe('daa_agent_create Edge Cases', () => {
    it('should handle successful agent creation with minimal parameters', /*#__PURE__*/_asyncToGenerator(function* () {
      const params = {
        id: 'test-agent-1'
      };
      const result = yield daaTools.daa_agent_create(params);
      expect(result).toEqual({
        agent_id: 'test-agent-1',
        swarm_id: 'test-swarm-1',
        cognitive_pattern: 'adaptive',
        capabilities: [],
        learning_enabled: false,
        memory_enabled: true,
        status: 'active',
        created_at: expect.any(String)
      });
    }));
    it('should handle agent creation with full configuration', /*#__PURE__*/_asyncToGenerator(function* () {
      const params = {
        id: 'full-agent',
        capabilities: ['reasoning', 'learning', 'adaptation'],
        cognitivePattern: 'divergent',
        learningRate: 0.005,
        enableMemory: false
      };
      const result = yield daaTools.daa_agent_create(params);
      expect(result).toEqual({
        agent_id: 'full-agent',
        swarm_id: 'test-swarm-1',
        cognitive_pattern: 'divergent',
        capabilities: ['reasoning', 'learning', 'adaptation'],
        learning_enabled: true,
        memory_enabled: false,
        status: 'active',
        created_at: expect.any(String)
      });
    }));
    it('should handle missing agent ID error', /*#__PURE__*/_asyncToGenerator(function* () {
      const params = {
        capabilities: ['test']
      };
      yield expect(daaTools.daa_agent_create(params)).rejects.toThrow('Agent ID is required');
      expect(mockMcpTools.recordToolMetrics).toHaveBeenCalledWith('daa_agent_create', expect.any(Number), 'error', 'Agent ID is required');
    }));
    it('should handle swarm assignment when all swarms are full', /*#__PURE__*/_asyncToGenerator(function* () {
      // Fill up all available swarms
      const swarm1 = mockMcpTools.activeSwarms.get('test-swarm-1');
      const swarm2 = mockMcpTools.activeSwarms.get('test-swarm-2');

      // Fill swarm1 to capacity
      for (let i = 0; i < 10; i++) {
        swarm1.agents.set(`agent-${i}`, {
          id: `agent-${i}`
        });
      }

      // Fill swarm2 to capacity
      for (let i = 0; i < 5; i++) {
        swarm2.agents.set(`agent-full-${i}`, {
          id: `agent-full-${i}`
        });
      }
      const result = yield daaTools.daa_agent_create({
        id: 'overflow-agent'
      });
      expect(result.swarm_id).toBe('daa-default-swarm');
    }));
    it('should handle no active swarms scenario', /*#__PURE__*/_asyncToGenerator(function* () {
      const daaToolsNoSwarms = new DAA_MCPTools({
        recordToolMetrics: vi.fn()
      });
      const result = yield daaToolsNoSwarms.daa_agent_create({
        id: 'no-swarm-agent'
      });
      expect(result.swarm_id).toBe('daa-default-swarm');
    }));
    it('should handle agent creation service errors', /*#__PURE__*/_asyncToGenerator(function* () {
      mockDaaService.createAgent.mockRejectedValueOnce(new Error('Agent creation failed'));
      yield expect(daaTools.daa_agent_create({
        id: 'fail-agent'
      })).rejects.toThrow('Agent creation failed');
    }));
  });
  describe('daa_agent_adapt Edge Cases', () => {
    it('should handle successful agent adaptation with minimal parameters', /*#__PURE__*/_asyncToGenerator(function* () {
      const params = {
        agentId: 'adapt-test'
      };
      const result = yield daaTools.daa_agent_adapt(params);
      expect(result).toEqual({
        agent_id: 'adapt-test',
        adaptation_complete: true,
        previous_pattern: 'convergent',
        new_pattern: 'adaptive',
        performance_improvement: 0.15,
        learning_insights: ['Pattern adaptation successful', 'Performance improved'],
        timestamp: expect.any(String)
      });
    }));
    it('should handle adaptation with full feedback', /*#__PURE__*/_asyncToGenerator(function* () {
      const params = {
        agentId: 'detailed-adapt',
        feedback: 'Agent performed well but could improve reasoning speed',
        performanceScore: 0.85,
        suggestions: ['Optimize inference pipeline', 'Increase attention weights']
      };
      const result = yield daaTools.daa_agent_adapt(params);
      expect(result.agent_id).toBe('detailed-adapt');
      expect(result.adaptation_complete).toBe(true);
    }));
    it('should handle missing agent ID error', /*#__PURE__*/_asyncToGenerator(function* () {
      yield expect(daaTools.daa_agent_adapt({})).rejects.toThrow('Agent ID is required');
    }));
    it('should handle adaptation service failures', /*#__PURE__*/_asyncToGenerator(function* () {
      mockDaaService.adaptAgent.mockRejectedValueOnce(new Error('Adaptation failed'));
      yield expect(daaTools.daa_agent_adapt({
        agentId: 'fail-adapt'
      })).rejects.toThrow('Adaptation failed');
    }));
    it('should handle invalid performance scores gracefully', /*#__PURE__*/_asyncToGenerator(function* () {
      const params = {
        agentId: 'invalid-score',
        performanceScore: -0.5 // Invalid negative score
      };

      // Should still work, DAA service should handle validation
      const result = yield daaTools.daa_agent_adapt(params);
      expect(result.agent_id).toBe('invalid-score');
    }));
  });
  describe('daa_workflow_create Edge Cases', () => {
    it('should handle successful workflow creation', /*#__PURE__*/_asyncToGenerator(function* () {
      const params = {
        id: 'test-workflow',
        name: 'Test Workflow',
        steps: [{
          id: 'step1',
          action: 'initialize'
        }, {
          id: 'step2',
          action: 'process'
        }, {
          id: 'step3',
          action: 'finalize'
        }],
        dependencies: {
          step2: ['step1'],
          step3: ['step2']
        }
      };
      const result = yield daaTools.daa_workflow_create(params);
      expect(result).toEqual({
        workflow_id: 'test-workflow',
        name: 'Test Workflow',
        total_steps: 3,
        execution_strategy: 'parallel',
        dependencies_count: 2,
        status: 'created',
        created_at: expect.any(String)
      });
    }));
    it('should handle missing required parameters', /*#__PURE__*/_asyncToGenerator(function* () {
      yield expect(daaTools.daa_workflow_create({})).rejects.toThrow('Workflow ID and name are required');
      yield expect(daaTools.daa_workflow_create({
        id: 'test'
      })).rejects.toThrow('Workflow ID and name are required');
      yield expect(daaTools.daa_workflow_create({
        name: 'test'
      })).rejects.toThrow('Workflow ID and name are required');
    }));
    it('should handle different execution strategies', /*#__PURE__*/_asyncToGenerator(function* () {
      const params = {
        id: 'sequential-workflow',
        name: 'Sequential Test',
        strategy: 'sequential'
      };
      const result = yield daaTools.daa_workflow_create(params);
      expect(result.execution_strategy).toBe('sequential');
    }));
    it('should handle empty steps and dependencies', /*#__PURE__*/_asyncToGenerator(function* () {
      const params = {
        id: 'minimal-workflow',
        name: 'Minimal Workflow'
      };
      const result = yield daaTools.daa_workflow_create(params);
      expect(result.total_steps).toBe(0);
      expect(result.dependencies_count).toBe(0);
    }));
    it('should handle workflow creation service errors', /*#__PURE__*/_asyncToGenerator(function* () {
      mockDaaService.createWorkflow.mockRejectedValueOnce(new Error('Workflow creation failed'));
      yield expect(daaTools.daa_workflow_create({
        id: 'fail-workflow',
        name: 'Failing Workflow'
      })).rejects.toThrow('Workflow creation failed');
    }));
  });
  describe('daa_workflow_execute Edge Cases', () => {
    it('should handle successful workflow execution', /*#__PURE__*/_asyncToGenerator(function* () {
      const params = {
        workflowId: 'execute-test',
        agentIds: ['agent-1', 'agent-2', 'agent-3'],
        parallelExecution: true
      };
      const result = yield daaTools.daa_workflow_execute(params);
      expect(result).toEqual({
        workflow_id: 'execute-test',
        execution_complete: true,
        steps_completed: 5,
        total_steps: 5,
        execution_time_ms: 1250,
        agents_involved: ['agent-1', 'agent-2', 'agent-3'],
        results: expect.any(Array),
        timestamp: expect.any(String)
      });
    }));
    it('should handle missing workflow ID', /*#__PURE__*/_asyncToGenerator(function* () {
      yield expect(daaTools.daa_workflow_execute({})).rejects.toThrow('Workflow ID is required');
    }));
    it('should handle execution with default parameters', /*#__PURE__*/_asyncToGenerator(function* () {
      const params = {
        workflowId: 'default-test'
      };
      const result = yield daaTools.daa_workflow_execute(params);
      expect(result.workflow_id).toBe('default-test');
      expect(result.agents_involved).toEqual(['agent-1', 'agent-2']); // Default from mock
    }));
    it('should handle execution service failures', /*#__PURE__*/_asyncToGenerator(function* () {
      mockDaaService.executeWorkflow.mockRejectedValueOnce(new Error('Execution failed'));
      yield expect(daaTools.daa_workflow_execute({
        workflowId: 'fail-execute'
      })).rejects.toThrow('Execution failed');
    }));
    it('should handle sequential execution mode', /*#__PURE__*/_asyncToGenerator(function* () {
      const params = {
        workflowId: 'sequential-test',
        parallelExecution: false
      };
      const result = yield daaTools.daa_workflow_execute(params);
      expect(result.execution_complete).toBe(true);
    }));
  });
  describe('daa_knowledge_share Edge Cases', () => {
    it('should handle successful knowledge sharing', /*#__PURE__*/_asyncToGenerator(function* () {
      const params = {
        sourceAgentId: 'teacher-agent',
        targetAgentIds: ['student-1', 'student-2', 'student-3'],
        knowledgeDomain: 'natural-language-processing',
        knowledgeContent: {
          concepts: ['tokenization', 'embeddings', 'attention'],
          expertise_level: 'intermediate',
          confidence: 0.92
        }
      };
      const result = yield daaTools.daa_knowledge_share(params);
      expect(result).toEqual({
        source_agent: 'teacher-agent',
        target_agents: ['student-1', 'student-2', 'student-3'],
        knowledge_domain: 'natural-language-processing',
        sharing_complete: true,
        agents_updated: 3,
        knowledge_transfer_rate: 0.95,
        timestamp: expect.any(String)
      });
    }));
    it('should handle missing required parameters', /*#__PURE__*/_asyncToGenerator(function* () {
      yield expect(daaTools.daa_knowledge_share({})).rejects.toThrow('Source and target agent IDs are required');
      yield expect(daaTools.daa_knowledge_share({
        sourceAgentId: 'teacher'
      })).rejects.toThrow('Source and target agent IDs are required');
      yield expect(daaTools.daa_knowledge_share({
        targetAgentIds: ['student']
      })).rejects.toThrow('Source and target agent IDs are required');
    }));
    it('should handle empty target agents list', /*#__PURE__*/_asyncToGenerator(function* () {
      const params = {
        sourceAgentId: 'teacher',
        targetAgentIds: []
      };
      yield expect(daaTools.daa_knowledge_share(params)).rejects.toThrow('Source and target agent IDs are required');
    }));
    it('should handle knowledge sharing service failures', /*#__PURE__*/_asyncToGenerator(function* () {
      mockDaaService.shareKnowledge.mockRejectedValueOnce(new Error('Knowledge sharing failed'));
      yield expect(daaTools.daa_knowledge_share({
        sourceAgentId: 'fail-teacher',
        targetAgentIds: ['student']
      })).rejects.toThrow('Knowledge sharing failed');
    }));
    it('should handle undefined knowledge content', /*#__PURE__*/_asyncToGenerator(function* () {
      const params = {
        sourceAgentId: 'teacher',
        targetAgentIds: ['student'],
        knowledgeContent: undefined
      };
      const result = yield daaTools.daa_knowledge_share(params);
      expect(result.sharing_complete).toBe(true);
    }));
  });
  describe('daa_learning_status Edge Cases', () => {
    it('should handle specific agent learning status', /*#__PURE__*/_asyncToGenerator(function* () {
      const params = {
        agentId: 'learning-agent-1',
        detailed: true
      };
      const result = yield daaTools.daa_learning_status(params);
      expect(result).toEqual({
        agent_id: 'learning-agent-1',
        total_learning_cycles: 42,
        average_proficiency: 0.87,
        knowledge_domains: ['language', 'vision', 'reasoning'],
        adaptation_rate: 0.23,
        neural_models_active: 7,
        cross_session_memory: 1048576,
        performance_trend: 'improving',
        detailed_metrics: {
          accuracy: 0.92,
          speed: 0.85,
          efficiency: 0.78
        },
        timestamp: expect.any(String)
      });
    }));
    it('should handle system-wide learning status', /*#__PURE__*/_asyncToGenerator(function* () {
      const params = {};
      const result = yield daaTools.daa_learning_status(params);
      expect(result.agent_id).toBe('all');
      expect(result.total_learning_cycles).toBe(156);
      expect(result.knowledge_domains).toEqual(['nlp', 'cv', 'rl', 'graph']);
    }));
    it('should handle detailed metrics only when requested', /*#__PURE__*/_asyncToGenerator(function* () {
      const params = {
        agentId: 'test-agent',
        detailed: false
      };
      const result = yield daaTools.daa_learning_status(params);
      expect(result).not.toHaveProperty('detailed_metrics');
    }));
    it('should handle learning status service failures', /*#__PURE__*/_asyncToGenerator(function* () {
      mockDaaService.getAgentLearningStatus.mockRejectedValueOnce(new Error('Status unavailable'));
      yield expect(daaTools.daa_learning_status({
        agentId: 'fail-agent'
      })).rejects.toThrow('Status unavailable');
    }));
    it('should handle system learning status service failures', /*#__PURE__*/_asyncToGenerator(function* () {
      mockDaaService.getSystemLearningStatus.mockRejectedValueOnce(new Error('System status unavailable'));
      yield expect(daaTools.daa_learning_status({})).rejects.toThrow('System status unavailable');
    }));
  });
  describe('daa_cognitive_pattern Edge Cases', () => {
    it('should handle cognitive pattern analysis', /*#__PURE__*/_asyncToGenerator(function* () {
      const params = {
        agentId: 'analyze-agent',
        analyze: true
      };
      const result = yield daaTools.daa_cognitive_pattern(params);
      expect(result).toEqual({
        analysis_type: 'cognitive_pattern',
        agent_id: 'analyze-agent',
        current_patterns: ['convergent', 'systems', 'adaptive'],
        pattern_effectiveness: {
          convergent: 0.89,
          systems: 0.76,
          adaptive: 0.91
        },
        recommendations: ['Increase adaptive pattern usage', 'Optimize convergent thinking'],
        optimization_potential: 0.85,
        timestamp: expect.any(String)
      });
    }));
    it('should handle cognitive pattern change', /*#__PURE__*/_asyncToGenerator(function* () {
      const params = {
        agentId: 'pattern-agent',
        pattern: 'lateral',
        analyze: false
      };
      const result = yield daaTools.daa_cognitive_pattern(params);
      expect(result).toEqual({
        agent_id: 'pattern-agent',
        previous_pattern: 'convergent',
        new_pattern: 'lateral',
        adaptation_success: true,
        expected_improvement: 0.12,
        timestamp: expect.any(String)
      });
    }));
    it('should handle pattern change without agent ID', /*#__PURE__*/_asyncToGenerator(function* () {
      const params = {
        pattern: 'divergent',
        analyze: false
      };
      yield expect(daaTools.daa_cognitive_pattern(params)).rejects.toThrow('Agent ID and pattern are required for pattern change');
    }));
    it('should handle pattern change without pattern', /*#__PURE__*/_asyncToGenerator(function* () {
      const params = {
        agentId: 'test-agent',
        analyze: false
      };
      yield expect(daaTools.daa_cognitive_pattern(params)).rejects.toThrow('Agent ID and pattern are required for pattern change');
    }));
    it('should handle analysis service failures', /*#__PURE__*/_asyncToGenerator(function* () {
      mockDaaService.analyzeCognitivePatterns.mockRejectedValueOnce(new Error('Analysis failed'));
      yield expect(daaTools.daa_cognitive_pattern({
        agentId: 'fail-agent',
        analyze: true
      })).rejects.toThrow('Analysis failed');
    }));
    it('should handle pattern setting service failures', /*#__PURE__*/_asyncToGenerator(function* () {
      mockDaaService.setCognitivePattern.mockRejectedValueOnce(new Error('Pattern change failed'));
      yield expect(daaTools.daa_cognitive_pattern({
        agentId: 'fail-agent',
        pattern: 'adaptive'
      })).rejects.toThrow('Pattern change failed');
    }));
  });
  describe('daa_meta_learning Edge Cases', () => {
    it('should handle successful meta-learning transfer', /*#__PURE__*/_asyncToGenerator(function* () {
      const params = {
        sourceDomain: 'computer-vision',
        targetDomain: 'natural-language-processing',
        transferMode: 'adaptive',
        agentIds: ['agent-1', 'agent-2', 'agent-3']
      };
      const result = yield daaTools.daa_meta_learning(params);
      expect(result).toEqual({
        meta_learning_complete: true,
        source_domain: 'computer-vision',
        target_domain: 'natural-language-processing',
        transfer_mode: 'adaptive',
        knowledge_transferred: 47,
        agents_updated: 8,
        domain_proficiency_gain: 0.18,
        cross_domain_insights: ['Cross-domain transfer successful', 'New patterns emerged'],
        timestamp: expect.any(String)
      });
    }));
    it('should handle meta-learning with default parameters', /*#__PURE__*/_asyncToGenerator(function* () {
      const params = {
        sourceDomain: 'reinforcement-learning',
        targetDomain: 'supervised-learning'
      };
      const result = yield daaTools.daa_meta_learning(params);
      expect(result.transfer_mode).toBe('adaptive');
      expect(result.meta_learning_complete).toBe(true);
    }));
    it('should handle different transfer modes', /*#__PURE__*/_asyncToGenerator(function* () {
      const params = {
        sourceDomain: 'domain-a',
        targetDomain: 'domain-b',
        transferMode: 'direct'
      };
      const result = yield daaTools.daa_meta_learning(params);
      expect(result.transfer_mode).toBe('direct');
    }));
    it('should handle empty agent IDs list', /*#__PURE__*/_asyncToGenerator(function* () {
      const params = {
        sourceDomain: 'domain-a',
        targetDomain: 'domain-b',
        agentIds: []
      };
      const result = yield daaTools.daa_meta_learning(params);
      expect(result.meta_learning_complete).toBe(true);
    }));
    it('should handle meta-learning service failures', /*#__PURE__*/_asyncToGenerator(function* () {
      mockDaaService.performMetaLearning.mockRejectedValueOnce(new Error('Meta-learning failed'));
      yield expect(daaTools.daa_meta_learning({
        sourceDomain: 'fail-source',
        targetDomain: 'fail-target'
      })).rejects.toThrow('Meta-learning failed');
    }));
  });
  describe('daa_performance_metrics Edge Cases', () => {
    it('should handle comprehensive performance metrics', /*#__PURE__*/_asyncToGenerator(function* () {
      const params = {
        category: 'all',
        timeRange: '24h'
      };
      const result = yield daaTools.daa_performance_metrics(params);
      expect(result).toEqual({
        metrics_category: 'all',
        time_range: '24h',
        system_metrics: {
          total_agents: 15,
          active_agents: 12,
          autonomous_tasks_completed: 1847,
          average_task_time_ms: 2341,
          learning_cycles_completed: 89
        },
        performance_metrics: {
          task_success_rate: 0.94,
          adaptation_effectiveness: 0.87,
          knowledge_sharing_events: 234,
          cross_domain_transfers: 45
        },
        efficiency_metrics: {
          token_reduction: 0.32,
          parallel_execution_gain: 2.8,
          memory_optimization: 0.45
        },
        neural_metrics: {
          models_active: 9,
          inference_speed_ms: 15.6,
          training_iterations: 12847
        },
        timestamp: expect.any(String)
      });
    }));
    it('should handle different metric categories', /*#__PURE__*/_asyncToGenerator(function* () {
      const categories = ['system', 'performance', 'efficiency', 'neural'];
      for (const category of categories) {
        const result = yield daaTools.daa_performance_metrics({
          category
        });
        expect(result.metrics_category).toBe(category);
      }
    }));
    it('should handle default parameters', /*#__PURE__*/_asyncToGenerator(function* () {
      const result = yield daaTools.daa_performance_metrics({});
      expect(result.metrics_category).toBe('all');
      expect(result.time_range).toBe('1h');
    }));
    it('should handle performance metrics service failures', /*#__PURE__*/_asyncToGenerator(function* () {
      mockDaaService.getPerformanceMetrics.mockRejectedValueOnce(new Error('Metrics unavailable'));
      yield expect(daaTools.daa_performance_metrics({
        category: 'fail'
      })).rejects.toThrow('Metrics unavailable');
    }));
  });
  describe('Tool Definitions Edge Cases', () => {
    it('should return valid tool definitions', () => {
      const definitions = daaTools.getToolDefinitions();
      expect(definitions).toBeInstanceOf(Array);
      expect(definitions).toHaveLength(10);
      const toolNames = definitions.map(def => def.name);
      expect(toolNames).toEqual(['daa_init', 'daa_agent_create', 'daa_agent_adapt', 'daa_workflow_create', 'daa_workflow_execute', 'daa_knowledge_share', 'daa_learning_status', 'daa_cognitive_pattern', 'daa_meta_learning', 'daa_performance_metrics']);
    });
    it('should have valid schemas for all tools', () => {
      const definitions = daaTools.getToolDefinitions();
      definitions.forEach(definition => {
        expect(definition).toHaveProperty('name');
        expect(definition).toHaveProperty('description');
        expect(definition).toHaveProperty('inputSchema');
        expect(definition.inputSchema).toHaveProperty('type');
        expect(definition.inputSchema.type).toBe('object');
      });
    });
    it('should handle required parameters correctly', () => {
      const definitions = daaTools.getToolDefinitions();
      const agentCreateDef = definitions.find(def => def.name === 'daa_agent_create');
      expect(agentCreateDef.inputSchema.required).toEqual(['id']);
      const workflowCreateDef = definitions.find(def => def.name === 'daa_workflow_create');
      expect(workflowCreateDef.inputSchema.required).toEqual(['id', 'name']);
    });
  });
  describe('Singleton Instance Edge Cases', () => {
    it('should provide singleton instance', () => {
      expect(daaMcpTools).toBeInstanceOf(DAA_MCPTools);
      expect(daaMcpTools.mcpTools).toBe(null); // Initialized with null
    });
    it('should handle singleton operations without enhanced MCP tools', /*#__PURE__*/_asyncToGenerator(function* () {
      // This should work even without mcpTools set
      const result = yield daaMcpTools.daa_init({});
      expect(result.initialized).toBe(true);
    }));
  });
  describe('End-to-End DAA Workflow Tests', () => {
    it('should complete full DAA agent lifecycle', /*#__PURE__*/_asyncToGenerator(function* () {
      // Step 1: Initialize DAA service
      const initResult = yield daaTools.daa_init({
        enableLearning: true,
        enableCoordination: true
      });
      expect(initResult.initialized).toBe(true);

      // Step 2: Create multiple agents
      const agentIds = [];
      for (let i = 0; i < 3; i++) {
        const createResult = yield daaTools.daa_agent_create({
          id: `e2e-agent-${i}`,
          capabilities: [`capability-${i}`, 'learning'],
          cognitivePattern: ['convergent', 'divergent', 'adaptive'][i],
          learningRate: 0.001 + i * 0.001,
          enableMemory: true
        });
        agentIds.push(createResult.agent_id);
        expect(createResult.status).toBe('active');
      }

      // Step 3: Create and execute workflow
      const workflowResult = yield daaTools.daa_workflow_create({
        id: 'e2e-workflow',
        name: 'End-to-End Test Workflow',
        steps: [{
          id: 'analyze',
          action: 'data_analysis'
        }, {
          id: 'learn',
          action: 'pattern_learning'
        }, {
          id: 'adapt',
          action: 'behavior_adaptation'
        }],
        strategy: 'parallel'
      });
      expect(workflowResult.workflow_id).toBe('e2e-workflow');
      const executeResult = yield daaTools.daa_workflow_execute({
        workflowId: 'e2e-workflow',
        agentIds,
        parallelExecution: true
      });
      expect(executeResult.execution_complete).toBe(true);

      // Step 4: Knowledge sharing between agents
      const shareResult = yield daaTools.daa_knowledge_share({
        sourceAgentId: agentIds[0],
        targetAgentIds: agentIds.slice(1),
        knowledgeDomain: 'test-domain',
        knowledgeContent: {
          insights: ['pattern-1', 'pattern-2']
        }
      });
      expect(shareResult.sharing_complete).toBe(true);

      // Step 5: Adapt agents based on performance
      for (const agentId of agentIds) {
        const adaptResult = yield daaTools.daa_agent_adapt({
          agentId,
          feedback: 'Good performance, continue learning',
          performanceScore: 0.8 + Math.random() * 0.2,
          suggestions: ['Increase learning rate', 'Focus on weak areas']
        });
        expect(adaptResult.adaptation_complete).toBe(true);
      }

      // Step 6: Check learning status
      const statusResult = yield daaTools.daa_learning_status({
        detailed: true
      });
      expect(statusResult.agent_id).toBe('all');
      expect(statusResult).toHaveProperty('detailed_metrics');

      // Step 7: Get performance metrics
      const metricsResult = yield daaTools.daa_performance_metrics({
        category: 'all',
        timeRange: '1h'
      });
      expect(metricsResult.system_metrics.total_agents).toBeGreaterThan(0);
    }));
    it('should handle concurrent DAA operations', /*#__PURE__*/_asyncToGenerator(function* () {
      // Initialize once
      yield daaTools.daa_init({});

      // Create multiple agents concurrently
      const agentPromises = Array.from({
        length: 5
      }, (_, i) => daaTools.daa_agent_create({
        id: `concurrent-agent-${i}`,
        capabilities: [`concurrent-${i}`],
        cognitivePattern: 'adaptive'
      }));
      const agents = yield Promise.all(agentPromises);
      expect(agents).toHaveLength(5);

      // Perform concurrent adaptations
      const adaptPromises = agents.map(agent => daaTools.daa_agent_adapt({
        agentId: agent.agent_id,
        feedback: 'Concurrent adaptation test',
        performanceScore: Math.random()
      }));
      const adaptResults = yield Promise.all(adaptPromises);
      expect(adaptResults).toHaveLength(5);
      adaptResults.forEach(result => {
        expect(result.adaptation_complete).toBe(true);
      });
    }));
    it('should handle error recovery in complex DAA workflows', /*#__PURE__*/_asyncToGenerator(function* () {
      yield daaTools.daa_init({});

      // Create agents with some expected to fail
      const agentPromises = Array.from({
        length: 5
      }, /*#__PURE__*/function () {
        var _ref67 = _asyncToGenerator(function* (_, i) {
          try {
            if (i === 2) {
              // Mock a failure
              mockDaaService.createAgent.mockRejectedValueOnce(new Error('Agent creation failed'));
            }
            return yield daaTools.daa_agent_create({
              id: `recovery-agent-${i}`,
              capabilities: [`recovery-${i}`]
            });
          } catch (error) {
            return {
              error: error.message,
              failed: true
            };
          }
        });
        return function (_x16, _x17) {
          return _ref67.apply(this, arguments);
        };
      }());
      const results = yield Promise.allSettled(agentPromises);
      const successful = results.filter(r => r.status === 'fulfilled' && !r.value.failed);
      const failed = results.filter(r => {
        var _r$value;
        return r.status === 'rejected' || ((_r$value = r.value) === null || _r$value === void 0 ? void 0 : _r$value.failed);
      });
      expect(successful.length).toBeGreaterThan(0);
      expect(failed.length).toBeGreaterThan(0);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,