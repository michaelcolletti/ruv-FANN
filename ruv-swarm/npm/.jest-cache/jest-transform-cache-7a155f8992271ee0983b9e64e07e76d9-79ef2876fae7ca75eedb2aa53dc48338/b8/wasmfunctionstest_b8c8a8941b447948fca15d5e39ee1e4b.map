{"version":3,"names":["describe","it","expect","beforeAll","afterAll","WasmModuleLoader","performance","wasmModule","loader","_asyncToGenerator","loadModule","cleanup","toBeDefined","exports","simdSupported","detectSIMDSupport","toBe","version","getVersion","toMatch","stats","getMemoryUsage","toHaveProperty","heapUsed","toBeGreaterThanOrEqual","heapTotal","toBeGreaterThan","agentId","agentType","capabilities","createAgent","status","getAgentStatus","newState","currentTask","result","updateAgentState","agents","listAgents","Array","isArray","length","some","a","id","removeAgent","swarmId","config","name","topology","maxAgents","createSwarm","getSwarmStatus","addAgentToSwarm","agentCount","task","description","priority","requiredCapabilities","taskId","orchestrateTask","metrics","getSwarmMetrics","removeSwarm","toThrow","networkId","type","inputSize","hiddenSize","outputSize","layers","createNeuralNetwork","arch","getNetworkArchitecture","input","Float32Array","fill","output","forward","toBeInstanceOf","trainingData","inputs","targets","loss","train","epochs","learningRate","weights","getNetworkWeights","newNetworkId","setNetworkWeights","removeNeuralNetwork","size","ptr","allocate","deallocate","data","allocateFloat32Array","copyFloat32ArrayToWasm","copyFloat32ArrayFromWasm","toEqual","deallocateFloat32Array","memoryBefore","allocations","i","push","memoryAfter","forEach","collectGarbage","console","log","b","simdVectorAdd","simdMatMul","nonSimdStart","now","nonSimdResult","vectorAddNonSIMD","nonSimdTime","simdStart","simdResult","vectorAddSIMD","simdTime","toFixed","toBeLessThan","invalidConfig","hugeSize","Number","MAX_SAFE_INTEGER","iterations","start","time","avgTime","network","throughput"],"sources":["wasm-functions.test.js"],"sourcesContent":["/**\n * Unit tests for WASM functions\n * Tests all exported WASM functions with comprehensive coverage\n */\n\nimport { describe, it, expect, beforeAll, afterAll } from 'vitest';\nimport { WasmModuleLoader } from '../../src/wasm-loader.js';\nimport { performance } from 'perf_hooks';\n\ndescribe('WASM Functions Unit Tests', () => {\n  let wasmModule;\n  let loader;\n\n  beforeAll(async () => {\n    loader = new WasmModuleLoader();\n    wasmModule = await loader.loadModule('core');\n  });\n\n  afterAll(async () => {\n    if (loader) {\n      await loader.cleanup();\n    }\n  });\n\n  describe('Core WASM Functions', () => {\n    it('should initialize WASM module correctly', () => {\n      expect(wasmModule).toBeDefined();\n      expect(wasmModule.exports).toBeDefined();\n    });\n\n    it('should detect SIMD support', () => {\n      const simdSupported = wasmModule.exports.detectSIMDSupport();\n      expect(typeof simdSupported).toBe('boolean');\n    });\n\n    it('should get version information', () => {\n      const version = wasmModule.exports.getVersion();\n      expect(version).toMatch(/^\\d+\\.\\d+\\.\\d+$/);\n    });\n\n    it('should get memory usage statistics', () => {\n      const stats = wasmModule.exports.getMemoryUsage();\n      expect(stats).toHaveProperty('heapUsed');\n      expect(stats).toHaveProperty('heapTotal');\n      expect(stats.heapUsed).toBeGreaterThanOrEqual(0);\n      expect(stats.heapTotal).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Agent Functions', () => {\n    let agentId;\n\n    it('should create an agent', () => {\n      const agentType = 'researcher';\n      const capabilities = ['research', 'analysis'];\n      agentId = wasmModule.exports.createAgent(agentType, capabilities);\n      expect(agentId).toBeDefined();\n      expect(typeof agentId).toBe('string');\n    });\n\n    it('should get agent status', () => {\n      expect(agentId).toBeDefined();\n      const status = wasmModule.exports.getAgentStatus(agentId);\n      expect(status).toHaveProperty('id', agentId);\n      expect(status).toHaveProperty('type', 'researcher');\n      expect(status).toHaveProperty('status');\n      expect(status).toHaveProperty('capabilities');\n    });\n\n    it('should update agent state', () => {\n      expect(agentId).toBeDefined();\n      const newState = { status: 'busy', currentTask: 'test-task-1' };\n      const result = wasmModule.exports.updateAgentState(agentId, newState);\n      expect(result).toBe(true);\n      \n      const status = wasmModule.exports.getAgentStatus(agentId);\n      expect(status.status).toBe('busy');\n    });\n\n    it('should list all agents', () => {\n      const agents = wasmModule.exports.listAgents();\n      expect(Array.isArray(agents)).toBe(true);\n      expect(agents.length).toBeGreaterThan(0);\n      expect(agents.some(a => a.id === agentId)).toBe(true);\n    });\n\n    it('should remove an agent', () => {\n      expect(agentId).toBeDefined();\n      const result = wasmModule.exports.removeAgent(agentId);\n      expect(result).toBe(true);\n      \n      const agents = wasmModule.exports.listAgents();\n      expect(agents.some(a => a.id === agentId)).toBe(false);\n    });\n  });\n\n  describe('Swarm Functions', () => {\n    let swarmId;\n\n    it('should create a swarm', () => {\n      const config = {\n        name: 'test-swarm',\n        topology: 'mesh',\n        maxAgents: 10\n      };\n      swarmId = wasmModule.exports.createSwarm(config);\n      expect(swarmId).toBeDefined();\n      expect(typeof swarmId).toBe('string');\n    });\n\n    it('should get swarm status', () => {\n      expect(swarmId).toBeDefined();\n      const status = wasmModule.exports.getSwarmStatus(swarmId);\n      expect(status).toHaveProperty('id', swarmId);\n      expect(status).toHaveProperty('name', 'test-swarm');\n      expect(status).toHaveProperty('topology', 'mesh');\n      expect(status).toHaveProperty('agentCount', 0);\n      expect(status).toHaveProperty('maxAgents', 10);\n    });\n\n    it('should add agent to swarm', () => {\n      expect(swarmId).toBeDefined();\n      const agentId = wasmModule.exports.createAgent('coder', ['coding', 'testing']);\n      const result = wasmModule.exports.addAgentToSwarm(swarmId, agentId);\n      expect(result).toBe(true);\n      \n      const status = wasmModule.exports.getSwarmStatus(swarmId);\n      expect(status.agentCount).toBe(1);\n    });\n\n    it('should orchestrate task in swarm', async () => {\n      expect(swarmId).toBeDefined();\n      const task = {\n        description: 'Test task',\n        priority: 'high',\n        requiredCapabilities: ['coding']\n      };\n      \n      const taskId = await wasmModule.exports.orchestrateTask(swarmId, task);\n      expect(taskId).toBeDefined();\n      expect(typeof taskId).toBe('string');\n    });\n\n    it('should get swarm metrics', () => {\n      expect(swarmId).toBeDefined();\n      const metrics = wasmModule.exports.getSwarmMetrics(swarmId);\n      expect(metrics).toHaveProperty('tasksCompleted');\n      expect(metrics).toHaveProperty('tasksInProgress');\n      expect(metrics).toHaveProperty('averageCompletionTime');\n      expect(metrics).toHaveProperty('agentUtilization');\n    });\n\n    it('should remove a swarm', () => {\n      expect(swarmId).toBeDefined();\n      const result = wasmModule.exports.removeSwarm(swarmId);\n      expect(result).toBe(true);\n      \n      expect(() => wasmModule.exports.getSwarmStatus(swarmId)).toThrow();\n    });\n  });\n\n  describe('Neural Network Functions', () => {\n    let networkId;\n\n    it('should create a neural network', () => {\n      const config = {\n        type: 'lstm',\n        inputSize: 10,\n        hiddenSize: 20,\n        outputSize: 5,\n        layers: 2\n      };\n      networkId = wasmModule.exports.createNeuralNetwork(config);\n      expect(networkId).toBeDefined();\n      expect(typeof networkId).toBe('string');\n    });\n\n    it('should get network architecture', () => {\n      expect(networkId).toBeDefined();\n      const arch = wasmModule.exports.getNetworkArchitecture(networkId);\n      expect(arch).toHaveProperty('type', 'lstm');\n      expect(arch).toHaveProperty('layers');\n      expect(arch.layers.length).toBe(2);\n    });\n\n    it('should perform forward pass', () => {\n      expect(networkId).toBeDefined();\n      const input = new Float32Array(10).fill(0.5);\n      const output = wasmModule.exports.forward(networkId, input);\n      expect(output).toBeInstanceOf(Float32Array);\n      expect(output.length).toBe(5);\n    });\n\n    it('should train network', () => {\n      expect(networkId).toBeDefined();\n      const trainingData = {\n        inputs: [new Float32Array(10).fill(0.5)],\n        targets: [new Float32Array(5).fill(0.8)]\n      };\n      const loss = wasmModule.exports.train(networkId, trainingData, { epochs: 1, learningRate: 0.01 });\n      expect(typeof loss).toBe('number');\n      expect(loss).toBeGreaterThanOrEqual(0);\n    });\n\n    it('should save and load network weights', () => {\n      expect(networkId).toBeDefined();\n      const weights = wasmModule.exports.getNetworkWeights(networkId);\n      expect(weights).toBeInstanceOf(Float32Array);\n      \n      const newNetworkId = wasmModule.exports.createNeuralNetwork({\n        type: 'lstm',\n        inputSize: 10,\n        hiddenSize: 20,\n        outputSize: 5,\n        layers: 2\n      });\n      \n      const result = wasmModule.exports.setNetworkWeights(newNetworkId, weights);\n      expect(result).toBe(true);\n    });\n\n    it('should remove a neural network', () => {\n      expect(networkId).toBeDefined();\n      const result = wasmModule.exports.removeNeuralNetwork(networkId);\n      expect(result).toBe(true);\n    });\n  });\n\n  describe('Memory Management Functions', () => {\n    it('should allocate memory', () => {\n      const size = 1024;\n      const ptr = wasmModule.exports.allocate(size);\n      expect(ptr).toBeGreaterThan(0);\n      \n      wasmModule.exports.deallocate(ptr);\n    });\n\n    it('should copy memory between JS and WASM', () => {\n      const data = new Float32Array([1.0, 2.0, 3.0, 4.0, 5.0]);\n      const ptr = wasmModule.exports.allocateFloat32Array(data.length);\n      \n      wasmModule.exports.copyFloat32ArrayToWasm(data, ptr);\n      const result = wasmModule.exports.copyFloat32ArrayFromWasm(ptr, data.length);\n      \n      expect(result).toEqual(data);\n      wasmModule.exports.deallocateFloat32Array(ptr);\n    });\n\n    it('should handle memory pressure', () => {\n      const memoryBefore = wasmModule.exports.getMemoryUsage();\n      \n      // Allocate a large amount of memory\n      const allocations = [];\n      for (let i = 0; i < 100; i++) {\n        allocations.push(wasmModule.exports.allocate(1024 * 1024)); // 1MB each\n      }\n      \n      const memoryAfter = wasmModule.exports.getMemoryUsage();\n      expect(memoryAfter.heapUsed).toBeGreaterThan(memoryBefore.heapUsed);\n      \n      // Cleanup\n      allocations.forEach(ptr => wasmModule.exports.deallocate(ptr));\n      \n      // Force garbage collection if available\n      if (wasmModule.exports.collectGarbage) {\n        wasmModule.exports.collectGarbage();\n      }\n    });\n  });\n\n  describe('SIMD Operations', () => {\n    it('should perform SIMD vector addition', () => {\n      if (!wasmModule.exports.detectSIMDSupport()) {\n        console.log('SIMD not supported, skipping test');\n        return;\n      }\n      \n      const a = new Float32Array([1, 2, 3, 4]);\n      const b = new Float32Array([5, 6, 7, 8]);\n      const result = wasmModule.exports.simdVectorAdd(a, b);\n      \n      expect(result).toEqual(new Float32Array([6, 8, 10, 12]));\n    });\n\n    it('should perform SIMD matrix multiplication', () => {\n      if (!wasmModule.exports.detectSIMDSupport()) {\n        console.log('SIMD not supported, skipping test');\n        return;\n      }\n      \n      const a = new Float32Array([1, 2, 3, 4]); // 2x2 matrix\n      const b = new Float32Array([5, 6, 7, 8]); // 2x2 matrix\n      const result = wasmModule.exports.simdMatMul(a, 2, 2, b, 2, 2);\n      \n      expect(result).toEqual(new Float32Array([19, 22, 43, 50]));\n    });\n\n    it('should benchmark SIMD vs non-SIMD operations', () => {\n      const size = 1000000;\n      const a = new Float32Array(size).fill(1.0);\n      const b = new Float32Array(size).fill(2.0);\n      \n      // Non-SIMD benchmark\n      const nonSimdStart = performance.now();\n      const nonSimdResult = wasmModule.exports.vectorAddNonSIMD(a, b);\n      const nonSimdTime = performance.now() - nonSimdStart;\n      \n      // SIMD benchmark (if supported)\n      if (wasmModule.exports.detectSIMDSupport()) {\n        const simdStart = performance.now();\n        const simdResult = wasmModule.exports.vectorAddSIMD(a, b);\n        const simdTime = performance.now() - simdStart;\n        \n        console.log(`Non-SIMD time: ${nonSimdTime.toFixed(2)}ms`);\n        console.log(`SIMD time: ${simdTime.toFixed(2)}ms`);\n        console.log(`Speedup: ${(nonSimdTime / simdTime).toFixed(2)}x`);\n        \n        expect(simdTime).toBeLessThan(nonSimdTime);\n      }\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle invalid agent ID', () => {\n      expect(() => wasmModule.exports.getAgentStatus('invalid-id')).toThrow();\n    });\n\n    it('should handle invalid swarm configuration', () => {\n      const invalidConfig = {\n        name: '',\n        topology: 'invalid',\n        maxAgents: -1\n      };\n      expect(() => wasmModule.exports.createSwarm(invalidConfig)).toThrow();\n    });\n\n    it('should handle memory allocation failures', () => {\n      const hugeSize = Number.MAX_SAFE_INTEGER;\n      expect(() => wasmModule.exports.allocate(hugeSize)).toThrow();\n    });\n\n    it('should handle neural network errors gracefully', () => {\n      const invalidConfig = {\n        type: 'unknown',\n        inputSize: -1,\n        hiddenSize: 0,\n        outputSize: 0\n      };\n      expect(() => wasmModule.exports.createNeuralNetwork(invalidConfig)).toThrow();\n    });\n  });\n\n  describe('Performance Benchmarks', () => {\n    it('should benchmark agent creation performance', () => {\n      const iterations = 1000;\n      const start = performance.now();\n      \n      for (let i = 0; i < iterations; i++) {\n        const agentId = wasmModule.exports.createAgent('researcher', ['research']);\n        wasmModule.exports.removeAgent(agentId);\n      }\n      \n      const time = performance.now() - start;\n      const avgTime = time / iterations;\n      \n      console.log(`Agent creation average time: ${avgTime.toFixed(3)}ms`);\n      expect(avgTime).toBeLessThan(1); // Should be less than 1ms per agent\n    });\n\n    it('should benchmark neural network inference', () => {\n      const network = wasmModule.exports.createNeuralNetwork({\n        type: 'mlp',\n        inputSize: 100,\n        hiddenSize: 50,\n        outputSize: 10,\n        layers: 3\n      });\n      \n      const input = new Float32Array(100).fill(0.5);\n      const iterations = 1000;\n      \n      const start = performance.now();\n      for (let i = 0; i < iterations; i++) {\n        wasmModule.exports.forward(network, input);\n      }\n      const time = performance.now() - start;\n      \n      const avgTime = time / iterations;\n      console.log(`Neural network inference average time: ${avgTime.toFixed(3)}ms`);\n      expect(avgTime).toBeLessThan(0.5); // Should be less than 0.5ms per inference\n      \n      wasmModule.exports.removeNeuralNetwork(network);\n    });\n\n    it('should benchmark memory operations', () => {\n      const size = 1024 * 1024; // 1MB\n      const data = new Float32Array(size / 4).fill(1.0);\n      const iterations = 100;\n      \n      const start = performance.now();\n      for (let i = 0; i < iterations; i++) {\n        const ptr = wasmModule.exports.allocateFloat32Array(data.length);\n        wasmModule.exports.copyFloat32ArrayToWasm(data, ptr);\n        const result = wasmModule.exports.copyFloat32ArrayFromWasm(ptr, data.length);\n        wasmModule.exports.deallocateFloat32Array(ptr);\n      }\n      const time = performance.now() - start;\n      \n      const avgTime = time / iterations;\n      const throughput = (size * iterations) / (time / 1000) / (1024 * 1024); // MB/s\n      \n      console.log(`Memory operation average time: ${avgTime.toFixed(3)}ms`);\n      console.log(`Memory throughput: ${throughput.toFixed(2)} MB/s`);\n      expect(throughput).toBeGreaterThan(100); // Should be at least 100 MB/s\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}