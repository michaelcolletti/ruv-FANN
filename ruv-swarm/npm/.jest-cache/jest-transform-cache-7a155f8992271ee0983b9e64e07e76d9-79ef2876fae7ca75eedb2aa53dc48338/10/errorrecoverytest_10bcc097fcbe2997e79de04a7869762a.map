{"version":3,"names":["expect","require","sinon","RuvSwarm","Agent","Database","EventEmitter","describe","sandbox","swarm","db","beforeEach","createSandbox","afterEach","_asyncToGenerator","shutdown","open","close","restore","it","init","topology","resilience","enabled","retryAttempts","agents","Promise","all","spawnAgent","type","failingAgent","stub","rejects","Error","task","orchestrateTask","strategy","faultTolerant","taskStatus","i","getTaskStatus","id","status","resolve","setTimeout","to","equal","failedAgents","include","recoveryActions","have","lengthOf","at","least","result","exist","cascadeProtection","isolationMode","coordinator","midLevel","parentId","workers","coordinatorId","recoveryEvents","on","event","push","getStatus","activeAgents","filter","a","deep","members","reassignedWorkers","e","circuitBreaker","threshold","timeout","halfOpenRetries","agent","callCount","failingService","callsFake","success","callService","results","executeAgentTask","useCircuitBreaker","error","message","failures","r","circuitOpenErrors","f","includes","successes","mockDb","prepare","failureCount","query","run","changes","get","persistence","retryOnFailure","maxRetries","database","persistent","be","greaterThan","wal","checkpoint","tasks","_forceShutdown","recoveredSwarm","recoverFromWAL","recoveredTasks","getAllTasks","corruptDb","exec","initResult","handleCorruption","true","corruptedEntries","recoveryMode","network","partitionTolerant","consensusProtocol","partition1","partition","partition2","simulatePartition","task1","task2","healPartition","allTasks","conflicts","getConflictLog","an","length","forEach","conflict","property","retryPolicy","initialDelay","maxDelay","backoffMultiplier","maxAttempts","attempts","flakyNetwork","_network","startTime","Date","now","sendAgentMessage","data","elapsed","messageQueue","maxSize","overflowStrategy","persistQueue","messages","broadcastMessage","priority","queueStats","getQueueStats","currentSize","dropped","overflowEvents","remainingMessages","getQueuedMessages","highPriorityCount","m","resourceLimits","maxMemory","maxAgents","gcInterval","initialMemory","process","memoryUsage","heapUsed","cycle","ephemeral","map","Buffer","alloc","destroyAgent","global","gc","finalMemory","memoryGrowth","lessThan","loadBalancing","degradationThreshold","capacity","estimatedLoad","degradationEvents","allSettled","completed","rejected","highPriorityResults","slice","highPriorityCompleted"],"sources":["error-recovery.test.js"],"sourcesContent":["const { expect } = require('chai');\nconst sinon = require('sinon');\nconst RuvSwarm = require('../../../../src/core/ruv-swarm');\nconst Agent = require('../../../../src/agent');\nconst Database = require('better-sqlite3');\nconst EventEmitter = require('events');\n\ndescribe('Error Recovery and Resilience Integration', () => {\n  let sandbox;\n  let swarm;\n  let db;\n\n  beforeEach(() => {\n    sandbox = sinon.createSandbox();\n  });\n\n  afterEach(async () => {\n    if (swarm) {\n      await swarm.shutdown();\n    }\n    if (db && db.open) {\n      db.close();\n    }\n    sandbox.restore();\n  });\n\n  describe('Component Failure Recovery', () => {\n    it('should recover from agent failures gracefully', async () => {\n      swarm = new RuvSwarm();\n      await swarm.init({ \n        topology: 'mesh',\n        resilience: { enabled: true, retryAttempts: 3 }\n      });\n\n      // Spawn multiple agents\n      const agents = await Promise.all([\n        swarm.spawnAgent({ type: 'coder' }),\n        swarm.spawnAgent({ type: 'coder' }),\n        swarm.spawnAgent({ type: 'coder' })\n      ]);\n\n      // Simulate agent failure\n      const failingAgent = agents[1];\n      sandbox.stub(failingAgent, 'executeTask').rejects(new Error('Agent crashed'));\n\n      // Orchestrate task\n      const task = await swarm.orchestrateTask({\n        task: 'Process data with fault tolerance',\n        strategy: 'parallel',\n        faultTolerant: true\n      });\n\n      // Wait for task completion\n      let taskStatus;\n      for (let i = 0; i < 10; i++) {\n        taskStatus = await swarm.getTaskStatus(task.id);\n        if (taskStatus.status === 'completed' || taskStatus.status === 'failed') break;\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n\n      // Verify task completed despite agent failure\n      expect(taskStatus.status).to.equal('completed');\n      expect(taskStatus.failedAgents).to.include(failingAgent.id);\n      expect(taskStatus.recoveryActions).to.have.lengthOf.at.least(1);\n      expect(taskStatus.result).to.exist;\n    });\n\n    it('should handle cascading failures', async () => {\n      swarm = new RuvSwarm();\n      await swarm.init({ \n        topology: 'hierarchical',\n        resilience: { \n          enabled: true,\n          cascadeProtection: true,\n          isolationMode: 'strict'\n        }\n      });\n\n      // Create hierarchy\n      const coordinator = await swarm.spawnAgent({ type: 'coordinator' });\n      const midLevel = await Promise.all([\n        swarm.spawnAgent({ type: 'analyst', parentId: coordinator.id }),\n        swarm.spawnAgent({ type: 'analyst', parentId: coordinator.id })\n      ]);\n      const workers = await Promise.all([\n        swarm.spawnAgent({ type: 'coder', parentId: midLevel[0].id }),\n        swarm.spawnAgent({ type: 'coder', parentId: midLevel[0].id }),\n        swarm.spawnAgent({ type: 'coder', parentId: midLevel[1].id })\n      ]);\n\n      // Simulate mid-level failure\n      sandbox.stub(midLevel[0], 'executeTask').rejects(new Error('Mid-level crash'));\n      \n      // Execute hierarchical task\n      const task = await swarm.orchestrateTask({\n        task: 'Hierarchical processing with failure',\n        coordinatorId: coordinator.id,\n        cascadeProtection: true\n      });\n\n      // Monitor recovery\n      const recoveryEvents = [];\n      swarm.on('recovery', (event) => recoveryEvents.push(event));\n\n      // Wait for recovery\n      await new Promise(resolve => setTimeout(resolve, 3000));\n\n      // Verify cascade protection\n      expect(recoveryEvents).to.have.lengthOf.at.least(1);\n      \n      const status = await swarm.getStatus();\n      const activeAgents = status.agents.filter(a => a.status !== 'failed');\n      \n      // Coordinator and other branch should survive\n      expect(activeAgents).to.include.deep.members([\n        { id: coordinator.id, status: 'idle' },\n        { id: midLevel[1].id, status: 'idle' }\n      ]);\n\n      // Workers under failed mid-level should be reassigned\n      const reassignedWorkers = recoveryEvents.filter(e => e.type === 'reassignment');\n      expect(reassignedWorkers).to.have.lengthOf.at.least(2);\n    });\n\n    it('should implement circuit breaker pattern', async () => {\n      swarm = new RuvSwarm();\n      await swarm.init({ \n        topology: 'mesh',\n        resilience: { \n          circuitBreaker: {\n            enabled: true,\n            threshold: 3,\n            timeout: 5000,\n            halfOpenRetries: 2\n          }\n        }\n      });\n\n      const agent = await swarm.spawnAgent({ type: 'coder' });\n      \n      // Create a failing service\n      let callCount = 0;\n      const failingService = sandbox.stub().callsFake(() => {\n        callCount++;\n        if (callCount <= 5) throw new Error('Service unavailable');\n        return { success: true };\n      });\n\n      // Replace agent's service call\n      agent.callService = failingService;\n\n      // Attempt multiple calls\n      const results = [];\n      for (let i = 0; i < 10; i++) {\n        try {\n          const result = await swarm.executeAgentTask(agent.id, {\n            task: 'Call external service',\n            useCircuitBreaker: true\n          });\n          results.push({ success: true, result });\n        } catch (error) {\n          results.push({ success: false, error: error.message });\n        }\n        await new Promise(resolve => setTimeout(resolve, 500));\n      }\n\n      // Verify circuit breaker behavior\n      const failures = results.filter(r => !r.success);\n      const circuitOpenErrors = failures.filter(f => f.error.includes('Circuit breaker open'));\n      \n      expect(failures).to.have.lengthOf.at.least(3);\n      expect(circuitOpenErrors).to.have.lengthOf.at.least(1);\n      \n      // Eventually should succeed after circuit closes\n      const successes = results.filter(r => r.success);\n      expect(successes).to.have.lengthOf.at.least(1);\n    });\n  });\n\n  describe('Database and Persistence Recovery', () => {\n    it('should handle database connection failures', async () => {\n      swarm = new RuvSwarm();\n      \n      // Mock database with intermittent failures\n      const mockDb = {\n        prepare: sandbox.stub(),\n        close: sandbox.stub(),\n        open: true\n      };\n\n      let failureCount = 0;\n      mockDb.prepare.callsFake((query) => {\n        if (failureCount++ < 2) {\n          throw new Error('Database connection lost');\n        }\n        return {\n          all: () => [],\n          run: () => ({ changes: 1 }),\n          get: () => ({ id: 1 })\n        };\n      });\n\n      await swarm.init({ \n        topology: 'mesh',\n        persistence: { \n          enabled: true,\n          retryOnFailure: true,\n          maxRetries: 5\n        },\n        database: mockDb\n      });\n\n      // Spawn agent with persistence\n      const agent = await swarm.spawnAgent({ \n        type: 'researcher',\n        persistent: true \n      });\n\n      // Verify agent created despite initial failures\n      expect(agent).to.exist;\n      expect(agent.id).to.exist;\n      \n      // Verify retries occurred\n      expect(mockDb.prepare.callCount).to.be.greaterThan(2);\n    });\n\n    it('should implement write-ahead logging for recovery', async () => {\n      swarm = new RuvSwarm();\n      await swarm.init({ \n        topology: 'mesh',\n        persistence: { \n          enabled: true,\n          wal: true,\n          checkpoint: 1000\n        }\n      });\n\n      // Create multiple agents and tasks\n      const agents = await Promise.all([\n        swarm.spawnAgent({ type: 'coder' }),\n        swarm.spawnAgent({ type: 'analyst' })\n      ]);\n\n      const tasks = [];\n      for (let i = 0; i < 5; i++) {\n        tasks.push(swarm.orchestrateTask({\n          task: `Task ${i}`,\n          persistent: true\n        }));\n      }\n      \n      await Promise.all(tasks);\n\n      // Simulate crash by forcing shutdown\n      swarm._forceShutdown = true;\n      \n      // Create new swarm instance\n      const recoveredSwarm = new RuvSwarm();\n      await recoveredSwarm.init({ \n        topology: 'mesh',\n        persistence: { \n          enabled: true,\n          recoverFromWAL: true\n        }\n      });\n\n      // Verify state recovered from WAL\n      const status = await recoveredSwarm.getStatus();\n      expect(status.agents).to.have.lengthOf(2);\n      \n      const recoveredTasks = await recoveredSwarm.getAllTasks();\n      expect(recoveredTasks).to.have.lengthOf(5);\n\n      await recoveredSwarm.shutdown();\n    });\n\n    it('should handle corrupted state gracefully', async () => {\n      // Create corrupted database\n      const corruptDb = new Database(':memory:');\n      corruptDb.exec(`\n        CREATE TABLE agents (\n          id TEXT PRIMARY KEY,\n          data TEXT\n        );\n        CREATE TABLE tasks (\n          id TEXT PRIMARY KEY,\n          data TEXT\n        );\n      `);\n\n      // Insert corrupted data\n      corruptDb.prepare('INSERT INTO agents VALUES (?, ?)').run('agent1', 'CORRUPTED{{{');\n      corruptDb.prepare('INSERT INTO tasks VALUES (?, ?)').run('task1', '{\"invalid\": json}');\n\n      swarm = new RuvSwarm();\n      const initResult = await swarm.init({ \n        topology: 'mesh',\n        persistence: { \n          enabled: true,\n          handleCorruption: true,\n          database: corruptDb\n        }\n      });\n\n      // Should initialize despite corruption\n      expect(initResult.success).to.be.true;\n      expect(initResult.corruptedEntries).to.have.lengthOf(2);\n      expect(initResult.recoveryMode).to.be.true;\n\n      // Should be able to operate normally\n      const agent = await swarm.spawnAgent({ type: 'coder' });\n      expect(agent).to.exist;\n\n      corruptDb.close();\n    });\n  });\n\n  describe('Network and Communication Recovery', () => {\n    it('should handle network partition scenarios', async () => {\n      swarm = new RuvSwarm();\n      await swarm.init({ \n        topology: 'mesh',\n        network: {\n          partitionTolerant: true,\n          consensusProtocol: 'raft'\n        }\n      });\n\n      // Create agents across partitions\n      const partition1 = await Promise.all([\n        swarm.spawnAgent({ type: 'coder', partition: 1 }),\n        swarm.spawnAgent({ type: 'analyst', partition: 1 })\n      ]);\n\n      const partition2 = await Promise.all([\n        swarm.spawnAgent({ type: 'coder', partition: 2 }),\n        swarm.spawnAgent({ type: 'researcher', partition: 2 })\n      ]);\n\n      // Simulate network partition\n      swarm.simulatePartition([1, 2]);\n\n      // Each partition should continue operating\n      const task1 = await swarm.orchestrateTask({\n        task: 'Partition 1 task',\n        partition: 1\n      });\n\n      const task2 = await swarm.orchestrateTask({\n        task: 'Partition 2 task',\n        partition: 2\n      });\n\n      // Wait for tasks\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Heal partition\n      swarm.healPartition();\n\n      // Wait for reconciliation\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Verify both tasks completed and state reconciled\n      const allTasks = await swarm.getAllTasks();\n      expect(allTasks).to.include.deep.members([\n        { id: task1.id, status: 'completed' },\n        { id: task2.id, status: 'completed' }\n      ]);\n\n      // Verify conflict resolution\n      const conflicts = await swarm.getConflictLog();\n      expect(conflicts).to.be.an('array');\n      \n      if (conflicts.length > 0) {\n        conflicts.forEach(conflict => {\n          expect(conflict).to.have.property('resolved', true);\n          expect(conflict).to.have.property('resolution');\n        });\n      }\n    });\n\n    it('should implement retry with exponential backoff', async () => {\n      swarm = new RuvSwarm();\n      await swarm.init({ \n        topology: 'star',\n        network: {\n          retryPolicy: {\n            enabled: true,\n            initialDelay: 100,\n            maxDelay: 5000,\n            backoffMultiplier: 2,\n            maxAttempts: 5\n          }\n        }\n      });\n\n      const agent = await swarm.spawnAgent({ type: 'coder' });\n      \n      // Mock flaky network\n      let attempts = 0;\n      const flakyNetwork = sandbox.stub(swarm._network, 'send').callsFake(async () => {\n        attempts++;\n        if (attempts < 4) {\n          throw new Error('Network timeout');\n        }\n        return { success: true };\n      });\n\n      const startTime = Date.now();\n      const result = await swarm.sendAgentMessage(agent.id, {\n        type: 'task',\n        data: 'Important message'\n      });\n\n      const elapsed = Date.now() - startTime;\n\n      // Verify retries with backoff\n      expect(attempts).to.equal(4);\n      expect(result.success).to.be.true;\n      \n      // Should have taken at least: 100 + 200 + 400 = 700ms\n      expect(elapsed).to.be.at.least(700);\n    });\n\n    it('should handle message queue overflow', async () => {\n      swarm = new RuvSwarm();\n      await swarm.init({ \n        topology: 'mesh',\n        messageQueue: {\n          maxSize: 100,\n          overflowStrategy: 'drop-oldest',\n          persistQueue: true\n        }\n      });\n\n      const agents = await Promise.all([\n        swarm.spawnAgent({ type: 'coder' }),\n        swarm.spawnAgent({ type: 'analyst' })\n      ]);\n\n      // Flood with messages\n      const messages = [];\n      for (let i = 0; i < 150; i++) {\n        messages.push(swarm.broadcastMessage({\n          type: 'update',\n          priority: i < 50 ? 'low' : 'high',\n          data: `Message ${i}`\n        }));\n      }\n\n      await Promise.all(messages);\n\n      // Check queue state\n      const queueStats = await swarm.getQueueStats();\n      expect(queueStats.currentSize).to.equal(100);\n      expect(queueStats.dropped).to.equal(50);\n      expect(queueStats.overflowEvents).to.be.greaterThan(0);\n\n      // High priority messages should be preserved\n      const remainingMessages = await swarm.getQueuedMessages();\n      const highPriorityCount = remainingMessages.filter(m => m.priority === 'high').length;\n      expect(highPriorityCount).to.be.greaterThan(50);\n    });\n  });\n\n  describe('Resource Management and Cleanup', () => {\n    it('should prevent resource leaks under stress', async () => {\n      swarm = new RuvSwarm();\n      await swarm.init({ \n        topology: 'mesh',\n        resourceLimits: {\n          maxMemory: 512 * 1024 * 1024, // 512MB\n          maxAgents: 50,\n          gcInterval: 1000\n        }\n      });\n\n      // Track initial memory\n      const initialMemory = process.memoryUsage().heapUsed;\n\n      // Stress test with rapid agent creation/destruction\n      for (let cycle = 0; cycle < 5; cycle++) {\n        const agents = [];\n        \n        // Spawn many agents\n        for (let i = 0; i < 20; i++) {\n          agents.push(await swarm.spawnAgent({ \n            type: 'coder',\n            ephemeral: true \n          }));\n        }\n\n        // Execute tasks\n        const tasks = agents.map(agent => \n          swarm.executeAgentTask(agent.id, {\n            task: 'Memory intensive operation',\n            data: Buffer.alloc(1024 * 1024) // 1MB per task\n          })\n        );\n\n        await Promise.all(tasks);\n\n        // Destroy agents\n        await Promise.all(agents.map(a => swarm.destroyAgent(a.id)));\n        \n        // Force GC if available\n        if (global.gc) global.gc();\n        \n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n\n      // Check memory didn't grow excessively\n      const finalMemory = process.memoryUsage().heapUsed;\n      const memoryGrowth = finalMemory - initialMemory;\n      \n      // Should not grow more than 50MB\n      expect(memoryGrowth).to.be.lessThan(50 * 1024 * 1024);\n\n      // Verify no leaked agents\n      const status = await swarm.getStatus();\n      expect(status.agents).to.have.lengthOf(0);\n    });\n\n    it('should handle graceful degradation under load', async () => {\n      swarm = new RuvSwarm();\n      await swarm.init({ \n        topology: 'mesh',\n        loadBalancing: {\n          enabled: true,\n          strategy: 'least-loaded',\n          degradationThreshold: 0.8\n        }\n      });\n\n      // Create limited agents\n      const agents = await Promise.all([\n        swarm.spawnAgent({ type: 'coder', capacity: 5 }),\n        swarm.spawnAgent({ type: 'coder', capacity: 5 }),\n        swarm.spawnAgent({ type: 'coder', capacity: 5 })\n      ]);\n\n      // Generate high load\n      const tasks = [];\n      for (let i = 0; i < 30; i++) {\n        tasks.push(swarm.orchestrateTask({\n          task: `High load task ${i}`,\n          priority: i < 10 ? 'high' : 'normal',\n          estimatedLoad: 1\n        }));\n      }\n\n      // Monitor degradation\n      const degradationEvents = [];\n      swarm.on('degradation', (event) => degradationEvents.push(event));\n\n      // Wait for processing\n      await new Promise(resolve => setTimeout(resolve, 5000));\n\n      // Verify graceful degradation occurred\n      expect(degradationEvents).to.have.lengthOf.at.least(1);\n      \n      const results = await Promise.allSettled(tasks);\n      const completed = results.filter(r => r.status === 'fulfilled').length;\n      const rejected = results.filter(r => r.status === 'rejected').length;\n\n      // High priority tasks should complete\n      const highPriorityResults = results.slice(0, 10);\n      const highPriorityCompleted = highPriorityResults.filter(r => r.status === 'fulfilled').length;\n      expect(highPriorityCompleted).to.be.at.least(8);\n\n      // Some lower priority might be rejected\n      expect(rejected).to.be.greaterThan(0);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}