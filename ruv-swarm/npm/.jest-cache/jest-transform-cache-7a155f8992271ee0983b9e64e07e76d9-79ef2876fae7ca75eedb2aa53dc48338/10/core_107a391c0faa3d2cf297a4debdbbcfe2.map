{"version":3,"names":["cov_14l4cariyy","actualCoverage","asyncGeneratorStep","n","t","e","r","o","a","c","i","u","value","done","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","execSync","promises","fs","path","ClaudeIntegrationCore","constructor","options","b","f","s","autoSetup","forceSetup","workingDir","process","cwd","isClaudeAvailable","stdio","addMcpServer","_this","Error","mcpCommand","success","message","error","checkExistingFiles","_this2","access","join","initialize","_this3","console","log","results","core","invokeClaudeWithPrompt","prompt","_this4","trim","claudeCommand"],"sources":["core.js"],"sourcesContent":["/**\n * Core Claude Code integration module\n * Handles MCP server setup and basic integration\n */\n\nimport { execSync } from 'child_process';\nimport { promises as fs } from 'fs';\nimport path from 'path';\n\nclass ClaudeIntegrationCore {\n  constructor(options = {}) {\n    this.autoSetup = options.autoSetup || false;\n    this.forceSetup = options.forceSetup || false;\n    this.workingDir = options.workingDir || process.cwd();\n  }\n\n  /**\n     * Check if Claude CLI is available\n     */\n  async isClaudeAvailable() {\n    try {\n      execSync('claude --version', { stdio: 'ignore' });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n     * Add ruv-swarm MCP server to Claude Code\n     */\n  async addMcpServer() {\n    if (!await this.isClaudeAvailable()) {\n      throw new Error('Claude Code CLI not found. Install with: npm install -g @anthropic-ai/claude-code');\n    }\n\n    try {\n      // Add ruv-swarm MCP server using stdio (no port needed)\n      const mcpCommand = 'claude mcp add ruv-swarm npx ruv-swarm mcp start';\n      execSync(mcpCommand, { stdio: 'inherit', cwd: this.workingDir });\n      return { success: true, message: 'Added ruv-swarm MCP server to Claude Code (stdio)' };\n    } catch (error) {\n      throw new Error(`Failed to add MCP server: ${error.message}`);\n    }\n  }\n\n  /**\n     * Check if integration files already exist\n     */\n  async checkExistingFiles() {\n    try {\n      await fs.access(path.join(this.workingDir, 'claude.md'));\n      await fs.access(path.join(this.workingDir, '.claude/commands'));\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n     * Initialize Claude integration\n     */\n  async initialize() {\n    console.log('üîß Initializing Claude Code integration...');\n\n    // Check if files exist (unless force setup)\n    if (!this.forceSetup && await this.checkExistingFiles()) {\n      console.log('   ‚ÑπÔ∏è  Claude integration files already exist (use --force to regenerate)');\n      return { success: true, message: 'Integration files already exist' };\n    }\n\n    try {\n      const results = {\n        core: await this.addMcpServer(),\n        success: true,\n      };\n\n      console.log('‚úÖ Claude integration initialized successfully');\n      return results;\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Claude integration:', error.message);\n      throw error;\n    }\n  }\n\n  /**\n     * Invoke Claude with a prompt (automatically includes --dangerously-skip-permissions)\n     */\n  async invokeClaudeWithPrompt(prompt) {\n    if (!prompt || !prompt.trim()) {\n      throw new Error('No prompt provided');\n    }\n\n    if (!await this.isClaudeAvailable()) {\n      throw new Error('Claude Code CLI not found');\n    }\n\n    const claudeCommand = `claude \"${ prompt.trim() }\" --dangerously-skip-permissions`;\n\n    try {\n      execSync(claudeCommand, { stdio: 'inherit', cwd: this.workingDir });\n      return { success: true, message: 'Claude invocation completed' };\n    } catch (error) {\n      throw new Error(`Claude invocation failed: ${ error.message}`);\n    }\n  }\n}\n\nexport { ClaudeIntegrationCore };"],"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","ignoreList":[]}