79df018067fba161f8092df050f29c9c
/* istanbul ignore next */
function cov_14l4cariyy() {
  var path = "/workspaces/ruv-FANN/ruv-swarm/npm/src/claude-integration/core.js";
  var hash = "86991163867895604e912a0a409ad59eaf0993de";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/ruv-FANN/ruv-swarm/npm/src/claude-integration/core.js",
    statementMap: {
      "0": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 48
        }
      },
      "1": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 13,
          column: 50
        }
      },
      "2": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 58
        }
      },
      "3": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "4": {
        start: {
          line: 22,
          column: 6
        },
        end: {
          line: 22,
          column: 56
        }
      },
      "5": {
        start: {
          line: 23,
          column: 6
        },
        end: {
          line: 23,
          column: 18
        }
      },
      "6": {
        start: {
          line: 25,
          column: 6
        },
        end: {
          line: 25,
          column: 19
        }
      },
      "7": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 35,
          column: 5
        }
      },
      "8": {
        start: {
          line: 34,
          column: 6
        },
        end: {
          line: 34,
          column: 107
        }
      },
      "9": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 44,
          column: 5
        }
      },
      "10": {
        start: {
          line: 39,
          column: 25
        },
        end: {
          line: 39,
          column: 75
        }
      },
      "11": {
        start: {
          line: 40,
          column: 6
        },
        end: {
          line: 40,
          column: 71
        }
      },
      "12": {
        start: {
          line: 41,
          column: 6
        },
        end: {
          line: 41,
          column: 93
        }
      },
      "13": {
        start: {
          line: 43,
          column: 6
        },
        end: {
          line: 43,
          column: 68
        }
      },
      "14": {
        start: {
          line: 51,
          column: 4
        },
        end: {
          line: 57,
          column: 5
        }
      },
      "15": {
        start: {
          line: 52,
          column: 6
        },
        end: {
          line: 52,
          column: 63
        }
      },
      "16": {
        start: {
          line: 53,
          column: 6
        },
        end: {
          line: 53,
          column: 70
        }
      },
      "17": {
        start: {
          line: 54,
          column: 6
        },
        end: {
          line: 54,
          column: 18
        }
      },
      "18": {
        start: {
          line: 56,
          column: 6
        },
        end: {
          line: 56,
          column: 19
        }
      },
      "19": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 64,
          column: 62
        }
      },
      "20": {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 70,
          column: 5
        }
      },
      "21": {
        start: {
          line: 68,
          column: 6
        },
        end: {
          line: 68,
          column: 95
        }
      },
      "22": {
        start: {
          line: 69,
          column: 6
        },
        end: {
          line: 69,
          column: 75
        }
      },
      "23": {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 83,
          column: 5
        }
      },
      "24": {
        start: {
          line: 73,
          column: 22
        },
        end: {
          line: 76,
          column: 7
        }
      },
      "25": {
        start: {
          line: 78,
          column: 6
        },
        end: {
          line: 78,
          column: 67
        }
      },
      "26": {
        start: {
          line: 79,
          column: 6
        },
        end: {
          line: 79,
          column: 21
        }
      },
      "27": {
        start: {
          line: 81,
          column: 6
        },
        end: {
          line: 81,
          column: 81
        }
      },
      "28": {
        start: {
          line: 82,
          column: 6
        },
        end: {
          line: 82,
          column: 18
        }
      },
      "29": {
        start: {
          line: 90,
          column: 4
        },
        end: {
          line: 92,
          column: 5
        }
      },
      "30": {
        start: {
          line: 91,
          column: 6
        },
        end: {
          line: 91,
          column: 44
        }
      },
      "31": {
        start: {
          line: 94,
          column: 4
        },
        end: {
          line: 96,
          column: 5
        }
      },
      "32": {
        start: {
          line: 95,
          column: 6
        },
        end: {
          line: 95,
          column: 51
        }
      },
      "33": {
        start: {
          line: 98,
          column: 26
        },
        end: {
          line: 98,
          column: 86
        }
      },
      "34": {
        start: {
          line: 100,
          column: 4
        },
        end: {
          line: 105,
          column: 5
        }
      },
      "35": {
        start: {
          line: 101,
          column: 6
        },
        end: {
          line: 101,
          column: 74
        }
      },
      "36": {
        start: {
          line: 102,
          column: 6
        },
        end: {
          line: 102,
          column: 71
        }
      },
      "37": {
        start: {
          line: 104,
          column: 6
        },
        end: {
          line: 104,
          column: 69
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 2
          },
          end: {
            line: 11,
            column: 3
          }
        },
        loc: {
          start: {
            line: 11,
            column: 28
          },
          end: {
            line: 15,
            column: 3
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 20,
            column: 2
          },
          end: {
            line: 20,
            column: 3
          }
        },
        loc: {
          start: {
            line: 20,
            column: 28
          },
          end: {
            line: 27,
            column: 3
          }
        },
        line: 20
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 32,
            column: 2
          },
          end: {
            line: 32,
            column: 3
          }
        },
        loc: {
          start: {
            line: 32,
            column: 23
          },
          end: {
            line: 45,
            column: 3
          }
        },
        line: 32
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 50,
            column: 2
          },
          end: {
            line: 50,
            column: 3
          }
        },
        loc: {
          start: {
            line: 50,
            column: 29
          },
          end: {
            line: 58,
            column: 3
          }
        },
        line: 50
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 63,
            column: 2
          },
          end: {
            line: 63,
            column: 3
          }
        },
        loc: {
          start: {
            line: 63,
            column: 21
          },
          end: {
            line: 84,
            column: 3
          }
        },
        line: 63
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 89,
            column: 2
          },
          end: {
            line: 89,
            column: 3
          }
        },
        loc: {
          start: {
            line: 89,
            column: 39
          },
          end: {
            line: 106,
            column: 3
          }
        },
        line: 89
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 11,
            column: 14
          },
          end: {
            line: 11,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 11,
            column: 24
          },
          end: {
            line: 11,
            column: 26
          }
        }],
        line: 11
      },
      "1": {
        loc: {
          start: {
            line: 12,
            column: 21
          },
          end: {
            line: 12,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 21
          },
          end: {
            line: 12,
            column: 38
          }
        }, {
          start: {
            line: 12,
            column: 42
          },
          end: {
            line: 12,
            column: 47
          }
        }],
        line: 12
      },
      "2": {
        loc: {
          start: {
            line: 13,
            column: 22
          },
          end: {
            line: 13,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 22
          },
          end: {
            line: 13,
            column: 40
          }
        }, {
          start: {
            line: 13,
            column: 44
          },
          end: {
            line: 13,
            column: 49
          }
        }],
        line: 13
      },
      "3": {
        loc: {
          start: {
            line: 14,
            column: 22
          },
          end: {
            line: 14,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 14,
            column: 22
          },
          end: {
            line: 14,
            column: 40
          }
        }, {
          start: {
            line: 14,
            column: 44
          },
          end: {
            line: 14,
            column: 57
          }
        }],
        line: 14
      },
      "4": {
        loc: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "5": {
        loc: {
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "6": {
        loc: {
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 67,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 67,
            column: 24
          }
        }, {
          start: {
            line: 67,
            column: 28
          },
          end: {
            line: 67,
            column: 59
          }
        }],
        line: 67
      },
      "7": {
        loc: {
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "8": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 90,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 90,
            column: 15
          }
        }, {
          start: {
            line: 90,
            column: 19
          },
          end: {
            line: 90,
            column: 33
          }
        }],
        line: 90
      },
      "9": {
        loc: {
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 96,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 96,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "86991163867895604e912a0a409ad59eaf0993de"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_14l4cariyy = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_14l4cariyy();
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * Core Claude Code integration module
 * Handles MCP server setup and basic integration
 */

import { execSync } from 'child_process';
import { promises as fs } from 'fs';
import path from 'path';
class ClaudeIntegrationCore {
  constructor(options =
  /* istanbul ignore next */
  (cov_14l4cariyy().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_14l4cariyy().f[0]++;
    cov_14l4cariyy().s[0]++;
    this.autoSetup =
    /* istanbul ignore next */
    (cov_14l4cariyy().b[1][0]++, options.autoSetup) ||
    /* istanbul ignore next */
    (cov_14l4cariyy().b[1][1]++, false);
    /* istanbul ignore next */
    cov_14l4cariyy().s[1]++;
    this.forceSetup =
    /* istanbul ignore next */
    (cov_14l4cariyy().b[2][0]++, options.forceSetup) ||
    /* istanbul ignore next */
    (cov_14l4cariyy().b[2][1]++, false);
    /* istanbul ignore next */
    cov_14l4cariyy().s[2]++;
    this.workingDir =
    /* istanbul ignore next */
    (cov_14l4cariyy().b[3][0]++, options.workingDir) ||
    /* istanbul ignore next */
    (cov_14l4cariyy().b[3][1]++, process.cwd());
  }

  /**
     * Check if Claude CLI is available
     */
  isClaudeAvailable() {
    /* istanbul ignore next */
    return _asyncToGenerator(function* () {
      cov_14l4cariyy().f[1]++;
      cov_14l4cariyy().s[3]++;
      try {
        /* istanbul ignore next */
        cov_14l4cariyy().s[4]++;
        execSync('claude --version', {
          stdio: 'ignore'
        });
        /* istanbul ignore next */
        cov_14l4cariyy().s[5]++;
        return true;
      } catch {
        /* istanbul ignore next */
        cov_14l4cariyy().s[6]++;
        return false;
      }
    })();
  }

  /**
     * Add ruv-swarm MCP server to Claude Code
     */
  addMcpServer() {
    /* istanbul ignore next */
    var _this = this;
    return _asyncToGenerator(function* () {
      cov_14l4cariyy().f[2]++;
      cov_14l4cariyy().s[7]++;
      if (!
      /* istanbul ignore next */
      (yield _this.isClaudeAvailable())) {
        /* istanbul ignore next */
        cov_14l4cariyy().b[4][0]++;
        cov_14l4cariyy().s[8]++;
        throw new Error('Claude Code CLI not found. Install with: npm install -g @anthropic-ai/claude-code');
      } else
      /* istanbul ignore next */
      {
        cov_14l4cariyy().b[4][1]++;
      }
      cov_14l4cariyy().s[9]++;
      try {
        // Add ruv-swarm MCP server using stdio (no port needed)
        const mcpCommand =
        /* istanbul ignore next */
        (cov_14l4cariyy().s[10]++, 'claude mcp add ruv-swarm npx ruv-swarm mcp start');
        /* istanbul ignore next */
        cov_14l4cariyy().s[11]++;
        execSync(mcpCommand, {
          stdio: 'inherit',
          cwd: _this.workingDir
        });
        /* istanbul ignore next */
        cov_14l4cariyy().s[12]++;
        return {
          success: true,
          message: 'Added ruv-swarm MCP server to Claude Code (stdio)'
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_14l4cariyy().s[13]++;
        throw new Error(`Failed to add MCP server: ${error.message}`);
      }
    })();
  }

  /**
     * Check if integration files already exist
     */
  checkExistingFiles() {
    /* istanbul ignore next */
    var _this2 = this;
    return _asyncToGenerator(function* () {
      cov_14l4cariyy().f[3]++;
      cov_14l4cariyy().s[14]++;
      try {
        /* istanbul ignore next */
        cov_14l4cariyy().s[15]++;
        /* istanbul ignore next */
        yield fs.access(path.join(_this2.workingDir, 'claude.md'));
        /* istanbul ignore next */
        cov_14l4cariyy().s[16]++;
        /* istanbul ignore next */
        yield fs.access(path.join(_this2.workingDir, '.claude/commands'));
        /* istanbul ignore next */
        cov_14l4cariyy().s[17]++;
        return true;
      } catch {
        /* istanbul ignore next */
        cov_14l4cariyy().s[18]++;
        return false;
      }
    })();
  }

  /**
     * Initialize Claude integration
     */
  initialize() {
    /* istanbul ignore next */
    var _this3 = this;
    return _asyncToGenerator(function* () {
      cov_14l4cariyy().f[4]++;
      cov_14l4cariyy().s[19]++;
      console.log('🔧 Initializing Claude Code integration...');

      // Check if files exist (unless force setup)
      cov_14l4cariyy().s[20]++;
      if (
      /* istanbul ignore next */
      (cov_14l4cariyy().b[6][0]++, !_this3.forceSetup) &&
      /* istanbul ignore next */
      (cov_14l4cariyy().b[6][1]++, yield _this3.checkExistingFiles())) {
        /* istanbul ignore next */
        cov_14l4cariyy().b[5][0]++;
        cov_14l4cariyy().s[21]++;
        console.log('   ℹ️  Claude integration files already exist (use --force to regenerate)');
        /* istanbul ignore next */
        cov_14l4cariyy().s[22]++;
        return {
          success: true,
          message: 'Integration files already exist'
        };
      } else
      /* istanbul ignore next */
      {
        cov_14l4cariyy().b[5][1]++;
      }
      cov_14l4cariyy().s[23]++;
      try {
        const results =
        /* istanbul ignore next */
        (cov_14l4cariyy().s[24]++, {
          core:
          /* istanbul ignore next */
          yield _this3.addMcpServer(),
          success: true
        });
        /* istanbul ignore next */
        cov_14l4cariyy().s[25]++;
        console.log('✅ Claude integration initialized successfully');
        /* istanbul ignore next */
        cov_14l4cariyy().s[26]++;
        return results;
      } catch (error) {
        /* istanbul ignore next */
        cov_14l4cariyy().s[27]++;
        console.error('❌ Failed to initialize Claude integration:', error.message);
        /* istanbul ignore next */
        cov_14l4cariyy().s[28]++;
        throw error;
      }
    })();
  }

  /**
     * Invoke Claude with a prompt (automatically includes --dangerously-skip-permissions)
     */
  invokeClaudeWithPrompt(prompt) {
    /* istanbul ignore next */
    var _this4 = this;
    return _asyncToGenerator(function* () {
      cov_14l4cariyy().f[5]++;
      cov_14l4cariyy().s[29]++;
      if (
      /* istanbul ignore next */
      (cov_14l4cariyy().b[8][0]++, !prompt) ||
      /* istanbul ignore next */
      (cov_14l4cariyy().b[8][1]++, !prompt.trim())) {
        /* istanbul ignore next */
        cov_14l4cariyy().b[7][0]++;
        cov_14l4cariyy().s[30]++;
        throw new Error('No prompt provided');
      } else
      /* istanbul ignore next */
      {
        cov_14l4cariyy().b[7][1]++;
      }
      cov_14l4cariyy().s[31]++;
      if (!
      /* istanbul ignore next */
      (yield _this4.isClaudeAvailable())) {
        /* istanbul ignore next */
        cov_14l4cariyy().b[9][0]++;
        cov_14l4cariyy().s[32]++;
        throw new Error('Claude Code CLI not found');
      } else
      /* istanbul ignore next */
      {
        cov_14l4cariyy().b[9][1]++;
      }
      const claudeCommand =
      /* istanbul ignore next */
      (cov_14l4cariyy().s[33]++, `claude "${prompt.trim()}" --dangerously-skip-permissions`);
      cov_14l4cariyy().s[34]++;
      try {
        /* istanbul ignore next */
        cov_14l4cariyy().s[35]++;
        execSync(claudeCommand, {
          stdio: 'inherit',
          cwd: _this4.workingDir
        });
        /* istanbul ignore next */
        cov_14l4cariyy().s[36]++;
        return {
          success: true,
          message: 'Claude invocation completed'
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_14l4cariyy().s[37]++;
        throw new Error(`Claude invocation failed: ${error.message}`);
      }
    })();
  }
}
export { ClaudeIntegrationCore };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,