105b6ddb7399190612c9bfb6094dd63a
/* istanbul ignore next */
function cov_21cgo8c2il() {
  var path = "/workspaces/ruv-FANN/ruv-swarm/npm/src/neural-models/presets/timeseries.js";
  var hash = "e2f178b5c625c680cfb3ee6293f36d1ba14196c0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/ruv-FANN/ruv-swarm/npm/src/neural-models/presets/timeseries.js",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 33
        },
        end: {
          line: 357,
          column: 1
        }
      },
      "1": {
        start: {
          line: 360,
          column: 35
        },
        end: {
          line: 365,
          column: 1
        }
      },
      "2": {
        start: {
          line: 361,
          column: 2
        },
        end: {
          line: 363,
          column: 3
        }
      },
      "3": {
        start: {
          line: 362,
          column: 4
        },
        end: {
          line: 362,
          column: 133
        }
      },
      "4": {
        start: {
          line: 364,
          column: 2
        },
        end: {
          line: 364,
          column: 39
        }
      },
      "5": {
        start: {
          line: 368,
          column: 42
        },
        end: {
          line: 368,
          column: 72
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 360,
            column: 35
          },
          end: {
            line: 360,
            column: 36
          }
        },
        loc: {
          start: {
            line: 360,
            column: 51
          },
          end: {
            line: 365,
            column: 1
          }
        },
        line: 360
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 361,
            column: 2
          },
          end: {
            line: 363,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 361,
            column: 2
          },
          end: {
            line: 363,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 361
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e2f178b5c625c680cfb3ee6293f36d1ba14196c0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_21cgo8c2il = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_21cgo8c2il();
/**
 * Time Series Neural Network Presets
 * Production-ready configurations for temporal data analysis and forecasting
 */

export const timeSeriesPresets =
/* istanbul ignore next */
(cov_21cgo8c2il().s[0]++, {
  // Stock Market Prediction
  stock_market_prediction: {
    name: 'Stock Market Predictor',
    description: 'Predict stock prices and market trends',
    model: 'lstm',
    config: {
      inputSize: 20,
      // OHLCV + technical indicators
      hiddenSize: 256,
      numLayers: 4,
      outputSize: 3,
      // Next day: [price, low, high]
      bidirectional: false,
      returnSequence: false,
      dropoutRate: 0.3,
      attentionMechanism: true,
      lookbackWindow: 60
    },
    training: {
      batchSize: 64,
      learningRate: 1e-3,
      epochs: 200,
      optimizer: 'adam',
      scheduler: 'exponential',
      lossFunction: 'mse_with_direction_penalty',
      earlyStoppingPatience: 20,
      validationSplit: 0.2
    },
    performance: {
      expectedAccuracy: '72-75% directional accuracy',
      inferenceTime: '5ms',
      memoryUsage: '300MB',
      trainingTime: '6-8 hours on GPU'
    },
    useCase: 'Trading systems, portfolio management, risk assessment'
  },
  // Weather Forecasting
  weather_forecasting: {
    name: 'Weather Forecast Model',
    description: 'Multi-variable weather prediction system',
    model: 'gru',
    config: {
      inputSize: 15,
      // Temperature, humidity, pressure, wind, etc.
      hiddenSize: 512,
      numLayers: 3,
      outputSize: 45,
      // 15 variables × 3 days forecast
      bidirectional: true,
      returnSequence: true,
      dropoutRate: 0.2,
      multiHeadAttention: 8,
      lookbackWindow: 168 // 7 days of hourly data
    },
    training: {
      batchSize: 32,
      learningRate: 5e-4,
      epochs: 150,
      optimizer: 'adamw',
      gradientClipping: 1.0,
      lossFunction: 'weighted_mse',
      temperatureScaling: true
    },
    performance: {
      expectedAccuracy: '88-91% within 2°C',
      inferenceTime: '15ms',
      memoryUsage: '600MB',
      trainingTime: '24-36 hours on GPU'
    },
    useCase: 'Weather services, agriculture, event planning'
  },
  // Energy Consumption Prediction
  energy_consumption: {
    name: 'Energy Demand Forecaster',
    description: 'Predict energy consumption patterns',
    model: 'lstm',
    config: {
      inputSize: 25,
      // Multiple features including calendar, weather
      hiddenSize: 384,
      numLayers: 3,
      outputSize: 96,
      // 4 days hourly forecast
      bidirectional: true,
      returnSequence: true,
      dropoutRate: 0.25,
      residualConnections: true,
      seasonalDecomposition: true
    },
    training: {
      batchSize: 48,
      learningRate: 2e-3,
      epochs: 100,
      optimizer: 'adam',
      lossFunction: 'mape_with_peak_penalty',
      augmentation: {
        noiseInjection: 0.05,
        timeShift: true,
        scalingFactor: 0.1
      }
    },
    performance: {
      expectedAccuracy: '94-96% MAPE < 5%',
      inferenceTime: '10ms',
      memoryUsage: '450MB',
      trainingTime: '12-18 hours on GPU'
    },
    useCase: 'Smart grid management, capacity planning, cost optimization'
  },
  // Predictive Maintenance
  predictive_maintenance: {
    name: 'Equipment Failure Predictor',
    description: 'Predict equipment failures before they occur',
    model: 'gru',
    config: {
      inputSize: 50,
      // Sensor readings
      hiddenSize: 256,
      numLayers: 3,
      outputSize: 2,
      // [failure_probability, time_to_failure]
      bidirectional: false,
      returnSequence: false,
      dropoutRate: 0.3,
      convolutionalEncoder: true,
      kernelSize: 5
    },
    training: {
      batchSize: 128,
      learningRate: 1e-3,
      epochs: 150,
      optimizer: 'adam',
      classBalancing: 'smote',
      focalLossGamma: 2.0,
      validationStrategy: 'time_series_split'
    },
    performance: {
      expectedAccuracy: '91-93% precision',
      inferenceTime: '3ms',
      memoryUsage: '200MB',
      trainingTime: '8-12 hours on GPU'
    },
    useCase: 'Manufacturing, aviation, industrial IoT'
  },
  // Anomaly Detection IoT
  anomaly_detection_iot: {
    name: 'IoT Anomaly Detector',
    description: 'Detect anomalies in IoT sensor streams',
    model: 'autoencoder',
    config: {
      inputSize: 100,
      // Multiple sensor time window
      encoderLayers: [80, 60, 40, 20],
      bottleneckSize: 10,
      decoderLayers: [20, 40, 60, 80],
      activation: 'elu',
      outputActivation: 'linear',
      variational: true,
      betaKL: 0.1,
      windowSize: 100
    },
    training: {
      batchSize: 256,
      learningRate: 1e-3,
      epochs: 100,
      optimizer: 'adam',
      reconstructionThreshold: 'dynamic_percentile_95',
      onlineAdaptation: true,
      adaptationRate: 0.01
    },
    performance: {
      expectedAccuracy: '96-98% detection rate',
      inferenceTime: '1ms',
      memoryUsage: '100MB',
      trainingTime: '4-6 hours on GPU'
    },
    useCase: 'Smart home security, industrial monitoring, network intrusion'
  },
  // Sales Forecasting
  sales_forecasting: {
    name: 'Retail Sales Forecaster',
    description: 'Predict retail sales with seasonality',
    model: 'lstm',
    config: {
      inputSize: 30,
      // Product features, promotions, calendar
      hiddenSize: 256,
      numLayers: 3,
      outputSize: 30,
      // 30 days forecast
      bidirectional: true,
      returnSequence: true,
      dropoutRate: 0.35,
      externalVariables: ['holidays', 'promotions', 'weather'],
      productEmbeddingSize: 64
    },
    training: {
      batchSize: 64,
      learningRate: 1e-3,
      epochs: 120,
      optimizer: 'adam',
      lossFunction: 'quantile_loss',
      quantiles: [0.1, 0.5, 0.9],
      hierarchicalReconciliation: true
    },
    performance: {
      expectedAccuracy: '85-88% within confidence interval',
      inferenceTime: '8ms',
      memoryUsage: '350MB',
      trainingTime: '10-15 hours on GPU'
    },
    useCase: 'Inventory management, supply chain, revenue planning'
  },
  // Network Traffic Prediction
  network_traffic_prediction: {
    name: 'Network Traffic Analyzer',
    description: 'Predict network load and detect anomalies',
    model: 'gru',
    config: {
      inputSize: 12,
      // Traffic metrics
      hiddenSize: 192,
      numLayers: 2,
      outputSize: 24,
      // Next 24 hours
      bidirectional: false,
      returnSequence: true,
      dropoutRate: 0.2,
      waveletDecomposition: true,
      decompositionLevels: 3
    },
    training: {
      batchSize: 128,
      learningRate: 2e-3,
      epochs: 80,
      optimizer: 'adam',
      lossFunction: 'huber',
      deltaHuber: 1.0,
      augmentation: {
        syntheticSpikes: true,
        smoothing: 0.1
      }
    },
    performance: {
      expectedAccuracy: '92-94% R-squared',
      inferenceTime: '4ms',
      memoryUsage: '150MB',
      trainingTime: '6-8 hours on GPU'
    },
    useCase: 'Network capacity planning, DDoS detection, QoS optimization'
  },
  // Healthcare Monitoring
  healthcare_monitoring: {
    name: 'Patient Vital Signs Monitor',
    description: 'Monitor and predict patient health events',
    model: 'lstm',
    config: {
      inputSize: 8,
      // Heart rate, BP, SpO2, temperature, etc.
      hiddenSize: 128,
      numLayers: 3,
      outputSize: 3,
      // Risk scores for different conditions
      bidirectional: true,
      returnSequence: false,
      dropoutRate: 0.4,
      attentionWindow: 48,
      // 48 hours
      clinicalConstraints: true
    },
    training: {
      batchSize: 32,
      learningRate: 5e-4,
      epochs: 200,
      optimizer: 'adamw',
      lossFunction: 'weighted_cross_entropy',
      classWeights: 'balanced',
      falseNegativePenalty: 5.0
    },
    performance: {
      expectedAccuracy: '94-96% sensitivity',
      inferenceTime: '2ms',
      memoryUsage: '120MB',
      trainingTime: '12-16 hours on GPU'
    },
    useCase: 'ICU monitoring, early warning systems, remote patient care'
  },
  // Cryptocurrency Prediction
  crypto_prediction: {
    name: 'Cryptocurrency Price Predictor',
    description: 'Predict crypto prices with high volatility',
    model: 'transformer',
    config: {
      dimensions: 256,
      heads: 8,
      layers: 4,
      ffDimensions: 1024,
      maxLength: 500,
      features: 15,
      // Price, volume, social sentiment, etc.
      outputHorizon: 24,
      // 24 hour prediction
      dropoutRate: 0.3,
      priceEmbedding: true
    },
    training: {
      batchSize: 32,
      learningRate: 1e-4,
      warmupSteps: 1000,
      epochs: 150,
      optimizer: 'adamw',
      lossFunction: 'log_cosh',
      volatilityWeighting: true,
      syntheticData: 0.2
    },
    performance: {
      expectedAccuracy: '68-72% directional accuracy',
      inferenceTime: '12ms',
      memoryUsage: '400MB',
      trainingTime: '18-24 hours on GPU'
    },
    useCase: 'Trading bots, portfolio optimization, risk management'
  },
  // Agricultural Yield Prediction
  agricultural_yield: {
    name: 'Crop Yield Predictor',
    description: 'Predict agricultural yields based on multiple factors',
    model: 'lstm',
    config: {
      inputSize: 35,
      // Weather, soil, satellite data
      hiddenSize: 256,
      numLayers: 3,
      outputSize: 1,
      // Yield prediction
      bidirectional: true,
      returnSequence: false,
      dropoutRate: 0.25,
      spatialFeatures: true,
      temporalAggregation: 'attention'
    },
    training: {
      batchSize: 24,
      learningRate: 1e-3,
      epochs: 100,
      optimizer: 'adam',
      lossFunction: 'mae_with_uncertainty',
      dataAugmentation: {
        weatherPerturbation: 0.1,
        soilVariation: 0.05
      },
      crossValidation: 'leave_one_year_out'
    },
    performance: {
      expectedAccuracy: '87-90% within 10% error',
      inferenceTime: '6ms',
      memoryUsage: '250MB',
      trainingTime: '8-12 hours on GPU'
    },
    useCase: 'Farm management, supply chain planning, insurance'
  }
});

// Export utility function to get preset by name
/* istanbul ignore next */
cov_21cgo8c2il().s[1]++;
export const getTimeSeriesPreset = presetName => {
  /* istanbul ignore next */
  cov_21cgo8c2il().f[0]++;
  cov_21cgo8c2il().s[2]++;
  if (!timeSeriesPresets[presetName]) {
    /* istanbul ignore next */
    cov_21cgo8c2il().b[0][0]++;
    cov_21cgo8c2il().s[3]++;
    throw new Error(`Time series preset '${presetName}' not found. Available presets: ${Object.keys(timeSeriesPresets).join(', ')}`);
  } else
  /* istanbul ignore next */
  {
    cov_21cgo8c2il().b[0][1]++;
  }
  cov_21cgo8c2il().s[4]++;
  return timeSeriesPresets[presetName];
};

// Export list of available presets
export const availableTimeSeriesPresets =
/* istanbul ignore next */
(cov_21cgo8c2il().s[5]++, Object.keys(timeSeriesPresets));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,