{"version":3,"names":["cov_7emkhwek","actualCoverage","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","value","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","asyncGeneratorStep","n","a","c","u","done","Promise","resolve","then","_asyncToGenerator","_next","_throw","CognitivePatternEvolution","constructor","f","s","agentPatterns","Map","evolutionHistory","patternTemplates","crossAgentPatterns","evolutionMetrics","initializePatternTemplates","set","name","description","characteristics","searchStrategy","explorationRate","exploitationRate","decisionMaking","patternRecognition","adaptationRules","increasePrecision","context","accuracy","reduceExploration","confidence","focusAttention","taskComplexity","increaseCreativity","noveltyScore","expandSearch","solutionDiversity","encourageRisk","safetyMargin","seekAlternatives","standardSolutionFailed","useAnalogies","domainKnowledge","breakAssumptions","progressStalled","mapConnections","systemComplexity","identifyFeedback","iterationCount","emergentProperties","componentInteractions","validateEvidence","informationQuality","checkBias","subjectivity","logicalConsistency","contradictions","generalizePatterns","specificExamples","identifyPrinciples","abstraction_level","conceptualMapping","domainTransfer","initializeAgent","agentId","config","_this","initialPatterns","selectInitialPatterns","activePatterns","dominantPattern","b","adaptationHistory","evolutionScore","lastEvolution","Date","now","crossAgentLearning","specializations","Set","totalEvolutions","successfulAdaptations","patternSwitches","crossAgentTransfers","emergentPatterns","console","log","join","patterns","modelType","template","includes","evolvePatterns","trainingData","_this2","agentData","get","analyzeTrainingContext","currentPatterns","patternEffectiveness","evaluatePatternEffectiveness","evolutionNeed","assessEvolutionNeed","required","evolutionStrategy","selectEvolutionStrategy","newPatterns","applyEvolution","recordEvolution","timestamp","trigger","reason","strategy","oldPatterns","effectiveness","type","dataComplexity","calculateDataComplexity","taskType","inferTaskType","noiseLevel","estimateNoiseLevel","patternRegularity","assessPatternRegularity","dimensionality","calculateDimensionality","temporalDependency","assessTemporalDependency","abstractionLevel","estimateAbstractionLevel","creativity_required","assessCreativityRequirement","samples","sampleSize","featureVariance","calculateFeatureVariance","labelDistribution","calculateLabelDistribution","sizeComplexity","Math","min","varianceComplexity","distributionComplexity","firstSample","Array","isArray","numFeatures","totalVariance","values","map","v","mean","reduce","sum","variance","pow","labelCounts","sample","label","target","totalSamples","entropy","count","probability","log2","maxEntropy","size","undefined","sequence","input","stdDev","sqrt","abs","labelSequence","uniqueLabels","regularity","max","_trainingData$samples","_trainingData$samples2","hasTimestamps","some","time","hasSequence","complexity","_this3","patternType","contextMatch","calculateContextMatch","historicalPerformance","getHistoricalPerformance","adaptationSuccess","getAdaptationSuccess","overall","totalMatch","weightSum","explorationNeed","explorationMatch","systematicNeed","systematicMatch","matchDecisionStyle","abstractionMatch","matchPatternRecognition","searchMatch","matchSearchStrategy","style","styleScores","styleScore","approach","approachScores","strategyScores","history","patternHistory","h","totalEffectiveness","_h$effectiveness","adaptations","success","avgEffectiveness","urgency","strategies","priority","selectedStrategy","best","current","_this4","addPatterns","removePatterns","modifyPatterns","rebalancePatterns","hybridizePatterns","selectDominantPattern","metrics","_this5","availablePatterns","from","unusedPatterns","p","bestPattern","bestScore","pattern","score","_this6","worstPattern","worstScore","_this7","modifiedPatterns","modifiedPattern","modifiedTemplate","createAdaptiveVariant","adaptiveTemplate","JSON","parse","stringify","_this8","patternScores","sort","ps","_this9","hybridPattern","template1","template2","hybridTemplate","createHybridTemplate","slice","hybrid","toLowerCase","chars1","chars2","evolution","splice","enableCrossAgentEvolution","agentIds","session","_this0","exchangeMatrix","otherAgentId","lastExchange","exchangeCount","successRate","patternCompatibility","id","transferPatterns","targetAgentId","_this1","targetData","compatiblePatterns","compatibility","evaluatePatternCompatibility","_this10","_pattern$type","currentPatternTypes","split","complementaryPatterns","complements","hasComplement","ct","extractPatterns","_this11","extractedPatterns","dominance","applyPatternUpdates","patternUpdates","_this12","update","modifications","assign","calculateAggregationWeights","gradients","weights","fill","assessGrowth","_this13","growth","patternDiversity","evolutionFrequency","overallGrowth","getStatistics","totalAgents","totalPatterns","avgGrowthScore","entries","avgPatternsPerAgent","availablePatternTypes","crossAgentSessions","preserveHistory","_this14","restoreHistory","preservedHistory","_this15"],"sources":["cognitive-pattern-evolution.js"],"sourcesContent":["/**\n * Cognitive Pattern Evolution System\n * Enables autonomous learning and adaptation of cognitive patterns\n */\n\nclass CognitivePatternEvolution {\n  constructor() {\n    this.agentPatterns = new Map();\n    this.evolutionHistory = new Map();\n    this.patternTemplates = new Map();\n    this.crossAgentPatterns = new Map();\n    this.evolutionMetrics = new Map();\n    \n    // Initialize base cognitive pattern templates\n    this.initializePatternTemplates();\n  }\n\n  /**\n   * Initialize base cognitive pattern templates\n   */\n  initializePatternTemplates() {\n    // Convergent thinking patterns\n    this.patternTemplates.set('convergent', {\n      name: 'Convergent Thinking',\n      description: 'Focus on single optimal solutions',\n      characteristics: {\n        searchStrategy: 'directed',\n        explorationRate: 0.1,\n        exploitationRate: 0.9,\n        decisionMaking: 'decisive',\n        patternRecognition: 'exact_match'\n      },\n      adaptationRules: {\n        increasePrecision: (context) => context.accuracy > 0.8,\n        reduceExploration: (context) => context.confidence > 0.7,\n        focusAttention: (context) => context.taskComplexity < 0.5\n      }\n    });\n\n    // Divergent thinking patterns\n    this.patternTemplates.set('divergent', {\n      name: 'Divergent Thinking',\n      description: 'Explore multiple creative solutions',\n      characteristics: {\n        searchStrategy: 'random',\n        explorationRate: 0.8,\n        exploitationRate: 0.2,\n        decisionMaking: 'exploratory',\n        patternRecognition: 'flexible_match'\n      },\n      adaptationRules: {\n        increaseCreativity: (context) => context.noveltyScore > 0.6,\n        expandSearch: (context) => context.solutionDiversity < 0.5,\n        encourageRisk: (context) => context.safetyMargin > 0.8\n      }\n    });\n\n    // Lateral thinking patterns\n    this.patternTemplates.set('lateral', {\n      name: 'Lateral Thinking',\n      description: 'Approach problems from unexpected angles',\n      characteristics: {\n        searchStrategy: 'lateral',\n        explorationRate: 0.6,\n        exploitationRate: 0.4,\n        decisionMaking: 'innovative',\n        patternRecognition: 'analogical'\n      },\n      adaptationRules: {\n        seekAlternatives: (context) => context.standardSolutionFailed,\n        useAnalogies: (context) => context.domainKnowledge > 0.5,\n        breakAssumptions: (context) => context.progressStalled\n      }\n    });\n\n    // Systems thinking patterns\n    this.patternTemplates.set('systems', {\n      name: 'Systems Thinking',\n      description: 'Consider holistic interconnections and emergent properties',\n      characteristics: {\n        searchStrategy: 'holistic',\n        explorationRate: 0.4,\n        exploitationRate: 0.6,\n        decisionMaking: 'systemic',\n        patternRecognition: 'pattern_networks'\n      },\n      adaptationRules: {\n        mapConnections: (context) => context.systemComplexity > 0.7,\n        identifyFeedback: (context) => context.iterationCount > 5,\n        emergentProperties: (context) => context.componentInteractions > 0.6\n      }\n    });\n\n    // Critical thinking patterns\n    this.patternTemplates.set('critical', {\n      name: 'Critical Thinking',\n      description: 'Systematic evaluation and logical analysis',\n      characteristics: {\n        searchStrategy: 'systematic',\n        explorationRate: 0.3,\n        exploitationRate: 0.7,\n        decisionMaking: 'analytical',\n        patternRecognition: 'evidence_based'\n      },\n      adaptationRules: {\n        validateEvidence: (context) => context.informationQuality < 0.8,\n        checkBias: (context) => context.subjectivity > 0.5,\n        logicalConsistency: (context) => context.contradictions > 0.2\n      }\n    });\n\n    // Abstract thinking patterns\n    this.patternTemplates.set('abstract', {\n      name: 'Abstract Thinking',\n      description: 'Work with concepts, principles, and generalizations',\n      characteristics: {\n        searchStrategy: 'conceptual',\n        explorationRate: 0.5,\n        exploitationRate: 0.5,\n        decisionMaking: 'principled',\n        patternRecognition: 'abstraction_layers'\n      },\n      adaptationRules: {\n        generalizePatterns: (context) => context.specificExamples > 3,\n        identifyPrinciples: (context) => context.abstraction_level < 0.6,\n        conceptualMapping: (context) => context.domainTransfer > 0.4\n      }\n    });\n  }\n\n  /**\n   * Initialize agent with cognitive patterns\n   * @param {string} agentId - Agent identifier\n   * @param {Object} config - Agent configuration\n   */\n  async initializeAgent(agentId, config) {\n    const initialPatterns = this.selectInitialPatterns(config);\n    \n    this.agentPatterns.set(agentId, {\n      activePatterns: initialPatterns,\n      dominantPattern: initialPatterns[0] || 'convergent',\n      adaptationHistory: [],\n      evolutionScore: 0,\n      lastEvolution: Date.now(),\n      crossAgentLearning: new Map(),\n      specializations: new Set()\n    });\n\n    this.evolutionHistory.set(agentId, []);\n    this.evolutionMetrics.set(agentId, {\n      totalEvolutions: 0,\n      successfulAdaptations: 0,\n      patternSwitches: 0,\n      crossAgentTransfers: 0,\n      emergentPatterns: 0\n    });\n\n    console.log(`Initialized cognitive patterns for agent ${agentId}: ${initialPatterns.join(', ')}`);\n  }\n\n  /**\n   * Select initial cognitive patterns based on configuration\n   * @param {Object} config - Agent configuration\n   */\n  selectInitialPatterns(config) {\n    const patterns = [];\n    \n    // Select patterns based on model type and use case\n    if (config.modelType) {\n      switch (config.modelType) {\n        case 'transformer':\n        case 'lstm':\n        case 'gru':\n          patterns.push('convergent', 'systems');\n          break;\n        case 'cnn':\n        case 'resnet':\n          patterns.push('critical', 'abstract');\n          break;\n        case 'gnn':\n        case 'gat':\n          patterns.push('systems', 'lateral');\n          break;\n        case 'vae':\n        case 'autoencoder':\n          patterns.push('divergent', 'abstract');\n          break;\n        case 'diffusion_model':\n        case 'neural_ode':\n          patterns.push('divergent', 'lateral');\n          break;\n        default:\n          patterns.push('convergent', 'critical');\n      }\n    }\n\n    // Add patterns based on task characteristics\n    if (config.template) {\n      if (config.template.includes('analyzer')) patterns.push('critical');\n      if (config.template.includes('generator')) patterns.push('divergent');\n      if (config.template.includes('processor')) patterns.push('systems');\n      if (config.template.includes('learner')) patterns.push('abstract');\n    }\n\n    // Ensure at least one pattern\n    if (patterns.length === 0) {\n      patterns.push('convergent');\n    }\n\n    return [...new Set(patterns)]; // Remove duplicates\n  }\n\n  /**\n   * Evolve cognitive patterns based on training data and performance\n   * @param {string} agentId - Agent identifier\n   * @param {Object} trainingData - Training data context\n   */\n  async evolvePatterns(agentId, trainingData) {\n    const agentData = this.agentPatterns.get(agentId);\n    if (!agentData) return;\n\n    const context = this.analyzeTrainingContext(trainingData);\n    const currentPatterns = agentData.activePatterns;\n    \n    // Evaluate current pattern effectiveness\n    const patternEffectiveness = await this.evaluatePatternEffectiveness(agentId, context);\n    \n    // Determine if evolution is needed\n    const evolutionNeed = this.assessEvolutionNeed(patternEffectiveness, context);\n    \n    if (evolutionNeed.required) {\n      const evolutionStrategy = this.selectEvolutionStrategy(evolutionNeed, context);\n      const newPatterns = await this.applyEvolution(agentId, evolutionStrategy, context);\n      \n      // Record evolution\n      this.recordEvolution(agentId, {\n        timestamp: Date.now(),\n        trigger: evolutionNeed.reason,\n        strategy: evolutionStrategy,\n        oldPatterns: [...currentPatterns],\n        newPatterns: newPatterns,\n        context: context,\n        effectiveness: patternEffectiveness\n      });\n\n      console.log(`Evolved cognitive patterns for agent ${agentId}: ${evolutionStrategy.type}`);\n    }\n  }\n\n  /**\n   * Analyze training context to understand cognitive requirements\n   * @param {Object} trainingData - Training data\n   */\n  analyzeTrainingContext(trainingData) {\n    const context = {\n      dataComplexity: this.calculateDataComplexity(trainingData),\n      taskType: this.inferTaskType(trainingData),\n      noiseLevel: this.estimateNoiseLevel(trainingData),\n      patternRegularity: this.assessPatternRegularity(trainingData),\n      dimensionality: this.calculateDimensionality(trainingData),\n      temporalDependency: this.assessTemporalDependency(trainingData),\n      abstractionLevel: this.estimateAbstractionLevel(trainingData),\n      creativity_required: this.assessCreativityRequirement(trainingData)\n    };\n\n    return context;\n  }\n\n  /**\n   * Calculate data complexity score\n   * @param {Object} trainingData - Training data\n   */\n  calculateDataComplexity(trainingData) {\n    if (!trainingData.samples || trainingData.samples.length === 0) return 0.5;\n    \n    const sampleSize = trainingData.samples.length;\n    const featureVariance = this.calculateFeatureVariance(trainingData.samples);\n    const labelDistribution = this.calculateLabelDistribution(trainingData.samples);\n    \n    // Combine metrics for overall complexity\n    const sizeComplexity = Math.min(1, sampleSize / 10000);\n    const varianceComplexity = Math.min(1, featureVariance);\n    const distributionComplexity = labelDistribution;\n    \n    return (sizeComplexity + varianceComplexity + distributionComplexity) / 3;\n  }\n\n  /**\n   * Calculate feature variance across samples\n   * @param {Array} samples - Training samples\n   */\n  calculateFeatureVariance(samples) {\n    if (samples.length < 2) return 0;\n    \n    const firstSample = Array.isArray(samples[0]) ? samples[0] : [samples[0]];\n    const numFeatures = firstSample.length;\n    \n    let totalVariance = 0;\n    \n    for (let f = 0; f < numFeatures; f++) {\n      const values = samples.map(s => Array.isArray(s) ? s[f] : s).filter(v => typeof v === 'number');\n      if (values.length < 2) continue;\n      \n      const mean = values.reduce((sum, v) => sum + v, 0) / values.length;\n      const variance = values.reduce((sum, v) => sum + Math.pow(v - mean, 2), 0) / values.length;\n      totalVariance += variance;\n    }\n    \n    return totalVariance / numFeatures;\n  }\n\n  /**\n   * Calculate label distribution entropy\n   * @param {Array} samples - Training samples\n   */\n  calculateLabelDistribution(samples) {\n    const labelCounts = new Map();\n    \n    samples.forEach(sample => {\n      const label = sample.label || sample.target || 'unknown';\n      labelCounts.set(label, (labelCounts.get(label) || 0) + 1);\n    });\n    \n    const totalSamples = samples.length;\n    let entropy = 0;\n    \n    for (const count of labelCounts.values()) {\n      const probability = count / totalSamples;\n      entropy -= probability * Math.log2(probability);\n    }\n    \n    // Normalize entropy (max entropy for uniform distribution)\n    const maxEntropy = Math.log2(labelCounts.size);\n    return maxEntropy > 0 ? entropy / maxEntropy : 0;\n  }\n\n  /**\n   * Infer task type from training data characteristics\n   * @param {Object} trainingData - Training data\n   */\n  inferTaskType(trainingData) {\n    if (!trainingData.samples) return 'unknown';\n    \n    const sample = trainingData.samples[0];\n    if (!sample) return 'unknown';\n    \n    // Check for common task patterns\n    if (sample.target && Array.isArray(sample.target)) {\n      return sample.target.length > 1 ? 'multi_classification' : 'regression';\n    }\n    \n    if (sample.label !== undefined) {\n      return 'classification';\n    }\n    \n    if (sample.sequence || Array.isArray(sample.input)) {\n      return 'sequence';\n    }\n    \n    return 'regression';\n  }\n\n  /**\n   * Estimate noise level in training data\n   * @param {Object} trainingData - Training data\n   */\n  estimateNoiseLevel(trainingData) {\n    if (!trainingData.samples || trainingData.samples.length < 10) return 0.5;\n    \n    // Simple heuristic: calculate coefficient of variation\n    const values = trainingData.samples.map(s => {\n      if (typeof s === 'number') return s;\n      if (Array.isArray(s)) return s.reduce((sum, v) => sum + v, 0) / s.length;\n      return 0;\n    });\n    \n    const mean = values.reduce((sum, v) => sum + v, 0) / values.length;\n    const variance = values.reduce((sum, v) => sum + Math.pow(v - mean, 2), 0) / values.length;\n    const stdDev = Math.sqrt(variance);\n    \n    return mean !== 0 ? Math.min(1, stdDev / Math.abs(mean)) : 0.5;\n  }\n\n  /**\n   * Assess pattern regularity in data\n   * @param {Object} trainingData - Training data\n   */\n  assessPatternRegularity(trainingData) {\n    // Simplified regularity assessment\n    if (!trainingData.samples || trainingData.samples.length < 5) return 0.5;\n    \n    // Check for periodic patterns or consistent structures\n    const labelSequence = trainingData.samples.map(s => s.label || s.target || 0);\n    const uniqueLabels = new Set(labelSequence);\n    \n    // More unique labels = less regular\n    const regularity = 1 - (uniqueLabels.size / labelSequence.length);\n    return Math.max(0, Math.min(1, regularity));\n  }\n\n  /**\n   * Calculate effective dimensionality\n   * @param {Object} trainingData - Training data\n   */\n  calculateDimensionality(trainingData) {\n    if (!trainingData.samples || trainingData.samples.length === 0) return 0;\n    \n    const sample = trainingData.samples[0];\n    if (Array.isArray(sample)) {\n      return Math.min(1, sample.length / 1000); // Normalize to 0-1\n    }\n    \n    return 0.1; // Low dimensionality for non-array data\n  }\n\n  /**\n   * Assess temporal dependency in data\n   * @param {Object} trainingData - Training data\n   */\n  assessTemporalDependency(trainingData) {\n    // Check if data has temporal structure\n    const hasTimestamps = trainingData.samples?.some(s => s.timestamp || s.time);\n    const hasSequence = trainingData.samples?.some(s => s.sequence || Array.isArray(s.input));\n    \n    if (hasTimestamps) return 0.8;\n    if (hasSequence) return 0.6;\n    return 0.2;\n  }\n\n  /**\n   * Estimate required abstraction level\n   * @param {Object} trainingData - Training data\n   */\n  estimateAbstractionLevel(trainingData) {\n    // Higher abstraction for complex, structured data\n    const complexity = this.calculateDataComplexity(trainingData);\n    const dimensionality = this.calculateDimensionality(trainingData);\n    \n    return (complexity + dimensionality) / 2;\n  }\n\n  /**\n   * Assess creativity requirement from data\n   * @param {Object} trainingData - Training data\n   */\n  assessCreativityRequirement(trainingData) {\n    // Check for generation tasks or high variability\n    const taskType = this.inferTaskType(trainingData);\n    const noiseLevel = this.estimateNoiseLevel(trainingData);\n    \n    if (taskType.includes('generation')) return 0.8;\n    if (noiseLevel > 0.7) return 0.6;\n    return 0.3;\n  }\n\n  /**\n   * Evaluate effectiveness of current cognitive patterns\n   * @param {string} agentId - Agent identifier\n   * @param {Object} context - Training context\n   */\n  async evaluatePatternEffectiveness(agentId, context) {\n    const agentData = this.agentPatterns.get(agentId);\n    if (!agentData) return {};\n\n    const effectiveness = {};\n    \n    for (const patternType of agentData.activePatterns) {\n      const template = this.patternTemplates.get(patternType);\n      if (!template) continue;\n      \n      // Evaluate how well this pattern matches the context\n      const contextMatch = this.calculateContextMatch(template, context);\n      const historicalPerformance = this.getHistoricalPerformance(agentId, patternType);\n      const adaptationSuccess = this.getAdaptationSuccess(agentId, patternType);\n      \n      effectiveness[patternType] = {\n        contextMatch,\n        historicalPerformance,\n        adaptationSuccess,\n        overall: (contextMatch + historicalPerformance + adaptationSuccess) / 3\n      };\n    }\n    \n    return effectiveness;\n  }\n\n  /**\n   * Calculate how well a pattern template matches the current context\n   * @param {Object} template - Pattern template\n   * @param {Object} context - Current context\n   */\n  calculateContextMatch(template, context) {\n    const characteristics = template.characteristics;\n    let totalMatch = 0;\n    let weightSum = 0;\n    \n    // Match exploration vs exploitation preference\n    const explorationNeed = context.creativity_required + context.noiseLevel;\n    const explorationMatch = Math.abs(characteristics.explorationRate - explorationNeed);\n    totalMatch += (1 - explorationMatch) * 0.3;\n    weightSum += 0.3;\n    \n    // Match decision making style\n    const systematicNeed = context.dataComplexity + context.patternRegularity;\n    const systematicMatch = this.matchDecisionStyle(characteristics.decisionMaking, systematicNeed);\n    totalMatch += systematicMatch * 0.25;\n    weightSum += 0.25;\n    \n    // Match pattern recognition approach\n    const abstractionMatch = this.matchPatternRecognition(characteristics.patternRecognition, context);\n    totalMatch += abstractionMatch * 0.25;\n    weightSum += 0.25;\n    \n    // Match search strategy\n    const searchMatch = this.matchSearchStrategy(characteristics.searchStrategy, context);\n    totalMatch += searchMatch * 0.2;\n    weightSum += 0.2;\n    \n    return weightSum > 0 ? totalMatch / weightSum : 0;\n  }\n\n  /**\n   * Match decision making style to context needs\n   * @param {string} style - Decision making style\n   * @param {number} systematicNeed - Need for systematic approach (0-1)\n   */\n  matchDecisionStyle(style, systematicNeed) {\n    const styleScores = {\n      'decisive': 0.9,\n      'analytical': 0.8,\n      'systematic': 0.8,\n      'principled': 0.7,\n      'exploratory': 0.3,\n      'innovative': 0.2\n    };\n    \n    const styleScore = styleScores[style] || 0.5;\n    return 1 - Math.abs(styleScore - systematicNeed);\n  }\n\n  /**\n   * Match pattern recognition approach to context\n   * @param {string} approach - Pattern recognition approach\n   * @param {Object} context - Context object\n   */\n  matchPatternRecognition(approach, context) {\n    const approachScores = {\n      'exact_match': context.patternRegularity,\n      'flexible_match': 1 - context.patternRegularity,\n      'analogical': context.abstractionLevel,\n      'pattern_networks': context.dataComplexity,\n      'evidence_based': 1 - context.noiseLevel,\n      'abstraction_layers': context.abstractionLevel\n    };\n    \n    return approachScores[approach] || 0.5;\n  }\n\n  /**\n   * Match search strategy to context\n   * @param {string} strategy - Search strategy\n   * @param {Object} context - Context object\n   */\n  matchSearchStrategy(strategy, context) {\n    const strategyScores = {\n      'directed': 1 - context.creativity_required,\n      'random': context.creativity_required,\n      'lateral': context.noiseLevel + context.creativity_required,\n      'holistic': context.dataComplexity,\n      'systematic': context.patternRegularity,\n      'conceptual': context.abstractionLevel\n    };\n    \n    return Math.min(1, strategyScores[strategy] || 0.5);\n  }\n\n  /**\n   * Get historical performance of a pattern for an agent\n   * @param {string} agentId - Agent identifier\n   * @param {string} patternType - Pattern type\n   */\n  getHistoricalPerformance(agentId, patternType) {\n    const history = this.evolutionHistory.get(agentId) || [];\n    const patternHistory = history.filter(h => h.oldPatterns.includes(patternType) || h.newPatterns.includes(patternType));\n    \n    if (patternHistory.length === 0) return 0.5; // Default neutral score\n    \n    // Calculate average effectiveness from historical data\n    const totalEffectiveness = patternHistory.reduce((sum, h) => {\n      const effectiveness = h.effectiveness?.[patternType]?.overall || 0.5;\n      return sum + effectiveness;\n    }, 0);\n    \n    return totalEffectiveness / patternHistory.length;\n  }\n\n  /**\n   * Get adaptation success rate for a pattern\n   * @param {string} agentId - Agent identifier\n   * @param {string} patternType - Pattern type\n   */\n  getAdaptationSuccess(agentId, patternType) {\n    const agentData = this.agentPatterns.get(agentId);\n    if (!agentData) return 0.5;\n    \n    const adaptations = agentData.adaptationHistory.filter(a => a.patternType === patternType);\n    if (adaptations.length === 0) return 0.5;\n    \n    const successfulAdaptations = adaptations.filter(a => a.success).length;\n    return successfulAdaptations / adaptations.length;\n  }\n\n  /**\n   * Assess if cognitive evolution is needed\n   * @param {Object} effectiveness - Pattern effectiveness scores\n   * @param {Object} context - Current context\n   */\n  assessEvolutionNeed(effectiveness, context) {\n    const avgEffectiveness = Object.values(effectiveness).reduce((sum, e) => sum + e.overall, 0) / Object.keys(effectiveness).length;\n    \n    // Evolution needed if effectiveness is low\n    if (avgEffectiveness < 0.4) {\n      return { required: true, reason: 'low_effectiveness', urgency: 'high' };\n    }\n    \n    // Evolution needed if context has changed significantly\n    if (context.dataComplexity > 0.8 && avgEffectiveness < 0.6) {\n      return { required: true, reason: 'high_complexity', urgency: 'medium' };\n    }\n    \n    // Evolution for exploration if effectiveness is moderate\n    if (avgEffectiveness < 0.7 && context.creativity_required > 0.6) {\n      return { required: true, reason: 'creativity_required', urgency: 'low' };\n    }\n    \n    return { required: false, reason: 'stable', urgency: 'none' };\n  }\n\n  /**\n   * Select evolution strategy based on need and context\n   * @param {Object} evolutionNeed - Evolution need assessment\n   * @param {Object} context - Current context\n   */\n  selectEvolutionStrategy(evolutionNeed, context) {\n    const strategies = {\n      'pattern_addition': {\n        type: 'pattern_addition',\n        description: 'Add new cognitive patterns',\n        priority: context.creativity_required > 0.6 ? 0.8 : 0.4\n      },\n      'pattern_removal': {\n        type: 'pattern_removal',\n        description: 'Remove ineffective patterns',\n        priority: evolutionNeed.urgency === 'high' ? 0.9 : 0.3\n      },\n      'pattern_modification': {\n        type: 'pattern_modification',\n        description: 'Modify existing patterns',\n        priority: 0.6\n      },\n      'pattern_rebalancing': {\n        type: 'pattern_rebalancing',\n        description: 'Rebalance pattern weights',\n        priority: evolutionNeed.urgency === 'medium' ? 0.7 : 0.5\n      },\n      'pattern_hybridization': {\n        type: 'pattern_hybridization',\n        description: 'Create hybrid patterns',\n        priority: context.dataComplexity > 0.7 ? 0.8 : 0.3\n      }\n    };\n    \n    // Select strategy with highest priority\n    const selectedStrategy = Object.values(strategies).reduce((best, current) => \n      current.priority > best.priority ? current : best\n    );\n    \n    return selectedStrategy;\n  }\n\n  /**\n   * Apply evolution strategy to agent patterns\n   * @param {string} agentId - Agent identifier\n   * @param {Object} strategy - Evolution strategy\n   * @param {Object} context - Current context\n   */\n  async applyEvolution(agentId, strategy, context) {\n    const agentData = this.agentPatterns.get(agentId);\n    if (!agentData) return [];\n\n    let newPatterns = [...agentData.activePatterns];\n    \n    switch (strategy.type) {\n      case 'pattern_addition':\n        newPatterns = await this.addPatterns(agentId, newPatterns, context);\n        break;\n        \n      case 'pattern_removal':\n        newPatterns = await this.removePatterns(agentId, newPatterns, context);\n        break;\n        \n      case 'pattern_modification':\n        newPatterns = await this.modifyPatterns(agentId, newPatterns, context);\n        break;\n        \n      case 'pattern_rebalancing':\n        newPatterns = await this.rebalancePatterns(agentId, newPatterns, context);\n        break;\n        \n      case 'pattern_hybridization':\n        newPatterns = await this.hybridizePatterns(agentId, newPatterns, context);\n        break;\n    }\n    \n    // Update agent patterns\n    agentData.activePatterns = newPatterns;\n    agentData.dominantPattern = this.selectDominantPattern(newPatterns, context);\n    agentData.lastEvolution = Date.now();\n    agentData.evolutionScore += 1;\n    \n    // Update metrics\n    const metrics = this.evolutionMetrics.get(agentId);\n    if (metrics) {\n      metrics.totalEvolutions++;\n      if (strategy.type === 'pattern_addition') metrics.patternSwitches++;\n    }\n    \n    return newPatterns;\n  }\n\n  /**\n   * Add new cognitive patterns\n   * @param {string} agentId - Agent identifier\n   * @param {Array} currentPatterns - Current patterns\n   * @param {Object} context - Current context\n   */\n  async addPatterns(agentId, currentPatterns, context) {\n    const availablePatterns = Array.from(this.patternTemplates.keys());\n    const unusedPatterns = availablePatterns.filter(p => !currentPatterns.includes(p));\n    \n    if (unusedPatterns.length === 0) return currentPatterns;\n    \n    // Select best pattern to add based on context\n    let bestPattern = null;\n    let bestScore = 0;\n    \n    for (const pattern of unusedPatterns) {\n      const template = this.patternTemplates.get(pattern);\n      const score = this.calculateContextMatch(template, context);\n      \n      if (score > bestScore) {\n        bestScore = score;\n        bestPattern = pattern;\n      }\n    }\n    \n    if (bestPattern && bestScore > 0.6) {\n      return [...currentPatterns, bestPattern];\n    }\n    \n    return currentPatterns;\n  }\n\n  /**\n   * Remove ineffective cognitive patterns\n   * @param {string} agentId - Agent identifier\n   * @param {Array} currentPatterns - Current patterns\n   * @param {Object} context - Current context\n   */\n  async removePatterns(agentId, currentPatterns, context) {\n    if (currentPatterns.length <= 1) return currentPatterns; // Keep at least one pattern\n    \n    // Find least effective pattern\n    let worstPattern = null;\n    let worstScore = 1;\n    \n    for (const pattern of currentPatterns) {\n      const template = this.patternTemplates.get(pattern);\n      const score = this.calculateContextMatch(template, context);\n      \n      if (score < worstScore) {\n        worstScore = score;\n        worstPattern = pattern;\n      }\n    }\n    \n    if (worstPattern && worstScore < 0.3) {\n      return currentPatterns.filter(p => p !== worstPattern);\n    }\n    \n    return currentPatterns;\n  }\n\n  /**\n   * Modify existing patterns (create adaptive variants)\n   * @param {string} agentId - Agent identifier\n   * @param {Array} currentPatterns - Current patterns\n   * @param {Object} context - Current context\n   */\n  async modifyPatterns(agentId, currentPatterns, context) {\n    // Create modified versions of existing patterns\n    const modifiedPatterns = [];\n    \n    for (const pattern of currentPatterns) {\n      const template = this.patternTemplates.get(pattern);\n      if (!template) continue;\n      \n      // Create adaptive modification\n      const modifiedPattern = `${pattern}_adaptive_${Date.now()}`;\n      const modifiedTemplate = this.createAdaptiveVariant(template, context);\n      \n      this.patternTemplates.set(modifiedPattern, modifiedTemplate);\n      modifiedPatterns.push(modifiedPattern);\n    }\n    \n    return modifiedPatterns.length > 0 ? modifiedPatterns : currentPatterns;\n  }\n\n  /**\n   * Create adaptive variant of a pattern template\n   * @param {Object} template - Original template\n   * @param {Object} context - Current context\n   */\n  createAdaptiveVariant(template, context) {\n    const adaptiveTemplate = JSON.parse(JSON.stringify(template)); // Deep copy\n    \n    // Adapt characteristics based on context\n    if (context.creativity_required > 0.7) {\n      adaptiveTemplate.characteristics.explorationRate = Math.min(1, adaptiveTemplate.characteristics.explorationRate + 0.2);\n      adaptiveTemplate.characteristics.exploitationRate = Math.max(0, adaptiveTemplate.characteristics.exploitationRate - 0.2);\n    }\n    \n    if (context.dataComplexity > 0.8) {\n      adaptiveTemplate.characteristics.patternRecognition = 'pattern_networks';\n      adaptiveTemplate.characteristics.searchStrategy = 'systematic';\n    }\n    \n    if (context.noiseLevel > 0.6) {\n      adaptiveTemplate.characteristics.decisionMaking = 'exploratory';\n    }\n    \n    adaptiveTemplate.name += ' (Adaptive)';\n    adaptiveTemplate.description += ' - Adapted for current context';\n    \n    return adaptiveTemplate;\n  }\n\n  /**\n   * Rebalance pattern priorities and weights\n   * @param {string} agentId - Agent identifier\n   * @param {Array} currentPatterns - Current patterns\n   * @param {Object} context - Current context\n   */\n  async rebalancePatterns(agentId, currentPatterns, context) {\n    // Rebalancing keeps the same patterns but changes their relative importance\n    // This would typically involve adjusting weights in the neural network\n    // For now, we reorder patterns by effectiveness\n    \n    const patternScores = [];\n    \n    for (const pattern of currentPatterns) {\n      const template = this.patternTemplates.get(pattern);\n      const score = this.calculateContextMatch(template, context);\n      patternScores.push({ pattern, score });\n    }\n    \n    // Sort by score (descending)\n    patternScores.sort((a, b) => b.score - a.score);\n    \n    return patternScores.map(ps => ps.pattern);\n  }\n\n  /**\n   * Create hybrid patterns by combining existing ones\n   * @param {string} agentId - Agent identifier\n   * @param {Array} currentPatterns - Current patterns\n   * @param {Object} context - Current context\n   */\n  async hybridizePatterns(agentId, currentPatterns, context) {\n    if (currentPatterns.length < 2) return currentPatterns;\n    \n    // Create hybrid of two best patterns\n    const hybridPattern = `hybrid_${currentPatterns[0]}_${currentPatterns[1]}_${Date.now()}`;\n    const template1 = this.patternTemplates.get(currentPatterns[0]);\n    const template2 = this.patternTemplates.get(currentPatterns[1]);\n    \n    if (!template1 || !template2) return currentPatterns;\n    \n    const hybridTemplate = this.createHybridTemplate(template1, template2, context);\n    this.patternTemplates.set(hybridPattern, hybridTemplate);\n    \n    return [hybridPattern, ...currentPatterns.slice(2)];\n  }\n\n  /**\n   * Create hybrid template from two parent templates\n   * @param {Object} template1 - First parent template\n   * @param {Object} template2 - Second parent template\n   * @param {Object} context - Current context\n   */\n  createHybridTemplate(template1, template2, context) {\n    const hybrid = {\n      name: `Hybrid: ${template1.name} + ${template2.name}`,\n      description: `Combination of ${template1.name.toLowerCase()} and ${template2.name.toLowerCase()}`,\n      characteristics: {},\n      adaptationRules: {}\n    };\n    \n    // Blend characteristics\n    const chars1 = template1.characteristics;\n    const chars2 = template2.characteristics;\n    \n    hybrid.characteristics = {\n      searchStrategy: context.creativity_required > 0.5 ? chars2.searchStrategy : chars1.searchStrategy,\n      explorationRate: (chars1.explorationRate + chars2.explorationRate) / 2,\n      exploitationRate: (chars1.exploitationRate + chars2.exploitationRate) / 2,\n      decisionMaking: context.dataComplexity > 0.6 ? chars1.decisionMaking : chars2.decisionMaking,\n      patternRecognition: chars1.patternRecognition // Use first template's approach\n    };\n    \n    // Combine adaptation rules\n    hybrid.adaptationRules = {\n      ...template1.adaptationRules,\n      ...template2.adaptationRules\n    };\n    \n    return hybrid;\n  }\n\n  /**\n   * Select dominant pattern from active patterns\n   * @param {Array} patterns - Active patterns\n   * @param {Object} context - Current context\n   */\n  selectDominantPattern(patterns, context) {\n    if (patterns.length === 0) return 'convergent';\n    if (patterns.length === 1) return patterns[0];\n    \n    // Select pattern that best matches current context\n    let bestPattern = patterns[0];\n    let bestScore = 0;\n    \n    for (const pattern of patterns) {\n      const template = this.patternTemplates.get(pattern);\n      if (!template) continue;\n      \n      const score = this.calculateContextMatch(template, context);\n      if (score > bestScore) {\n        bestScore = score;\n        bestPattern = pattern;\n      }\n    }\n    \n    return bestPattern;\n  }\n\n  /**\n   * Record evolution event\n   * @param {string} agentId - Agent identifier\n   * @param {Object} evolution - Evolution details\n   */\n  recordEvolution(agentId, evolution) {\n    const history = this.evolutionHistory.get(agentId) || [];\n    history.push(evolution);\n    \n    // Keep only recent evolution history (last 50 events)\n    if (history.length > 50) {\n      history.splice(0, history.length - 50);\n    }\n    \n    this.evolutionHistory.set(agentId, history);\n  }\n\n  /**\n   * Enable cross-agent pattern evolution\n   * @param {Array} agentIds - List of agent IDs\n   * @param {Object} session - Collaborative session\n   */\n  async enableCrossAgentEvolution(agentIds, session) {\n    // Create cross-agent pattern exchange matrix\n    const exchangeMatrix = {};\n    \n    for (const agentId of agentIds) {\n      exchangeMatrix[agentId] = new Map();\n      \n      // Initialize exchange relationships\n      for (const otherAgentId of agentIds) {\n        if (agentId !== otherAgentId) {\n          exchangeMatrix[agentId].set(otherAgentId, {\n            lastExchange: 0,\n            exchangeCount: 0,\n            successRate: 0.5,\n            patternCompatibility: 0.5\n          });\n        }\n      }\n    }\n    \n    this.crossAgentPatterns.set(session.id, exchangeMatrix);\n    \n    console.log(`Cross-agent pattern evolution enabled for ${agentIds.length} agents`);\n  }\n\n  /**\n   * Transfer patterns between agents\n   * @param {string} targetAgentId - Target agent ID\n   * @param {Array} patterns - Patterns to transfer\n   */\n  async transferPatterns(targetAgentId, patterns) {\n    const targetData = this.agentPatterns.get(targetAgentId);\n    if (!targetData) return;\n    \n    // Evaluate pattern compatibility\n    const compatiblePatterns = [];\n    \n    for (const pattern of patterns) {\n      const compatibility = await this.evaluatePatternCompatibility(targetAgentId, pattern);\n      \n      if (compatibility > 0.6) {\n        compatiblePatterns.push(pattern);\n      }\n    }\n    \n    // Transfer compatible patterns\n    if (compatiblePatterns.length > 0) {\n      targetData.activePatterns = [...new Set([...targetData.activePatterns, ...compatiblePatterns])];\n      \n      // Update metrics\n      const metrics = this.evolutionMetrics.get(targetAgentId);\n      if (metrics) {\n        metrics.crossAgentTransfers += compatiblePatterns.length;\n      }\n      \n      console.log(`Transferred ${compatiblePatterns.length} patterns to agent ${targetAgentId}`);\n    }\n  }\n\n  /**\n   * Evaluate pattern compatibility with target agent\n   * @param {string} agentId - Target agent ID\n   * @param {Object} pattern - Pattern to evaluate\n   */\n  async evaluatePatternCompatibility(agentId, pattern) {\n    const agentData = this.agentPatterns.get(agentId);\n    if (!agentData) return 0;\n    \n    // Check if pattern type is already present\n    if (agentData.activePatterns.includes(pattern.type)) {\n      return 0.3; // Low compatibility if already present\n    }\n    \n    // Evaluate based on agent's current pattern mix\n    const currentPatternTypes = agentData.activePatterns.map(p => p.split('_')[0]);\n    const patternType = pattern.type?.split('_')[0] || 'unknown';\n    \n    // Check for complementary patterns\n    const complementaryPatterns = {\n      'convergent': ['divergent', 'lateral'],\n      'divergent': ['convergent', 'critical'],\n      'lateral': ['systems', 'convergent'],\n      'systems': ['lateral', 'abstract'],\n      'critical': ['divergent', 'abstract'],\n      'abstract': ['critical', 'systems']\n    };\n    \n    const complements = complementaryPatterns[patternType] || [];\n    const hasComplement = currentPatternTypes.some(ct => complements.includes(ct));\n    \n    return hasComplement ? 0.8 : 0.5;\n  }\n\n  /**\n   * Extract patterns from agent for sharing\n   * @param {string} agentId - Agent identifier\n   */\n  async extractPatterns(agentId) {\n    const agentData = this.agentPatterns.get(agentId);\n    if (!agentData) return [];\n    \n    const extractedPatterns = [];\n    \n    for (const patternType of agentData.activePatterns) {\n      const template = this.patternTemplates.get(patternType);\n      if (!template) continue;\n      \n      extractedPatterns.push({\n        type: patternType,\n        template: template,\n        effectiveness: this.getHistoricalPerformance(agentId, patternType),\n        adaptationHistory: agentData.adaptationHistory.filter(a => a.patternType === patternType),\n        dominance: patternType === agentData.dominantPattern ? 1.0 : 0.5\n      });\n    }\n    \n    return extractedPatterns;\n  }\n\n  /**\n   * Apply pattern updates from coordination\n   * @param {string} agentId - Agent identifier\n   * @param {Array} patternUpdates - Pattern updates\n   */\n  async applyPatternUpdates(agentId, patternUpdates) {\n    const agentData = this.agentPatterns.get(agentId);\n    if (!agentData) return;\n    \n    for (const update of patternUpdates) {\n      if (update.type === 'add_pattern') {\n        if (!agentData.activePatterns.includes(update.pattern)) {\n          agentData.activePatterns.push(update.pattern);\n        }\n      } else if (update.type === 'remove_pattern') {\n        agentData.activePatterns = agentData.activePatterns.filter(p => p !== update.pattern);\n      } else if (update.type === 'modify_pattern') {\n        // Apply modifications to pattern template\n        const template = this.patternTemplates.get(update.pattern);\n        if (template && update.modifications) {\n          Object.assign(template.characteristics, update.modifications);\n        }\n      } else if (update.type === 'set_dominant') {\n        agentData.dominantPattern = update.pattern;\n      }\n    }\n    \n    // Ensure at least one pattern remains active\n    if (agentData.activePatterns.length === 0) {\n      agentData.activePatterns.push('convergent');\n      agentData.dominantPattern = 'convergent';\n    }\n  }\n\n  /**\n   * Calculate aggregation weights for gradient coordination\n   * @param {Array} gradients - Array of gradient sets\n   */\n  calculateAggregationWeights(gradients) {\n    // Weight gradients based on cognitive pattern effectiveness\n    const weights = new Array(gradients.length).fill(1 / gradients.length);\n    \n    // This would typically incorporate pattern effectiveness scores\n    // For now, return uniform weights\n    return weights;\n  }\n\n  /**\n   * Assess cognitive growth for an agent\n   * @param {string} agentId - Agent identifier\n   */\n  async assessGrowth(agentId) {\n    const agentData = this.agentPatterns.get(agentId);\n    const metrics = this.evolutionMetrics.get(agentId);\n    \n    if (!agentData || !metrics) return 0;\n    \n    const growth = {\n      patternDiversity: agentData.activePatterns.length / 6, // Normalize by max patterns\n      evolutionFrequency: metrics.totalEvolutions / Math.max(1, (Date.now() - agentData.lastEvolution) / (24 * 60 * 60 * 1000)),\n      adaptationSuccess: metrics.successfulAdaptations / Math.max(1, metrics.totalEvolutions),\n      crossAgentLearning: metrics.crossAgentTransfers / Math.max(1, metrics.totalEvolutions),\n      emergentPatterns: metrics.emergentPatterns / Math.max(1, metrics.totalEvolutions)\n    };\n    \n    // Calculate overall growth score\n    const overallGrowth = (\n      growth.patternDiversity * 0.2 +\n      growth.evolutionFrequency * 0.2 +\n      growth.adaptationSuccess * 0.3 +\n      growth.crossAgentLearning * 0.15 +\n      growth.emergentPatterns * 0.15\n    );\n    \n    return Math.min(1, overallGrowth);\n  }\n\n  /**\n   * Get statistics for the cognitive evolution system\n   */\n  getStatistics() {\n    const totalAgents = this.agentPatterns.size;\n    let totalEvolutions = 0;\n    let totalPatterns = 0;\n    let avgGrowthScore = 0;\n    \n    for (const [agentId, metrics] of this.evolutionMetrics.entries()) {\n      totalEvolutions += metrics.totalEvolutions;\n      const agentData = this.agentPatterns.get(agentId);\n      if (agentData) {\n        totalPatterns += agentData.activePatterns.length;\n      }\n    }\n    \n    return {\n      totalAgents,\n      totalEvolutions,\n      avgPatternsPerAgent: totalAgents > 0 ? totalPatterns / totalAgents : 0,\n      availablePatternTypes: this.patternTemplates.size,\n      crossAgentSessions: this.crossAgentPatterns.size\n    };\n  }\n\n  /**\n   * Preserve cognitive evolution history before agent reset\n   * @param {string} agentId - Agent identifier\n   */\n  async preserveHistory(agentId) {\n    const agentData = this.agentPatterns.get(agentId);\n    const history = this.evolutionHistory.get(agentId);\n    const metrics = this.evolutionMetrics.get(agentId);\n    \n    return {\n      patterns: agentData ? { ...agentData } : null,\n      history: history ? [...history] : [],\n      metrics: metrics ? { ...metrics } : null\n    };\n  }\n\n  /**\n   * Restore cognitive evolution history after agent reset\n   * @param {string} agentId - Agent identifier\n   * @param {Object} preservedHistory - Preserved history\n   */\n  async restoreHistory(agentId, preservedHistory) {\n    if (preservedHistory.patterns) {\n      this.agentPatterns.set(agentId, preservedHistory.patterns);\n    }\n    \n    if (preservedHistory.history) {\n      this.evolutionHistory.set(agentId, preservedHistory.history);\n    }\n    \n    if (preservedHistory.metrics) {\n      this.evolutionMetrics.set(agentId, preservedHistory.metrics);\n    }\n  }\n}\n\nexport { CognitivePatternEvolution };"],"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","ignoreList":[]}