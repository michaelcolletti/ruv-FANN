{"version":3,"names":["describe","it","expect","beforeEach","afterEach","vi","ClaudeFlowEnhanced","BatchToolEnforcer","ClaudeFlowError","getClaudeFlow","createOptimizedWorkflow","executeWorkflow","getPerformanceReport","validateWorkflow","mockRuvSwarm","initialize","fn","mockResolvedValue","features","simd_support","neural_networks","memory_limit","createSwarm","id","agents","Map","maxAgents","mockMcpTools","swarm_init","topology","agent_spawn","agentId","type","task_orchestrate","taskId","status","memory_usage","used","total","neural_status","active","models","benchmark_run","duration","score","mock","RuvSwarm","EnhancedMCPTools","constructor","_defineProperty","_asyncToGenerator","claudeFlow","batchEnforcer","clearAllMocks","global","_claudeFlowSessionId","undefined","restoreAllMocks","trackOperation","report","getBatchingReport","totalOperations","toBe","batchableOperations","toHaveLength","consoleSpy","spyOn","console","mockImplementation","i","toHaveBeenCalledWith","stringContaining","violations","violationWarnings","has","mockRestore","recommendations","toContain","cleanReport","complianceScore","violationReport","toBeLessThan","sessionId1","getCurrentSessionId","sessionId2","toMatch","now","Date","recentOps","getRecentOperations","oldOps","flow","loadingStrategy","useSIMD","enableNeuralNetworks","debug","enforceBatching","enableSIMD","mockRejectedValueOnce","Error","rejects","toThrow","workflowConfig","name","steps","parallelizable","inputs","outputs","parallelStrategy","workflow","metrics","parallelizationRate","simdEnabled","processorStep","find","s","dependencies","consumerStep","totalSteps","toBeNaN","result","executionId","workflowId","results","toBeInstanceOf","Array","toBeDefined","batchingReport","batches","createExecutionBatches","stepsWithCircularDeps","failWorkflow","toolName","parallelWorkflow","mockResolvedValueOnce","mixedWorkflow","requiresAgent","successCount","filter","r","length","failureCount","toBeGreaterThan","step","parameters","executeStep","executionTime","operation","filePath","success","modelConfig","inputData","shape","modelType","performance","simdSpeedup","ruvSwarm","data","fill","stepId","mcpTools","slow_operation","Promise","coordination","startTime","endTime","calculateExecutionMetrics","parallelSteps","simdSteps","toBeCloseTo","simdUtilization","actualDuration","speedupFactor","workflows","set","activeCoordinations","summary","totalWorkflows","completedCoordinations","batching","batchingEnforced","averageSpeedup","optimizedWorkflow","validation","validateWorkflowOptimization","isOptimized","issues","optimizationScore","unoptimizedWorkflow","batchable","speedup","calculatePotentialSpeedup","parallel","simd","combined","sequentialWorkflow","flow1","flow2","testWorkflow","error","message","code","context","updateExecutionContext","step1","toEqual","step2","Object","keys","task","execution","complexWorkflow","timing","reduce","acc","batchWorkflow","from","_","recoveryWorkflow","successful","failed"],"sources":["claude-flow-enhanced-edge-cases.test.js"],"sourcesContent":["/**\n * Edge Cases and E2E Tests for src/claude-flow-enhanced.js\n * Comprehensive coverage for BatchTool enforcement, parallel execution, and workflow optimization\n */\n\nimport { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';\nimport {\n  ClaudeFlowEnhanced,\n  BatchToolEnforcer,\n  ClaudeFlowError,\n  getClaudeFlow,\n  createOptimizedWorkflow,\n  executeWorkflow,\n  getPerformanceReport,\n  validateWorkflow\n} from '../../src/claude-flow-enhanced.js';\n\n// Mock dependencies\nconst mockRuvSwarm = {\n  initialize: vi.fn().mockResolvedValue({\n    features: {\n      simd_support: true,\n      neural_networks: true,\n      memory_limit: 2 * 1024 * 1024 * 1024\n    },\n    createSwarm: vi.fn().mockResolvedValue({\n      id: 'mock-swarm',\n      agents: new Map(),\n      maxAgents: 10\n    })\n  })\n};\n\nconst mockMcpTools = {\n  initialize: vi.fn().mockResolvedValue(true),\n  swarm_init: vi.fn().mockResolvedValue({\n    id: 'test-swarm',\n    topology: 'hierarchical',\n    maxAgents: 8\n  }),\n  agent_spawn: vi.fn().mockResolvedValue({\n    agentId: 'test-agent',\n    type: 'coordinator'\n  }),\n  task_orchestrate: vi.fn().mockResolvedValue({\n    taskId: 'test-task',\n    status: 'completed'\n  }),\n  memory_usage: vi.fn().mockResolvedValue({\n    used: 1024 * 1024,\n    total: 2 * 1024 * 1024\n  }),\n  neural_status: vi.fn().mockResolvedValue({\n    active: true,\n    models: 5\n  }),\n  benchmark_run: vi.fn().mockResolvedValue({\n    duration: 1500,\n    score: 95.5\n  })\n};\n\n// Mock imports\nvi.mock('../../src/index-enhanced.js', () => ({\n  RuvSwarm: mockRuvSwarm\n}));\n\nvi.mock('../../src/mcp-tools-enhanced.js', () => ({\n  EnhancedMCPTools: class {\n    async initialize() { return true; }\n    swarm_init = mockMcpTools.swarm_init;\n    agent_spawn = mockMcpTools.agent_spawn;\n    task_orchestrate = mockMcpTools.task_orchestrate;\n    memory_usage = mockMcpTools.memory_usage;\n    neural_status = mockMcpTools.neural_status;\n    benchmark_run = mockMcpTools.benchmark_run;\n  }\n}));\n\ndescribe('Claude Flow Enhanced Edge Cases and E2E Tests', () => {\n  let claudeFlow;\n  let batchEnforcer;\n\n  beforeEach(async () => {\n    vi.clearAllMocks();\n    claudeFlow = new ClaudeFlowEnhanced();\n    batchEnforcer = new BatchToolEnforcer();\n    \n    // Reset global session ID\n    global._claudeFlowSessionId = undefined;\n  });\n\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  describe('BatchToolEnforcer Edge Cases', () => {\n    it('should track operations correctly', () => {\n      batchEnforcer.trackOperation('file_operation');\n      batchEnforcer.trackOperation('file_operation');\n      batchEnforcer.trackOperation('mcp_tool');\n      \n      const report = batchEnforcer.getBatchingReport();\n      expect(report.totalOperations).toBe(3);\n      expect(report.batchableOperations).toHaveLength(1);\n      expect(report.batchableOperations[0][0]).toBe('file_operation');\n    });\n\n    it('should detect batching violations', () => {\n      const consoleSpy = vi.spyOn(console, 'warn').mockImplementation(() => {});\n      \n      // Trigger batching violation\n      for (let i = 0; i < 5; i++) {\n        batchEnforcer.trackOperation('file_operation');\n      }\n      \n      expect(consoleSpy).toHaveBeenCalledWith(\n        expect.stringContaining('BATCHING VIOLATION')\n      );\n      \n      const violations = batchEnforcer.violationWarnings;\n      expect(violations.has('file_operation')).toBe(true);\n      \n      consoleSpy.mockRestore();\n    });\n\n    it('should generate appropriate recommendations', () => {\n      // Create multiple violations\n      for (let i = 0; i < 4; i++) {\n        batchEnforcer.trackOperation('file_operation');\n        batchEnforcer.trackOperation('mcp_tool');\n      }\n      \n      const report = batchEnforcer.getBatchingReport();\n      expect(report.recommendations).toContain('🔧 CRITICAL: Use BatchTool for all parallel operations');\n      expect(report.recommendations).toContain('📁 File Operations: Use MultiEdit for multiple edits to same file');\n      expect(report.recommendations).toContain('🤖 MCP Tools: Combine swarm operations in parallel');\n    });\n\n    it('should calculate compliance scores correctly', () => {\n      // No violations = 100% compliance\n      const cleanReport = batchEnforcer.getBatchingReport();\n      expect(cleanReport.complianceScore).toBe(100);\n      \n      // Add violations\n      for (let i = 0; i < 3; i++) {\n        batchEnforcer.trackOperation('file_operation');\n      }\n      \n      const violationReport = batchEnforcer.getBatchingReport();\n      expect(violationReport.complianceScore).toBeLessThan(100);\n    });\n\n    it('should handle session ID generation correctly', () => {\n      const sessionId1 = batchEnforcer.getCurrentSessionId();\n      const sessionId2 = batchEnforcer.getCurrentSessionId();\n      \n      expect(sessionId1).toBe(sessionId2);\n      expect(sessionId1).toMatch(/^\\d+$/);\n    });\n\n    it('should filter recent operations correctly', () => {\n      const now = Date.now();\n      \n      // Add old operation\n      batchEnforcer.trackOperation('old_operation', now - 10000);\n      \n      // Add recent operations\n      batchEnforcer.trackOperation('recent_operation', now - 1000);\n      batchEnforcer.trackOperation('recent_operation', now - 500);\n      \n      const recentOps = batchEnforcer.getRecentOperations('recent_operation', 5000);\n      expect(recentOps).toHaveLength(2);\n      \n      const oldOps = batchEnforcer.getRecentOperations('old_operation', 5000);\n      expect(oldOps).toHaveLength(0);\n    });\n  });\n\n  describe('ClaudeFlowEnhanced Initialization Edge Cases', () => {\n    it('should initialize successfully with default options', async () => {\n      const flow = await claudeFlow.initialize();\n      \n      expect(flow).toBe(claudeFlow);\n      expect(mockRuvSwarm.initialize).toHaveBeenCalledWith({\n        loadingStrategy: 'progressive',\n        useSIMD: true,\n        enableNeuralNetworks: true,\n        debug: false\n      });\n    });\n\n    it('should handle custom initialization options', async () => {\n      await claudeFlow.initialize({\n        enforceBatching: false,\n        enableSIMD: false,\n        enableNeuralNetworks: false,\n        debug: true\n      });\n      \n      expect(mockRuvSwarm.initialize).toHaveBeenCalledWith({\n        loadingStrategy: 'progressive',\n        useSIMD: false,\n        enableNeuralNetworks: false,\n        debug: true\n      });\n    });\n\n    it('should handle initialization failures gracefully', async () => {\n      mockRuvSwarm.initialize.mockRejectedValueOnce(new Error('WASM load failed'));\n      \n      await expect(claudeFlow.initialize()).rejects.toThrow(ClaudeFlowError);\n      await expect(claudeFlow.initialize()).rejects.toThrow('Initialization failed: WASM load failed');\n    });\n\n    it('should enable batch tool enforcement when requested', async () => {\n      const consoleSpy = vi.spyOn(console, 'log').mockImplementation(() => {});\n      \n      await claudeFlow.initialize({ enforceBatching: true });\n      \n      expect(consoleSpy).toHaveBeenCalledWith(\n        expect.stringContaining('BatchTool enforcement enabled')\n      );\n      \n      consoleSpy.mockRestore();\n    });\n\n    it('should handle MCP tools initialization failure', async () => {\n      mockMcpTools.initialize.mockRejectedValueOnce(new Error('MCP init failed'));\n      \n      await expect(claudeFlow.initialize()).rejects.toThrow(ClaudeFlowError);\n    });\n  });\n\n  describe('Workflow Creation Edge Cases', () => {\n    beforeEach(async () => {\n      await claudeFlow.initialize();\n    });\n\n    it('should create optimized workflow with full configuration', async () => {\n      const workflowConfig = {\n        id: 'complex-workflow',\n        name: 'Complex Test Workflow',\n        steps: [\n          {\n            id: 'step1',\n            type: 'file_read',\n            parallelizable: true,\n            inputs: [],\n            outputs: ['data1']\n          },\n          {\n            id: 'step2',\n            type: 'mcp_tool_call',\n            parallelizable: true,\n            inputs: ['data1'],\n            outputs: ['result1']\n          },\n          {\n            id: 'step3',\n            type: 'neural_inference',\n            parallelizable: true,\n            inputs: ['result1'],\n            outputs: ['prediction']\n          }\n        ],\n        parallelStrategy: 'aggressive',\n        enableSIMD: true\n      };\n      \n      const workflow = await claudeFlow.createOptimizedWorkflow(workflowConfig);\n      \n      expect(workflow.id).toBe('complex-workflow');\n      expect(workflow.name).toBe('Complex Test Workflow');\n      expect(workflow.metrics.parallelizationRate).toBe(1.0); // 100% parallelizable\n      expect(workflow.simdEnabled).toBe(true);\n    });\n\n    it('should handle workflows with low parallelization potential', async () => {\n      const consoleSpy = vi.spyOn(console, 'warn').mockImplementation(() => {});\n      \n      const workflowConfig = {\n        name: 'Sequential Workflow',\n        steps: [\n          { id: 'step1', type: 'custom', parallelizable: false },\n          { id: 'step2', type: 'custom', parallelizable: false },\n          { id: 'step3', type: 'file_read', parallelizable: true }\n        ]\n      };\n      \n      await claudeFlow.createOptimizedWorkflow(workflowConfig);\n      \n      expect(consoleSpy).toHaveBeenCalledWith(\n        expect.stringContaining('low parallelization potential')\n      );\n      \n      consoleSpy.mockRestore();\n    });\n\n    it('should generate workflow IDs when not provided', async () => {\n      const workflow = await claudeFlow.createOptimizedWorkflow({\n        name: 'Auto ID Workflow',\n        steps: []\n      });\n      \n      expect(workflow.id).toMatch(/^workflow_\\d+$/);\n    });\n\n    it('should analyze step dependencies correctly', async () => {\n      const steps = [\n        {\n          id: 'producer',\n          type: 'file_read',\n          inputs: [],\n          outputs: ['file_content']\n        },\n        {\n          id: 'processor',\n          type: 'data_processing',\n          inputs: ['file_content'],\n          outputs: ['processed_data']\n        },\n        {\n          id: 'consumer',\n          type: 'file_write',\n          inputs: ['processed_data'],\n          outputs: []\n        }\n      ];\n      \n      const workflow = await claudeFlow.createOptimizedWorkflow({\n        name: 'Dependency Test',\n        steps\n      });\n      \n      const processorStep = workflow.steps.find(s => s.id === 'processor');\n      expect(processorStep.dependencies).toContain('producer');\n      \n      const consumerStep = workflow.steps.find(s => s.id === 'consumer');\n      expect(consumerStep.dependencies).toContain('processor');\n    });\n\n    it('should handle empty or minimal workflows', async () => {\n      const workflow = await claudeFlow.createOptimizedWorkflow({\n        name: 'Empty Workflow',\n        steps: []\n      });\n      \n      expect(workflow.metrics.totalSteps).toBe(0);\n      expect(workflow.metrics.parallelizationRate).toBeNaN();\n    });\n  });\n\n  describe('Workflow Execution Edge Cases', () => {\n    let workflow;\n\n    beforeEach(async () => {\n      await claudeFlow.initialize();\n      workflow = await claudeFlow.createOptimizedWorkflow({\n        id: 'test-execution',\n        name: 'Test Execution Workflow',\n        steps: [\n          { id: 'step1', type: 'mcp_tool_call', parallelizable: true, dependencies: [] },\n          { id: 'step2', type: 'file_operation', parallelizable: true, dependencies: [] },\n          { id: 'step3', type: 'neural_inference', parallelizable: true, dependencies: ['step1'] }\n        ]\n      });\n    });\n\n    it('should execute workflow successfully', async () => {\n      const result = await claudeFlow.executeWorkflow('test-execution');\n      \n      expect(result.executionId).toMatch(/^exec_test-execution_\\d+$/);\n      expect(result.status).toBe('completed');\n      expect(result.workflowId).toBe('test-execution');\n      expect(result.results).toBeInstanceOf(Array);\n      expect(result.metrics).toBeDefined();\n      expect(result.batchingReport).toBeDefined();\n    });\n\n    it('should handle non-existent workflow', async () => {\n      await expect(claudeFlow.executeWorkflow('non-existent')).rejects.toThrow(ClaudeFlowError);\n      await expect(claudeFlow.executeWorkflow('non-existent')).rejects.toThrow('Workflow not found');\n    });\n\n    it('should create execution batches correctly', async () => {\n      const steps = [\n        { id: 'a', dependencies: [] },\n        { id: 'b', dependencies: [] },\n        { id: 'c', dependencies: ['a'] },\n        { id: 'd', dependencies: ['b'] },\n        { id: 'e', dependencies: ['c', 'd'] }\n      ];\n      \n      const batches = claudeFlow.createExecutionBatches(steps);\n      \n      expect(batches).toHaveLength(3);\n      expect(batches[0]).toHaveLength(2); // a, b\n      expect(batches[1]).toHaveLength(2); // c, d\n      expect(batches[2]).toHaveLength(1); // e\n    });\n\n    it('should detect circular dependencies', async () => {\n      const stepsWithCircularDeps = [\n        { id: 'a', dependencies: ['b'] },\n        { id: 'b', dependencies: ['c'] },\n        { id: 'c', dependencies: ['a'] }\n      ];\n      \n      expect(() => claudeFlow.createExecutionBatches(stepsWithCircularDeps))\n        .toThrow(ClaudeFlowError);\n      expect(() => claudeFlow.createExecutionBatches(stepsWithCircularDeps))\n        .toThrow('Circular dependency detected');\n    });\n\n    it('should handle step execution failures gracefully', async () => {\n      // Mock a failing MCP tool call\n      mockMcpTools.task_orchestrate.mockRejectedValueOnce(new Error('Task failed'));\n      \n      const failWorkflow = await claudeFlow.createOptimizedWorkflow({\n        id: 'fail-test',\n        name: 'Failure Test',\n        steps: [{ id: 'fail-step', type: 'mcp_tool_call', toolName: 'task_orchestrate' }]\n      });\n      \n      await expect(claudeFlow.executeWorkflow('fail-test')).rejects.toThrow(ClaudeFlowError);\n    });\n\n    it('should execute parallel steps in batches', async () => {\n      const parallelWorkflow = await claudeFlow.createOptimizedWorkflow({\n        id: 'parallel-test',\n        name: 'Parallel Test',\n        steps: [\n          { id: 'p1', type: 'mcp_tool_call', dependencies: [] },\n          { id: 'p2', type: 'mcp_tool_call', dependencies: [] },\n          { id: 'p3', type: 'mcp_tool_call', dependencies: [] }\n        ]\n      });\n      \n      const result = await claudeFlow.executeWorkflow('parallel-test');\n      \n      expect(result.status).toBe('completed');\n      expect(result.results).toHaveLength(3);\n    });\n\n    it('should handle mixed success and failure in parallel batches', async () => {\n      // Mock one success and one failure\n      mockMcpTools.agent_spawn\n        .mockResolvedValueOnce({ agentId: 'success-agent' })\n        .mockRejectedValueOnce(new Error('Agent spawn failed'));\n      \n      const mixedWorkflow = await claudeFlow.createOptimizedWorkflow({\n        id: 'mixed-test',\n        name: 'Mixed Results Test',\n        steps: [\n          { id: 'success', type: 'mcp_tool_call', requiresAgent: true },\n          { id: 'failure', type: 'mcp_tool_call', requiresAgent: true }\n        ]\n      });\n      \n      const result = await claudeFlow.executeWorkflow('mixed-test');\n      \n      expect(result.results).toHaveLength(2);\n      const successCount = result.results.filter(r => r.status === 'completed').length;\n      const failureCount = result.results.filter(r => r.status === 'failed').length;\n      \n      expect(successCount).toBeGreaterThan(0);\n      expect(failureCount).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Step Execution Edge Cases', () => {\n    beforeEach(async () => {\n      await claudeFlow.initialize();\n    });\n\n    it('should execute MCP tool steps correctly', async () => {\n      const step = {\n        type: 'mcp_tool_call',\n        toolName: 'swarm_init',\n        parameters: { topology: 'mesh' }\n      };\n      \n      const result = await claudeFlow.executeStep(step, {}, null);\n      \n      expect(result.executionTime).toBeGreaterThan(0);\n      expect(mockMcpTools.swarm_init).toHaveBeenCalledWith({ topology: 'mesh' });\n    });\n\n    it('should handle unknown MCP tool gracefully', async () => {\n      const step = {\n        type: 'mcp_tool_call',\n        toolName: 'unknown_tool',\n        parameters: {}\n      };\n      \n      await expect(claudeFlow.executeStep(step, {}, null)).rejects.toThrow(ClaudeFlowError);\n      await expect(claudeFlow.executeStep(step, {}, null)).rejects.toThrow('Unknown MCP tool');\n    });\n\n    it('should execute file operation steps', async () => {\n      const step = {\n        type: 'file_operation',\n        operation: 'read',\n        filePath: '/test/file.txt'\n      };\n      \n      const result = await claudeFlow.executeStep(step, {}, null);\n      \n      expect(result.operation).toBe('read');\n      expect(result.filePath).toBe('/test/file.txt');\n      expect(result.success).toBe(true);\n    });\n\n    it('should execute neural inference steps with SIMD', async () => {\n      const step = {\n        type: 'neural_inference',\n        modelConfig: { type: 'transformer' },\n        inputData: { shape: [1, 512] },\n        enableSIMD: true\n      };\n      \n      const result = await claudeFlow.executeStep(step, {}, null);\n      \n      expect(result.modelType).toBe('transformer');\n      expect(result.simdEnabled).toBe(true);\n      expect(result.performance.simdSpeedup).toBe(3.2);\n    });\n\n    it('should handle neural inference without neural networks enabled', async () => {\n      // Mock features to disable neural networks\n      claudeFlow.ruvSwarm = { features: { neural_networks: false } };\n      \n      const step = {\n        type: 'neural_inference',\n        modelConfig: { type: 'transformer' }\n      };\n      \n      await expect(claudeFlow.executeStep(step, {}, null)).rejects.toThrow(ClaudeFlowError);\n      await expect(claudeFlow.executeStep(step, {}, null)).rejects.toThrow('Neural networks not available');\n    });\n\n    it('should execute data processing steps with SIMD optimization', async () => {\n      const step = {\n        type: 'data_processing',\n        operation: 'matrix_multiply',\n        data: new Array(1000).fill(1),\n        enableSIMD: true\n      };\n      \n      const result = await claudeFlow.executeStep(step, {}, null);\n      \n      expect(result.operation).toBe('matrix_multiply');\n      expect(result.simdEnabled).toBe(true);\n      expect(result.performance.simdSpeedup).toBe(4.1);\n    });\n\n    it('should execute generic steps', async () => {\n      const step = {\n        id: 'generic-step',\n        type: 'custom_operation'\n      };\n      \n      const result = await claudeFlow.executeStep(step, {}, null);\n      \n      expect(result.stepId).toBe('generic-step');\n      expect(result.type).toBe('custom_operation');\n      expect(result.status).toBe('completed');\n    });\n\n    it('should handle step execution timeouts', async () => {\n      const step = {\n        type: 'mcp_tool_call',\n        toolName: 'slow_operation'\n      };\n      \n      // Mock a slow operation\n      claudeFlow.mcpTools.slow_operation = () => new Promise(() => {}); // Never resolves\n      \n      // This would timeout in a real scenario, but we'll mock the timeout behavior\n      await expect(claudeFlow.executeStep(step, {}, null)).rejects.toThrow();\n    });\n  });\n\n  describe('Performance Metrics Edge Cases', () => {\n    beforeEach(async () => {\n      await claudeFlow.initialize();\n    });\n\n    it('should calculate execution metrics correctly', async () => {\n      const workflow = {\n        steps: [\n          { parallelizable: true, enableSIMD: true },\n          { parallelizable: true, enableSIMD: false },\n          { parallelizable: false, enableSIMD: true }\n        ]\n      };\n      \n      const coordination = {\n        duration: 2500,\n        startTime: Date.now() - 2500,\n        endTime: Date.now()\n      };\n      \n      const metrics = claudeFlow.calculateExecutionMetrics(workflow, coordination);\n      \n      expect(metrics.totalSteps).toBe(3);\n      expect(metrics.parallelSteps).toBe(2);\n      expect(metrics.simdSteps).toBe(2);\n      expect(metrics.parallelizationRate).toBeCloseTo(0.667, 2);\n      expect(metrics.simdUtilization).toBeCloseTo(0.667, 2);\n      expect(metrics.actualDuration).toBe(2500);\n      expect(metrics.speedupFactor).toBeGreaterThan(1);\n    });\n\n    it('should generate comprehensive performance report', async () => {\n      // Set up some test data\n      claudeFlow.workflows.set('test-1', {\n        id: 'test-1',\n        name: 'Test 1',\n        metrics: { parallelizationRate: 0.8, totalSteps: 5 }\n      });\n      \n      claudeFlow.activeCoordinations.set('coord-1', {\n        status: 'completed',\n        metrics: { speedupFactor: 2.5 }\n      });\n      \n      claudeFlow.activeCoordinations.set('coord-2', {\n        status: 'running'\n      });\n      \n      const report = claudeFlow.getPerformanceReport();\n      \n      expect(report.summary.totalWorkflows).toBe(1);\n      expect(report.summary.activeCoordinations).toBe(1);\n      expect(report.summary.completedCoordinations).toBe(1);\n      expect(report.batching).toBeDefined();\n      expect(report.features.batchingEnforced).toBe(true);\n      expect(report.workflows).toHaveLength(1);\n      expect(report.recommendations).toBeInstanceOf(Array);\n    });\n\n    it('should handle empty performance data', async () => {\n      const report = claudeFlow.getPerformanceReport();\n      \n      expect(report.summary.totalWorkflows).toBe(0);\n      expect(report.summary.averageSpeedup).toBeNaN();\n    });\n  });\n\n  describe('Workflow Validation Edge Cases', () => {\n    beforeEach(async () => {\n      await claudeFlow.initialize();\n    });\n\n    it('should validate optimized workflows', async () => {\n      const optimizedWorkflow = {\n        steps: [\n          { type: 'file_read', parallelizable: true },\n          { type: 'neural_inference', parallelizable: true, enableSIMD: true },\n          { type: 'mcp_tool_call', parallelizable: true }\n        ]\n      };\n      \n      const validation = claudeFlow.validateWorkflowOptimization(optimizedWorkflow);\n      \n      expect(validation.isOptimized).toBe(true);\n      expect(validation.issues).toHaveLength(0);\n      expect(validation.optimizationScore).toBe(100);\n    });\n\n    it('should detect optimization issues', async () => {\n      const unoptimizedWorkflow = {\n        steps: [\n          { type: 'custom', parallelizable: false },\n          { type: 'custom', parallelizable: false },\n          { type: 'neural_inference', parallelizable: true, enableSIMD: false },\n          { type: 'file_read', parallelizable: true }\n        ]\n      };\n      \n      const validation = claudeFlow.validateWorkflowOptimization(unoptimizedWorkflow);\n      \n      expect(validation.isOptimized).toBe(false);\n      expect(validation.issues.length).toBeGreaterThan(0);\n      expect(validation.optimizationScore).toBeLessThan(100);\n      expect(validation.recommendations.length).toBeGreaterThan(0);\n    });\n\n    it('should calculate potential speedup correctly', async () => {\n      const workflow = {\n        steps: [\n          { type: 'neural_inference', batchable: true },\n          { type: 'data_processing', batchable: true },\n          { type: 'mcp_tool_call', batchable: true },\n          { type: 'file_read', batchable: false },\n          { type: 'file_write', batchable: false }\n        ]\n      };\n      \n      const speedup = claudeFlow.calculatePotentialSpeedup(workflow);\n      \n      expect(speedup.parallel).toBe(2.8);\n      expect(speedup.simd).toBe(3.5);\n      expect(speedup.batching).toBe(1.8);\n      expect(speedup.combined).toBeCloseTo(17.64, 1); // 2.8 * 3.5 * 1.8\n    });\n\n    it('should handle workflows with no optimization potential', async () => {\n      const sequentialWorkflow = {\n        steps: [\n          { type: 'custom', batchable: false },\n          { type: 'legacy', batchable: false }\n        ]\n      };\n      \n      const speedup = claudeFlow.calculatePotentialSpeedup(sequentialWorkflow);\n      \n      expect(speedup.parallel).toBe(1.0);\n      expect(speedup.simd).toBe(1.0);\n      expect(speedup.batching).toBe(1.0);\n      expect(speedup.combined).toBe(1.0);\n    });\n  });\n\n  describe('Global Functions Edge Cases', () => {\n    it('should create and reuse claude flow instance', async () => {\n      const flow1 = await getClaudeFlow();\n      const flow2 = await getClaudeFlow();\n      \n      expect(flow1).toBe(flow2);\n      expect(flow1).toBeInstanceOf(ClaudeFlowEnhanced);\n    });\n\n    it('should create optimized workflow through global function', async () => {\n      const workflow = await createOptimizedWorkflow({\n        name: 'Global Test',\n        steps: [{ id: 'test', type: 'file_read' }]\n      });\n      \n      expect(workflow.name).toBe('Global Test');\n      expect(workflow.id).toBeDefined();\n    });\n\n    it('should execute workflow through global function', async () => {\n      // First create a workflow\n      const workflow = await createOptimizedWorkflow({\n        id: 'global-exec-test',\n        name: 'Global Execution Test',\n        steps: [{ id: 'test', type: 'mcp_tool_call', toolName: 'swarm_init' }]\n      });\n      \n      const result = await executeWorkflow('global-exec-test');\n      \n      expect(result.workflowId).toBe('global-exec-test');\n      expect(result.status).toBe('completed');\n    });\n\n    it('should get performance report through global function', async () => {\n      const report = await getPerformanceReport();\n      \n      expect(report).toBeDefined();\n      expect(report.summary).toBeDefined();\n      expect(report.batching).toBeDefined();\n    });\n\n    it('should validate workflow through global function', async () => {\n      const testWorkflow = {\n        steps: [\n          { type: 'file_read', parallelizable: true },\n          { type: 'neural_inference', enableSIMD: true }\n        ]\n      };\n      \n      const validation = await validateWorkflow(testWorkflow);\n      \n      expect(validation.isOptimized).toBeDefined();\n      expect(validation.optimizationScore).toBeDefined();\n    });\n  });\n\n  describe('Error Handling Edge Cases', () => {\n    beforeEach(async () => {\n      await claudeFlow.initialize();\n    });\n\n    it('should create ClaudeFlowError with correct properties', () => {\n      const error = new ClaudeFlowError('Test error', 'TEST_CODE');\n      \n      expect(error.message).toBe('Test error');\n      expect(error.name).toBe('ClaudeFlowError');\n      expect(error.code).toBe('TEST_CODE');\n      expect(error).toBeInstanceOf(Error);\n    });\n\n    it('should use default error code when not provided', () => {\n      const error = new ClaudeFlowError('Default code test');\n      \n      expect(error.code).toBe('CLAUDE_FLOW_ERROR');\n    });\n\n    it('should handle context updates correctly', async () => {\n      const context = {};\n      const results = [\n        { stepId: 'step1', result: { data: 'result1' } },\n        { stepId: 'step2', result: { data: 'result2' } },\n        { result: { data: 'no-step-id' } } // Should be ignored\n      ];\n      \n      claudeFlow.updateExecutionContext(context, results);\n      \n      expect(context.step1).toEqual({ data: 'result1' });\n      expect(context.step2).toEqual({ data: 'result2' });\n      expect(Object.keys(context)).toHaveLength(2);\n    });\n\n    it('should handle missing workflow dependencies gracefully', async () => {\n      const workflow = await claudeFlow.createOptimizedWorkflow({\n        id: 'missing-deps',\n        name: 'Missing Dependencies Test',\n        steps: [\n          { id: 'step1', dependencies: ['non-existent'] }\n        ]\n      });\n      \n      await expect(claudeFlow.executeWorkflow('missing-deps')).rejects.toThrow(ClaudeFlowError);\n    });\n  });\n\n  describe('End-to-End Claude Flow Tests', () => {\n    it('should complete full workflow lifecycle', async () => {\n      // Step 1: Initialize Claude Flow\n      await claudeFlow.initialize({\n        enforceBatching: true,\n        enableSIMD: true,\n        enableNeuralNetworks: true\n      });\n      \n      // Step 2: Create optimized workflow\n      const workflow = await claudeFlow.createOptimizedWorkflow({\n        id: 'e2e-test',\n        name: 'End-to-End Test Workflow',\n        steps: [\n          {\n            id: 'init',\n            type: 'mcp_tool_call',\n            toolName: 'swarm_init',\n            parameters: { topology: 'mesh' },\n            parallelizable: true,\n            dependencies: []\n          },\n          {\n            id: 'spawn-agents',\n            type: 'mcp_tool_call',\n            toolName: 'agent_spawn',\n            parameters: { type: 'coordinator' },\n            parallelizable: true,\n            dependencies: ['init']\n          },\n          {\n            id: 'neural-task',\n            type: 'neural_inference',\n            modelConfig: { type: 'transformer' },\n            inputData: { shape: [1, 512] },\n            enableSIMD: true,\n            parallelizable: true,\n            dependencies: []\n          },\n          {\n            id: 'orchestrate',\n            type: 'mcp_tool_call',\n            toolName: 'task_orchestrate',\n            parameters: { task: 'final-task' },\n            parallelizable: false,\n            dependencies: ['spawn-agents', 'neural-task']\n          }\n        ],\n        parallelStrategy: 'aggressive'\n      });\n      \n      expect(workflow.id).toBe('e2e-test');\n      expect(workflow.metrics.totalSteps).toBe(4);\n      \n      // Step 3: Validate workflow optimization\n      const validation = claudeFlow.validateWorkflowOptimization(workflow);\n      expect(validation.optimizationScore).toBeGreaterThan(50);\n      \n      // Step 4: Execute workflow\n      const execution = await claudeFlow.executeWorkflow('e2e-test');\n      \n      expect(execution.status).toBe('completed');\n      expect(execution.workflowId).toBe('e2e-test');\n      expect(execution.results).toHaveLength(4);\n      expect(execution.metrics).toBeDefined();\n      \n      // Step 5: Check performance report\n      const report = claudeFlow.getPerformanceReport();\n      \n      expect(report.summary.totalWorkflows).toBe(1);\n      expect(report.summary.completedCoordinations).toBe(1);\n      expect(report.workflows[0].id).toBe('e2e-test');\n    });\n\n    it('should handle complex parallel execution scenarios', async () => {\n      await claudeFlow.initialize();\n      \n      // Create workflow with complex dependencies\n      const complexWorkflow = await claudeFlow.createOptimizedWorkflow({\n        id: 'complex-parallel',\n        name: 'Complex Parallel Workflow',\n        steps: [\n          // Parallel batch 1\n          { id: 'a1', type: 'file_read', dependencies: [] },\n          { id: 'a2', type: 'file_read', dependencies: [] },\n          { id: 'a3', type: 'file_read', dependencies: [] },\n          \n          // Parallel batch 2 (depends on batch 1)\n          { id: 'b1', type: 'data_processing', dependencies: ['a1', 'a2'] },\n          { id: 'b2', type: 'data_processing', dependencies: ['a2', 'a3'] },\n          \n          // Parallel batch 3 (depends on batch 2)\n          { id: 'c1', type: 'neural_inference', dependencies: ['b1'] },\n          { id: 'c2', type: 'neural_inference', dependencies: ['b2'] },\n          \n          // Final step (depends on all previous)\n          { id: 'final', type: 'mcp_tool_call', dependencies: ['c1', 'c2'] }\n        ]\n      });\n      \n      const execution = await claudeFlow.executeWorkflow('complex-parallel');\n      \n      expect(execution.status).toBe('completed');\n      expect(execution.results).toHaveLength(8);\n      \n      // Verify execution order through timing\n      const timing = execution.results.reduce((acc, result) => {\n        acc[result.stepId] = result.executionTime || 0;\n        return acc;\n      }, {});\n      \n      // All steps should have been executed\n      expect(Object.keys(timing)).toHaveLength(8);\n    });\n\n    it('should demonstrate batch tool enforcement benefits', async () => {\n      await claudeFlow.initialize({ enforceBatching: true });\n      \n      // Create workflow that would benefit from batching\n      const batchWorkflow = await claudeFlow.createOptimizedWorkflow({\n        id: 'batch-demo',\n        name: 'Batch Demonstration',\n        steps: Array.from({ length: 10 }, (_, i) => ({\n          id: `parallel-${i}`,\n          type: 'mcp_tool_call',\n          toolName: 'agent_spawn',\n          parallelizable: true,\n          dependencies: []\n        }))\n      });\n      \n      const execution = await claudeFlow.executeWorkflow('batch-demo');\n      \n      expect(execution.status).toBe('completed');\n      expect(execution.results).toHaveLength(10);\n      \n      // Should show good batching compliance\n      expect(execution.batchingReport.complianceScore).toBeGreaterThan(80);\n      \n      // Should demonstrate speedup\n      expect(execution.metrics.speedupFactor).toBeGreaterThan(2);\n    });\n\n    it('should handle error recovery and partial execution', async () => {\n      await claudeFlow.initialize();\n      \n      // Mock some operations to fail\n      mockMcpTools.agent_spawn\n        .mockResolvedValueOnce({ agentId: 'success-1' })\n        .mockRejectedValueOnce(new Error('Network timeout'))\n        .mockResolvedValueOnce({ agentId: 'success-2' })\n        .mockRejectedValueOnce(new Error('Service unavailable'));\n      \n      const recoveryWorkflow = await claudeFlow.createOptimizedWorkflow({\n        id: 'error-recovery',\n        name: 'Error Recovery Test',\n        steps: [\n          { id: 'task1', type: 'mcp_tool_call', toolName: 'agent_spawn', requiresAgent: true },\n          { id: 'task2', type: 'mcp_tool_call', toolName: 'agent_spawn', requiresAgent: true },\n          { id: 'task3', type: 'mcp_tool_call', toolName: 'agent_spawn', requiresAgent: true },\n          { id: 'task4', type: 'mcp_tool_call', toolName: 'agent_spawn', requiresAgent: true }\n        ]\n      });\n      \n      const execution = await claudeFlow.executeWorkflow('error-recovery');\n      \n      expect(execution.results).toHaveLength(4);\n      \n      const successful = execution.results.filter(r => r.status === 'completed');\n      const failed = execution.results.filter(r => r.status === 'failed');\n      \n      expect(successful).toHaveLength(2);\n      expect(failed).toHaveLength(2);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}