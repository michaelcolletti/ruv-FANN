{"version":3,"names":["cov_2ppxhj1wxg","actualCoverage","asyncGeneratorStep","n","t","e","r","o","a","c","i","u","value","done","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","_classPrivateMethodInitSpec","_checkPrivateRedeclaration","add","has","TypeError","_assertClassBrand","length","path","promises","fs","fileURLToPath","pathToFileURL","webcrypto","nodeCrypto","crypto","s","_ref","b","globalThis","__filename","import","meta","url","__dirname","dirname","_WasmModuleLoader_brand","WeakSet","WasmModuleLoader","constructor","f","modules","Map","loadingPromises","loadingStrategy","baseDir","wasmCache","cacheTimeout","moduleManifest","core","jsBindings","size","priority","dependencies","exists","type","neural","optional","forecasting","swarm","persistence","initialize","_this","strategy","_loadAllModules","call","_loadCoreOnly","_setupLazyProxies","Error","loadModule","name","_this2","get","info","coreMod","set","all","map","dep","p","_loadCoreBindings","_instantiateRaw","m","console","log","_fmt","delete","getModuleStatus","Object","entries","_ref2","_this$modules$get","loaded","loading","placeholder","isPlaceholder","deps","getTotalMemoryUsage","totalBytes","module","memory","buffer","byteLength","clearCache","cacheSize","clear","optimizeMemory","now","Date","expired","key","cached","timestamp","global","gc","memoryUsage","expiredEntries","_x","_x2","_instantiateRaw2","wasmPath","join","cacheKey","window","resp","fetch","ok","statusText","arrayBuffer","readFile","catch","_placeholder","imports","_importsFor","instance","WebAssembly","instantiate","result","exports","_loadCoreBindings2","loaderURL","href","loaderModule","bindingsLoader","default","error","warn","message","includes","_error$stack","stack","split","slice","base","env","Memory","initial","maximum","wasi_snapshot_preview1","proc_exit","fd_write","random_get","ptr","len","view","Uint8Array","getRandomValues","log_training_progress","l","log_forecast","h","mem","_loadCoreOnly2","_loadAllModules2","keys","proxyBag","Proxy","_","k","Math","floor","toFixed"],"sources":["wasm-loader.js"],"sourcesContent":["/* wasm-module-loader.js\n * Universal (ESM + CJS) progressive WASM loader.\n * Author: Bron refactor 2025‑07‑01\n */\n\nimport path from 'node:path';\nimport { promises as fs } from 'node:fs';\nimport { fileURLToPath, pathToFileURL } from 'node:url';\nimport { webcrypto as nodeCrypto } from 'node:crypto';\n\n// ────────────────────────────────────────────────────────────────────────────────\n// helpers ────────────────────────────────────────────────────────────────────────\nconst crypto = globalThis.crypto ?? nodeCrypto; // browser | Node\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// ────────────────────────────────────────────────────────────────────────────────\nclass WasmModuleLoader {\n  constructor() {\n    this.modules = new Map();\n    this.loadingPromises = new Map();\n    this.loadingStrategy = 'on-demand'; // eager | on-demand | progressive\n    this.baseDir = __dirname; // one-liner dirname\n    this.wasmCache = new Map(); // Cache compiled WASM modules\n    this.cacheTimeout = 3600000; // 1 hour cache timeout\n    this.moduleManifest = {\n      /* The only compiled artefact today. Others are historical → optional */\n      core: {\n        path: '../wasm/ruv_swarm_wasm_bg.wasm',\n        jsBindings: '../wasm/ruv_swarm_wasm.js',\n        size: 512 * 1024,\n        priority: 'high',\n        dependencies: [],\n        exists: true,\n        type: 'wasm-bindgen',\n      },\n\n      /* legacy / optional stubs */\n      neural: { path: '../wasm/ruv-fann.wasm', size: 1024 * 1024, priority: 'medium', dependencies: ['core'], exists: false, optional: true },\n      forecasting: { path: '../wasm/neuro-divergent.wasm', size: 1536 * 1024, priority: 'medium', dependencies: ['core'], exists: false, optional: true },\n      swarm: { path: '../wasm/ruv-swarm-orchestration.wasm', size: 768 * 1024, priority: 'high', dependencies: ['core'], exists: false, optional: true },\n      persistence: { path: '../wasm/ruv-swarm-persistence.wasm', size: 256 * 1024, priority: 'high', dependencies: ['core'], exists: false, optional: true },\n    };\n  }\n\n  /* ── public API ───────────────────────────────────────────────────────────── */\n  async initialize(strategy = 'progressive') {\n    this.loadingStrategy = strategy;\n    if (strategy === 'eager') {\n      return this.#loadAllModules();\n    }\n    if (strategy === 'progressive') {\n      return this.#loadCoreOnly();\n    }\n    if (strategy === 'on-demand') {\n      return this.#setupLazyProxies();\n    }\n    throw new Error(`Unknown loading strategy: ${strategy}`);\n  }\n\n  async loadModule(name) {\n    if (this.modules.has(name)) {\n      return this.modules.get(name);\n    }\n    if (this.loadingPromises.has(name)) {\n      return this.loadingPromises.get(name);\n    }\n\n    const info = this.moduleManifest[name];\n    if (!info) {\n      throw new Error(`Unknown module: ${name}`);\n    }\n\n    /* optional module not built – silently alias to core when possible */\n    if (!info.exists && info.optional) {\n      await this.loadModule('core');\n      const coreMod = this.modules.get('core');\n      this.modules.set(name, coreMod);\n      return coreMod;\n    }\n\n    /* ensure deps first */\n    await Promise.all(info.dependencies.map(dep => this.loadModule(dep)));\n\n    const p = (name === 'core')\n      ? this.#loadCoreBindings()\n      : this.#instantiateRaw(name, info);\n\n    this.loadingPromises.set(name, p);\n    try {\n      const m = await p;\n      this.modules.set(name, m);\n      console.log(`✅  Loaded WASM module: ${name} (${this.#fmt(info.size)})`);\n      return m;\n    } finally {\n      this.loadingPromises.delete(name);\n    }\n  }\n\n  getModuleStatus() {\n    const s = {};\n    for (const [n, i] of Object.entries(this.moduleManifest)) {\n      s[n] = {\n        loaded: this.modules.has(n),\n        loading: this.loadingPromises.has(n),\n        placeholder: this.modules.get(n)?.isPlaceholder ?? false,\n        size: i.size,\n        priority: i.priority,\n        deps: i.dependencies,\n      };\n    }\n    return s;\n  }\n\n  /* ── internal ─────────────────────────────────────────────────────────────── */\n  async #instantiateRaw(name, info) {\n    const wasmPath = path.join(this.baseDir, info.path);\n    const cacheKey = `${name}-${info.path}`;\n    \n    // Check cache first\n    const cached = this.wasmCache.get(cacheKey);\n    if (cached && (Date.now() - cached.timestamp < this.cacheTimeout)) {\n      console.log(`✨ Using cached WASM module: ${name}`);\n      return cached.module;\n    }\n\n    let buffer;\n    if (typeof window !== 'undefined') { // browser\n      const resp = await fetch(wasmPath);\n      if (!resp.ok) {\n        throw new Error(`fetch failed: ${resp.statusText}`);\n      }\n      buffer = await resp.arrayBuffer();\n    } else { // Node\n      buffer = await fs.readFile(wasmPath).catch(() => null);\n      if (!buffer) {\n        return this.#placeholder(name);\n      }\n    }\n\n    const imports = this.#importsFor(name);\n    const { instance, module } = await WebAssembly.instantiate(buffer, imports);\n    const result = { instance, module, exports: instance.exports, memory: instance.exports.memory };\n    \n    // Cache the compiled module\n    this.wasmCache.set(cacheKey, {\n      module: result,\n      timestamp: Date.now()\n    });\n    \n    return result;\n  }\n\n  async #loadCoreBindings() {\n    /* Use our enhanced WASM bindings loader */\n    try {\n      // Use dynamic import with URL for ES module compatibility\n      const loaderURL = pathToFileURL(\n        path.join(this.baseDir, '..', 'wasm', 'wasm-bindings-loader.mjs'),\n      ).href;\n\n      // Import the loader module\n      const loaderModule = await import(loaderURL);\n      const bindingsLoader = loaderModule.default;\n\n      // Initialize the loader\n      await bindingsLoader.initialize();\n\n      return {\n        instance: { exports: bindingsLoader },\n        module: null,\n        exports: bindingsLoader,\n        memory: bindingsLoader.memory,\n        getTotalMemoryUsage: () => bindingsLoader.getTotalMemoryUsage(),\n      };\n    } catch (error) {\n      console.error('Failed to load core module via bindings loader:', error);\n      console.warn('⚠️ Falling back to placeholder WASM functionality');\n      \n      // Log specific import errors for debugging\n      if (error.message && error.message.includes('import')) {\n        console.error('WASM import error details:', {\n          message: error.message,\n          stack: error.stack?.split('\\n').slice(0, 5).join('\\n')\n        });\n      }\n      \n      return this.#placeholder('core');\n    }\n  }\n\n  #importsFor(name) {\n    const base = {\n      env: { memory: new WebAssembly.Memory({ initial: 256, maximum: 4096 }) },\n      wasi_snapshot_preview1: {\n        proc_exit: c => {\n          throw new Error(`WASI exit ${c}`);\n        },\n        fd_write: () => 0,\n        /* …minimal stubs… */\n        random_get: (ptr, len) => {\n          const view = new Uint8Array(base.env.memory.buffer, ptr, len);\n          crypto.getRandomValues(view);\n          return 0;\n        },\n      },\n    };\n\n    if (name === 'neural') {\n      base.neural = { log_training_progress: (e, l) => console.log(`Epoch ${e} → loss ${l}`) };\n    } else if (name === 'forecasting') {\n      base.forecasting = { log_forecast: (m, h) => console.log(`Forecast ${m}, horizon ${h}`) };\n    }\n    return base;\n  }\n\n  #placeholder(name) {\n    console.warn(`⚠️  Using placeholder for missing module '${name}'`);\n    const mem = new WebAssembly.Memory({ initial: 1, maximum: 10 });\n    return {\n      instance: { exports: { memory: mem } },\n      module: null,\n      exports: { memory: mem },\n      memory: mem,\n      isPlaceholder: true,\n    };\n  }\n\n  async #loadCoreOnly() {\n    await this.loadModule('core');\n  }\n  async #loadAllModules() {\n    return Promise.all(Object.keys(this.moduleManifest).map(n => this.loadModule(n)));\n  }\n  #setupLazyProxies() {\n    const proxyBag = {};\n    for (const n of Object.keys(this.moduleManifest)) {\n      proxyBag[n] = new Proxy({}, {\n        get: (_, p) => {\n          if (!this.modules.has(n)) {\n            throw new Error(\n              `Module '${n}' not yet loaded; await loader.loadModule('${n}') first`,\n            );\n          }\n          return this.modules.get(n).exports[p];\n        },\n      });\n    }\n    return proxyBag;\n  }\n\n  #fmt(b) {\n    if (!b) {\n      return '0 B';\n    }\n    const k = 1024, i = Math.floor(Math.log(b) / Math.log(k));\n    return `${(b / k ** i).toFixed(1)} ${['B', 'KB', 'MB', 'GB'][i]}`;\n  }\n\n  getTotalMemoryUsage() {\n    let totalBytes = 0;\n\n    for (const [name, module] of this.modules.entries()) {\n      if (module && module.memory && module.memory.buffer) {\n        totalBytes += module.memory.buffer.byteLength;\n      }\n    }\n\n    return totalBytes;\n  }\n  \n  clearCache() {\n    const cacheSize = this.wasmCache.size;\n    this.wasmCache.clear();\n    console.log(`🧹 Cleared WASM cache (${cacheSize} modules)`);\n  }\n  \n  optimizeMemory() {\n    // Clear expired cache entries\n    const now = Date.now();\n    let expired = 0;\n    \n    for (const [key, cached] of this.wasmCache.entries()) {\n      if (now - cached.timestamp > this.cacheTimeout) {\n        this.wasmCache.delete(key);\n        expired++;\n      }\n    }\n    \n    if (expired > 0) {\n      console.log(`🧹 Removed ${expired} expired WASM cache entries`);\n    }\n    \n    // Force garbage collection if available\n    if (global.gc) {\n      global.gc();\n      console.log('🧹 Triggered garbage collection');\n    }\n    \n    return {\n      cacheSize: this.wasmCache.size,\n      memoryUsage: this.getTotalMemoryUsage(),\n      expiredEntries: expired\n    };\n  }\n}\n\n// ────────────────────────────────────────────────────────────────────────────────\nexport { WasmModuleLoader };\nexport default WasmModuleLoader; // ESM default\n\n/* CJS interop --------------------------------------------------------------- */\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = WasmModuleLoader; // require('./wasm-module-loader')\n}\n"],"mappingseY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAA,SAAAE,mBAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,cAAAC,CAAA,GAAAP,CAAA,CAAAK,CAAA,EAAAC,CAAA,GAAAE,CAAA,GAAAD,CAAA,CAAAE,KAAA,WAAAT,CAAA,gBAAAE,CAAA,CAAAF,CAAA,KAAAO,CAAA,CAAAG,IAAA,GAAAT,CAAA,CAAAO,CAAA,IAAAG,OAAA,CAAAC,OAAA,CAAAJ,CAAA,EAAAK,IAAA,CAAAV,CAAA,EAAAC,CAAA;AAAA,SAAAU,kBAAAd,CAAA,6BAAAC,CAAA,SAAAC,CAAA,GAAAa,SAAA,aAAAJ,OAAA,WAAAR,CAAA,EAAAC,CAAA,QAAAC,CAAA,GAAAL,CAAA,CAAAgB,KAAA,CAAAf,CAAA,EAAAC,CAAA,YAAAe,MAAAjB,CAAA,IAAAD,kBAAA,CAAAM,CAAA,EAAAF,CAAA,EAAAC,CAAA,EAAAa,KAAA,EAAAC,MAAA,UAAAlB,CAAA,cAAAkB,OAAAlB,CAAA,IAAAD,kBAAA,CAAAM,CAAA,EAAAF,CAAA,EAAAC,CAAA,EAAAa,KAAA,EAAAC,MAAA,WAAAlB,CAAA,KAAAiB,KAAA;AAAA,SAAAE,4BAAAjB,CAAA,EAAAG,CAAA,IAAAe,0BAAA,CAAAlB,CAAA,EAAAG,CAAA,GAAAA,CAAA,CAAAgB,GAAA,CAAAnB,CAAA;AAAA,SAAAkB,2BAAAlB,CAAA,EAAAD,CAAA,QAAAA,CAAA,CAAAqB,GAAA,CAAApB,CAAA,aAAAqB,SAAA;AAAA,SAAAC,kBAAAtB,CAAA,EAAAD,CAAA,EAAAD,CAAA,6BAAAE,CAAA,GAAAA,CAAA,KAAAD,CAAA,GAAAC,CAAA,CAAAoB,GAAA,CAAArB,CAAA,UAAAc,SAAA,CAAAU,MAAA,OAAAxB,CAAA,GAAAD,CAAA,YAAAuB,SAAA;AAfZ;AACA;AACA;AACA;;AAEA,OAAOG,IAAI,MAAM,WAAW;AAC5B,SAASC,QAAQ,IAAIC,EAAE,QAAQ,SAAS;AACxC,SAASC,aAAa,EAAEC,aAAa,QAAQ,UAAU;AACvD,SAASC,SAAS,IAAIC,UAAU,QAAQ,aAAa;;AAErD;AACA;AACA,MAAMC,MAAM;AAAA;AAAA,CAAApC,cAAA,GAAAqC,CAAA,QAAAC,IAAA,IAAAtC,cAAA,GAAAuC,CAAA,UAAGC,UAAU,CAACJ,MAAM,eAAAE,IAAA,cAAAA,IAAA,IAAAtC,cAAA,GAAAuC,CAAA,UAAIJ,UAAU,GAAC,CAAC;AAChD,MAAMM,UAAU;AAAA;AAAA,CAAAzC,cAAA,GAAAqC,CAAA,OAAGL,aAAa,CAACU,MAAM,CAACC,IAAI,CAACC,GAAG,CAAC;AACjD,MAAMC,SAAS;AAAA;AAAA,CAAA7C,cAAA,GAAAqC,CAAA,OAAGR,IAAI,CAACiB,OAAO,CAACL,UAAU,CAAC;;AAE1C;AAAA;AAAA,IAAAM,uBAAA,oBAAAC,OAAA;AACA,MAAMC,gBAAgB,CAAC;EACrBC,WAAWA,CAAA,EAAG;IAAA;IAgGd;IAAA5B,2BAAA,OAAAyB,uBAAA;IAAA/C,cAAA,GAAAmD,CAAA;IAAAnD,cAAA,GAAAqC,CAAA;IA/FE,IAAI,CAACe,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;IAAC;IAAArD,cAAA,GAAAqC,CAAA;IACzB,IAAI,CAACiB,eAAe,GAAG,IAAID,GAAG,CAAC,CAAC;IAAC;IAAArD,cAAA,GAAAqC,CAAA;IACjC,IAAI,CAACkB,eAAe,GAAG,WAAW,CAAC,CAAC;IAAA;IAAAvD,cAAA,GAAAqC,CAAA;IACpC,IAAI,CAACmB,OAAO,GAAGX,SAAS,CAAC,CAAC;IAAA;IAAA7C,cAAA,GAAAqC,CAAA;IAC1B,IAAI,CAACoB,SAAS,GAAG,IAAIJ,GAAG,CAAC,CAAC,CAAC,CAAC;IAAA;IAAArD,cAAA,GAAAqC,CAAA;IAC5B,IAAI,CAACqB,YAAY,GAAG,OAAO,CAAC,CAAC;IAAA;IAAA1D,cAAA,GAAAqC,CAAA;IAC7B,IAAI,CAACsB,cAAc,GAAG;MACpB;MACAC,IAAI,EAAE;QACJ/B,IAAI,EAAE,gCAAgC;QACtCgC,UAAU,EAAE,2BAA2B;QACvCC,IAAI,EAAE,GAAG,GAAG,IAAI;QAChBC,QAAQ,EAAE,MAAM;QAChBC,YAAY,EAAE,EAAE;QAChBC,MAAM,EAAE,IAAI;QACZC,IAAI,EAAE;MACR,CAAC;MAED;MACAC,MAAM,EAAE;QAAEtC,IAAI,EAAE,uBAAuB;QAAEiC,IAAI,EAAE,IAAI,GAAG,IAAI;QAAEC,QAAQ,EAAE,QAAQ;QAAEC,YAAY,EAAE,CAAC,MAAM,CAAC;QAAEC,MAAM,EAAE,KAAK;QAAEG,QAAQ,EAAE;MAAK,CAAC;MACvIC,WAAW,EAAE;QAAExC,IAAI,EAAE,8BAA8B;QAAEiC,IAAI,EAAE,IAAI,GAAG,IAAI;QAAEC,QAAQ,EAAE,QAAQ;QAAEC,YAAY,EAAE,CAAC,MAAM,CAAC;QAAEC,MAAM,EAAE,KAAK;QAAEG,QAAQ,EAAE;MAAK,CAAC;MACnJE,KAAK,EAAE;QAAEzC,IAAI,EAAE,sCAAsC;QAAEiC,IAAI,EAAE,GAAG,GAAG,IAAI;QAAEC,QAAQ,EAAE,MAAM;QAAEC,YAAY,EAAE,CAAC,MAAM,CAAC;QAAEC,MAAM,EAAE,KAAK;QAAEG,QAAQ,EAAE;MAAK,CAAC;MAClJG,WAAW,EAAE;QAAE1C,IAAI,EAAE,oCAAoC;QAAEiC,IAAI,EAAE,GAAG,GAAG,IAAI;QAAEC,QAAQ,EAAE,MAAM;QAAEC,YAAY,EAAE,CAAC,MAAM,CAAC;QAAEC,MAAM,EAAE,KAAK;QAAEG,QAAQ,EAAE;MAAK;IACvJ,CAAC;EACH;;EAEA;EACMI,UAAUA,CAAA,EAA2B;IAAA;IAAA,IAAAC,KAAA;IAAA,OAAAxD,iBAAA,YAA1ByD,QAAQ;IAAA;IAAA,CAAA1E,cAAA,GAAAuC,CAAA,UAAG,aAAa;MAAAvC,cAAA,GAAAmD,CAAA;MAAAnD,cAAA,GAAAqC,CAAA;MACvCoC,KAAI,CAAClB,eAAe,GAAGmB,QAAQ;MAAC1E,cAAA,GAAAqC,CAAA;MAChC,IAAIqC,QAAQ,KAAK,OAAO,EAAE;QAAA;QAAA1E,cAAA,GAAAuC,CAAA;QAAAvC,cAAA,GAAAqC,CAAA;QACxB,iCAAO,2BAAAV,iBAAA;QAAA;QAAAoB,uBAAA,EAAA0B,KAAI,EAACE,eAAc,CAAC,CAAAC,IAAA,CAApBH,KAAI;MACb,CAAC;MAAA;MAAA;QAAAzE,cAAA,GAAAuC,CAAA;MAAA;MAAAvC,cAAA,GAAAqC,CAAA;MACD,IAAIqC,QAAQ,KAAK,aAAa,EAAE;QAAA;QAAA1E,cAAA,GAAAuC,CAAA;QAAAvC,cAAA,GAAAqC,CAAA;QAC9B,iCAAO,2BAAAV,iBAAA;QAAA;QAAAoB,uBAAA,EAAA0B,KAAI,EAACI,aAAY,CAAC,CAAAD,IAAA,CAAlBH,KAAI;MACb,CAAC;MAAA;MAAA;QAAAzE,cAAA,GAAAuC,CAAA;MAAA;MAAAvC,cAAA,GAAAqC,CAAA;MACD,IAAIqC,QAAQ,KAAK,WAAW,EAAE;QAAA;QAAA1E,cAAA,GAAAuC,CAAA;QAAAvC,cAAA,GAAAqC,CAAA;QAC5B,iCAAO,2BAAAV,iBAAA;QAAA;QAAAoB,uBAAA,EAAA0B,KAAI,EAACK,iBAAgB,CAAC,CAAAF,IAAA,CAAtBH,KAAI;MACb,CAAC;MAAA;MAAA;QAAAzE,cAAA,GAAAuC,CAAA;MAAA;MAAAvC,cAAA,GAAAqC,CAAA;MACD,MAAM,IAAI0C,KAAK,CAAC,6BAA6BL,QAAQ,EAAE,CAAC;IAAC,GAAAvD,KAAA,OAAAD,SAAA;EAC3D;EAEM8D,UAAUA,CAACC,IAAI,EAAE;IAAA;IAAA,IAAAC,MAAA;IAAA,OAAAjE,iBAAA;MAAAjB,cAAA,GAAAmD,CAAA;MAAAnD,cAAA,GAAAqC,CAAA;MACrB,IAAI6C,MAAI,CAAC9B,OAAO,CAAC3B,GAAG,CAACwD,IAAI,CAAC,EAAE;QAAA;QAAAjF,cAAA,GAAAuC,CAAA;QAAAvC,cAAA,GAAAqC,CAAA;QAC1B,OAAO6C,MAAI,CAAC9B,OAAO,CAAC+B,GAAG,CAACF,IAAI,CAAC;MAC/B,CAAC;MAAA;MAAA;QAAAjF,cAAA,GAAAuC,CAAA;MAAA;MAAAvC,cAAA,GAAAqC,CAAA;MACD,IAAI6C,MAAI,CAAC5B,eAAe,CAAC7B,GAAG,CAACwD,IAAI,CAAC,EAAE;QAAA;QAAAjF,cAAA,GAAAuC,CAAA;QAAAvC,cAAA,GAAAqC,CAAA;QAClC,OAAO6C,MAAI,CAAC5B,eAAe,CAAC6B,GAAG,CAACF,IAAI,CAAC;MACvC,CAAC;MAAA;MAAA;QAAAjF,cAAA,GAAAuC,CAAA;MAAA;MAED,MAAM6C,IAAI;MAAA;MAAA,CAAApF,cAAA,GAAAqC,CAAA,QAAG6C,MAAI,CAACvB,cAAc,CAACsB,IAAI,CAAC;MAACjF,cAAA,GAAAqC,CAAA;MACvC,IAAI,CAAC+C,IAAI,EAAE;QAAA;QAAApF,cAAA,GAAAuC,CAAA;QAAAvC,cAAA,GAAAqC,CAAA;QACT,MAAM,IAAI0C,KAAK,CAAC,mBAAmBE,IAAI,EAAE,CAAC;MAC5C,CAAC;MAAA;MAAA;QAAAjF,cAAA,GAAAuC,CAAA;MAAA;;MAED;MAAAvC,cAAA,GAAAqC,CAAA;MACA;MAAI;MAAA,CAAArC,cAAA,GAAAuC,CAAA,WAAC6C,IAAI,CAACnB,MAAM;MAAA;MAAA,CAAAjE,cAAA,GAAAuC,CAAA,UAAI6C,IAAI,CAAChB,QAAQ,GAAE;QAAA;QAAApE,cAAA,GAAAuC,CAAA;QAAAvC,cAAA,GAAAqC,CAAA;QACjC;QAAA,MAAM6C,MAAI,CAACF,UAAU,CAAC,MAAM,CAAC;QAC7B,MAAMK,OAAO;QAAA;QAAA,CAAArF,cAAA,GAAAqC,CAAA,QAAG6C,MAAI,CAAC9B,OAAO,CAAC+B,GAAG,CAAC,MAAM,CAAC;QAAC;QAAAnF,cAAA,GAAAqC,CAAA;QACzC6C,MAAI,CAAC9B,OAAO,CAACkC,GAAG,CAACL,IAAI,EAAEI,OAAO,CAAC;QAAC;QAAArF,cAAA,GAAAqC,CAAA;QAChC,OAAOgD,OAAO;MAChB,CAAC;MAAA;MAAA;QAAArF,cAAA,GAAAuC,CAAA;MAAA;;MAED;MAAAvC,cAAA,GAAAqC,CAAA;MACA;MAAA,MAAMvB,OAAO,CAACyE,GAAG,CAACH,IAAI,CAACpB,YAAY,CAACwB,GAAG,CAACC,GAAG,IAAI;QAAA;QAAAzF,cAAA,GAAAmD,CAAA;QAAAnD,cAAA,GAAAqC,CAAA;QAAA,OAAA6C,MAAI,CAACF,UAAU,CAACS,GAAG,CAAC;MAAD,CAAC,CAAC,CAAC;MAErE,MAAMC,CAAC;MAAA;MAAA,CAAA1F,cAAA,GAAAqC,CAAA,QAAI4C,IAAI,KAAK,MAAM;MAAA;MAAA,CAAAjF,cAAA,GAAAuC,CAAA;MACtB;MAAAZ,iBAAA;MAAA;MAAAoB,uBAAA,EAAAmC,MAAI,EAACS,iBAAgB,CAAC,CAAAf,IAAA,CAAtBM,MAAI;MAAA;MAAA,CAAAlF,cAAA,GAAAuC,CAAA;MACJ;MAAAZ,iBAAA;MAAA;MAAAoB,uBAAA,EAAAmC,MAAI,EAACU,eAAc,CAAC,CAAAhB,IAAA,CAApBM,MAAI,EAAiBD,IAAI,EAAEG,IAAI,EAAC;MAACpF,cAAA,GAAAqC,CAAA;MAErC6C,MAAI,CAAC5B,eAAe,CAACgC,GAAG,CAACL,IAAI,EAAES,CAAC,CAAC;MAAC1F,cAAA,GAAAqC,CAAA;MAClC,IAAI;QACF,MAAMwD,CAAC;QAAA;QAAA,CAAA7F,cAAA,GAAAqC,CAAA,cAASqD,CAAC;QAAC;QAAA1F,cAAA,GAAAqC,CAAA;QAClB6C,MAAI,CAAC9B,OAAO,CAACkC,GAAG,CAACL,IAAI,EAAEY,CAAC,CAAC;QAAC;QAAA7F,cAAA,GAAAqC,CAAA;QAC1ByD,OAAO,CAACC,GAAG,CAAC,0BAA0Bd,IAAI;QAAA;QAAK;QAAAtD,iBAAA;QAAA;QAAAoB,uBAAA,EAAAmC,MAAI,EAACc,IAAG,CAAC,CAAApB,IAAA,CAATM,MAAI,EAAME,IAAI,CAACtB,IAAI,IAAI,CAAC;QAAC;QAAA9D,cAAA,GAAAqC,CAAA;QACxE,OAAOwD,CAAC;MACV,CAAC,SAAS;QAAA;QAAA7F,cAAA,GAAAqC,CAAA;QACR6C,MAAI,CAAC5B,eAAe,CAAC2C,MAAM,CAAChB,IAAI,CAAC;MACnC;IAAC;EACH;EAEAiB,eAAeA,CAAA,EAAG;IAAA;IAAAlG,cAAA,GAAAmD,CAAA;IAChB,MAAMd,CAAC;IAAA;IAAA,CAAArC,cAAA,GAAAqC,CAAA,QAAG,CAAC,CAAC;IAAC;IAAArC,cAAA,GAAAqC,CAAA;IACb,KAAK,MAAM,CAAClC,CAAC,EAAEO,CAAC,CAAC,IAAIyF,MAAM,CAACC,OAAO,CAAC,IAAI,CAACzC,cAAc,CAAC,EAAE;MAAA;MAAA,IAAA0C,KAAA,EAAAC,iBAAA;MAAAtG,cAAA,GAAAqC,CAAA;MACxDA,CAAC,CAAClC,CAAC,CAAC,GAAG;QACLoG,MAAM,EAAE,IAAI,CAACnD,OAAO,CAAC3B,GAAG,CAACtB,CAAC,CAAC;QAC3BqG,OAAO,EAAE,IAAI,CAAClD,eAAe,CAAC7B,GAAG,CAACtB,CAAC,CAAC;QACpCsG,WAAW;QAAA;QAAA,CAAAJ,KAAA,IAAArG,cAAA,GAAAuC,CAAA,YAAA+D,iBAAA,GAAE,IAAI,CAAClD,OAAO,CAAC+B,GAAG,CAAChF,CAAC,CAAC,cAAAmG,iBAAA;QAAnB;QAAAA,iBAAA,CAAqBI,aAAa,eAAAL,KAAA,cAAAA,KAAA,IAAArG,cAAA,GAAAuC,CAAA,WAAI,KAAK;QACxDuB,IAAI,EAAEpD,CAAC,CAACoD,IAAI;QACZC,QAAQ,EAAErD,CAAC,CAACqD,QAAQ;QACpB4C,IAAI,EAAEjG,CAAC,CAACsD;MACV,CAAC;IACH;IAAC;IAAAhE,cAAA,GAAAqC,CAAA;IACD,OAAOA,CAAC;EACV;EAmJAuE,mBAAmBA,CAAA,EAAG;IAAA;IAAA5G,cAAA,GAAAmD,CAAA;IACpB,IAAI0D,UAAU;IAAA;IAAA,CAAA7G,cAAA,GAAAqC,CAAA,SAAG,CAAC;IAAC;IAAArC,cAAA,GAAAqC,CAAA;IAEnB,KAAK,MAAM,CAAC4C,IAAI,EAAE6B,MAAM,CAAC,IAAI,IAAI,CAAC1D,OAAO,CAACgD,OAAO,CAAC,CAAC,EAAE;MAAA;MAAApG,cAAA,GAAAqC,CAAA;MACnD;MAAI;MAAA,CAAArC,cAAA,GAAAuC,CAAA,WAAAuE,MAAM;MAAA;MAAA,CAAA9G,cAAA,GAAAuC,CAAA,WAAIuE,MAAM,CAACC,MAAM;MAAA;MAAA,CAAA/G,cAAA,GAAAuC,CAAA,WAAIuE,MAAM,CAACC,MAAM,CAACC,MAAM,GAAE;QAAA;QAAAhH,cAAA,GAAAuC,CAAA;QAAAvC,cAAA,GAAAqC,CAAA;QACnDwE,UAAU,IAAIC,MAAM,CAACC,MAAM,CAACC,MAAM,CAACC,UAAU;MAC/C,CAAC;MAAA;MAAA;QAAAjH,cAAA,GAAAuC,CAAA;MAAA;IACH;IAAC;IAAAvC,cAAA,GAAAqC,CAAA;IAED,OAAOwE,UAAU;EACnB;EAEAK,UAAUA,CAAA,EAAG;IAAA;IAAAlH,cAAA,GAAAmD,CAAA;IACX,MAAMgE,SAAS;IAAA;IAAA,CAAAnH,cAAA,GAAAqC,CAAA,SAAG,IAAI,CAACoB,SAAS,CAACK,IAAI;IAAC;IAAA9D,cAAA,GAAAqC,CAAA;IACtC,IAAI,CAACoB,SAAS,CAAC2D,KAAK,CAAC,CAAC;IAAC;IAAApH,cAAA,GAAAqC,CAAA;IACvByD,OAAO,CAACC,GAAG,CAAC,0BAA0BoB,SAAS,WAAW,CAAC;EAC7D;EAEAE,cAAcA,CAAA,EAAG;IAAA;IAAArH,cAAA,GAAAmD,CAAA;IACf;IACA,MAAMmE,GAAG;IAAA;IAAA,CAAAtH,cAAA,GAAAqC,CAAA,SAAGkF,IAAI,CAACD,GAAG,CAAC,CAAC;IACtB,IAAIE,OAAO;IAAA;IAAA,CAAAxH,cAAA,GAAAqC,CAAA,SAAG,CAAC;IAAC;IAAArC,cAAA,GAAAqC,CAAA;IAEhB,KAAK,MAAM,CAACoF,GAAG,EAAEC,MAAM,CAAC,IAAI,IAAI,CAACjE,SAAS,CAAC2C,OAAO,CAAC,CAAC,EAAE;MAAA;MAAApG,cAAA,GAAAqC,CAAA;MACpD,IAAIiF,GAAG,GAAGI,MAAM,CAACC,SAAS,GAAG,IAAI,CAACjE,YAAY,EAAE;QAAA;QAAA1D,cAAA,GAAAuC,CAAA;QAAAvC,cAAA,GAAAqC,CAAA;QAC9C,IAAI,CAACoB,SAAS,CAACwC,MAAM,CAACwB,GAAG,CAAC;QAAC;QAAAzH,cAAA,GAAAqC,CAAA;QAC3BmF,OAAO,EAAE;MACX,CAAC;MAAA;MAAA;QAAAxH,cAAA,GAAAuC,CAAA;MAAA;IACH;IAAC;IAAAvC,cAAA,GAAAqC,CAAA;IAED,IAAImF,OAAO,GAAG,CAAC,EAAE;MAAA;MAAAxH,cAAA,GAAAuC,CAAA;MAAAvC,cAAA,GAAAqC,CAAA;MACfyD,OAAO,CAACC,GAAG,CAAC,cAAcyB,OAAO,6BAA6B,CAAC;IACjE,CAAC;IAAA;IAAA;MAAAxH,cAAA,GAAAuC,CAAA;IAAA;;IAED;IAAAvC,cAAA,GAAAqC,CAAA;IACA,IAAIuF,MAAM,CAACC,EAAE,EAAE;MAAA;MAAA7H,cAAA,GAAAuC,CAAA;MAAAvC,cAAA,GAAAqC,CAAA;MACbuF,MAAM,CAACC,EAAE,CAAC,CAAC;MAAC;MAAA7H,cAAA,GAAAqC,CAAA;MACZyD,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;IAChD,CAAC;IAAA;IAAA;MAAA/F,cAAA,GAAAuC,CAAA;IAAA;IAAAvC,cAAA,GAAAqC,CAAA;IAED,OAAO;MACL8E,SAAS,EAAE,IAAI,CAAC1D,SAAS,CAACK,IAAI;MAC9BgE,WAAW,EAAE,IAAI,CAAClB,mBAAmB,CAAC,CAAC;MACvCmB,cAAc,EAAEP;IAClB,CAAC;EACH;AACF;;AAEA;AAAA;AAAA,SAAA5B,gBAAAoC,EAAA,EAAAC,GAAA;EAAA,OAAAC,gBAAA,CAAA/G,KAAA,OAAAD,SAAA;AAAA;AAAA,SAAAgH,iBAAA;EAAAA,gBAAA,GAAAjH,iBAAA,YAhMwBgE,IAAI,EAAEG,IAAI,EAAE;IAChC,MAAM+C,QAAQ;IAAA;IAAA,CAAAnI,cAAA,GAAAqC,CAAA,QAAGR,IAAI,CAACuG,IAAI,CAAC,IAAI,CAAC5E,OAAO,EAAE4B,IAAI,CAACvD,IAAI,CAAC;IACnD,MAAMwG,QAAQ;IAAA;IAAA,CAAArI,cAAA,GAAAqC,CAAA,QAAG,GAAG4C,IAAI,IAAIG,IAAI,CAACvD,IAAI,EAAE;;IAEvC;IACA,MAAM6F,MAAM;IAAA;IAAA,CAAA1H,cAAA,GAAAqC,CAAA,QAAG,IAAI,CAACoB,SAAS,CAAC0B,GAAG,CAACkD,QAAQ,CAAC;IAAC;IAAArI,cAAA,GAAAqC,CAAA;IAC5C;IAAI;IAAA,CAAArC,cAAA,GAAAuC,CAAA,WAAAmF,MAAM;IAAA;IAAA,CAAA1H,cAAA,GAAAuC,CAAA,WAAKgF,IAAI,CAACD,GAAG,CAAC,CAAC,GAAGI,MAAM,CAACC,SAAS,GAAG,IAAI,CAACjE,YAAY,CAAC,EAAE;MAAA;MAAA1D,cAAA,GAAAuC,CAAA;MAAAvC,cAAA,GAAAqC,CAAA;MACjEyD,OAAO,CAACC,GAAG,CAAC,+BAA+Bd,IAAI,EAAE,CAAC;MAAC;MAAAjF,cAAA,GAAAqC,CAAA;MACnD,OAAOqF,MAAM,CAACZ,MAAM;IACtB,CAAC;IAAA;IAAA;MAAA9G,cAAA,GAAAuC,CAAA;IAAA;IAED,IAAIyE,MAAM;IAAC;IAAAhH,cAAA,GAAAqC,CAAA;IACX,IAAI,OAAOiG,MAAM,KAAK,WAAW,EAAE;MAAA;MAAAtI,cAAA,GAAAuC,CAAA;MAAE;MACnC,MAAMgG,IAAI;MAAA;MAAA,CAAAvI,cAAA,GAAAqC,CAAA,cAASmG,KAAK,CAACL,QAAQ,CAAC;MAAC;MAAAnI,cAAA,GAAAqC,CAAA;MACnC,IAAI,CAACkG,IAAI,CAACE,EAAE,EAAE;QAAA;QAAAzI,cAAA,GAAAuC,CAAA;QAAAvC,cAAA,GAAAqC,CAAA;QACZ,MAAM,IAAI0C,KAAK,CAAC,iBAAiBwD,IAAI,CAACG,UAAU,EAAE,CAAC;MACrD,CAAC;MAAA;MAAA;QAAA1I,cAAA,GAAAuC,CAAA;MAAA;MAAAvC,cAAA,GAAAqC,CAAA;MACD2E,MAAM;MAAA;MAAA,MAASuB,IAAI,CAACI,WAAW,CAAC,CAAC;IACnC,CAAC,MAAM;MAAA;MAAA3I,cAAA,GAAAuC,CAAA;MAAAvC,cAAA,GAAAqC,CAAA;MAAE;MACP2E,MAAM;MAAA;MAAA,MAASjF,EAAE,CAAC6G,QAAQ,CAACT,QAAQ,CAAC,CAACU,KAAK,CAAC,MAAM;QAAA;QAAA7I,cAAA,GAAAmD,CAAA;QAAAnD,cAAA,GAAAqC,CAAA;QAAA,WAAI;MAAD,CAAC,CAAC;MAAC;MAAArC,cAAA,GAAAqC,CAAA;MACvD,IAAI,CAAC2E,MAAM,EAAE;QAAA;QAAAhH,cAAA,GAAAuC,CAAA;QAAAvC,cAAA,GAAAqC,CAAA;QACX,iCAAO,2BAAAV,iBAAA;QAAA;QAAAoB,uBAAA,MAAI,EAAC+F,YAAW,CAAC,CAAAlE,IAAA,CAAjB,IAAI,EAAcK,IAAI;MAC/B,CAAC;MAAA;MAAA;QAAAjF,cAAA,GAAAuC,CAAA;MAAA;IACH;IAEA,MAAMwG,OAAO;IAAA;IAAA,CAAA/I,cAAA,GAAAqC,CAAA;IAAG;IAAAV,iBAAA;IAAA;IAAAoB,uBAAA,MAAI,EAACiG,WAAU,CAAC,CAAApE,IAAA,CAAhB,IAAI,EAAaK,IAAI,EAAC;IACtC,MAAM;MAAEgE,QAAQ;MAAEnC;IAAO,CAAC;IAAA;IAAA,CAAA9G,cAAA,GAAAqC,CAAA,cAAS6G,WAAW,CAACC,WAAW,CAACnC,MAAM,EAAE+B,OAAO,CAAC;IAC3E,MAAMK,MAAM;IAAA;IAAA,CAAApJ,cAAA,GAAAqC,CAAA,QAAG;MAAE4G,QAAQ;MAAEnC,MAAM;MAAEuC,OAAO,EAAEJ,QAAQ,CAACI,OAAO;MAAEtC,MAAM,EAAEkC,QAAQ,CAACI,OAAO,CAACtC;IAAO,CAAC;;IAE/F;IAAA;IAAA/G,cAAA,GAAAqC,CAAA;IACA,IAAI,CAACoB,SAAS,CAAC6B,GAAG,CAAC+C,QAAQ,EAAE;MAC3BvB,MAAM,EAAEsC,MAAM;MACdzB,SAAS,EAAEJ,IAAI,CAACD,GAAG,CAAC;IACtB,CAAC,CAAC;IAAC;IAAAtH,cAAA,GAAAqC,CAAA;IAEH,OAAO+G,MAAM;EACf,CAAC;EAAA,OAAAlB,gBAAA,CAAA/G,KAAA,OAAAD,SAAA;AAAA;AAAA;AAAA,SAAAyE,kBAAA;EAAA,OAAA2D,kBAAA,CAAAnI,KAAA,OAAAD,SAAA;AAAA;AAAA,SAAAoI,mBAAA;EAAAA,kBAAA,GAAArI,iBAAA,cAEyB;IAAA;IAAAjB,cAAA,GAAAqC,CAAA;IACxB;IACA,IAAI;MACF;MACA,MAAMkH,SAAS;MAAA;MAAA,CAAAvJ,cAAA,GAAAqC,CAAA,QAAGJ,aAAa,CAC7BJ,IAAI,CAACuG,IAAI,CAAC,IAAI,CAAC5E,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,0BAA0B,CAClE,CAAC,CAACgG,IAAI;;MAEN;MACA,MAAMC,YAAY;MAAA;MAAA,CAAAzJ,cAAA,GAAAqC,CAAA,cAAS,MAAM,CAACkH,SAAS,CAAC;MAC5C,MAAMG,cAAc;MAAA;MAAA,CAAA1J,cAAA,GAAAqC,CAAA,QAAGoH,YAAY,CAACE,OAAO;;MAE3C;MAAA;MAAA3J,cAAA,GAAAqC,CAAA;MACA;MAAA,MAAMqH,cAAc,CAAClF,UAAU,CAAC,CAAC;MAAC;MAAAxE,cAAA,GAAAqC,CAAA;MAElC,OAAO;QACL4G,QAAQ,EAAE;UAAEI,OAAO,EAAEK;QAAe,CAAC;QACrC5C,MAAM,EAAE,IAAI;QACZuC,OAAO,EAAEK,cAAc;QACvB3C,MAAM,EAAE2C,cAAc,CAAC3C,MAAM;QAC7BH,mBAAmB,EAAEA,CAAA,KAAM;UAAA;UAAA5G,cAAA,GAAAmD,CAAA;UAAAnD,cAAA,GAAAqC,CAAA;UAAA,OAAAqH,cAAc,CAAC9C,mBAAmB,CAAC,CAAC;QAAD;MAChE,CAAC;IACH,CAAC,CAAC,OAAOgD,KAAK,EAAE;MAAA;MAAA5J,cAAA,GAAAqC,CAAA;MACdyD,OAAO,CAAC8D,KAAK,CAAC,iDAAiD,EAAEA,KAAK,CAAC;MAAC;MAAA5J,cAAA,GAAAqC,CAAA;MACxEyD,OAAO,CAAC+D,IAAI,CAAC,mDAAmD,CAAC;;MAEjE;MAAA;MAAA7J,cAAA,GAAAqC,CAAA;MACA;MAAI;MAAA,CAAArC,cAAA,GAAAuC,CAAA,WAAAqH,KAAK,CAACE,OAAO;MAAA;MAAA,CAAA9J,cAAA,GAAAuC,CAAA,WAAIqH,KAAK,CAACE,OAAO,CAACC,QAAQ,CAAC,QAAQ,CAAC,GAAE;QAAA;QAAA,IAAAC,YAAA;QAAAhK,cAAA,GAAAuC,CAAA;QAAAvC,cAAA,GAAAqC,CAAA;QACrDyD,OAAO,CAAC8D,KAAK,CAAC,4BAA4B,EAAE;UAC1CE,OAAO,EAAEF,KAAK,CAACE,OAAO;UACtBG,KAAK;UAAA;UAAA,CAAAD,YAAA,GAAEJ,KAAK,CAACK,KAAK,cAAAD,YAAA;UAAX;UAAAA,YAAA,CAAaE,KAAK,CAAC,IAAI,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC/B,IAAI,CAAC,IAAI;QACvD,CAAC,CAAC;MACJ,CAAC;MAAA;MAAA;QAAApI,cAAA,GAAAuC,CAAA;MAAA;MAAAvC,cAAA,GAAAqC,CAAA;MAED,iCAAO,2BAAAV,iBAAA;MAAA;MAAAoB,uBAAA,MAAI,EAAC+F,YAAW,CAAC,CAAAlE,IAAA,CAAjB,IAAI,EAAc,MAAM;IACjC;EACF,CAAC;EAAA,OAAA0E,kBAAA,CAAAnI,KAAA,OAAAD,SAAA;AAAA;AAAA;AAAA,SAAA8H,YAEW/D,IAAI,EAAE;EAChB,MAAMmF,IAAI;EAAA;EAAA,CAAApK,cAAA,GAAAqC,CAAA,QAAG;IACXgI,GAAG,EAAE;MAAEtD,MAAM,EAAE,IAAImC,WAAW,CAACoB,MAAM,CAAC;QAAEC,OAAO,EAAE,GAAG;QAAEC,OAAO,EAAE;MAAK,CAAC;IAAE,CAAC;IACxEC,sBAAsB,EAAE;MACtBC,SAAS,EAAEjK,CAAC,IAAI;QAAA;QAAAT,cAAA,GAAAmD,CAAA;QAAAnD,cAAA,GAAAqC,CAAA;QACd,MAAM,IAAI0C,KAAK,CAAC,aAAatE,CAAC,EAAE,CAAC;MACnC,CAAC;MACDkK,QAAQ,EAAEA,CAAA,KAAM;QAAA;QAAA3K,cAAA,GAAAmD,CAAA;QAAAnD,cAAA,GAAAqC,CAAA;QAAA,QAAC;MAAD,CAAC;MACjB;MACAuI,UAAU,EAAEA,CAACC,GAAG,EAAEC,GAAG,KAAK;QAAA;QAAA9K,cAAA,GAAAmD,CAAA;QACxB,MAAM4H,IAAI;QAAA;QAAA,CAAA/K,cAAA,GAAAqC,CAAA,QAAG,IAAI2I,UAAU,CAACZ,IAAI,CAACC,GAAG,CAACtD,MAAM,CAACC,MAAM,EAAE6D,GAAG,EAAEC,GAAG,CAAC;QAAC;QAAA9K,cAAA,GAAAqC,CAAA;QAC9DD,MAAM,CAAC6I,eAAe,CAACF,IAAI,CAAC;QAAC;QAAA/K,cAAA,GAAAqC,CAAA;QAC7B,OAAO,CAAC;MACV;IACF;EACF,CAAC;EAAC;EAAArC,cAAA,GAAAqC,CAAA;EAEF,IAAI4C,IAAI,KAAK,QAAQ,EAAE;IAAA;IAAAjF,cAAA,GAAAuC,CAAA;IAAAvC,cAAA,GAAAqC,CAAA;IACrB+H,IAAI,CAACjG,MAAM,GAAG;MAAE+G,qBAAqB,EAAEA,CAAC7K,CAAC,EAAE8K,CAAC,KAAK;QAAA;QAAAnL,cAAA,GAAAmD,CAAA;QAAAnD,cAAA,GAAAqC,CAAA;QAAA,OAAAyD,OAAO,CAACC,GAAG,CAAC,SAAS1F,CAAC,WAAW8K,CAAC,EAAE,CAAC;MAAD;IAAE,CAAC;EAC1F,CAAC,MAAM;IAAA;IAAAnL,cAAA,GAAAuC,CAAA;IAAAvC,cAAA,GAAAqC,CAAA;IAAA,IAAI4C,IAAI,KAAK,aAAa,EAAE;MAAA;MAAAjF,cAAA,GAAAuC,CAAA;MAAAvC,cAAA,GAAAqC,CAAA;MACjC+H,IAAI,CAAC/F,WAAW,GAAG;QAAE+G,YAAY,EAAEA,CAACvF,CAAC,EAAEwF,CAAC,KAAK;UAAA;UAAArL,cAAA,GAAAmD,CAAA;UAAAnD,cAAA,GAAAqC,CAAA;UAAA,OAAAyD,OAAO,CAACC,GAAG,CAAC,YAAYF,CAAC,aAAawF,CAAC,EAAE,CAAC;QAAD;MAAE,CAAC;IAC3F,CAAC;IAAA;IAAA;MAAArL,cAAA,GAAAuC,CAAA;IAAA;EAAD;EAAC;EAAAvC,cAAA,GAAAqC,CAAA;EACD,OAAO+H,IAAI;AACb;AAAC;AAAA,SAAAtB,aAEY7D,IAAI,EAAE;EAAA;EAAAjF,cAAA,GAAAqC,CAAA;EACjByD,OAAO,CAAC+D,IAAI,CAAC,6CAA6C5E,IAAI,GAAG,CAAC;EAClE,MAAMqG,GAAG;EAAA;EAAA,CAAAtL,cAAA,GAAAqC,CAAA,QAAG,IAAI6G,WAAW,CAACoB,MAAM,CAAC;IAAEC,OAAO,EAAE,CAAC;IAAEC,OAAO,EAAE;EAAG,CAAC,CAAC;EAAC;EAAAxK,cAAA,GAAAqC,CAAA;EAChE,OAAO;IACL4G,QAAQ,EAAE;MAAEI,OAAO,EAAE;QAAEtC,MAAM,EAAEuE;MAAI;IAAE,CAAC;IACtCxE,MAAM,EAAE,IAAI;IACZuC,OAAO,EAAE;MAAEtC,MAAM,EAAEuE;IAAI,CAAC;IACxBvE,MAAM,EAAEuE,GAAG;IACX5E,aAAa,EAAE;EACjB,CAAC;AACH;AAAC;AAAA,SAAA7B,cAAA;EAAA,OAAA0G,cAAA,CAAApK,KAAA,OAAAD,SAAA;AAAA;AAAA,SAAAqK,eAAA;EAAAA,cAAA,GAAAtK,iBAAA,cAEqB;IAAA;IAAAjB,cAAA,GAAAqC,CAAA;IACpB;IAAA,MAAM,IAAI,CAAC2C,UAAU,CAAC,MAAM,CAAC;EAC/B,CAAC;EAAA,OAAAuG,cAAA,CAAApK,KAAA,OAAAD,SAAA;AAAA;AAAA;AAAA,SAAAyD,gBAAA;EAAA,OAAA6G,gBAAA,CAAArK,KAAA,OAAAD,SAAA;AAAA;AAAA,SAAAsK,iBAAA;EAAAA,gBAAA,GAAAvK,iBAAA,cACuB;IAAA;IAAAjB,cAAA,GAAAqC,CAAA;IACtB,OAAOvB,OAAO,CAACyE,GAAG,CAACY,MAAM,CAACsF,IAAI,CAAC,IAAI,CAAC9H,cAAc,CAAC,CAAC6B,GAAG,CAACrF,CAAC,IAAI;MAAA;MAAAH,cAAA,GAAAmD,CAAA;MAAAnD,cAAA,GAAAqC,CAAA;MAAA,WAAI,CAAC2C,UAAU,CAAC7E,CAAC,CAAC;IAAD,CAAC,CAAC,CAAC;EACnF,CAAC;EAAA,OAAAqL,gBAAA,CAAArK,KAAA,OAAAD,SAAA;AAAA;AAAA;AAAA,SAAA4D,kBAAA,EACmB;EAClB,MAAM4G,QAAQ;EAAA;EAAA,CAAA1L,cAAA,GAAAqC,CAAA,QAAG,CAAC,CAAC;EAAC;EAAArC,cAAA,GAAAqC,CAAA;EACpB,KAAK,MAAMlC,CAAC,IAAIgG,MAAM,CAACsF,IAAI,CAAC,IAAI,CAAC9H,cAAc,CAAC,EAAE;IAAA;IAAA3D,cAAA,GAAAqC,CAAA;IAChDqJ,QAAQ,CAACvL,CAAC,CAAC,GAAG,IAAIwL,KAAK,CAAC,CAAC,CAAC,EAAE;MAC1BxG,GAAG,EAAEA,CAACyG,CAAC,EAAElG,CAAC,KAAK;QAAA;QAAA1F,cAAA,GAAAmD,CAAA;QAAAnD,cAAA,GAAAqC,CAAA;QACb,IAAI,CAAC,IAAI,CAACe,OAAO,CAAC3B,GAAG,CAACtB,CAAC,CAAC,EAAE;UAAA;UAAAH,cAAA,GAAAuC,CAAA;UAAAvC,cAAA,GAAAqC,CAAA;UACxB,MAAM,IAAI0C,KAAK,CACb,WAAW5E,CAAC,8CAA8CA,CAAC,UAC7D,CAAC;QACH,CAAC;QAAA;QAAA;UAAAH,cAAA,GAAAuC,CAAA;QAAA;QAAAvC,cAAA,GAAAqC,CAAA;QACD,OAAO,IAAI,CAACe,OAAO,CAAC+B,GAAG,CAAChF,CAAC,CAAC,CAACkJ,OAAO,CAAC3D,CAAC,CAAC;MACvC;IACF,CAAC,CAAC;EACJ;EAAC;EAAA1F,cAAA,GAAAqC,CAAA;EACD,OAAOqJ,QAAQ;AACjB;AAAC;AAAA,SAAA1F,KAEIzD,CAAC,EAAE;EAAA;EAAAvC,cAAA,GAAAqC,CAAA;EACN,IAAI,CAACE,CAAC,EAAE;IAAA;IAAAvC,cAAA,GAAAuC,CAAA;IAAAvC,cAAA,GAAAqC,CAAA;IACN,OAAO,KAAK;EACd,CAAC;EAAA;EAAA;IAAArC,cAAA,GAAAuC,CAAA;EAAA;EACD,MAAMsJ,CAAC;IAAA;IAAA,CAAA7L,cAAA,GAAAqC,CAAA,SAAG,IAAI;IAAE3B,CAAC;IAAA;IAAA,CAAAV,cAAA,GAAAqC,CAAA,SAAGyJ,IAAI,CAACC,KAAK,CAACD,IAAI,CAAC/F,GAAG,CAACxD,CAAC,CAAC,GAAGuJ,IAAI,CAAC/F,GAAG,CAAC8F,CAAC,CAAC,CAAC;EAAC;EAAA7L,cAAA,GAAAqC,CAAA;EAC1D,OAAO,GAAG,CAACE,CAAC,GAAGsJ,CAAC,IAAInL,CAAC,EAAEsL,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAACtL,CAAC,CAAC,EAAE;AACnE;AAmDF,SAASuC,gBAAgB;AACzB,eAAeA,gBAAgB,CAAC,CAAC;;AAEjC;AAAA;AAAAjD,cAAA,GAAAqC,CAAA;AACA;AAAI;AAAA,CAAArC,cAAA,GAAAuC,CAAA,kBAAOuE,MAAM,KAAK,WAAW;AAAA;AAAA,CAAA9G,cAAA,GAAAuC,CAAA,WAAI,OAAOuE,MAAM,CAACuC,OAAO,KAAK,WAAW,GAAE;EAAA;EAAArJ,cAAA,GAAAuC,CAAA;EAAAvC,cAAA,GAAAqC,CAAA;EAC1EyE,MAAM,CAACuC,OAAO,GAAGpG,gBAAgB,CAAC,CAAC;AACrC,CAAC;AAAA;AAAA;EAAAjD,cAAA,GAAAuC,CAAA;AAAA","ignoreList":[]}