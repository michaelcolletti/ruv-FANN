{"version":3,"names":["describe","it","expect","beforeAll","afterAll","RuvSwarm","EnhancedMCPTools","fs","path","ruvSwarm","mcpTools","testDir","_asyncToGenerator","join","process","cwd","Date","now","mkdir","recursive","initialize","loadingStrategy","enablePersistence","enableNeuralNetworks","enableForecasting","useSIMD","persistencePath","cleanup","rm","force","console","log","mlSwarm","createSwarm","name","topology","maxAgents","agents","dataPrep","spawn","type","capabilities","modelBuilder","trainer","evaluator","dataset","execute","task","config","samples","features","targetType","classes","noise","inputs","toHaveLength","targets","modelConfig","requirements","inputSize","outputSize","taskType","complexity","network","neuralManager","createNetwork","id","toBeDefined","trainingResult","networkId","epochs","batchSize","learningRate","validationSplit","earlyStoppingPatience","finalLoss","toBeLessThan","initialLoss","validationAccuracy","toBeGreaterThan","evaluation","testData","test","metrics","accuracy","confusionMatrix","testSamples","Array","fill","map","Float32Array","Math","random","predictions","predict","modelPath","save","stats","stat","size","forecastSwarm","timeSeriesData","periods","i","push","timestamp","value","sin","dayOfWeek","hour","trend","pipeline","tools","orchestrateForecasting","swarmId","data","models","horizon","ensembleMethod","trainingResults","train","patience","onProgress","model","epoch","loss","toFixed","lstm","finalMetrics","mae","transformer","nbeats","forecasts","forecast","steps","returnConfidenceIntervals","confidenceLevel","lowerBound","upperBound","evaluate","actualValues","slice","d","mape","processingSwarm","complexTask","stages","subtasks","_","source","floor","operations","dependsOn","algorithms","j","agentPool","agent","startTime","performance","orchestrationResult","orchestrate","strategy","monitoring","interval","progress","completed","total","percentage","duration","toBe","tasksCompleted","efficiency","parallelEfficiency","utilization","getAgentUtilization","avgUtilization","reduce","sum","u","length","collabSwarm","enableRealtime","document","content","version","editors","Promise","all","role","edits","editPromises","operation","position","text","documentId","comment","results","every","r","success","some","conflictResolved","finalDoc","getSharedState","toContain","comments","adaptiveSwarm","enableAdaptiveLearning","performanceTracker","Map","taskTypes","baselineResults","learningEnabled","result","measurePerformance","agentId","set","performances","trainingRounds","round","feedback","previousPerformance","targetImprovement","initialPerf","finalPerf","improvement","score","newTaskResults","newTaskType","find","t","trainedOn","testedOn","avgNewTaskPerf","resilientSwarm","faultTolerance","enabled","redundancy","checkpointInterval","criticalTask","computation","checkpointable","completedSteps","taskPromise","onStepComplete","stepId","setTimeout","simulateFailure","stepsCompleted","agentFailures","recoveries","checkpointStats","getCheckpointStats","checkpointsSaved","checkpointsRestored"],"sources":["workflow-scenarios.test.js"],"sourcesContent":["/**\n * End-to-End Workflow Tests\n * Tests complete user scenarios from initialization to results\n */\n\nimport { describe, it, expect, beforeAll, afterAll } from 'vitest';\nimport { RuvSwarm } from '../../src/index-enhanced.js';\nimport { EnhancedMCPTools } from '../../src/mcp-tools-enhanced.js';\nimport fs from 'fs/promises';\nimport path from 'path';\n\ndescribe('E2E Workflow Scenarios', () => {\n  let ruvSwarm;\n  let mcpTools;\n  let testDir;\n\n  beforeAll(async () => {\n    // Create test directory for outputs\n    testDir = path.join(process.cwd(), 'test-outputs', `e2e-${Date.now()}`);\n    await fs.mkdir(testDir, { recursive: true });\n\n    // Initialize system\n    ruvSwarm = await RuvSwarm.initialize({\n      loadingStrategy: 'full',\n      enablePersistence: true,\n      enableNeuralNetworks: true,\n      enableForecasting: true,\n      useSIMD: true,\n      persistencePath: path.join(testDir, 'persistence.db')\n    });\n\n    mcpTools = new EnhancedMCPTools();\n    await mcpTools.initialize();\n  });\n\n  afterAll(async () => {\n    if (ruvSwarm) {\n      await ruvSwarm.cleanup();\n    }\n    // Clean up test directory\n    await fs.rm(testDir, { recursive: true, force: true });\n  });\n\n  describe('Machine Learning Pipeline Workflow', () => {\n    it('should complete full ML pipeline from data to predictions', async () => {\n      console.log('\\n🔬 Starting ML Pipeline Workflow...');\n\n      // Step 1: Create swarm for ML tasks\n      const mlSwarm = await ruvSwarm.createSwarm({\n        name: 'ml-pipeline-swarm',\n        topology: 'hierarchical',\n        maxAgents: 8\n      });\n\n      // Step 2: Spawn specialized agents\n      const agents = {\n        dataPrep: await mlSwarm.spawn({ \n          type: 'researcher', \n          capabilities: ['data-preprocessing', 'feature-engineering'] \n        }),\n        modelBuilder: await mlSwarm.spawn({ \n          type: 'coder', \n          capabilities: ['neural-network-design', 'optimization'] \n        }),\n        trainer: await mlSwarm.spawn({ \n          type: 'analyst', \n          capabilities: ['training', 'hyperparameter-tuning'] \n        }),\n        evaluator: await mlSwarm.spawn({ \n          type: 'tester', \n          capabilities: ['model-evaluation', 'metrics-analysis'] \n        })\n      };\n\n      // Step 3: Generate synthetic dataset\n      console.log('📊 Generating dataset...');\n      const dataset = await agents.dataPrep.execute({\n        task: 'generate-dataset',\n        config: {\n          samples: 1000,\n          features: 20,\n          targetType: 'classification',\n          classes: 5,\n          noise: 0.1\n        }\n      });\n\n      expect(dataset.inputs).toHaveLength(1000);\n      expect(dataset.targets).toHaveLength(1000);\n      expect(dataset.inputs[0]).toHaveLength(20);\n\n      // Step 4: Build neural network\n      console.log('🏗️ Building neural network...');\n      const modelConfig = await agents.modelBuilder.execute({\n        task: 'design-network',\n        requirements: {\n          inputSize: dataset.features,\n          outputSize: dataset.classes,\n          taskType: 'classification',\n          complexity: 'medium'\n        }\n      });\n\n      const network = await ruvSwarm.neuralManager.createNetwork(modelConfig);\n      expect(network.id).toBeDefined();\n\n      // Step 5: Train the model\n      console.log('🎯 Training model...');\n      const trainingResult = await agents.trainer.execute({\n        task: 'train-model',\n        networkId: network.id,\n        dataset: dataset,\n        config: {\n          epochs: 50,\n          batchSize: 32,\n          learningRate: 0.001,\n          validationSplit: 0.2,\n          earlyStoppingPatience: 5\n        }\n      });\n\n      expect(trainingResult.finalLoss).toBeLessThan(trainingResult.initialLoss);\n      expect(trainingResult.validationAccuracy).toBeGreaterThan(0.7);\n\n      // Step 6: Evaluate model\n      console.log('📈 Evaluating model...');\n      const evaluation = await agents.evaluator.execute({\n        task: 'evaluate-model',\n        networkId: network.id,\n        testData: dataset.test,\n        metrics: ['accuracy', 'precision', 'recall', 'f1-score', 'confusion-matrix']\n      });\n\n      expect(evaluation.accuracy).toBeGreaterThan(0.75);\n      expect(evaluation.confusionMatrix).toHaveLength(5);\n\n      // Step 7: Make predictions\n      console.log('🔮 Making predictions...');\n      const testSamples = Array(10).fill(null).map(() => \n        new Float32Array(20).map(() => Math.random())\n      );\n\n      const predictions = await network.predict(testSamples);\n      expect(predictions).toHaveLength(10);\n      expect(predictions[0]).toHaveLength(5);\n\n      // Step 8: Save model\n      const modelPath = path.join(testDir, 'ml-model.ruv');\n      await network.save(modelPath);\n      \n      const stats = await fs.stat(modelPath);\n      expect(stats.size).toBeGreaterThan(0);\n\n      console.log('✅ ML Pipeline completed successfully!');\n    });\n  });\n\n  describe('Time Series Forecasting Workflow', () => {\n    it('should forecast time series data using specialized models', async () => {\n      console.log('\\n📈 Starting Time Series Forecasting Workflow...');\n\n      // Step 1: Create forecasting swarm\n      const forecastSwarm = await ruvSwarm.createSwarm({\n        name: 'forecast-swarm',\n        topology: 'mesh',\n        maxAgents: 6\n      });\n\n      // Step 2: Generate time series data\n      const timeSeriesData = [];\n      const periods = 500;\n      for (let i = 0; i < periods; i++) {\n        timeSeriesData.push({\n          timestamp: new Date(Date.now() - (periods - i) * 3600000),\n          value: 100 + 50 * Math.sin(i * 0.1) + 20 * Math.random(),\n          features: {\n            dayOfWeek: i % 7,\n            hour: i % 24,\n            trend: i / periods\n          }\n        });\n      }\n\n      // Step 3: Create forecasting pipeline\n      const pipeline = await mcpTools.tools.orchestrateForecasting({\n        swarmId: forecastSwarm.id,\n        data: timeSeriesData,\n        config: {\n          models: ['lstm', 'transformer', 'nbeats'],\n          horizon: 24,\n          validationSplit: 0.2,\n          ensembleMethod: 'weighted-average'\n        }\n      });\n\n      // Step 4: Train models\n      console.log('🧠 Training forecasting models...');\n      const trainingResults = await pipeline.train({\n        epochs: 30,\n        patience: 5,\n        onProgress: (model, epoch, metrics) => {\n          console.log(`  ${model}: Epoch ${epoch}, Loss: ${metrics.loss.toFixed(4)}`);\n        }\n      });\n\n      expect(trainingResults.lstm.finalMetrics.mae).toBeLessThan(10);\n      expect(trainingResults.transformer.finalMetrics.mae).toBeLessThan(10);\n      expect(trainingResults.nbeats.finalMetrics.mae).toBeLessThan(10);\n\n      // Step 5: Generate forecasts\n      console.log('🔮 Generating forecasts...');\n      const forecasts = await pipeline.forecast({\n        steps: 24,\n        returnConfidenceIntervals: true,\n        confidenceLevel: 0.95\n      });\n\n      expect(forecasts.predictions).toHaveLength(24);\n      expect(forecasts.lowerBound).toHaveLength(24);\n      expect(forecasts.upperBound).toHaveLength(24);\n\n      // Step 6: Evaluate forecast accuracy\n      const evaluation = await pipeline.evaluate({\n        actualValues: timeSeriesData.slice(-24).map(d => d.value),\n        metrics: ['mae', 'rmse', 'mape', 'smape']\n      });\n\n      expect(evaluation.mae).toBeLessThan(15);\n      expect(evaluation.mape).toBeLessThan(0.15); // Less than 15% error\n\n      console.log('✅ Forecasting workflow completed!');\n    });\n  });\n\n  describe('Distributed Task Processing Workflow', () => {\n    it('should process complex tasks across multiple agents', async () => {\n      console.log('\\n🚀 Starting Distributed Task Processing...');\n\n      // Step 1: Create processing swarm\n      const processingSwarm = await ruvSwarm.createSwarm({\n        name: 'distributed-processing',\n        topology: 'star',\n        maxAgents: 10\n      });\n\n      // Step 2: Define complex task\n      const complexTask = {\n        id: 'data-analysis-pipeline',\n        stages: [\n          {\n            name: 'data-collection',\n            subtasks: Array(50).fill(null).map((_, i) => ({\n              id: `collect-${i}`,\n              type: 'fetch',\n              source: `dataset-${i}`,\n              size: Math.floor(Math.random() * 1000000)\n            }))\n          },\n          {\n            name: 'data-processing',\n            subtasks: Array(50).fill(null).map((_, i) => ({\n              id: `process-${i}`,\n              type: 'transform',\n              operations: ['normalize', 'feature-extract', 'aggregate'],\n              dependsOn: [`collect-${i}`]\n            }))\n          },\n          {\n            name: 'analysis',\n            subtasks: Array(10).fill(null).map((_, i) => ({\n              id: `analyze-${i}`,\n              type: 'analyze',\n              algorithms: ['statistical', 'ml-based'],\n              dependsOn: Array(5).fill(null).map((_, j) => `process-${i * 5 + j}`)\n            }))\n          },\n          {\n            name: 'reporting',\n            subtasks: [{\n              id: 'final-report',\n              type: 'aggregate',\n              dependsOn: Array(10).fill(null).map((_, i) => `analyze-${i}`)\n            }]\n          }\n        ]\n      };\n\n      // Step 3: Spawn agents dynamically based on workload\n      console.log('🤖 Spawning agents...');\n      const agentPool = [];\n      for (let i = 0; i < 8; i++) {\n        const agent = await processingSwarm.spawn({\n          type: ['researcher', 'analyst', 'coder'][i % 3],\n          capabilities: ['data-processing', 'parallel-execution']\n        });\n        agentPool.push(agent);\n      }\n\n      // Step 4: Execute distributed processing\n      console.log('⚡ Processing tasks...');\n      const startTime = performance.now();\n      \n      const orchestrationResult = await processingSwarm.orchestrate({\n        task: complexTask,\n        strategy: 'parallel',\n        monitoring: {\n          interval: 100,\n          onProgress: (progress) => {\n            console.log(`  Progress: ${progress.completed}/${progress.total} tasks (${progress.percentage.toFixed(1)}%)`);\n          }\n        }\n      });\n\n      const duration = performance.now() - startTime;\n\n      expect(orchestrationResult.completed).toBe(true);\n      expect(orchestrationResult.tasksCompleted).toBe(111); // Total subtasks\n      expect(orchestrationResult.duration).toBeLessThan(duration);\n\n      // Step 5: Verify parallel execution efficiency\n      const efficiency = orchestrationResult.parallelEfficiency;\n      expect(efficiency).toBeGreaterThan(0.7); // At least 70% parallel efficiency\n\n      // Step 6: Check agent utilization\n      const utilization = await processingSwarm.getAgentUtilization();\n      const avgUtilization = utilization.reduce((sum, u) => sum + u.utilization, 0) / utilization.length;\n      expect(avgUtilization).toBeGreaterThan(0.6); // At least 60% average utilization\n\n      console.log(`✅ Distributed processing completed in ${(duration / 1000).toFixed(2)}s`);\n    });\n  });\n\n  describe('Real-time Collaboration Workflow', () => {\n    it('should handle real-time collaborative editing scenario', async () => {\n      console.log('\\n👥 Starting Real-time Collaboration Workflow...');\n\n      // Step 1: Create collaboration swarm\n      const collabSwarm = await ruvSwarm.createSwarm({\n        name: 'collab-swarm',\n        topology: 'mesh',\n        maxAgents: 5,\n        enableRealtime: true\n      });\n\n      // Step 2: Create shared document\n      const document = {\n        id: 'shared-doc-001',\n        content: 'Initial document content\\n',\n        version: 0,\n        operations: []\n      };\n\n      // Step 3: Spawn collaborative agents\n      const editors = await Promise.all([\n        collabSwarm.spawn({ type: 'coder', role: 'editor-1' }),\n        collabSwarm.spawn({ type: 'coder', role: 'editor-2' }),\n        collabSwarm.spawn({ type: 'researcher', role: 'reviewer' })\n      ]);\n\n      // Step 4: Simulate concurrent edits\n      console.log('📝 Simulating concurrent edits...');\n      const edits = [];\n      const editPromises = [];\n\n      // Editor 1 adds content\n      editPromises.push(editors[0].execute({\n        task: 'edit-document',\n        operation: {\n          type: 'insert',\n          position: document.content.length,\n          text: 'Section 1: Introduction\\n'\n        },\n        documentId: document.id\n      }));\n\n      // Editor 2 adds content concurrently\n      editPromises.push(editors[1].execute({\n        task: 'edit-document',\n        operation: {\n          type: 'insert',\n          position: document.content.length,\n          text: 'Section 2: Methods\\n'\n        },\n        documentId: document.id\n      }));\n\n      // Reviewer adds comments\n      editPromises.push(editors[2].execute({\n        task: 'add-comment',\n        comment: {\n          position: 0,\n          text: 'Needs more detail in introduction'\n        },\n        documentId: document.id\n      }));\n\n      const results = await Promise.all(editPromises);\n      \n      // Step 5: Verify conflict resolution\n      expect(results.every(r => r.success)).toBe(true);\n      expect(results.some(r => r.conflictResolved)).toBe(true);\n\n      // Step 6: Check final document state\n      const finalDoc = await collabSwarm.getSharedState(document.id);\n      expect(finalDoc.content).toContain('Introduction');\n      expect(finalDoc.content).toContain('Methods');\n      expect(finalDoc.comments).toHaveLength(1);\n      expect(finalDoc.version).toBeGreaterThan(0);\n\n      console.log('✅ Collaboration workflow completed!');\n    });\n  });\n\n  describe('Adaptive Learning Workflow', () => {\n    it('should adapt agent behavior based on performance', async () => {\n      console.log('\\n🧬 Starting Adaptive Learning Workflow...');\n\n      // Step 1: Create adaptive swarm\n      const adaptiveSwarm = await ruvSwarm.createSwarm({\n        name: 'adaptive-swarm',\n        topology: 'hierarchical',\n        maxAgents: 6,\n        enableAdaptiveLearning: true\n      });\n\n      // Step 2: Define performance metrics\n      const performanceTracker = {\n        agents: new Map(),\n        taskTypes: ['optimization', 'search', 'analysis', 'synthesis']\n      };\n\n      // Step 3: Run initial tasks and measure performance\n      console.log('📊 Running baseline tasks...');\n      const baselineResults = [];\n      \n      for (const taskType of performanceTracker.taskTypes) {\n        const agent = await adaptiveSwarm.spawn({ \n          type: 'analyst',\n          learningEnabled: true \n        });\n        \n        const result = await agent.execute({\n          task: taskType,\n          complexity: 'medium',\n          measurePerformance: true\n        });\n        \n        baselineResults.push({\n          agentId: agent.id,\n          taskType,\n          performance: result.performance\n        });\n        \n        performanceTracker.agents.set(agent.id, {\n          agent,\n          taskType,\n          performances: [result.performance]\n        });\n      }\n\n      // Step 4: Train agents through repeated tasks\n      console.log('🎯 Training agents...');\n      const trainingRounds = 10;\n      \n      for (let round = 0; round < trainingRounds; round++) {\n        for (const [agentId, data] of performanceTracker.agents) {\n          const result = await data.agent.execute({\n            task: data.taskType,\n            complexity: 'medium',\n            learningEnabled: true,\n            feedback: {\n              previousPerformance: data.performances[data.performances.length - 1],\n              targetImprovement: 0.05\n            }\n          });\n          \n          data.performances.push(result.performance);\n        }\n      }\n\n      // Step 5: Verify performance improvement\n      console.log('📈 Analyzing improvements...');\n      for (const [agentId, data] of performanceTracker.agents) {\n        const initialPerf = data.performances[0];\n        const finalPerf = data.performances[data.performances.length - 1];\n        const improvement = (finalPerf.score - initialPerf.score) / initialPerf.score;\n        \n        expect(improvement).toBeGreaterThan(0.1); // At least 10% improvement\n        console.log(`  Agent ${agentId}: ${(improvement * 100).toFixed(1)}% improvement`);\n      }\n\n      // Step 6: Test generalization\n      console.log('🔄 Testing generalization...');\n      const newTaskResults = [];\n      \n      for (const [agentId, data] of performanceTracker.agents) {\n        // Test on a different task type\n        const newTaskType = performanceTracker.taskTypes.find(t => t !== data.taskType);\n        const result = await data.agent.execute({\n          task: newTaskType,\n          complexity: 'medium'\n        });\n        \n        newTaskResults.push({\n          agentId,\n          trainedOn: data.taskType,\n          testedOn: newTaskType,\n          performance: result.performance.score\n        });\n      }\n\n      // Verify some knowledge transfer\n      const avgNewTaskPerf = newTaskResults.reduce((sum, r) => sum + r.performance, 0) / newTaskResults.length;\n      expect(avgNewTaskPerf).toBeGreaterThan(0.6); // Reasonable performance on new tasks\n\n      console.log('✅ Adaptive learning workflow completed!');\n    });\n  });\n\n  describe('Fault Tolerance Workflow', () => {\n    it('should handle agent failures and recover gracefully', async () => {\n      console.log('\\n🛡️ Starting Fault Tolerance Workflow...');\n\n      // Step 1: Create resilient swarm\n      const resilientSwarm = await ruvSwarm.createSwarm({\n        name: 'resilient-swarm',\n        topology: 'mesh',\n        maxAgents: 8,\n        faultTolerance: {\n          enabled: true,\n          redundancy: 2,\n          checkpointInterval: 1000\n        }\n      });\n\n      // Step 2: Create critical task with checkpoints\n      const criticalTask = {\n        id: 'critical-computation',\n        steps: Array(20).fill(null).map((_, i) => ({\n          id: `step-${i}`,\n          computation: 'heavy',\n          checkpointable: true\n        }))\n      };\n\n      // Step 3: Start task execution\n      console.log('⚡ Starting critical task...');\n      const agents = await Promise.all(\n        Array(4).fill(null).map(() => resilientSwarm.spawn({ type: 'analyst' }))\n      );\n\n      let completedSteps = 0;\n      const taskPromise = resilientSwarm.orchestrate({\n        task: criticalTask,\n        onStepComplete: (stepId) => {\n          completedSteps++;\n          console.log(`  Step ${stepId} completed (${completedSteps}/20)`);\n        }\n      });\n\n      // Step 4: Simulate agent failures\n      setTimeout(async () => {\n        console.log('💥 Simulating agent failure...');\n        await agents[0].simulateFailure();\n      }, 2000);\n\n      setTimeout(async () => {\n        console.log('💥 Simulating another agent failure...');\n        await agents[1].simulateFailure();\n      }, 4000);\n\n      // Step 5: Wait for task completion\n      const result = await taskPromise;\n\n      // Step 6: Verify task completed despite failures\n      expect(result.completed).toBe(true);\n      expect(result.stepsCompleted).toBe(20);\n      expect(result.agentFailures).toBe(2);\n      expect(result.recoveries).toBe(2);\n\n      // Step 7: Check checkpoint usage\n      const checkpointStats = await resilientSwarm.getCheckpointStats();\n      expect(checkpointStats.checkpointsSaved).toBeGreaterThan(0);\n      expect(checkpointStats.checkpointsRestored).toBeGreaterThan(0);\n\n      console.log('✅ Fault tolerance workflow completed successfully!');\n    });\n  });\n});"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,EAAEC,EAAE,EAAEC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,QAAQ;AAClE,SAASC,QAAQ,QAAQ,6BAA6B;AACtD,SAASC,gBAAgB,QAAQ,iCAAiC;AAClE,OAAOC,EAAE,MAAM,aAAa;AAC5B,OAAOC,IAAI,MAAM,MAAM;AAEvBR,QAAQ,CAAC,wBAAwB,EAAE,MAAM;EACvC,IAAIS,QAAQ;EACZ,IAAIC,QAAQ;EACZ,IAAIC,OAAO;EAEXR,SAAS,cAAAS,iBAAA,CAAC,aAAY;IACpB;IACAD,OAAO,GAAGH,IAAI,CAACK,IAAI,CAACC,OAAO,CAACC,GAAG,CAAC,CAAC,EAAE,cAAc,EAAE,OAAOC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC;IACvE,MAAMV,EAAE,CAACW,KAAK,CAACP,OAAO,EAAE;MAAEQ,SAAS,EAAE;IAAK,CAAC,CAAC;;IAE5C;IACAV,QAAQ,SAASJ,QAAQ,CAACe,UAAU,CAAC;MACnCC,eAAe,EAAE,MAAM;MACvBC,iBAAiB,EAAE,IAAI;MACvBC,oBAAoB,EAAE,IAAI;MAC1BC,iBAAiB,EAAE,IAAI;MACvBC,OAAO,EAAE,IAAI;MACbC,eAAe,EAAElB,IAAI,CAACK,IAAI,CAACF,OAAO,EAAE,gBAAgB;IACtD,CAAC,CAAC;IAEFD,QAAQ,GAAG,IAAIJ,gBAAgB,CAAC,CAAC;IACjC,MAAMI,QAAQ,CAACU,UAAU,CAAC,CAAC;EAC7B,CAAC,EAAC;EAEFhB,QAAQ,cAAAQ,iBAAA,CAAC,aAAY;IACnB,IAAIH,QAAQ,EAAE;MACZ,MAAMA,QAAQ,CAACkB,OAAO,CAAC,CAAC;IAC1B;IACA;IACA,MAAMpB,EAAE,CAACqB,EAAE,CAACjB,OAAO,EAAE;MAAEQ,SAAS,EAAE,IAAI;MAAEU,KAAK,EAAE;IAAK,CAAC,CAAC;EACxD,CAAC,EAAC;EAEF7B,QAAQ,CAAC,oCAAoC,EAAE,MAAM;IACnDC,EAAE,CAAC,2DAA2D,eAAAW,iBAAA,CAAE,aAAY;MAC1EkB,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;;MAEpD;MACA,MAAMC,OAAO,SAASvB,QAAQ,CAACwB,WAAW,CAAC;QACzCC,IAAI,EAAE,mBAAmB;QACzBC,QAAQ,EAAE,cAAc;QACxBC,SAAS,EAAE;MACb,CAAC,CAAC;;MAEF;MACA,MAAMC,MAAM,GAAG;QACbC,QAAQ,QAAQN,OAAO,CAACO,KAAK,CAAC;UAC5BC,IAAI,EAAE,YAAY;UAClBC,YAAY,EAAE,CAAC,oBAAoB,EAAE,qBAAqB;QAC5D,CAAC,CAAC;QACFC,YAAY,QAAQV,OAAO,CAACO,KAAK,CAAC;UAChCC,IAAI,EAAE,OAAO;UACbC,YAAY,EAAE,CAAC,uBAAuB,EAAE,cAAc;QACxD,CAAC,CAAC;QACFE,OAAO,QAAQX,OAAO,CAACO,KAAK,CAAC;UAC3BC,IAAI,EAAE,SAAS;UACfC,YAAY,EAAE,CAAC,UAAU,EAAE,uBAAuB;QACpD,CAAC,CAAC;QACFG,SAAS,QAAQZ,OAAO,CAACO,KAAK,CAAC;UAC7BC,IAAI,EAAE,QAAQ;UACdC,YAAY,EAAE,CAAC,kBAAkB,EAAE,kBAAkB;QACvD,CAAC;MACH,CAAC;;MAED;MACAX,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvC,MAAMc,OAAO,SAASR,MAAM,CAACC,QAAQ,CAACQ,OAAO,CAAC;QAC5CC,IAAI,EAAE,kBAAkB;QACxBC,MAAM,EAAE;UACNC,OAAO,EAAE,IAAI;UACbC,QAAQ,EAAE,EAAE;UACZC,UAAU,EAAE,gBAAgB;UAC5BC,OAAO,EAAE,CAAC;UACVC,KAAK,EAAE;QACT;MACF,CAAC,CAAC;MAEFnD,MAAM,CAAC2C,OAAO,CAACS,MAAM,CAAC,CAACC,YAAY,CAAC,IAAI,CAAC;MACzCrD,MAAM,CAAC2C,OAAO,CAACW,OAAO,CAAC,CAACD,YAAY,CAAC,IAAI,CAAC;MAC1CrD,MAAM,CAAC2C,OAAO,CAACS,MAAM,CAAC,CAAC,CAAC,CAAC,CAACC,YAAY,CAAC,EAAE,CAAC;;MAE1C;MACAzB,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;MAC7C,MAAM0B,WAAW,SAASpB,MAAM,CAACK,YAAY,CAACI,OAAO,CAAC;QACpDC,IAAI,EAAE,gBAAgB;QACtBW,YAAY,EAAE;UACZC,SAAS,EAAEd,OAAO,CAACK,QAAQ;UAC3BU,UAAU,EAAEf,OAAO,CAACO,OAAO;UAC3BS,QAAQ,EAAE,gBAAgB;UAC1BC,UAAU,EAAE;QACd;MACF,CAAC,CAAC;MAEF,MAAMC,OAAO,SAAStD,QAAQ,CAACuD,aAAa,CAACC,aAAa,CAACR,WAAW,CAAC;MACvEvD,MAAM,CAAC6D,OAAO,CAACG,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC;;MAEhC;MACArC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;MACnC,MAAMqC,cAAc,SAAS/B,MAAM,CAACM,OAAO,CAACG,OAAO,CAAC;QAClDC,IAAI,EAAE,aAAa;QACnBsB,SAAS,EAAEN,OAAO,CAACG,EAAE;QACrBrB,OAAO,EAAEA,OAAO;QAChBG,MAAM,EAAE;UACNsB,MAAM,EAAE,EAAE;UACVC,SAAS,EAAE,EAAE;UACbC,YAAY,EAAE,KAAK;UACnBC,eAAe,EAAE,GAAG;UACpBC,qBAAqB,EAAE;QACzB;MACF,CAAC,CAAC;MAEFxE,MAAM,CAACkE,cAAc,CAACO,SAAS,CAAC,CAACC,YAAY,CAACR,cAAc,CAACS,WAAW,CAAC;MACzE3E,MAAM,CAACkE,cAAc,CAACU,kBAAkB,CAAC,CAACC,eAAe,CAAC,GAAG,CAAC;;MAE9D;MACAjD,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACrC,MAAMiD,UAAU,SAAS3C,MAAM,CAACO,SAAS,CAACE,OAAO,CAAC;QAChDC,IAAI,EAAE,gBAAgB;QACtBsB,SAAS,EAAEN,OAAO,CAACG,EAAE;QACrBe,QAAQ,EAAEpC,OAAO,CAACqC,IAAI;QACtBC,OAAO,EAAE,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,EAAE,UAAU,EAAE,kBAAkB;MAC7E,CAAC,CAAC;MAEFjF,MAAM,CAAC8E,UAAU,CAACI,QAAQ,CAAC,CAACL,eAAe,CAAC,IAAI,CAAC;MACjD7E,MAAM,CAAC8E,UAAU,CAACK,eAAe,CAAC,CAAC9B,YAAY,CAAC,CAAC,CAAC;;MAElD;MACAzB,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvC,MAAMuD,WAAW,GAAGC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,MAC3C,IAAIC,YAAY,CAAC,EAAE,CAAC,CAACD,GAAG,CAAC,MAAME,IAAI,CAACC,MAAM,CAAC,CAAC,CAC9C,CAAC;MAED,MAAMC,WAAW,SAAS9B,OAAO,CAAC+B,OAAO,CAACR,WAAW,CAAC;MACtDpF,MAAM,CAAC2F,WAAW,CAAC,CAACtC,YAAY,CAAC,EAAE,CAAC;MACpCrD,MAAM,CAAC2F,WAAW,CAAC,CAAC,CAAC,CAAC,CAACtC,YAAY,CAAC,CAAC,CAAC;;MAEtC;MACA,MAAMwC,SAAS,GAAGvF,IAAI,CAACK,IAAI,CAACF,OAAO,EAAE,cAAc,CAAC;MACpD,MAAMoD,OAAO,CAACiC,IAAI,CAACD,SAAS,CAAC;MAE7B,MAAME,KAAK,SAAS1F,EAAE,CAAC2F,IAAI,CAACH,SAAS,CAAC;MACtC7F,MAAM,CAAC+F,KAAK,CAACE,IAAI,CAAC,CAACpB,eAAe,CAAC,CAAC,CAAC;MAErCjD,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;IACtD,CAAC,EAAC;EACJ,CAAC,CAAC;EAEF/B,QAAQ,CAAC,kCAAkC,EAAE,MAAM;IACjDC,EAAE,CAAC,2DAA2D,eAAAW,iBAAA,CAAE,aAAY;MAC1EkB,OAAO,CAACC,GAAG,CAAC,mDAAmD,CAAC;;MAEhE;MACA,MAAMqE,aAAa,SAAS3F,QAAQ,CAACwB,WAAW,CAAC;QAC/CC,IAAI,EAAE,gBAAgB;QACtBC,QAAQ,EAAE,MAAM;QAChBC,SAAS,EAAE;MACb,CAAC,CAAC;;MAEF;MACA,MAAMiE,cAAc,GAAG,EAAE;MACzB,MAAMC,OAAO,GAAG,GAAG;MACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,OAAO,EAAEC,CAAC,EAAE,EAAE;QAChCF,cAAc,CAACG,IAAI,CAAC;UAClBC,SAAS,EAAE,IAAIzF,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,CAACqF,OAAO,GAAGC,CAAC,IAAI,OAAO,CAAC;UACzDG,KAAK,EAAE,GAAG,GAAG,EAAE,GAAGf,IAAI,CAACgB,GAAG,CAACJ,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,GAAGZ,IAAI,CAACC,MAAM,CAAC,CAAC;UACxD1C,QAAQ,EAAE;YACR0D,SAAS,EAAEL,CAAC,GAAG,CAAC;YAChBM,IAAI,EAAEN,CAAC,GAAG,EAAE;YACZO,KAAK,EAAEP,CAAC,GAAGD;UACb;QACF,CAAC,CAAC;MACJ;;MAEA;MACA,MAAMS,QAAQ,SAASrG,QAAQ,CAACsG,KAAK,CAACC,sBAAsB,CAAC;QAC3DC,OAAO,EAAEd,aAAa,CAAClC,EAAE;QACzBiD,IAAI,EAAEd,cAAc;QACpBrD,MAAM,EAAE;UACNoE,MAAM,EAAE,CAAC,MAAM,EAAE,aAAa,EAAE,QAAQ,CAAC;UACzCC,OAAO,EAAE,EAAE;UACX5C,eAAe,EAAE,GAAG;UACpB6C,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;;MAEF;MACAxF,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;MAChD,MAAMwF,eAAe,SAASR,QAAQ,CAACS,KAAK,CAAC;QAC3ClD,MAAM,EAAE,EAAE;QACVmD,QAAQ,EAAE,CAAC;QACXC,UAAU,EAAEA,CAACC,KAAK,EAAEC,KAAK,EAAEzC,OAAO,KAAK;UACrCrD,OAAO,CAACC,GAAG,CAAC,KAAK4F,KAAK,WAAWC,KAAK,WAAWzC,OAAO,CAAC0C,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;QAC7E;MACF,CAAC,CAAC;MAEF5H,MAAM,CAACqH,eAAe,CAACQ,IAAI,CAACC,YAAY,CAACC,GAAG,CAAC,CAACrD,YAAY,CAAC,EAAE,CAAC;MAC9D1E,MAAM,CAACqH,eAAe,CAACW,WAAW,CAACF,YAAY,CAACC,GAAG,CAAC,CAACrD,YAAY,CAAC,EAAE,CAAC;MACrE1E,MAAM,CAACqH,eAAe,CAACY,MAAM,CAACH,YAAY,CAACC,GAAG,CAAC,CAACrD,YAAY,CAAC,EAAE,CAAC;;MAEhE;MACA9C,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MACzC,MAAMqG,SAAS,SAASrB,QAAQ,CAACsB,QAAQ,CAAC;QACxCC,KAAK,EAAE,EAAE;QACTC,yBAAyB,EAAE,IAAI;QAC/BC,eAAe,EAAE;MACnB,CAAC,CAAC;MAEFtI,MAAM,CAACkI,SAAS,CAACvC,WAAW,CAAC,CAACtC,YAAY,CAAC,EAAE,CAAC;MAC9CrD,MAAM,CAACkI,SAAS,CAACK,UAAU,CAAC,CAAClF,YAAY,CAAC,EAAE,CAAC;MAC7CrD,MAAM,CAACkI,SAAS,CAACM,UAAU,CAAC,CAACnF,YAAY,CAAC,EAAE,CAAC;;MAE7C;MACA,MAAMyB,UAAU,SAAS+B,QAAQ,CAAC4B,QAAQ,CAAC;QACzCC,YAAY,EAAEvC,cAAc,CAACwC,KAAK,CAAC,CAAC,EAAE,CAAC,CAACpD,GAAG,CAACqD,CAAC,IAAIA,CAAC,CAACpC,KAAK,CAAC;QACzDvB,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO;MAC1C,CAAC,CAAC;MAEFjF,MAAM,CAAC8E,UAAU,CAACiD,GAAG,CAAC,CAACrD,YAAY,CAAC,EAAE,CAAC;MACvC1E,MAAM,CAAC8E,UAAU,CAAC+D,IAAI,CAAC,CAACnE,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;;MAE5C9C,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAClD,CAAC,EAAC;EACJ,CAAC,CAAC;EAEF/B,QAAQ,CAAC,sCAAsC,EAAE,MAAM;IACrDC,EAAE,CAAC,qDAAqD,eAAAW,iBAAA,CAAE,aAAY;MACpEkB,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;;MAE3D;MACA,MAAMiH,eAAe,SAASvI,QAAQ,CAACwB,WAAW,CAAC;QACjDC,IAAI,EAAE,wBAAwB;QAC9BC,QAAQ,EAAE,MAAM;QAChBC,SAAS,EAAE;MACb,CAAC,CAAC;;MAEF;MACA,MAAM6G,WAAW,GAAG;QAClB/E,EAAE,EAAE,wBAAwB;QAC5BgF,MAAM,EAAE,CACN;UACEhH,IAAI,EAAE,iBAAiB;UACvBiH,QAAQ,EAAE5D,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,CAAC2D,CAAC,EAAE7C,CAAC,MAAM;YAC5CrC,EAAE,EAAE,WAAWqC,CAAC,EAAE;YAClB/D,IAAI,EAAE,OAAO;YACb6G,MAAM,EAAE,WAAW9C,CAAC,EAAE;YACtBJ,IAAI,EAAER,IAAI,CAAC2D,KAAK,CAAC3D,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,OAAO;UAC1C,CAAC,CAAC;QACJ,CAAC,EACD;UACE1D,IAAI,EAAE,iBAAiB;UACvBiH,QAAQ,EAAE5D,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,CAAC2D,CAAC,EAAE7C,CAAC,MAAM;YAC5CrC,EAAE,EAAE,WAAWqC,CAAC,EAAE;YAClB/D,IAAI,EAAE,WAAW;YACjB+G,UAAU,EAAE,CAAC,WAAW,EAAE,iBAAiB,EAAE,WAAW,CAAC;YACzDC,SAAS,EAAE,CAAC,WAAWjD,CAAC,EAAE;UAC5B,CAAC,CAAC;QACJ,CAAC,EACD;UACErE,IAAI,EAAE,UAAU;UAChBiH,QAAQ,EAAE5D,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,CAAC2D,CAAC,EAAE7C,CAAC,MAAM;YAC5CrC,EAAE,EAAE,WAAWqC,CAAC,EAAE;YAClB/D,IAAI,EAAE,SAAS;YACfiH,UAAU,EAAE,CAAC,aAAa,EAAE,UAAU,CAAC;YACvCD,SAAS,EAAEjE,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,CAAC2D,CAAC,EAAEM,CAAC,KAAK,WAAWnD,CAAC,GAAG,CAAC,GAAGmD,CAAC,EAAE;UACrE,CAAC,CAAC;QACJ,CAAC,EACD;UACExH,IAAI,EAAE,WAAW;UACjBiH,QAAQ,EAAE,CAAC;YACTjF,EAAE,EAAE,cAAc;YAClB1B,IAAI,EAAE,WAAW;YACjBgH,SAAS,EAAEjE,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,CAAC2D,CAAC,EAAE7C,CAAC,KAAK,WAAWA,CAAC,EAAE;UAC9D,CAAC;QACH,CAAC;MAEL,CAAC;;MAED;MACAzE,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MACpC,MAAM4H,SAAS,GAAG,EAAE;MACpB,KAAK,IAAIpD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1B,MAAMqD,KAAK,SAASZ,eAAe,CAACzG,KAAK,CAAC;UACxCC,IAAI,EAAE,CAAC,YAAY,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC+D,CAAC,GAAG,CAAC,CAAC;UAC/C9D,YAAY,EAAE,CAAC,iBAAiB,EAAE,oBAAoB;QACxD,CAAC,CAAC;QACFkH,SAAS,CAACnD,IAAI,CAACoD,KAAK,CAAC;MACvB;;MAEA;MACA9H,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MACpC,MAAM8H,SAAS,GAAGC,WAAW,CAAC7I,GAAG,CAAC,CAAC;MAEnC,MAAM8I,mBAAmB,SAASf,eAAe,CAACgB,WAAW,CAAC;QAC5DjH,IAAI,EAAEkG,WAAW;QACjBgB,QAAQ,EAAE,UAAU;QACpBC,UAAU,EAAE;UACVC,QAAQ,EAAE,GAAG;UACbzC,UAAU,EAAG0C,QAAQ,IAAK;YACxBtI,OAAO,CAACC,GAAG,CAAC,eAAeqI,QAAQ,CAACC,SAAS,IAAID,QAAQ,CAACE,KAAK,WAAWF,QAAQ,CAACG,UAAU,CAACzC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;UAC/G;QACF;MACF,CAAC,CAAC;MAEF,MAAM0C,QAAQ,GAAGV,WAAW,CAAC7I,GAAG,CAAC,CAAC,GAAG4I,SAAS;MAE9C3J,MAAM,CAAC6J,mBAAmB,CAACM,SAAS,CAAC,CAACI,IAAI,CAAC,IAAI,CAAC;MAChDvK,MAAM,CAAC6J,mBAAmB,CAACW,cAAc,CAAC,CAACD,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;MACtDvK,MAAM,CAAC6J,mBAAmB,CAACS,QAAQ,CAAC,CAAC5F,YAAY,CAAC4F,QAAQ,CAAC;;MAE3D;MACA,MAAMG,UAAU,GAAGZ,mBAAmB,CAACa,kBAAkB;MACzD1K,MAAM,CAACyK,UAAU,CAAC,CAAC5F,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC;;MAEzC;MACA,MAAM8F,WAAW,SAAS7B,eAAe,CAAC8B,mBAAmB,CAAC,CAAC;MAC/D,MAAMC,cAAc,GAAGF,WAAW,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAKD,GAAG,GAAGC,CAAC,CAACL,WAAW,EAAE,CAAC,CAAC,GAAGA,WAAW,CAACM,MAAM;MAClGjL,MAAM,CAAC6K,cAAc,CAAC,CAAChG,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC;;MAE7CjD,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAACyI,QAAQ,GAAG,IAAI,EAAE1C,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;IACvF,CAAC,EAAC;EACJ,CAAC,CAAC;EAEF9H,QAAQ,CAAC,kCAAkC,EAAE,MAAM;IACjDC,EAAE,CAAC,wDAAwD,eAAAW,iBAAA,CAAE,aAAY;MACvEkB,OAAO,CAACC,GAAG,CAAC,mDAAmD,CAAC;;MAEhE;MACA,MAAMqJ,WAAW,SAAS3K,QAAQ,CAACwB,WAAW,CAAC;QAC7CC,IAAI,EAAE,cAAc;QACpBC,QAAQ,EAAE,MAAM;QAChBC,SAAS,EAAE,CAAC;QACZiJ,cAAc,EAAE;MAClB,CAAC,CAAC;;MAEF;MACA,MAAMC,QAAQ,GAAG;QACfpH,EAAE,EAAE,gBAAgB;QACpBqH,OAAO,EAAE,4BAA4B;QACrCC,OAAO,EAAE,CAAC;QACVjC,UAAU,EAAE;MACd,CAAC;;MAED;MACA,MAAMkC,OAAO,SAASC,OAAO,CAACC,GAAG,CAAC,CAChCP,WAAW,CAAC7I,KAAK,CAAC;QAAEC,IAAI,EAAE,OAAO;QAAEoJ,IAAI,EAAE;MAAW,CAAC,CAAC,EACtDR,WAAW,CAAC7I,KAAK,CAAC;QAAEC,IAAI,EAAE,OAAO;QAAEoJ,IAAI,EAAE;MAAW,CAAC,CAAC,EACtDR,WAAW,CAAC7I,KAAK,CAAC;QAAEC,IAAI,EAAE,YAAY;QAAEoJ,IAAI,EAAE;MAAW,CAAC,CAAC,CAC5D,CAAC;;MAEF;MACA9J,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;MAChD,MAAM8J,KAAK,GAAG,EAAE;MAChB,MAAMC,YAAY,GAAG,EAAE;;MAEvB;MACAA,YAAY,CAACtF,IAAI,CAACiF,OAAO,CAAC,CAAC,CAAC,CAAC3I,OAAO,CAAC;QACnCC,IAAI,EAAE,eAAe;QACrBgJ,SAAS,EAAE;UACTvJ,IAAI,EAAE,QAAQ;UACdwJ,QAAQ,EAAEV,QAAQ,CAACC,OAAO,CAACJ,MAAM;UACjCc,IAAI,EAAE;QACR,CAAC;QACDC,UAAU,EAAEZ,QAAQ,CAACpH;MACvB,CAAC,CAAC,CAAC;;MAEH;MACA4H,YAAY,CAACtF,IAAI,CAACiF,OAAO,CAAC,CAAC,CAAC,CAAC3I,OAAO,CAAC;QACnCC,IAAI,EAAE,eAAe;QACrBgJ,SAAS,EAAE;UACTvJ,IAAI,EAAE,QAAQ;UACdwJ,QAAQ,EAAEV,QAAQ,CAACC,OAAO,CAACJ,MAAM;UACjCc,IAAI,EAAE;QACR,CAAC;QACDC,UAAU,EAAEZ,QAAQ,CAACpH;MACvB,CAAC,CAAC,CAAC;;MAEH;MACA4H,YAAY,CAACtF,IAAI,CAACiF,OAAO,CAAC,CAAC,CAAC,CAAC3I,OAAO,CAAC;QACnCC,IAAI,EAAE,aAAa;QACnBoJ,OAAO,EAAE;UACPH,QAAQ,EAAE,CAAC;UACXC,IAAI,EAAE;QACR,CAAC;QACDC,UAAU,EAAEZ,QAAQ,CAACpH;MACvB,CAAC,CAAC,CAAC;MAEH,MAAMkI,OAAO,SAASV,OAAO,CAACC,GAAG,CAACG,YAAY,CAAC;;MAE/C;MACA5L,MAAM,CAACkM,OAAO,CAACC,KAAK,CAACC,CAAC,IAAIA,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC9B,IAAI,CAAC,IAAI,CAAC;MAChDvK,MAAM,CAACkM,OAAO,CAACI,IAAI,CAACF,CAAC,IAAIA,CAAC,CAACG,gBAAgB,CAAC,CAAC,CAAChC,IAAI,CAAC,IAAI,CAAC;;MAExD;MACA,MAAMiC,QAAQ,SAAStB,WAAW,CAACuB,cAAc,CAACrB,QAAQ,CAACpH,EAAE,CAAC;MAC9DhE,MAAM,CAACwM,QAAQ,CAACnB,OAAO,CAAC,CAACqB,SAAS,CAAC,cAAc,CAAC;MAClD1M,MAAM,CAACwM,QAAQ,CAACnB,OAAO,CAAC,CAACqB,SAAS,CAAC,SAAS,CAAC;MAC7C1M,MAAM,CAACwM,QAAQ,CAACG,QAAQ,CAAC,CAACtJ,YAAY,CAAC,CAAC,CAAC;MACzCrD,MAAM,CAACwM,QAAQ,CAAClB,OAAO,CAAC,CAACzG,eAAe,CAAC,CAAC,CAAC;MAE3CjD,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;IACpD,CAAC,EAAC;EACJ,CAAC,CAAC;EAEF/B,QAAQ,CAAC,4BAA4B,EAAE,MAAM;IAC3CC,EAAE,CAAC,kDAAkD,eAAAW,iBAAA,CAAE,aAAY;MACjEkB,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;;MAE1D;MACA,MAAM+K,aAAa,SAASrM,QAAQ,CAACwB,WAAW,CAAC;QAC/CC,IAAI,EAAE,gBAAgB;QACtBC,QAAQ,EAAE,cAAc;QACxBC,SAAS,EAAE,CAAC;QACZ2K,sBAAsB,EAAE;MAC1B,CAAC,CAAC;;MAEF;MACA,MAAMC,kBAAkB,GAAG;QACzB3K,MAAM,EAAE,IAAI4K,GAAG,CAAC,CAAC;QACjBC,SAAS,EAAE,CAAC,cAAc,EAAE,QAAQ,EAAE,UAAU,EAAE,WAAW;MAC/D,CAAC;;MAED;MACApL,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAC3C,MAAMoL,eAAe,GAAG,EAAE;MAE1B,KAAK,MAAMtJ,QAAQ,IAAImJ,kBAAkB,CAACE,SAAS,EAAE;QACnD,MAAMtD,KAAK,SAASkD,aAAa,CAACvK,KAAK,CAAC;UACtCC,IAAI,EAAE,SAAS;UACf4K,eAAe,EAAE;QACnB,CAAC,CAAC;QAEF,MAAMC,MAAM,SAASzD,KAAK,CAAC9G,OAAO,CAAC;UACjCC,IAAI,EAAEc,QAAQ;UACdC,UAAU,EAAE,QAAQ;UACpBwJ,kBAAkB,EAAE;QACtB,CAAC,CAAC;QAEFH,eAAe,CAAC3G,IAAI,CAAC;UACnB+G,OAAO,EAAE3D,KAAK,CAAC1F,EAAE;UACjBL,QAAQ;UACRiG,WAAW,EAAEuD,MAAM,CAACvD;QACtB,CAAC,CAAC;QAEFkD,kBAAkB,CAAC3K,MAAM,CAACmL,GAAG,CAAC5D,KAAK,CAAC1F,EAAE,EAAE;UACtC0F,KAAK;UACL/F,QAAQ;UACR4J,YAAY,EAAE,CAACJ,MAAM,CAACvD,WAAW;QACnC,CAAC,CAAC;MACJ;;MAEA;MACAhI,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MACpC,MAAM2L,cAAc,GAAG,EAAE;MAEzB,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGD,cAAc,EAAEC,KAAK,EAAE,EAAE;QACnD,KAAK,MAAM,CAACJ,OAAO,EAAEpG,IAAI,CAAC,IAAI6F,kBAAkB,CAAC3K,MAAM,EAAE;UACvD,MAAMgL,MAAM,SAASlG,IAAI,CAACyC,KAAK,CAAC9G,OAAO,CAAC;YACtCC,IAAI,EAAEoE,IAAI,CAACtD,QAAQ;YACnBC,UAAU,EAAE,QAAQ;YACpBsJ,eAAe,EAAE,IAAI;YACrBQ,QAAQ,EAAE;cACRC,mBAAmB,EAAE1G,IAAI,CAACsG,YAAY,CAACtG,IAAI,CAACsG,YAAY,CAACtC,MAAM,GAAG,CAAC,CAAC;cACpE2C,iBAAiB,EAAE;YACrB;UACF,CAAC,CAAC;UAEF3G,IAAI,CAACsG,YAAY,CAACjH,IAAI,CAAC6G,MAAM,CAACvD,WAAW,CAAC;QAC5C;MACF;;MAEA;MACAhI,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAC3C,KAAK,MAAM,CAACwL,OAAO,EAAEpG,IAAI,CAAC,IAAI6F,kBAAkB,CAAC3K,MAAM,EAAE;QACvD,MAAM0L,WAAW,GAAG5G,IAAI,CAACsG,YAAY,CAAC,CAAC,CAAC;QACxC,MAAMO,SAAS,GAAG7G,IAAI,CAACsG,YAAY,CAACtG,IAAI,CAACsG,YAAY,CAACtC,MAAM,GAAG,CAAC,CAAC;QACjE,MAAM8C,WAAW,GAAG,CAACD,SAAS,CAACE,KAAK,GAAGH,WAAW,CAACG,KAAK,IAAIH,WAAW,CAACG,KAAK;QAE7EhO,MAAM,CAAC+N,WAAW,CAAC,CAAClJ,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC;QAC1CjD,OAAO,CAACC,GAAG,CAAC,WAAWwL,OAAO,KAAK,CAACU,WAAW,GAAG,GAAG,EAAEnG,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC;MACnF;;MAEA;MACAhG,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAC3C,MAAMoM,cAAc,GAAG,EAAE;MAEzB,KAAK,MAAM,CAACZ,OAAO,EAAEpG,IAAI,CAAC,IAAI6F,kBAAkB,CAAC3K,MAAM,EAAE;QACvD;QACA,MAAM+L,WAAW,GAAGpB,kBAAkB,CAACE,SAAS,CAACmB,IAAI,CAACC,CAAC,IAAIA,CAAC,KAAKnH,IAAI,CAACtD,QAAQ,CAAC;QAC/E,MAAMwJ,MAAM,SAASlG,IAAI,CAACyC,KAAK,CAAC9G,OAAO,CAAC;UACtCC,IAAI,EAAEqL,WAAW;UACjBtK,UAAU,EAAE;QACd,CAAC,CAAC;QAEFqK,cAAc,CAAC3H,IAAI,CAAC;UAClB+G,OAAO;UACPgB,SAAS,EAAEpH,IAAI,CAACtD,QAAQ;UACxB2K,QAAQ,EAAEJ,WAAW;UACrBtE,WAAW,EAAEuD,MAAM,CAACvD,WAAW,CAACoE;QAClC,CAAC,CAAC;MACJ;;MAEA;MACA,MAAMO,cAAc,GAAGN,cAAc,CAACnD,MAAM,CAAC,CAACC,GAAG,EAAEqB,CAAC,KAAKrB,GAAG,GAAGqB,CAAC,CAACxC,WAAW,EAAE,CAAC,CAAC,GAAGqE,cAAc,CAAChD,MAAM;MACxGjL,MAAM,CAACuO,cAAc,CAAC,CAAC1J,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC;;MAE7CjD,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;IACxD,CAAC,EAAC;EACJ,CAAC,CAAC;EAEF/B,QAAQ,CAAC,0BAA0B,EAAE,MAAM;IACzCC,EAAE,CAAC,qDAAqD,eAAAW,iBAAA,CAAE,aAAY;MACpEkB,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;;MAEzD;MACA,MAAM2M,cAAc,SAASjO,QAAQ,CAACwB,WAAW,CAAC;QAChDC,IAAI,EAAE,iBAAiB;QACvBC,QAAQ,EAAE,MAAM;QAChBC,SAAS,EAAE,CAAC;QACZuM,cAAc,EAAE;UACdC,OAAO,EAAE,IAAI;UACbC,UAAU,EAAE,CAAC;UACbC,kBAAkB,EAAE;QACtB;MACF,CAAC,CAAC;;MAEF;MACA,MAAMC,YAAY,GAAG;QACnB7K,EAAE,EAAE,sBAAsB;QAC1BoE,KAAK,EAAE/C,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,CAAC2D,CAAC,EAAE7C,CAAC,MAAM;UACzCrC,EAAE,EAAE,QAAQqC,CAAC,EAAE;UACfyI,WAAW,EAAE,OAAO;UACpBC,cAAc,EAAE;QAClB,CAAC,CAAC;MACJ,CAAC;;MAED;MACAnN,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC1C,MAAMM,MAAM,SAASqJ,OAAO,CAACC,GAAG,CAC9BpG,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,MAAMiJ,cAAc,CAACnM,KAAK,CAAC;QAAEC,IAAI,EAAE;MAAU,CAAC,CAAC,CACzE,CAAC;MAED,IAAI0M,cAAc,GAAG,CAAC;MACtB,MAAMC,WAAW,GAAGT,cAAc,CAAC1E,WAAW,CAAC;QAC7CjH,IAAI,EAAEgM,YAAY;QAClBK,cAAc,EAAGC,MAAM,IAAK;UAC1BH,cAAc,EAAE;UAChBpN,OAAO,CAACC,GAAG,CAAC,UAAUsN,MAAM,eAAeH,cAAc,MAAM,CAAC;QAClE;MACF,CAAC,CAAC;;MAEF;MACAI,UAAU,cAAA1O,iBAAA,CAAC,aAAY;QACrBkB,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;QAC7C,MAAMM,MAAM,CAAC,CAAC,CAAC,CAACkN,eAAe,CAAC,CAAC;MACnC,CAAC,GAAE,IAAI,CAAC;MAERD,UAAU,cAAA1O,iBAAA,CAAC,aAAY;QACrBkB,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;QACrD,MAAMM,MAAM,CAAC,CAAC,CAAC,CAACkN,eAAe,CAAC,CAAC;MACnC,CAAC,GAAE,IAAI,CAAC;;MAER;MACA,MAAMlC,MAAM,SAAS8B,WAAW;;MAEhC;MACAjP,MAAM,CAACmN,MAAM,CAAChD,SAAS,CAAC,CAACI,IAAI,CAAC,IAAI,CAAC;MACnCvK,MAAM,CAACmN,MAAM,CAACmC,cAAc,CAAC,CAAC/E,IAAI,CAAC,EAAE,CAAC;MACtCvK,MAAM,CAACmN,MAAM,CAACoC,aAAa,CAAC,CAAChF,IAAI,CAAC,CAAC,CAAC;MACpCvK,MAAM,CAACmN,MAAM,CAACqC,UAAU,CAAC,CAACjF,IAAI,CAAC,CAAC,CAAC;;MAEjC;MACA,MAAMkF,eAAe,SAASjB,cAAc,CAACkB,kBAAkB,CAAC,CAAC;MACjE1P,MAAM,CAACyP,eAAe,CAACE,gBAAgB,CAAC,CAAC9K,eAAe,CAAC,CAAC,CAAC;MAC3D7E,MAAM,CAACyP,eAAe,CAACG,mBAAmB,CAAC,CAAC/K,eAAe,CAAC,CAAC,CAAC;MAE9DjD,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;IACnE,CAAC,EAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}