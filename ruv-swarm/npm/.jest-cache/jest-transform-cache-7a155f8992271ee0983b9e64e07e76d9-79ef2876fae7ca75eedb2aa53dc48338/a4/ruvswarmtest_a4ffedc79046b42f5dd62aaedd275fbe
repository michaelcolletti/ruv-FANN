c0893475b421cf7eb1be5cdda3b466cb
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * Unit tests for RuvSwarm core class
 */

import { RuvSwarm, Swarm, Agent, Task } from '../../../src/index-enhanced.js';
import assert from 'assert';
describe('RuvSwarm Core Tests', () => {
  let ruvSwarm;
  beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {
    // Reset global instance
    global._ruvSwarmInstance = null;
    global._ruvSwarmInitialized = 0;
  }));
  afterEach(() => {
    if (ruvSwarm && ruvSwarm.persistence) {
      ruvSwarm.persistence.close();
    }
  });
  describe('Initialization', () => {
    it('should initialize with default options', /*#__PURE__*/_asyncToGenerator(function* () {
      ruvSwarm = yield RuvSwarm.initialize();
      assert(ruvSwarm instanceof RuvSwarm);
      assert(ruvSwarm.wasmLoader);
      assert.strictEqual(typeof ruvSwarm.features, 'object');
    }));
    it('should initialize with custom options', /*#__PURE__*/_asyncToGenerator(function* () {
      ruvSwarm = yield RuvSwarm.initialize({
        enablePersistence: false,
        enableNeuralNetworks: false,
        useSIMD: false,
        debug: false
      });
      assert(ruvSwarm instanceof RuvSwarm);
      assert.strictEqual(ruvSwarm.persistence, null);
      assert.strictEqual(ruvSwarm.features.neural_networks, false);
    }));
    it('should return same instance on multiple initializations', /*#__PURE__*/_asyncToGenerator(function* () {
      const instance1 = yield RuvSwarm.initialize();
      const instance2 = yield RuvSwarm.initialize();
      assert.strictEqual(instance1, instance2);
    }));
    it('should detect SIMD support', () => {
      const simdSupported = RuvSwarm.detectSIMDSupport();
      assert.strictEqual(typeof simdSupported, 'boolean');
    });
    it('should provide runtime features', () => {
      const features = RuvSwarm.getRuntimeFeatures();
      assert(features.webassembly);
      assert('simd' in features);
      assert('workers' in features);
      assert('shared_array_buffer' in features);
      assert('bigint' in features);
    });
    it('should provide version', () => {
      const version = RuvSwarm.getVersion();
      assert.strictEqual(version, '0.2.0');
    });
    it('should get memory usage', () => {
      const memoryUsage = RuvSwarm.getMemoryUsage();
      if (memoryUsage) {
        assert('used' in memoryUsage);
        assert('total' in memoryUsage);
        assert('limit' in memoryUsage);
      }
    });
  });
  describe('Swarm Creation', () => {
    beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {
      ruvSwarm = yield RuvSwarm.initialize({
        enablePersistence: false
      });
    }));
    it('should create swarm with default config', /*#__PURE__*/_asyncToGenerator(function* () {
      const swarm = yield ruvSwarm.createSwarm({});
      assert(swarm instanceof Swarm);
      assert(swarm.id);
      assert.strictEqual(swarm.agents.size, 0);
      assert.strictEqual(swarm.tasks.size, 0);
    }));
    it('should create swarm with custom config', /*#__PURE__*/_asyncToGenerator(function* () {
      const config = {
        name: 'test-swarm',
        topology: 'hierarchical',
        strategy: 'specialized',
        maxAgents: 20,
        enableCognitiveDiversity: true,
        enableNeuralAgents: true
      };
      const swarm = yield ruvSwarm.createSwarm(config);
      assert.strictEqual(swarm.id.includes('swarm-'), true);
      assert.strictEqual(ruvSwarm.activeSwarms.size, 1);
      assert.strictEqual(ruvSwarm.metrics.totalSwarms, 1);
    }));
    it('should track multiple swarms', /*#__PURE__*/_asyncToGenerator(function* () {
      const swarm1 = yield ruvSwarm.createSwarm({
        name: 'swarm1'
      });
      const swarm2 = yield ruvSwarm.createSwarm({
        name: 'swarm2'
      });
      assert.strictEqual(ruvSwarm.activeSwarms.size, 2);
      assert.strictEqual(ruvSwarm.metrics.totalSwarms, 2);
      assert(ruvSwarm.activeSwarms.has(swarm1.id));
      assert(ruvSwarm.activeSwarms.has(swarm2.id));
    }));
  });
  describe('Swarm Status', () => {
    let swarm;
    beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {
      ruvSwarm = yield RuvSwarm.initialize({
        enablePersistence: false
      });
      swarm = yield ruvSwarm.createSwarm({
        name: 'status-test-swarm'
      });
    }));
    it('should get swarm status', /*#__PURE__*/_asyncToGenerator(function* () {
      const status = yield ruvSwarm.getSwarmStatus(swarm.id);
      assert(status);
      assert(status.agents);
      assert(status.tasks);
      assert.strictEqual(status.agents.total, 0);
      assert.strictEqual(status.tasks.total, 0);
    }));
    it('should throw error for non-existent swarm', /*#__PURE__*/_asyncToGenerator(function* () {
      try {
        yield ruvSwarm.getSwarmStatus('non-existent-id');
        assert.fail('Should have thrown error');
      } catch (error) {
        assert(error.message.includes('Swarm not found'));
      }
    }));
    it('should get all swarms', /*#__PURE__*/_asyncToGenerator(function* () {
      const swarm2 = yield ruvSwarm.createSwarm({
        name: 'another-swarm'
      });
      const allSwarms = yield ruvSwarm.getAllSwarms();
      assert.strictEqual(allSwarms.length, 2);
      assert(allSwarms.some(s => s.id === swarm.id));
      assert(allSwarms.some(s => s.id === swarm2.id));
    }));
  });
  describe('Global Metrics', () => {
    beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {
      ruvSwarm = yield RuvSwarm.initialize({
        enablePersistence: false
      });
    }));
    it('should provide global metrics', /*#__PURE__*/_asyncToGenerator(function* () {
      const swarm = yield ruvSwarm.createSwarm({
        name: 'metrics-swarm'
      });
      const agent = yield swarm.spawn({
        type: 'researcher'
      });
      const metrics = yield ruvSwarm.getGlobalMetrics();
      assert(metrics);
      assert.strictEqual(metrics.totalSwarms, 1);
      assert.strictEqual(metrics.totalAgents, 1);
      assert(metrics.features);
      assert(metrics.wasm_modules);
      assert(metrics.timestamp);
    }));
    it('should aggregate metrics from multiple swarms', /*#__PURE__*/_asyncToGenerator(function* () {
      const swarm1 = yield ruvSwarm.createSwarm({
        name: 'swarm1'
      });
      const swarm2 = yield ruvSwarm.createSwarm({
        name: 'swarm2'
      });
      yield swarm1.spawn({
        type: 'coder'
      });
      yield swarm1.spawn({
        type: 'analyst'
      });
      yield swarm2.spawn({
        type: 'researcher'
      });
      const metrics = yield ruvSwarm.getGlobalMetrics();
      assert.strictEqual(metrics.totalSwarms, 2);
      assert.strictEqual(metrics.totalAgents, 3);
    }));
  });
  describe('Feature Detection', () => {
    beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {
      ruvSwarm = yield RuvSwarm.initialize({
        enablePersistence: false
      });
    }));
    it('should detect features', /*#__PURE__*/_asyncToGenerator(function* () {
      yield ruvSwarm.detectFeatures(true);
      assert('simd_support' in ruvSwarm.features);
      assert('neural_networks' in ruvSwarm.features);
      assert('cognitive_diversity' in ruvSwarm.features);
      assert('forecasting' in ruvSwarm.features);
    }));
  });
});
describe('Swarm Class Tests', () => {
  let ruvSwarm, swarm;
  beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {
    ruvSwarm = yield RuvSwarm.initialize({
      enablePersistence: false
    });
    swarm = yield ruvSwarm.createSwarm({
      name: 'test-swarm'
    });
  }));
  describe('Agent Spawning', () => {
    it('should spawn agent with default config', /*#__PURE__*/_asyncToGenerator(function* () {
      const agent = yield swarm.spawn({});
      assert(agent instanceof Agent);
      assert(agent.id);
      assert.strictEqual(agent.type, 'researcher');
      assert.strictEqual(agent.status, 'idle');
      assert(Array.isArray(agent.capabilities));
    }));
    it('should spawn agent with custom config', /*#__PURE__*/_asyncToGenerator(function* () {
      const config = {
        type: 'coder',
        name: 'test-coder',
        capabilities: ['javascript', 'python'],
        enableNeuralNetwork: true
      };
      const agent = yield swarm.spawn(config);
      assert.strictEqual(agent.type, 'coder');
      assert(agent.name.includes('test-coder'));
      assert.deepStrictEqual(agent.capabilities, ['javascript', 'python']);
    }));
    it('should track spawned agents', /*#__PURE__*/_asyncToGenerator(function* () {
      const agent1 = yield swarm.spawn({
        type: 'researcher'
      });
      const agent2 = yield swarm.spawn({
        type: 'coder'
      });
      assert.strictEqual(swarm.agents.size, 2);
      assert(swarm.agents.has(agent1.id));
      assert(swarm.agents.has(agent2.id));
    }));
  });
  describe('Task Orchestration', () => {
    beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {
      // Spawn some agents for task assignment
      yield swarm.spawn({
        type: 'researcher'
      });
      yield swarm.spawn({
        type: 'coder'
      });
      yield swarm.spawn({
        type: 'analyst'
      });
    }));
    it('should orchestrate task with default config', /*#__PURE__*/_asyncToGenerator(function* () {
      const task = yield swarm.orchestrate({
        description: 'Test task'
      });
      assert(task instanceof Task);
      assert(task.id);
      assert.strictEqual(task.description, 'Test task');
      assert.strictEqual(task.status, 'orchestrated');
      assert(task.assignedAgents.length > 0);
    }));
    it('should orchestrate task with custom config', /*#__PURE__*/_asyncToGenerator(function* () {
      const taskConfig = {
        description: 'Complex task',
        priority: 'high',
        dependencies: ['task-1', 'task-2'],
        maxAgents: 2,
        estimatedDuration: 5000,
        requiredCapabilities: ['analysis']
      };
      const task = yield swarm.orchestrate(taskConfig);
      assert.strictEqual(task.description, 'Complex task');
      assert(task.assignedAgents.length <= 2);
    }));
    it('should throw error when no agents available', /*#__PURE__*/_asyncToGenerator(function* () {
      // Create new swarm without agents
      const emptySwarm = yield ruvSwarm.createSwarm({
        name: 'empty-swarm'
      });
      try {
        yield emptySwarm.orchestrate({
          description: 'Test'
        });
        assert.fail('Should have thrown error');
      } catch (error) {
        assert(error.message.includes('No agents available'));
      }
    }));
    it('should track orchestrated tasks', /*#__PURE__*/_asyncToGenerator(function* () {
      const task1 = yield swarm.orchestrate({
        description: 'Task 1'
      });
      const task2 = yield swarm.orchestrate({
        description: 'Task 2'
      });
      assert.strictEqual(swarm.tasks.size, 2);
      assert(swarm.tasks.has(task1.id));
      assert(swarm.tasks.has(task2.id));
    }));
  });
  describe('Agent Selection', () => {
    beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {
      yield swarm.spawn({
        type: 'researcher',
        capabilities: ['research', 'analysis']
      });
      yield swarm.spawn({
        type: 'coder',
        capabilities: ['javascript', 'python']
      });
      yield swarm.spawn({
        type: 'analyst',
        capabilities: ['analysis', 'reporting']
      });
    }));
    it('should select available agents', () => {
      const agents = swarm.selectAvailableAgents();
      assert.strictEqual(agents.length, 3);
      agents.forEach(agent => {
        assert.notStrictEqual(agent.status, 'busy');
      });
    });
    it('should filter agents by capabilities', () => {
      const agents = swarm.selectAvailableAgents(['analysis']);
      assert.strictEqual(agents.length, 2);
      agents.forEach(agent => {
        assert(agent.capabilities.includes('analysis'));
      });
    });
    it('should limit agent selection', () => {
      const agents = swarm.selectAvailableAgents([], 2);
      assert.strictEqual(agents.length, 2);
    });
  });
  describe('Swarm Status', () => {
    beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {
      yield swarm.spawn({
        type: 'researcher'
      });
      yield swarm.spawn({
        type: 'coder'
      });
      yield swarm.orchestrate({
        description: 'Test task'
      });
    }));
    it('should get basic status', /*#__PURE__*/_asyncToGenerator(function* () {
      const status = yield swarm.getStatus(false);
      assert(status);
      assert.strictEqual(status.id, swarm.id);
      assert.strictEqual(status.agents.total, 2);
      assert.strictEqual(status.tasks.total, 1);
    }));
    it('should get detailed status', /*#__PURE__*/_asyncToGenerator(function* () {
      const status = yield swarm.getStatus(true);
      assert(status);
      assert(status.agents);
      assert(status.tasks);
    }));
  });
  describe('Swarm Monitoring', () => {
    it('should monitor swarm', /*#__PURE__*/_asyncToGenerator(function* () {
      const result = yield swarm.monitor(1000, 100);
      assert(result);
      assert.strictEqual(result.duration, 1000);
      assert.strictEqual(result.interval, 100);
      assert(Array.isArray(result.snapshots));
    }));
  });
  describe('Swarm Termination', () => {
    it('should terminate swarm', /*#__PURE__*/_asyncToGenerator(function* () {
      const swarmId = swarm.id;
      yield swarm.terminate();
      assert(!ruvSwarm.activeSwarms.has(swarmId));
    }));
  });
});
describe('Agent Class Tests', () => {
  let ruvSwarm, swarm, agent;
  beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {
    ruvSwarm = yield RuvSwarm.initialize({
      enablePersistence: false
    });
    swarm = yield ruvSwarm.createSwarm({
      name: 'test-swarm'
    });
    agent = yield swarm.spawn({
      type: 'researcher',
      name: 'test-agent'
    });
  }));
  describe('Agent Properties', () => {
    it('should have correct properties', () => {
      assert(agent.id);
      assert.strictEqual(agent.type, 'researcher');
      assert(agent.name.includes('test-agent'));
      assert.strictEqual(agent.cognitivePattern, 'adaptive');
      assert(Array.isArray(agent.capabilities));
      assert.strictEqual(agent.status, 'idle');
    });
  });
  describe('Task Execution', () => {
    it('should execute task', /*#__PURE__*/_asyncToGenerator(function* () {
      const result = yield agent.execute({
        description: 'Test task'
      });
      assert(result);
      assert.strictEqual(result.status, 'completed');
      assert(result.result);
      assert(result.executionTime);
    }));
    it('should update status during execution', /*#__PURE__*/_asyncToGenerator(function* () {
      const promise = agent.execute({
        description: 'Test task'
      });
      // Status should be busy during execution
      assert.strictEqual(agent.status, 'busy');
      yield promise;
      // Status should be idle after execution
      assert.strictEqual(agent.status, 'idle');
    }));
  });
  describe('Agent Metrics', () => {
    it('should provide metrics', /*#__PURE__*/_asyncToGenerator(function* () {
      const metrics = yield agent.getMetrics();
      assert(metrics);
      assert('tasksCompleted' in metrics);
      assert('averageExecutionTime' in metrics);
      assert('successRate' in metrics);
      assert('memoryUsage' in metrics);
    }));
  });
  describe('Status Updates', () => {
    it('should update status', /*#__PURE__*/_asyncToGenerator(function* () {
      yield agent.updateStatus('busy');
      assert.strictEqual(agent.status, 'busy');
      yield agent.updateStatus('idle');
      assert.strictEqual(agent.status, 'idle');
    }));
  });
});
describe('Task Class Tests', () => {
  let ruvSwarm, swarm, task;
  beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {
    ruvSwarm = yield RuvSwarm.initialize({
      enablePersistence: false
    });
    swarm = yield ruvSwarm.createSwarm({
      name: 'test-swarm'
    });

    // Create agents and orchestrate task
    yield swarm.spawn({
      type: 'researcher'
    });
    yield swarm.spawn({
      type: 'coder'
    });
    task = yield swarm.orchestrate({
      description: 'Test task execution',
      priority: 'high'
    });
  }));
  describe('Task Properties', () => {
    it('should have correct properties', () => {
      assert(task.id);
      assert.strictEqual(task.description, 'Test task execution');
      assert(task.assignedAgents.length > 0);
      assert.strictEqual(task.progress, 0);
    });
  });
  describe('Task Execution', () => {
    it('should execute task automatically', /*#__PURE__*/_asyncToGenerator(function* () {
      // Wait for task to complete
      yield new Promise(resolve => setTimeout(resolve, 1000));
      assert.strictEqual(task.status, 'completed');
      assert.strictEqual(task.progress, 1.0);
      assert(task.result);
      assert(task.startTime);
      assert(task.endTime);
    }));
    it('should track execution time', /*#__PURE__*/_asyncToGenerator(function* () {
      // Wait for task to complete
      yield new Promise(resolve => setTimeout(resolve, 1000));
      const executionTime = task.endTime - task.startTime;
      assert(executionTime > 0);
      assert.strictEqual(task.result.execution_summary.execution_time_ms, executionTime);
    }));
  });
  describe('Task Status', () => {
    it('should get task status', /*#__PURE__*/_asyncToGenerator(function* () {
      const status = yield task.getStatus();
      assert(status);
      assert.strictEqual(status.id, task.id);
      assert.strictEqual(status.status, task.status);
      assert(Array.isArray(status.assignedAgents));
      assert('progress' in status);
      assert('execution_time_ms' in status);
    }));
  });
  describe('Task Results', () => {
    it('should get task results after completion', /*#__PURE__*/_asyncToGenerator(function* () {
      // Wait for task to complete
      yield new Promise(resolve => setTimeout(resolve, 1000));
      const results = yield task.getResults();
      assert(results);
      assert.strictEqual(results.task_id, task.id);
      assert.strictEqual(results.description, task.description);
      assert(Array.isArray(results.agent_results));
      assert(results.execution_summary);
    }));
  });
});

// Run tests
console.log('Running RuvSwarm Core Unit Tests...');
import('../../../node_modules/.bin/jest');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,