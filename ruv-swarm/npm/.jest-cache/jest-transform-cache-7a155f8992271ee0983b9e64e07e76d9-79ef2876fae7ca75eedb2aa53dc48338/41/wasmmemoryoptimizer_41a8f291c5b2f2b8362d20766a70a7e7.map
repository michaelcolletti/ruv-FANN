{"version":3,"names":["cov_h9txiao52","actualCoverage","asyncGeneratorStep","n","t","e","r","o","a","c","i","u","value","done","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","WasmMemoryPool","constructor","initialSize","b","f","s","pools","Map","allocations","totalAllocated","maxMemory","allocationCounter","gcThreshold","compressionEnabled","getPool","moduleId","requiredSize","has","poolSize","Math","max","memory","WebAssembly","Memory","initial","ceil","maximum","shared","set","allocated","maxSize","freeBlocks","console","log","get","allocate","size","alignment","pool","alignedSize","freeBlock","findFreeBlock","allocation","id","offset","timestamp","Date","now","ptr","buffer","slice","currentSize","byteLength","newOffset","requiredPages","grow","error","garbageCollect","getMemoryUtilization","setTimeout","garbageCollectAll","length","block","remaining","splice","deallocate","allocationId","warn","push","mergeFreeBlocks","delete","sort","current","next","maxAge","freedAllocations","keys","getMemoryStats","poolStats","bufferSize","activeAllocations","utilization","globalUtilization","allocationCount","compactMemory","Array","from","values","moves","to","Uint8Array","move","src","subarray","ProgressiveWasmLoader","memoryPool","loadedModules","loadingQueues","priorityLevels","loadingStrategies","loadAllModules","bind","loadOnDemand","loadProgressively","registerModule","config","url","priority","dependencies","features","preload","module","loaded","loading","instance","memoryAllocations","Set","queueLoad","queue","includes","processLoadingQueue","_this","Object","shift","loadModule","_this2","Error","depId","response","fetch","ok","status","wasmBytes","arrayBuffer","memoryAllocation","add","imports","createModuleImports","startTime","performance","wasmModule","compile","instantiate","loadTime","exports","toFixed","optimizeModuleMemory","env","malloc","free","simd_add_f32x4","result","performance_mark","name","mark","wasi_snapshot_preview1","proc_exit","code","fd_write","_this3","criticalModules","filter","m","remainingModules","delay","_this4","modules","all","map","_this5","getModule","unloadModule","clear","getLoaderStats","totalModules","loadingModules","memoryStats","loadTimes","_m$instance","averageLoadTime","reduce","acc","_m$instance2","optimizeMemory","WasmCompatibilityManager","capabilities","fallbacks","detectCapabilities","_this6","webassembly","simd","threads","exceptions","memory64","streaming","simdTest","compileStreaming","SharedArrayBuffer","getCapabilities","_this7","registerFallback","feature","fallbackFn","isSupported","_this8","loadCompatibleModule","_x","_this9","unsupported","support","join","bytes"],"sources":["wasm-memory-optimizer.js"],"sourcesContent":["/**\n * WASM Memory Optimizer\n * \n * Advanced memory management and allocation optimization for WASM modules\n * with progressive loading, memory pooling, and garbage collection strategies.\n */\n\nclass WasmMemoryPool {\n  constructor(initialSize = 16 * 1024 * 1024) { // 16MB initial\n    this.pools = new Map();\n    this.allocations = new Map();\n    this.totalAllocated = 0;\n    this.maxMemory = 512 * 1024 * 1024; // 512MB max\n    this.initialSize = initialSize;\n    this.allocationCounter = 0;\n    this.gcThreshold = 0.8; // GC when 80% full\n    this.compressionEnabled = true;\n  }\n\n  /**\n   * Get or create memory pool for specific module\n   */\n  getPool(moduleId, requiredSize = this.initialSize) {\n    if (!this.pools.has(moduleId)) {\n      const poolSize = Math.max(requiredSize, this.initialSize);\n      const memory = new WebAssembly.Memory({\n        initial: Math.ceil(poolSize / (64 * 1024)), // Pages are 64KB\n        maximum: Math.ceil(this.maxMemory / (64 * 1024)),\n        shared: false\n      });\n      \n      this.pools.set(moduleId, {\n        memory,\n        allocated: 0,\n        maxSize: poolSize,\n        freeBlocks: [],\n        allocations: new Map()\n      });\n      \n      console.log(`🧠 Created memory pool for ${moduleId}: ${poolSize / 1024 / 1024}MB`);\n    }\n    \n    return this.pools.get(moduleId);\n  }\n\n  /**\n   * Allocate memory with alignment and tracking\n   */\n  allocate(moduleId, size, alignment = 16) {\n    const pool = this.getPool(moduleId, size * 2);\n    const alignedSize = Math.ceil(size / alignment) * alignment;\n    \n    // Try to reuse free blocks first\n    const freeBlock = this.findFreeBlock(pool, alignedSize);\n    if (freeBlock) {\n      this.allocationCounter++;\n      const allocation = {\n        id: this.allocationCounter,\n        moduleId,\n        offset: freeBlock.offset,\n        size: alignedSize,\n        timestamp: Date.now()\n      };\n      \n      pool.allocations.set(allocation.id, allocation);\n      this.allocations.set(allocation.id, allocation);\n      \n      return {\n        id: allocation.id,\n        offset: freeBlock.offset,\n        ptr: pool.memory.buffer.slice(freeBlock.offset, freeBlock.offset + alignedSize)\n      };\n    }\n    \n    // Allocate new memory\n    const currentSize = pool.memory.buffer.byteLength;\n    const newOffset = pool.allocated;\n    \n    if (newOffset + alignedSize > currentSize) {\n      // Need to grow memory\n      const requiredPages = Math.ceil((newOffset + alignedSize - currentSize) / (64 * 1024));\n      try {\n        pool.memory.grow(requiredPages);\n        console.log(`📈 Grew memory for ${moduleId} by ${requiredPages} pages`);\n      } catch (error) {\n        console.error(`❌ Failed to grow memory for ${moduleId}:`, error);\n        // Try garbage collection\n        this.garbageCollect(moduleId);\n        return this.allocate(moduleId, size, alignment); // Retry after GC\n      }\n    }\n    \n    this.allocationCounter++;\n    const allocation = {\n      id: this.allocationCounter,\n      moduleId,\n      offset: newOffset,\n      size: alignedSize,\n      timestamp: Date.now()\n    };\n    \n    pool.allocated = newOffset + alignedSize;\n    pool.allocations.set(allocation.id, allocation);\n    this.allocations.set(allocation.id, allocation);\n    this.totalAllocated += alignedSize;\n    \n    // Check if GC is needed\n    if (this.getMemoryUtilization() > this.gcThreshold) {\n      setTimeout(() => this.garbageCollectAll(), 100);\n    }\n    \n    return {\n      id: allocation.id,\n      offset: newOffset,\n      ptr: pool.memory.buffer.slice(newOffset, newOffset + alignedSize)\n    };\n  }\n\n  /**\n   * Find suitable free block\n   */\n  findFreeBlock(pool, size) {\n    for (let i = 0; i < pool.freeBlocks.length; i++) {\n      const block = pool.freeBlocks[i];\n      if (block.size >= size) {\n        // Remove from free blocks or split if larger\n        if (block.size > size + 64) { // Worth splitting\n          const remaining = {\n            offset: block.offset + size,\n            size: block.size - size\n          };\n          pool.freeBlocks[i] = remaining;\n        } else {\n          pool.freeBlocks.splice(i, 1);\n        }\n        \n        return {\n          offset: block.offset,\n          size: block.size\n        };\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Deallocate memory and add to free blocks\n   */\n  deallocate(allocationId) {\n    const allocation = this.allocations.get(allocationId);\n    if (!allocation) {\n      console.warn(`⚠️ Allocation ${allocationId} not found`);\n      return false;\n    }\n    \n    const pool = this.pools.get(allocation.moduleId);\n    if (!pool) {\n      console.warn(`⚠️ Pool for ${allocation.moduleId} not found`);\n      return false;\n    }\n    \n    // Add to free blocks\n    pool.freeBlocks.push({\n      offset: allocation.offset,\n      size: allocation.size\n    });\n    \n    // Merge adjacent free blocks\n    this.mergeFreeBlocks(pool);\n    \n    // Remove from allocations\n    pool.allocations.delete(allocationId);\n    this.allocations.delete(allocationId);\n    this.totalAllocated -= allocation.size;\n    \n    console.log(`🗑️ Deallocated ${allocation.size} bytes for ${allocation.moduleId}`);\n    return true;\n  }\n\n  /**\n   * Merge adjacent free blocks to reduce fragmentation\n   */\n  mergeFreeBlocks(pool) {\n    pool.freeBlocks.sort((a, b) => a.offset - b.offset);\n    \n    for (let i = 0; i < pool.freeBlocks.length - 1; i++) {\n      const current = pool.freeBlocks[i];\n      const next = pool.freeBlocks[i + 1];\n      \n      if (current.offset + current.size === next.offset) {\n        // Merge blocks\n        current.size += next.size;\n        pool.freeBlocks.splice(i + 1, 1);\n        i--; // Check again with merged block\n      }\n    }\n  }\n\n  /**\n   * Garbage collect unused allocations\n   */\n  garbageCollect(moduleId) {\n    const pool = this.pools.get(moduleId);\n    if (!pool) return;\n    \n    const now = Date.now();\n    const maxAge = 300000; // 5 minutes\n    const freedAllocations = [];\n    \n    for (const [id, allocation] of pool.allocations) {\n      if (now - allocation.timestamp > maxAge) {\n        freedAllocations.push(id);\n      }\n    }\n    \n    for (const id of freedAllocations) {\n      this.deallocate(id);\n    }\n    \n    console.log(`🧹 GC for ${moduleId}: freed ${freedAllocations.length} allocations`);\n  }\n\n  /**\n   * Garbage collect all pools\n   */\n  garbageCollectAll() {\n    for (const moduleId of this.pools.keys()) {\n      this.garbageCollect(moduleId);\n    }\n  }\n\n  /**\n   * Get memory utilization ratio\n   */\n  getMemoryUtilization() {\n    return this.totalAllocated / this.maxMemory;\n  }\n\n  /**\n   * Get detailed memory statistics\n   */\n  getMemoryStats() {\n    const poolStats = {};\n    \n    for (const [moduleId, pool] of this.pools) {\n      poolStats[moduleId] = {\n        allocated: pool.allocated,\n        bufferSize: pool.memory.buffer.byteLength,\n        freeBlocks: pool.freeBlocks.length,\n        activeAllocations: pool.allocations.size,\n        utilization: pool.allocated / pool.memory.buffer.byteLength\n      };\n    }\n    \n    return {\n      totalAllocated: this.totalAllocated,\n      maxMemory: this.maxMemory,\n      globalUtilization: this.getMemoryUtilization(),\n      pools: poolStats,\n      allocationCount: this.allocationCounter\n    };\n  }\n\n  /**\n   * Optimize memory layout by compacting allocations\n   */\n  compactMemory(moduleId) {\n    const pool = this.pools.get(moduleId);\n    if (!pool) return;\n    \n    // Sort allocations by offset\n    const allocations = Array.from(pool.allocations.values())\n      .sort((a, b) => a.offset - b.offset);\n    \n    let newOffset = 0;\n    const moves = [];\n    \n    for (const allocation of allocations) {\n      if (allocation.offset !== newOffset) {\n        moves.push({\n          from: allocation.offset,\n          to: newOffset,\n          size: allocation.size\n        });\n        allocation.offset = newOffset;\n      }\n      newOffset += allocation.size;\n    }\n    \n    // Perform memory moves\n    const buffer = new Uint8Array(pool.memory.buffer);\n    for (const move of moves) {\n      const src = buffer.subarray(move.from, move.from + move.size);\n      buffer.set(src, move.to);\n    }\n    \n    // Update pool state\n    pool.allocated = newOffset;\n    pool.freeBlocks = newOffset < pool.memory.buffer.byteLength ? \n      [{ offset: newOffset, size: pool.memory.buffer.byteLength - newOffset }] : [];\n    \n    console.log(`🗜️ Compacted ${moduleId}: ${moves.length} moves, freed ${pool.memory.buffer.byteLength - newOffset} bytes`);\n  }\n}\n\n/**\n * Progressive WASM Module Loader with Memory Optimization\n */\nclass ProgressiveWasmLoader {\n  constructor() {\n    this.memoryPool = new WasmMemoryPool();\n    this.loadedModules = new Map();\n    this.loadingQueues = new Map();\n    this.priorityLevels = {\n      'critical': 1,\n      'high': 2,\n      'medium': 3,\n      'low': 4\n    };\n    this.loadingStrategies = {\n      'eager': this.loadAllModules.bind(this),\n      'lazy': this.loadOnDemand.bind(this),\n      'progressive': this.loadProgressively.bind(this)\n    };\n  }\n\n  /**\n   * Register module for progressive loading\n   */\n  registerModule(config) {\n    const {\n      id,\n      url,\n      size,\n      priority = 'medium',\n      dependencies = [],\n      features = [],\n      preload = false\n    } = config;\n    \n    const module = {\n      id,\n      url,\n      size,\n      priority,\n      dependencies,\n      features,\n      preload,\n      loaded: false,\n      loading: false,\n      instance: null,\n      memoryAllocations: new Set()\n    };\n    \n    this.loadedModules.set(id, module);\n    \n    if (preload) {\n      this.queueLoad(id, 'critical');\n    }\n    \n    console.log(`📋 Registered WASM module: ${id} (${size / 1024}KB, ${priority} priority)`);\n  }\n\n  /**\n   * Queue module for loading with priority\n   */\n  queueLoad(moduleId, priority = 'medium') {\n    if (!this.loadingQueues.has(priority)) {\n      this.loadingQueues.set(priority, []);\n    }\n    \n    const queue = this.loadingQueues.get(priority);\n    if (!queue.includes(moduleId)) {\n      queue.push(moduleId);\n      this.processLoadingQueue();\n    }\n  }\n\n  /**\n   * Process loading queue by priority\n   */\n  async processLoadingQueue() {\n    for (const priority of Object.keys(this.priorityLevels).sort((a, b) => \n      this.priorityLevels[a] - this.priorityLevels[b])) {\n      \n      const queue = this.loadingQueues.get(priority);\n      if (!queue || queue.length === 0) continue;\n      \n      const moduleId = queue.shift();\n      await this.loadModule(moduleId);\n    }\n  }\n\n  /**\n   * Load individual module with memory optimization\n   */\n  async loadModule(moduleId) {\n    const module = this.loadedModules.get(moduleId);\n    if (!module) {\n      throw new Error(`Module ${moduleId} not registered`);\n    }\n    \n    if (module.loaded) {\n      return module.instance;\n    }\n    \n    if (module.loading) {\n      // Wait for existing load\n      while (module.loading) {\n        await new Promise(resolve => setTimeout(resolve, 10));\n      }\n      return module.instance;\n    }\n    \n    module.loading = true;\n    \n    try {\n      console.log(`📦 Loading WASM module: ${moduleId}`);\n      \n      // Load dependencies first\n      for (const depId of module.dependencies) {\n        await this.loadModule(depId);\n      }\n      \n      // Fetch WASM bytes\n      const response = await fetch(module.url);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch ${module.url}: ${response.status}`);\n      }\n      \n      const wasmBytes = await response.arrayBuffer();\n      \n      // Allocate memory for module\n      const memoryAllocation = this.memoryPool.allocate(\n        moduleId, \n        module.size || wasmBytes.byteLength * 2\n      );\n      \n      module.memoryAllocations.add(memoryAllocation.id);\n      \n      // Create imports with optimized memory\n      const imports = this.createModuleImports(moduleId, memoryAllocation);\n      \n      // Compile and instantiate\n      const startTime = performance.now();\n      const wasmModule = await WebAssembly.compile(wasmBytes);\n      const instance = await WebAssembly.instantiate(wasmModule, imports);\n      const loadTime = performance.now() - startTime;\n      \n      module.instance = {\n        module: wasmModule,\n        instance: instance,\n        exports: instance.exports,\n        memory: memoryAllocation,\n        loadTime\n      };\n      \n      module.loaded = true;\n      module.loading = false;\n      \n      console.log(`✅ Loaded ${moduleId} in ${loadTime.toFixed(2)}ms`);\n      \n      // Optimize memory after loading\n      this.optimizeModuleMemory(moduleId);\n      \n      return module.instance;\n      \n    } catch (error) {\n      module.loading = false;\n      console.error(`❌ Failed to load ${moduleId}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create optimized imports for module\n   */\n  createModuleImports(moduleId, memoryAllocation) {\n    const pool = this.memoryPool.getPool(moduleId);\n    \n    return {\n      env: {\n        memory: pool.memory,\n        \n        // Optimized memory allocation functions\n        malloc: (size) => {\n          const allocation = this.memoryPool.allocate(moduleId, size);\n          return allocation.offset;\n        },\n        \n        free: (ptr) => {\n          // Find allocation by offset and free it\n          for (const allocation of this.memoryPool.allocations.values()) {\n            if (allocation.moduleId === moduleId && allocation.offset === ptr) {\n              this.memoryPool.deallocate(allocation.id);\n              break;\n            }\n          }\n        },\n        \n        // SIMD-optimized math functions\n        simd_add_f32x4: (a, b, result) => {\n          // This would call the SIMD implementation\n          console.log('SIMD add called');\n        },\n        \n        // Performance monitoring\n        performance_mark: (name) => {\n          performance.mark(`${moduleId}_${name}`);\n        }\n      },\n      \n      // WASI support for file operations\n      wasi_snapshot_preview1: {\n        proc_exit: (code) => {\n          console.log(`Module ${moduleId} exited with code ${code}`);\n        },\n        fd_write: () => 0\n      }\n    };\n  }\n\n  /**\n   * Optimize module memory after loading\n   */\n  optimizeModuleMemory(moduleId) {\n    setTimeout(() => {\n      this.memoryPool.compactMemory(moduleId);\n    }, 1000); // Delay to allow initial operations\n  }\n\n  /**\n   * Progressive loading strategy\n   */\n  async loadProgressively() {\n    // Load critical modules first\n    const criticalModules = Array.from(this.loadedModules.values())\n      .filter(m => m.priority === 'critical' || m.preload)\n      .sort((a, b) => this.priorityLevels[a.priority] - this.priorityLevels[b.priority]);\n    \n    for (const module of criticalModules) {\n      await this.loadModule(module.id);\n    }\n    \n    // Load remaining modules in background\n    const remainingModules = Array.from(this.loadedModules.values())\n      .filter(m => !m.loaded && !m.loading)\n      .sort((a, b) => this.priorityLevels[a.priority] - this.priorityLevels[b.priority]);\n    \n    // Load with delay to prevent blocking\n    let delay = 0;\n    for (const module of remainingModules) {\n      setTimeout(() => this.loadModule(module.id), delay);\n      delay += 100; // 100ms between loads\n    }\n  }\n\n  /**\n   * Eager loading strategy\n   */\n  async loadAllModules() {\n    const modules = Array.from(this.loadedModules.values())\n      .sort((a, b) => this.priorityLevels[a.priority] - this.priorityLevels[b.priority]);\n    \n    await Promise.all(modules.map(m => this.loadModule(m.id)));\n  }\n\n  /**\n   * Lazy loading strategy\n   */\n  async loadOnDemand(moduleId) {\n    return this.loadModule(moduleId);\n  }\n\n  /**\n   * Get module by ID\n   */\n  getModule(moduleId) {\n    const module = this.loadedModules.get(moduleId);\n    return module?.instance || null;\n  }\n\n  /**\n   * Unload module and free memory\n   */\n  unloadModule(moduleId) {\n    const module = this.loadedModules.get(moduleId);\n    if (!module || !module.loaded) {\n      return false;\n    }\n    \n    // Free all memory allocations\n    for (const allocationId of module.memoryAllocations) {\n      this.memoryPool.deallocate(allocationId);\n    }\n    \n    module.memoryAllocations.clear();\n    module.instance = null;\n    module.loaded = false;\n    \n    console.log(`🗑️ Unloaded module: ${moduleId}`);\n    return true;\n  }\n\n  /**\n   * Get comprehensive loader statistics\n   */\n  getLoaderStats() {\n    const modules = Array.from(this.loadedModules.values());\n    const loaded = modules.filter(m => m.loaded);\n    const loading = modules.filter(m => m.loading);\n    \n    return {\n      totalModules: modules.length,\n      loadedModules: loaded.length,\n      loadingModules: loading.length,\n      memoryStats: this.memoryPool.getMemoryStats(),\n      loadTimes: loaded.map(m => ({\n        id: m.id,\n        loadTime: m.instance?.loadTime || 0\n      })),\n      averageLoadTime: loaded.reduce((acc, m) => acc + (m.instance?.loadTime || 0), 0) / loaded.length\n    };\n  }\n\n  /**\n   * Optimize all memory pools\n   */\n  optimizeMemory() {\n    this.memoryPool.garbageCollectAll();\n    \n    for (const moduleId of this.loadedModules.keys()) {\n      if (this.loadedModules.get(moduleId).loaded) {\n        this.memoryPool.compactMemory(moduleId);\n      }\n    }\n    \n    console.log('🧹 Memory optimization completed');\n  }\n}\n\n/**\n * WASM Browser Compatibility Manager\n */\nclass WasmCompatibilityManager {\n  constructor() {\n    this.capabilities = null;\n    this.fallbacks = new Map();\n  }\n\n  /**\n   * Detect browser WASM capabilities\n   */\n  async detectCapabilities() {\n    const capabilities = {\n      webassembly: typeof WebAssembly !== 'undefined',\n      simd: false,\n      threads: false,\n      exceptions: false,\n      memory64: false,\n      streaming: false\n    };\n    \n    if (!capabilities.webassembly) {\n      this.capabilities = capabilities;\n      return capabilities;\n    }\n    \n    // Test SIMD support\n    try {\n      const simdTest = new Uint8Array([\n        0x00, 0x61, 0x73, 0x6d, // WASM magic\n        0x01, 0x00, 0x00, 0x00, // version\n        0x01, 0x05, 0x01, 0x60, 0x00, 0x01, 0x7b, // type section\n        0x03, 0x02, 0x01, 0x00, // function section\n        0x0a, 0x09, 0x01, 0x07, 0x00, 0xfd, 0x0c, 0x00, 0x0b // code section with SIMD\n      ]);\n      \n      await WebAssembly.compile(simdTest);\n      capabilities.simd = true;\n    } catch (e) {\n      capabilities.simd = false;\n    }\n    \n    // Test streaming compilation\n    capabilities.streaming = typeof WebAssembly.compileStreaming === 'function';\n    \n    // Test SharedArrayBuffer for threads\n    capabilities.threads = typeof SharedArrayBuffer !== 'undefined';\n    \n    this.capabilities = capabilities;\n    console.log('🔍 WASM capabilities detected:', capabilities);\n    \n    return capabilities;\n  }\n\n  /**\n   * Get capabilities (detect if not already done)\n   */\n  async getCapabilities() {\n    if (!this.capabilities) {\n      await this.detectCapabilities();\n    }\n    return this.capabilities;\n  }\n\n  /**\n   * Register fallback for feature\n   */\n  registerFallback(feature, fallbackFn) {\n    this.fallbacks.set(feature, fallbackFn);\n  }\n\n  /**\n   * Check if feature is supported with fallback\n   */\n  async isSupported(feature) {\n    const capabilities = await this.getCapabilities();\n    \n    if (capabilities[feature]) {\n      return true;\n    }\n    \n    if (this.fallbacks.has(feature)) {\n      console.log(`⚠️ Using fallback for ${feature}`);\n      return 'fallback';\n    }\n    \n    return false;\n  }\n\n  /**\n   * Load module with compatibility checks\n   */\n  async loadCompatibleModule(url, features = []) {\n    const capabilities = await this.getCapabilities();\n    \n    if (!capabilities.webassembly) {\n      throw new Error('WebAssembly not supported in this browser');\n    }\n    \n    // Check required features\n    const unsupported = [];\n    for (const feature of features) {\n      const support = await this.isSupported(feature);\n      if (!support) {\n        unsupported.push(feature);\n      }\n    }\n    \n    if (unsupported.length > 0) {\n      console.warn(`⚠️ Unsupported features: ${unsupported.join(', ')}`);\n      // Could load alternative module or disable features\n    }\n    \n    // Load with appropriate method\n    if (capabilities.streaming) {\n      return WebAssembly.compileStreaming(fetch(url));\n    } else {\n      const response = await fetch(url);\n      const bytes = await response.arrayBuffer();\n      return WebAssembly.compile(bytes);\n    }\n  }\n}\n\nexport {\n  WasmMemoryPool,\n  ProgressiveWasmLoader,\n  WasmCompatibilityManager\n};\n\nexport default {\n  WasmMemoryPool,\n  ProgressiveWasmLoader,\n  WasmCompatibilityManager\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}