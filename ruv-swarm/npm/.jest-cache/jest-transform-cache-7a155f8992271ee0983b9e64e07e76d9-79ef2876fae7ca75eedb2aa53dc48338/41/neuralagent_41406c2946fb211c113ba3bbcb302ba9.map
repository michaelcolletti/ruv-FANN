{"version":3,"names":["cov_2nndtk7hwl","actualCoverage","asyncGeneratorStep","n","t","e","r","o","a","c","i","u","value","done","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","ownKeys","Object","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","push","_objectSpread","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","configurable","writable","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","EventEmitter","MemoryOptimizer","PATTERN_MEMORY_CONFIG","COGNITIVE_PATTERNS","s","CONVERGENT","DIVERGENT","LATERAL","SYSTEMS","CRITICAL","ABSTRACT","AGENT_COGNITIVE_PROFILES","researcher","primary","secondary","learningRate","momentum","networkLayers","activationFunction","advancedModel","coder","analyst","optimizer","coordinator","NeuralNetwork","constructor","config","memoryOptimizer","b","f","layers","weights","biases","previousWeightDeltas","memoryAllocations","_initializeNetwork","inputSize","outputSize","limit","Math","sqrt","isPoolInitialized","weightSize","biasSize","weightAlloc","allocateFromPool","cognitivePattern","biasAlloc","_createMatrix","_createVector","rows","cols","min","max","matrix","j","random","size","vector","_activation","x","derivative","sig","exp","tanh","forward","input","activations","currentInput","output","sum","k","train","target","lr","errors","outputError","unshift","layerError","prevError","error","layerInput","delta","momentumDelta","save","load","data","NeuralAgent","agent","agentType","cognitiveProfile","networkConfig","neuralNetwork","learningHistory","taskHistory","performanceMetrics","accuracy","speed","creativity","efficiency","memoryEfficiency","cognitiveState","attention","fatigue","confidence","exploration","memoryUsage","baseline","current","peak","_initializeMemoryTracking","analyzeTask","task","_this","inputVector","_taskToVector","analysis","complexity","urgency","dataIntensity","collaborationNeeded","_applyCognitivePattern","executeTask","_this2","startTime","Date","now","_updateCognitiveState","result","execute","neuralAnalysis","executionTime","performance","_calculatePerformance","_learnFromExecution","emit","_task$dependencies","description","match","priorityMap","low","medium","high","critical","priority","dependencies","similarTasks","_findSimilarTasks","avgPerformance","reduce","overall","slice","_applySecondaryPattern","recentPerformance","h","success","metrics","linesOfCode","testsPass","_this3","timestamp","id","_updatePerformanceMetrics","networkState","alpha","memoryRatio","getCurrentMemoryUsage","taskEfficiency","similarities","map","historicalTask","similarity","currentWords","Set","toLowerCase","split","historicalWords","intersection","has","union","sort","pattern","influence","rest","duration","_this4","setTimeout","collected","garbageCollect","patternConfig","baseMemory","poolSharing","convergent","initializePools","getStatus","neuralState","toFixed","saveNeuralState","loadNeuralState","NeuralAgentFactory","initializeFactory","_this5","createNeuralAgent","baseAgent","Error","getCognitiveProfiles","getCognitivePatterns","setImmediate","neural"],"sources":["neural-agent.js"],"sourcesContent":["/**\n * Neural Agent Module - Integrates ruv-FANN neural network capabilities\n * into agent processing for cognitive diversity and learning\n */\n\nimport { EventEmitter } from 'events';\n\n// Import these after class definitions to avoid circular dependency\nlet MemoryOptimizer, PATTERN_MEMORY_CONFIG;\n\n// Cognitive diversity patterns for different agent types\nconst COGNITIVE_PATTERNS = {\n  CONVERGENT: 'convergent', // Focused problem-solving, analytical\n  DIVERGENT: 'divergent', // Creative exploration, idea generation\n  LATERAL: 'lateral', // Non-linear thinking, pattern breaking\n  SYSTEMS: 'systems', // Holistic view, interconnections\n  CRITICAL: 'critical', // Evaluation, judgment, validation\n  ABSTRACT: 'abstract', // Conceptual thinking, generalization\n};\n\n// Agent type to cognitive pattern mapping\nconst AGENT_COGNITIVE_PROFILES = {\n  researcher: {\n    primary: COGNITIVE_PATTERNS.DIVERGENT,\n    secondary: COGNITIVE_PATTERNS.SYSTEMS,\n    learningRate: 0.7,\n    momentum: 0.3,\n    networkLayers: [64, 128, 64, 32],\n    activationFunction: 'sigmoid',\n    advancedModel: 'transformer_nlp', // Use transformer for research tasks\n  },\n  coder: {\n    primary: COGNITIVE_PATTERNS.CONVERGENT,\n    secondary: COGNITIVE_PATTERNS.LATERAL,\n    learningRate: 0.5,\n    momentum: 0.2,\n    networkLayers: [128, 256, 128, 64],\n    activationFunction: 'relu',\n    advancedModel: 'gru_sequence', // Use GRU for code generation\n  },\n  analyst: {\n    primary: COGNITIVE_PATTERNS.CRITICAL,\n    secondary: COGNITIVE_PATTERNS.ABSTRACT,\n    learningRate: 0.6,\n    momentum: 0.25,\n    networkLayers: [96, 192, 96, 48],\n    activationFunction: 'tanh',\n    advancedModel: 'cnn_vision', // Use CNN for pattern analysis\n  },\n  optimizer: {\n    primary: COGNITIVE_PATTERNS.SYSTEMS,\n    secondary: COGNITIVE_PATTERNS.CONVERGENT,\n    learningRate: 0.4,\n    momentum: 0.35,\n    networkLayers: [80, 160, 80, 40],\n    activationFunction: 'sigmoid',\n  },\n  coordinator: {\n    primary: COGNITIVE_PATTERNS.SYSTEMS,\n    secondary: COGNITIVE_PATTERNS.CRITICAL,\n    learningRate: 0.55,\n    momentum: 0.3,\n    networkLayers: [112, 224, 112, 56],\n    activationFunction: 'relu',\n  },\n};\n\n/**\n * Neural Network wrapper for agent cognitive processing\n */\nclass NeuralNetwork {\n  constructor(config, memoryOptimizer = null) {\n    this.config = config;\n    this.layers = config.networkLayers;\n    this.activationFunction = config.activationFunction;\n    this.learningRate = config.learningRate;\n    this.momentum = config.momentum;\n    this.memoryOptimizer = memoryOptimizer;\n\n    // Memory-optimized storage\n    this.weights = [];\n    this.biases = [];\n    this.previousWeightDeltas = [];\n    this.memoryAllocations = [];\n\n    this._initializeNetwork();\n  }\n\n  _initializeNetwork() {\n    // Initialize weights and biases between layers with memory optimization\n    for (let i = 0; i < this.layers.length - 1; i++) {\n      const inputSize = this.layers[i];\n      const outputSize = this.layers[i + 1];\n\n      // Xavier/Glorot initialization\n      const limit = Math.sqrt(6 / (inputSize + outputSize));\n\n      // Try to allocate from memory pool if available\n      if (this.memoryOptimizer && this.memoryOptimizer.isPoolInitialized()) {\n        const weightSize = outputSize * inputSize * 4; // 4 bytes per float32\n        const biasSize = outputSize * 4;\n\n        const weightAlloc = this.memoryOptimizer.allocateFromPool('weights', weightSize, this.config.cognitivePattern || 'default');\n        const biasAlloc = this.memoryOptimizer.allocateFromPool('weights', biasSize, this.config.cognitivePattern || 'default');\n\n        if (weightAlloc && biasAlloc) {\n          this.memoryAllocations.push(weightAlloc, biasAlloc);\n        }\n      }\n\n      // Create matrices (in optimized implementation, these would use pooled memory)\n      this.weights[i] = this._createMatrix(outputSize, inputSize, -limit, limit);\n      this.biases[i] = this._createVector(outputSize, -0.1, 0.1);\n      this.previousWeightDeltas[i] = this._createMatrix(outputSize, inputSize, 0, 0);\n    }\n  }\n\n  _createMatrix(rows, cols, min, max) {\n    const matrix = [];\n    for (let i = 0; i < rows; i++) {\n      matrix[i] = [];\n      for (let j = 0; j < cols; j++) {\n        matrix[i][j] = Math.random() * (max - min) + min;\n      }\n    }\n    return matrix;\n  }\n\n  _createVector(size, min, max) {\n    const vector = [];\n    for (let i = 0; i < size; i++) {\n      vector[i] = Math.random() * (max - min) + min;\n    }\n    return vector;\n  }\n\n  _activation(x, derivative = false) {\n    switch (this.activationFunction) {\n    case 'sigmoid':\n      if (derivative) {\n        const sig = 1 / (1 + Math.exp(-x));\n        return sig * (1 - sig);\n      }\n      return 1 / (1 + Math.exp(-x));\n\n    case 'tanh':\n      if (derivative) {\n        const tanh = Math.tanh(x);\n        return 1 - tanh * tanh;\n      }\n      return Math.tanh(x);\n\n    case 'relu':\n      if (derivative) {\n        return x > 0 ? 1 : 0;\n      }\n      return Math.max(0, x);\n\n    default:\n      return x;\n    }\n  }\n\n  forward(input) {\n    const activations = [input];\n    let currentInput = input;\n\n    // Forward propagation through layers\n    for (let i = 0; i < this.weights.length; i++) {\n      const weights = this.weights[i];\n      const biases = this.biases[i];\n      const output = [];\n\n      for (let j = 0; j < weights.length; j++) {\n        let sum = biases[j];\n        for (let k = 0; k < currentInput.length; k++) {\n          sum += weights[j][k] * currentInput[k];\n        }\n        output[j] = this._activation(sum);\n      }\n\n      activations.push(output);\n      currentInput = output;\n    }\n\n    return {\n      output: currentInput,\n      activations,\n    };\n  }\n\n  train(input, target, learningRate = null) {\n    const lr = learningRate || this.learningRate;\n    const { activations } = this.forward(input);\n\n    // Backward propagation\n    const errors = [];\n    const output = activations[activations.length - 1];\n\n    // Calculate output layer error\n    const outputError = [];\n    for (let i = 0; i < output.length; i++) {\n      outputError[i] = (target[i] - output[i]) * this._activation(output[i], true);\n    }\n    errors.unshift(outputError);\n\n    // Backpropagate errors\n    for (let i = this.weights.length - 1; i > 0; i--) {\n      const layerError = [];\n      const weights = this.weights[i];\n      const prevError = errors[0];\n\n      for (let j = 0; j < this.weights[i - 1].length; j++) {\n        let error = 0;\n        for (let k = 0; k < weights.length; k++) {\n          error += weights[k][j] * prevError[k];\n        }\n        layerError[j] = error * this._activation(activations[i][j], true);\n      }\n      errors.unshift(layerError);\n    }\n\n    // Update weights and biases\n    for (let i = 0; i < this.weights.length; i++) {\n      const weights = this.weights[i];\n      const biases = this.biases[i];\n      const layerError = errors[i + 1];\n      const layerInput = activations[i];\n\n      for (let j = 0; j < weights.length; j++) {\n        // Update bias\n        biases[j] += lr * layerError[j];\n\n        // Update weights with momentum\n        for (let k = 0; k < weights[j].length; k++) {\n          const delta = lr * layerError[j] * layerInput[k];\n          const momentumDelta = this.momentum * this.previousWeightDeltas[i][j][k];\n          weights[j][k] += delta + momentumDelta;\n          this.previousWeightDeltas[i][j][k] = delta;\n        }\n      }\n    }\n\n    return output;\n  }\n\n  save() {\n    return {\n      config: this.config,\n      weights: this.weights,\n      biases: this.biases,\n    };\n  }\n\n  load(data) {\n    this.weights = data.weights;\n    this.biases = data.biases;\n  }\n}\n\n/**\n * Neural Agent class that enhances base agents with neural network capabilities\n */\nclass NeuralAgent extends EventEmitter {\n  constructor(agent, agentType, memoryOptimizer = null) {\n    super();\n    this.agent = agent;\n    this.agentType = agentType;\n    this.cognitiveProfile = AGENT_COGNITIVE_PROFILES[agentType];\n    this.memoryOptimizer = memoryOptimizer || new MemoryOptimizer();\n\n    // Add cognitive pattern to neural network config for memory optimization\n    const networkConfig = {\n      ...this.cognitiveProfile,\n      cognitivePattern: this.cognitiveProfile.primary,\n    };\n\n    // Initialize neural network with memory optimizer\n    this.neuralNetwork = new NeuralNetwork(networkConfig, this.memoryOptimizer);\n\n    // Learning history for feedback loops\n    this.learningHistory = [];\n    this.taskHistory = [];\n    this.performanceMetrics = {\n      accuracy: 0,\n      speed: 0,\n      creativity: 0,\n      efficiency: 0,\n      memoryEfficiency: 0,\n    };\n\n    // Cognitive state\n    this.cognitiveState = {\n      attention: 1.0,\n      fatigue: 0.0,\n      confidence: 0.5,\n      exploration: 0.5,\n    };\n\n    // Track memory usage\n    this.memoryUsage = {\n      baseline: 0,\n      current: 0,\n      peak: 0,\n    };\n\n    this._initializeMemoryTracking();\n  }\n\n  /**\n   * Process task through neural network for intelligent routing\n   */\n  async analyzeTask(task) {\n    // Convert task to neural input vector\n    const inputVector = this._taskToVector(task);\n\n    // Get neural network prediction\n    const { output } = this.neuralNetwork.forward(inputVector);\n\n    // Interpret output for task routing\n    const analysis = {\n      complexity: output[0],\n      urgency: output[1],\n      creativity: output[2],\n      dataIntensity: output[3],\n      collaborationNeeded: output[4],\n      confidence: output[5],\n    };\n\n    // Apply cognitive pattern influence\n    this._applyCognitivePattern(analysis);\n\n    return analysis;\n  }\n\n  /**\n   * Execute task with neural enhancement\n   */\n  async executeTask(task) {\n    const startTime = Date.now();\n\n    // Analyze task\n    const analysis = await this.analyzeTask(task);\n\n    // Adjust cognitive state based on task\n    this._updateCognitiveState(analysis);\n\n    // Execute base agent task\n    const result = await this.agent.execute({\n      ...task,\n      neuralAnalysis: analysis,\n      cognitiveState: this.cognitiveState,\n    });\n\n    // Calculate performance\n    const executionTime = Date.now() - startTime;\n    const performance = this._calculatePerformance(task, result, executionTime);\n\n    // Learn from the experience\n    await this._learnFromExecution(task, result, performance);\n\n    // Emit events for monitoring\n    this.emit('taskCompleted', {\n      task,\n      result,\n      performance,\n      cognitiveState: this.cognitiveState,\n    });\n\n    return result;\n  }\n\n  /**\n   * Convert task to neural network input vector\n   */\n  _taskToVector(task) {\n    const vector = [];\n\n    // Task description features (simplified for example)\n    const description = task.description || '';\n    vector.push(\n      description.length / 1000, // Length normalized\n      (description.match(/\\b\\w+\\b/g) || []).length / 100, // Word count\n      (description.match(/[A-Z]/g) || []).length / description.length, // Capitalization ratio\n      (description.match(/[0-9]/g) || []).length / description.length, // Numeric ratio\n    );\n\n    // Task metadata\n    const priorityMap = { low: 0.2, medium: 0.5, high: 0.8, critical: 1.0 };\n    vector.push(priorityMap[task.priority] || 0.5);\n\n    // Dependencies\n    vector.push(Math.min(task.dependencies?.length || 0, 10) / 10);\n\n    // Historical performance on similar tasks\n    const similarTasks = this._findSimilarTasks(task);\n    if (similarTasks.length > 0) {\n      const avgPerformance = similarTasks.reduce((sum, t) => sum + t.performance.overall, 0) / similarTasks.length;\n      vector.push(avgPerformance);\n    } else {\n      vector.push(0.5); // Neutral if no history\n    }\n\n    // Current cognitive state influence\n    vector.push(\n      this.cognitiveState.attention,\n      this.cognitiveState.fatigue,\n      this.cognitiveState.confidence,\n      this.cognitiveState.exploration,\n    );\n\n    // Pad or truncate to expected input size\n    const inputSize = this.neuralNetwork.layers[0];\n    while (vector.length < inputSize) {\n      vector.push(0);\n    }\n    return vector.slice(0, inputSize);\n  }\n\n  /**\n   * Apply cognitive pattern to analysis\n   */\n  _applyCognitivePattern(analysis) {\n    const primary = this.cognitiveProfile.primary;\n    const secondary = this.cognitiveProfile.secondary;\n\n    switch (primary) {\n    case COGNITIVE_PATTERNS.CONVERGENT:\n      analysis.complexity *= 0.9; // Simplify through focus\n      analysis.confidence *= 1.1; // Higher confidence in solutions\n      break;\n\n    case COGNITIVE_PATTERNS.DIVERGENT:\n      analysis.creativity *= 1.2; // Boost creative requirements\n      analysis.exploration = 0.8; // High exploration tendency\n      break;\n\n    case COGNITIVE_PATTERNS.LATERAL:\n      analysis.creativity *= 1.15; // Enhance creative thinking\n      analysis.complexity *= 1.05; // See hidden complexity\n      break;\n\n    case COGNITIVE_PATTERNS.SYSTEMS:\n      analysis.collaborationNeeded *= 1.2; // See interconnections\n      analysis.dataIntensity *= 1.1; // Process more context\n      break;\n\n    case COGNITIVE_PATTERNS.CRITICAL:\n      analysis.confidence *= 0.9; // More cautious\n      analysis.complexity *= 1.1; // See more edge cases\n      break;\n\n    case COGNITIVE_PATTERNS.ABSTRACT:\n      analysis.complexity *= 0.95; // Simplify through abstraction\n      analysis.creativity *= 1.05; // Abstract thinking is creative\n      break;\n    }\n\n    // Apply secondary pattern with lesser influence\n    this._applySecondaryPattern(analysis, secondary);\n  }\n\n  /**\n   * Update cognitive state based on task execution\n   */\n  _updateCognitiveState(analysis) {\n    // Fatigue increases with complexity\n    this.cognitiveState.fatigue = Math.min(\n      this.cognitiveState.fatigue + analysis.complexity * 0.1,\n      1.0,\n    );\n\n    // Attention decreases with fatigue\n    this.cognitiveState.attention = Math.max(\n      1.0 - this.cognitiveState.fatigue * 0.5,\n      0.3,\n    );\n\n    // Confidence adjusts based on recent performance\n    if (this.learningHistory.length > 0) {\n      const recentPerformance = this.learningHistory.slice(-5)\n        .reduce((sum, h) => sum + h.performance, 0) / Math.min(this.learningHistory.length, 5);\n      this.cognitiveState.confidence = 0.3 + recentPerformance * 0.7;\n    }\n\n    // Exploration vs exploitation balance\n    this.cognitiveState.exploration = 0.2 + (1.0 - this.cognitiveState.confidence) * 0.6;\n  }\n\n  /**\n   * Calculate performance metrics\n   */\n  _calculatePerformance(task, result, executionTime) {\n    const performance = {\n      speed: Math.max(0, 1 - (executionTime / 60000)), // Normalize to 1 minute\n      accuracy: result.success ? 0.8 : 0.2,\n      creativity: 0.5, // Default, should be evaluated based on result\n      efficiency: 0.5,\n      overall: 0.5,\n    };\n\n    // Adjust based on result quality indicators\n    if (result.metrics) {\n      if (result.metrics.linesOfCode) {\n        performance.efficiency = Math.min(1.0, 100 / result.metrics.linesOfCode);\n      }\n      if (result.metrics.testsPass) {\n        performance.accuracy = result.metrics.testsPass;\n      }\n    }\n\n    // Calculate overall performance\n    performance.overall = (\n      performance.speed * 0.2 +\n      performance.accuracy * 0.4 +\n      performance.creativity * 0.2 +\n      performance.efficiency * 0.2\n    );\n\n    return performance;\n  }\n\n  /**\n   * Learn from task execution\n   */\n  async _learnFromExecution(task, result, performance) {\n    // Prepare training data\n    const input = this._taskToVector(task);\n    const target = [\n      performance.overall,\n      performance.speed,\n      performance.accuracy,\n      performance.creativity,\n      performance.efficiency,\n      result.success ? 1.0 : 0.0,\n    ];\n\n    // Train neural network\n    this.neuralNetwork.train(input, target);\n\n    // Store in learning history\n    this.learningHistory.push({\n      timestamp: Date.now(),\n      task: task.id,\n      performance: performance.overall,\n      input,\n      target,\n    });\n\n    // Keep history size manageable\n    if (this.learningHistory.length > 1000) {\n      this.learningHistory = this.learningHistory.slice(-500);\n    }\n\n    // Update performance metrics\n    this._updatePerformanceMetrics(performance);\n\n    // Emit learning event\n    this.emit('learning', {\n      task: task.id,\n      performance,\n      networkState: this.neuralNetwork.save(),\n    });\n  }\n\n  /**\n   * Update overall performance metrics\n   */\n  _updatePerformanceMetrics(performance) {\n    const alpha = 0.1; // Learning rate for exponential moving average\n\n    this.performanceMetrics.accuracy =\n      (1 - alpha) * this.performanceMetrics.accuracy + alpha * performance.accuracy;\n    this.performanceMetrics.speed =\n      (1 - alpha) * this.performanceMetrics.speed + alpha * performance.speed;\n    this.performanceMetrics.creativity =\n      (1 - alpha) * this.performanceMetrics.creativity + alpha * performance.creativity;\n    this.performanceMetrics.efficiency =\n      (1 - alpha) * this.performanceMetrics.efficiency + alpha * performance.efficiency;\n\n    // Calculate memory efficiency based on task completion vs memory usage\n    const memoryRatio = this.memoryUsage.baseline / this.getCurrentMemoryUsage();\n    const taskEfficiency = performance.overall;\n    this.performanceMetrics.memoryEfficiency =\n      (1 - alpha) * this.performanceMetrics.memoryEfficiency + alpha * (memoryRatio * taskEfficiency);\n  }\n\n  /**\n   * Find similar tasks from history\n   */\n  _findSimilarTasks(task, limit = 5) {\n    if (this.taskHistory.length === 0) {\n      return [];\n    }\n\n    // Simple similarity based on task properties\n    const similarities = this.taskHistory.map(historicalTask => {\n      let similarity = 0;\n\n      // Priority match\n      if (historicalTask.task.priority === task.priority) {\n        similarity += 0.3;\n      }\n\n      // Description similarity (simple word overlap)\n      const currentWords = new Set((task.description || '').toLowerCase().split(/\\s+/));\n      const historicalWords = new Set((historicalTask.task.description || '').toLowerCase().split(/\\s+/));\n      const intersection = new Set([...currentWords].filter(x => historicalWords.has(x)));\n      const union = new Set([...currentWords, ...historicalWords]);\n      if (union.size > 0) {\n        similarity += 0.7 * (intersection.size / union.size);\n      }\n\n      return {\n        task: historicalTask,\n        similarity,\n      };\n    });\n\n    // Return top similar tasks\n    return similarities\n      .sort((a, b) => b.similarity - a.similarity)\n      .slice(0, limit)\n      .filter(s => s.similarity > 0.3)\n      .map(s => s.task);\n  }\n\n  /**\n   * Apply secondary cognitive pattern\n   */\n  _applySecondaryPattern(analysis, pattern) {\n    const influence = 0.5; // Secondary patterns have less influence\n\n    switch (pattern) {\n    case COGNITIVE_PATTERNS.CONVERGENT:\n      analysis.complexity *= (1 - influence * 0.1);\n      analysis.confidence *= (1 + influence * 0.1);\n      break;\n\n    case COGNITIVE_PATTERNS.DIVERGENT:\n      analysis.creativity *= (1 + influence * 0.2);\n      break;\n\n    case COGNITIVE_PATTERNS.LATERAL:\n      analysis.creativity *= (1 + influence * 0.15);\n      break;\n\n    case COGNITIVE_PATTERNS.SYSTEMS:\n      analysis.collaborationNeeded *= (1 + influence * 0.2);\n      break;\n\n    case COGNITIVE_PATTERNS.CRITICAL:\n      analysis.confidence *= (1 - influence * 0.1);\n      break;\n\n    case COGNITIVE_PATTERNS.ABSTRACT:\n      analysis.complexity *= (1 - influence * 0.05);\n      break;\n    }\n  }\n\n  /**\n   * Rest the agent to reduce fatigue\n   */\n  rest(duration = 1000) {\n    return new Promise((resolve) => {\n      setTimeout(async() => {\n        this.cognitiveState.fatigue = Math.max(0, this.cognitiveState.fatigue - 0.3);\n        this.cognitiveState.attention = Math.min(1.0, this.cognitiveState.attention + 0.2);\n\n        // Perform garbage collection on memory pools during rest\n        if (this.memoryOptimizer && this.memoryOptimizer.isPoolInitialized()) {\n          const collected = await this.memoryOptimizer.garbageCollect();\n          if (collected > 0) {\n            // Recalculate memory usage after GC\n            const patternConfig = PATTERN_MEMORY_CONFIG[this.cognitiveProfile.primary];\n            this.memoryUsage.current = patternConfig.baseMemory * (1 - patternConfig.poolSharing * 0.5);\n          }\n        }\n\n        resolve();\n      }, duration);\n    });\n  }\n\n  /**\n   * Initialize memory tracking for the agent\n   */\n  _initializeMemoryTracking() {\n    const patternConfig = PATTERN_MEMORY_CONFIG[this.cognitiveProfile.primary] || PATTERN_MEMORY_CONFIG.convergent;\n    this.memoryUsage.baseline = patternConfig.baseMemory;\n    this.memoryUsage.current = patternConfig.baseMemory;\n\n    // Initialize memory pools if not already done\n    if (!this.memoryOptimizer.isPoolInitialized()) {\n      this.memoryOptimizer.initializePools().then(() => {\n        // Recalculate memory usage with pooling\n        this.memoryUsage.current = patternConfig.baseMemory * (1 - patternConfig.poolSharing * 0.5);\n      });\n    }\n  }\n\n  /**\n   * Get current memory usage for this agent\n   */\n  getCurrentMemoryUsage() {\n    // const patternConfig = PATTERN_MEMORY_CONFIG[this.cognitiveProfile.primary] || PATTERN_MEMORY_CONFIG.convergent;\n    let memoryUsage = this.memoryUsage.current;\n\n    // Adjust based on current activity\n    if (this.cognitiveState.fatigue > 0.5) {\n      memoryUsage *= 1.1; // 10% more memory when fatigued\n    }\n\n    if (this.taskHistory.length > 100) {\n      memoryUsage *= 1.05; // 5% more for large history\n    }\n\n    // Update peak if necessary\n    if (memoryUsage > this.memoryUsage.peak) {\n      this.memoryUsage.peak = memoryUsage;\n    }\n\n    return memoryUsage;\n  }\n\n  /**\n   * Get agent status including neural state\n   */\n  getStatus() {\n    return {\n      ...this.agent,\n      neuralState: {\n        cognitiveProfile: this.cognitiveProfile,\n        cognitiveState: this.cognitiveState,\n        performanceMetrics: this.performanceMetrics,\n        learningHistory: this.learningHistory.length,\n        taskHistory: this.taskHistory.length,\n        memoryUsage: {\n          current: `${this.getCurrentMemoryUsage().toFixed(0) } MB`,\n          baseline: `${this.memoryUsage.baseline.toFixed(0) } MB`,\n          peak: `${this.memoryUsage.peak.toFixed(0) } MB`,\n          efficiency: this.performanceMetrics.memoryEfficiency.toFixed(2),\n        },\n      },\n    };\n  }\n\n  /**\n   * Save neural state for persistence\n   */\n  saveNeuralState() {\n    return {\n      agentType: this.agentType,\n      neuralNetwork: this.neuralNetwork.save(),\n      cognitiveState: this.cognitiveState,\n      performanceMetrics: this.performanceMetrics,\n      learningHistory: this.learningHistory.slice(-100), // Keep recent history\n      taskHistory: this.taskHistory.slice(-100),\n    };\n  }\n\n  /**\n   * Load neural state from saved data\n   */\n  loadNeuralState(data) {\n    if (data.neuralNetwork) {\n      this.neuralNetwork.load(data.neuralNetwork);\n    }\n    if (data.cognitiveState) {\n      this.cognitiveState = data.cognitiveState;\n    }\n    if (data.performanceMetrics) {\n      this.performanceMetrics = data.performanceMetrics;\n    }\n    if (data.learningHistory) {\n      this.learningHistory = data.learningHistory;\n    }\n    if (data.taskHistory) {\n      this.taskHistory = data.taskHistory;\n    }\n  }\n}\n\n/**\n * Neural Agent Factory\n */\nclass NeuralAgentFactory {\n  static memoryOptimizer = null;\n\n  static async initializeFactory() {\n    if (!this.memoryOptimizer) {\n      this.memoryOptimizer = new MemoryOptimizer();\n      await this.memoryOptimizer.initializePools();\n    }\n  }\n\n  static createNeuralAgent(baseAgent, agentType) {\n    if (!AGENT_COGNITIVE_PROFILES[agentType]) {\n      throw new Error(`Unknown agent type: ${agentType}`);\n    }\n\n    // Use shared memory optimizer for all agents\n    return new NeuralAgent(baseAgent, agentType, this.memoryOptimizer);\n  }\n\n  static getCognitiveProfiles() {\n    return AGENT_COGNITIVE_PROFILES;\n  }\n\n  static getCognitivePatterns() {\n    return COGNITIVE_PATTERNS;\n  }\n}\n\n// Lazy load to avoid circular dependency\nsetImmediate(() => {\n  import('./neural.js').then(neural => {\n    MemoryOptimizer = neural.MemoryOptimizer;\n    PATTERN_MEMORY_CONFIG = neural.PATTERN_MEMORY_CONFIG;\n  });\n});\n\nexport {\n  NeuralAgent,\n  NeuralAgentFactory,\n  NeuralNetwork,\n  COGNITIVE_PATTERNS,\n  AGENT_COGNITIVE_PROFILES,\n};"],"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","ignoreList":[]}