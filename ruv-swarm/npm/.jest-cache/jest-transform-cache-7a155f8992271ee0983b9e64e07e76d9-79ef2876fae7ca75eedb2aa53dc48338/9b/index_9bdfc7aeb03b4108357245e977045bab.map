{"version":3,"names":["cov_2kuq8ld2m7","actualCoverage","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","value","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","asyncGeneratorStep","n","a","c","u","done","Promise","resolve","then","_asyncToGenerator","_next","_throw","promises","fs","path","execSync","fileURLToPath","__filename","s","import","meta","url","__dirname","dirname","RuvSwarmHooks","constructor","f","sessionData","startTime","Date","now","operations","agents","Map","learnings","metrics","tokensSaved","tasksCompleted","patternsImproved","handleHook","hookType","args","_this","b","preEditHook","preBashHook","preTaskHook","preSearchHook","preMcpHook","postEditHook","postBashHook","postTaskHook","postSearchHook","postWebSearchHook","postWebFetchHook","mcpSwarmInitializedHook","mcpAgentSpawnedHook","mcpTaskOrchestratedHook","mcpNeuralTrainedHook","notificationHook","sessionEndHook","sessionRestoreHook","agentCompleteHook","continue","reason","error","console","message","fallback","_this2","pattern","searchCache","cachedResult","get","timestamp","cached","cacheHit","files","metadata","cacheReady","_this3","tool","params","toolParams","JSON","parse","includes","swarmStatus","checkSwarmStatus","initialized","warning","autoInit","type","state","_this4","file","fileExt","extname","agentType","getAgentTypeForFile","suggestion","agent","ensureAgent","id","agent_id","agent_type","cognitive_pattern","readiness","_this5","description","autoSpawnAgents","optimizeTopology","complexity","analyzeTaskComplexity","topology","selectOptimalTopology","requiredAgents","determineRequiredAgents","agentsReady","estimatedDuration","estimatedMinutes","_this6","autoFormat","trainPatterns","updateGraph","result","formatted","training","autoFormatFile","success","formatDetails","details","trainPatternsFromEdit","improvement","updateKnowledgeGraph","_this7","_this7$sessionData$ta","_this7$sessionData$ta2","taskId","analyzePerformance","updateCoordination","performance","completionTime","taskStartTimes","agentsUsed","taskAgents","analysis","efficiency","calculateEfficiency","bottlenecks","identifyBottlenecks","improvements","suggestImprovements","updateCoordinationStrategy","optimized","_this8","query","updateKnowledge","searchPatterns","patterns","extractSearchPatterns","count","set","updateKnowledgeBase","patternsExtracted","knowledgeUpdated","_this9","extractPatterns","cacheContent","extractUrlPatterns","contentCache","_this0","level","withSwarmStatus","sendTelemetry","notification","_status$agents","status","getSwarmStatus","size","activeTasks","health","process","env","RUV_SWARM_TELEMETRY_ENABLED","notifications","handled","_this1","command","safetyCheck","validateCommandSafety","safe","riskLevel","resources","estimateCommandResources","requiresAgent","duration","_this10","swarmId","persistConfig","enableMonitoring","swarmConfig","monitoring","configDir","join","cwd","mkdir","recursive","writeFile","stringify","events","_this11","agentId","updateRoster","trainSpecialization","specialization","getSpecializationForType","spawned","tasks","successRate","rosterPath","roster","Array","from","values","generateSpecializationPatterns","confidence","Math","random","specialized","_this12","monitorProgress","optimizeDistribution","taskMonitoring","checkpoints","optimization","strategy","agentAllocation","optimizeAgentAllocation","parallelization","calculateParallelization","_this13","saveWeights","updatePatterns","parseFloat","saved","patternsUpdated","weightsDir","weightData","weights","generateMockWeights","version","patternUpdate","_this14","prompt","output","commitToGit","generateReport","pushToGithub","toISOString","agentName","reportPath","reportDir","sanitizedAgent","replace","toLowerCase","report","sessionId","formatDuration","extractKeyPoints","getModifiedFilesCount","rating","getModifiedFilesList","op","map","l","stdio","encoding","trim","commitMessage","split","substring","extractBulletPoints","relative","commitCmd","shell","commitHash","log","RUV_SWARM_AUTO_PUSH","gitError","hasReport","hasCommit","operationCount","reportGenerated","committed","lines","keyPoints","line","match","slice","points","p","fileOps","uniqueFiles","Set","Boolean","fileMap","has","entries","ops","_this15","loadMemory","loadAgents","restored","memory","sessionDir","memoryPath","access","catch","readFile","metricsPath","_this16","generateSummary","saveMemory","exportMetrics","results","summary","generateSessionSummary","summaryPath","captureSwarmState","statePath","calculateSessionMetrics","extension","mapping","statusFile","exists","_error","_this17","getCognitivePattern","created","coder","researcher","analyst","coordinator","architect","optimizer","filePath","ext","formatters","formatter","fileType","_this18","pattern_updated","toFixed","total_examples","dangerousPatterns","test","resourceMap","agentList","toLocaleTimeString","session_id","fromEntries","duration_ms","operations_per_minute","tokens_saved","efficiency_score","learning","patterns_improved","average_improvement","reduce","acc","confidence_average","total_spawned","by_type","ms","seconds","floor","minutes","hours","keywords","simple","medium","complex","desc","score","some","k","fileCount","requiresResearch","requiresTesting","topologyMap","add","operation","_this19","knowledgeGraph","nodes","edges","graph","nodeId","getFileType","lastModified","node","getCurrentAgent","relatedFiles","findRelatedFiles","related","find","to","weight","baselineTime","efficiencyScore","max","min","agentUtilization","timeEfficiency","agentEfficiency","severity","recommendation","area","expectedImprovement","coordinationStrategy","current","history","adjustments","fileTypes","ft","codePatterns","cp","scopePatterns","sp","data","kbPath","kb","searches","insights","urlObj","URL","hostname","pathParts","pathname","endsWith","search","_this20","statusPath","event","telemetryPath","telemetryEvent","appendFile","specializations","layers","neurons","fill","biases","_taskId","allocation","load","currentLoad","capacity","priority","agentCount","taskComplexity","factor","ceil","maxConcurrency","typeMap","recentOps","agentCounts","sorted","sort","_baseName","basename","hooksInstance","options"],"sources":["index.js"],"sourcesContent":["/**\n * Claude Code Hooks Implementation for ruv-swarm\n * Provides automated coordination, formatting, and learning capabilities\n */\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { execSync } from 'child_process';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nclass RuvSwarmHooks {\n  constructor() {\n    this.sessionData = {\n      startTime: Date.now(),\n      operations: [],\n      agents: new Map(),\n      learnings: [],\n      metrics: {\n        tokensSaved: 0,\n        tasksCompleted: 0,\n        patternsImproved: 0,\n      },\n    };\n  }\n\n  /**\n     * Main hook handler - routes to specific hook implementations\n     */\n  async handleHook(hookType, args) {\n    try {\n      switch (hookType) {\n      // Pre-operation hooks\n      case 'pre-edit':\n        return await this.preEditHook(args);\n      case 'pre-bash':\n        return await this.preBashHook(args);\n      case 'pre-task':\n        return await this.preTaskHook(args);\n      case 'pre-search':\n        return await this.preSearchHook(args);\n      case 'pre-mcp':\n        return await this.preMcpHook(args);\n\n        // Post-operation hooks\n      case 'post-edit':\n        return await this.postEditHook(args);\n      case 'post-bash':\n        return await this.postBashHook(args);\n      case 'post-task':\n        return await this.postTaskHook(args);\n      case 'post-search':\n        return await this.postSearchHook(args);\n      case 'post-web-search':\n        return await this.postWebSearchHook(args);\n      case 'post-web-fetch':\n        return await this.postWebFetchHook(args);\n\n        // MCP-specific hooks\n      case 'mcp-swarm-initialized':\n        return await this.mcpSwarmInitializedHook(args);\n      case 'mcp-agent-spawned':\n        return await this.mcpAgentSpawnedHook(args);\n      case 'mcp-task-orchestrated':\n        return await this.mcpTaskOrchestratedHook(args);\n      case 'mcp-neural-trained':\n        return await this.mcpNeuralTrainedHook(args);\n\n        // System hooks\n      case 'notification':\n        return await this.notificationHook(args);\n      case 'session-end':\n        return await this.sessionEndHook(args);\n      case 'session-restore':\n        return await this.sessionRestoreHook(args);\n      case 'agent-complete':\n        return await this.agentCompleteHook(args);\n\n      default:\n        return { continue: true, reason: `Unknown hook type: ${hookType}` };\n      }\n    } catch (error) {\n      console.error(`Hook error (${hookType}):`, error.message);\n      return {\n        continue: true,\n        error: error.message,\n        fallback: 'Hook error - continuing with default behavior',\n      };\n    }\n  }\n\n  /**\n     * Pre-search hook - Prepare cache and optimize search\n     */\n  async preSearchHook(args) {\n    const { pattern } = args;\n\n    // Initialize search cache\n    if (!this.sessionData.searchCache) {\n      this.sessionData.searchCache = new Map();\n    }\n\n    // Check cache for similar patterns\n    const cachedResult = this.sessionData.searchCache.get(pattern);\n    if (cachedResult && Date.now() - cachedResult.timestamp < 300000) { // 5 min cache\n      return {\n        continue: true,\n        cached: true,\n        cacheHit: cachedResult.files.length,\n        metadata: { pattern, cached: true },\n      };\n    }\n\n    return {\n      continue: true,\n      reason: 'Search prepared',\n      metadata: { pattern, cacheReady: true },\n    };\n  }\n\n  /**\n     * Pre-MCP hook - Validate MCP tool state\n     */\n  async preMcpHook(args) {\n    const { tool, params } = args;\n\n    // Parse params if string\n    const toolParams = typeof params === 'string' ? JSON.parse(params) : params;\n\n    // Validate swarm state for MCP operations\n    if (tool.includes('agent_spawn') || tool.includes('task_orchestrate')) {\n      const swarmStatus = await this.checkSwarmStatus();\n      if (!swarmStatus.initialized) {\n        return {\n          continue: true,\n          warning: 'Swarm not initialized - will be created automatically',\n          autoInit: true,\n        };\n      }\n    }\n\n    // Track MCP operations\n    this.sessionData.operations.push({\n      type: 'mcp',\n      tool,\n      params: toolParams,\n      timestamp: Date.now(),\n    });\n\n    return {\n      continue: true,\n      reason: 'MCP tool validated',\n      metadata: { tool, state: 'ready' },\n    };\n  }\n\n  /**\n     * Pre-edit hook - Ensure coordination before file modifications\n     */\n  async preEditHook(args) {\n    const { file } = args;\n\n    // Determine file type and assign appropriate agent\n    const fileExt = path.extname(file);\n    const agentType = this.getAgentTypeForFile(fileExt);\n\n    // Check if swarm is initialized\n    const swarmStatus = await this.checkSwarmStatus();\n    if (!swarmStatus.initialized) {\n      return {\n        continue: false,\n        reason: 'Swarm not initialized - run mcp__ruv-swarm__swarm_init first',\n        suggestion: 'Initialize swarm with appropriate topology',\n      };\n    }\n\n    // Ensure appropriate agent exists\n    const agent = await this.ensureAgent(agentType);\n\n    // Record operation\n    this.sessionData.operations.push({\n      type: 'edit',\n      file,\n      agent: agent.id,\n      timestamp: Date.now(),\n    });\n\n    return {\n      continue: true,\n      reason: `${agentType} agent assigned for ${fileExt} file`,\n      metadata: {\n        agent_id: agent.id,\n        agent_type: agentType,\n        cognitive_pattern: agent.pattern,\n        readiness: agent.readiness,\n      },\n    };\n  }\n\n  /**\n     * Pre-task hook - Auto-spawn agents and optimize topology\n     */\n  async preTaskHook(args) {\n    const { description, autoSpawnAgents, optimizeTopology } = args;\n\n    // Analyze task complexity\n    const complexity = this.analyzeTaskComplexity(description);\n\n    // Determine optimal topology\n    const topology = optimizeTopology ? this.selectOptimalTopology(complexity) : 'mesh';\n\n    // Auto-spawn required agents\n    if (autoSpawnAgents) {\n      const requiredAgents = this.determineRequiredAgents(description, complexity);\n      for (const agentType of requiredAgents) {\n        await this.ensureAgent(agentType);\n      }\n    }\n\n    return {\n      continue: true,\n      reason: 'Task prepared with optimal configuration',\n      metadata: {\n        complexity,\n        topology,\n        agentsReady: true,\n        estimatedDuration: complexity.estimatedMinutes * 60000,\n      },\n    };\n  }\n\n  /**\n     * Post-edit hook - Format and learn from edits\n     */\n  async postEditHook(args) {\n    const { file, autoFormat, trainPatterns, updateGraph } = args;\n    const result = {\n      continue: true,\n      formatted: false,\n      training: null,\n    };\n\n    // Auto-format if requested\n    if (autoFormat) {\n      const formatted = await this.autoFormatFile(file);\n      result.formatted = formatted.success;\n      result.formatDetails = formatted.details;\n    }\n\n    // Train neural patterns\n    if (trainPatterns) {\n      const training = await this.trainPatternsFromEdit(file);\n      result.training = training;\n      this.sessionData.metrics.patternsImproved += training.improvement || 0;\n    }\n\n    // Update knowledge graph if requested\n    if (updateGraph) {\n      await this.updateKnowledgeGraph(file, 'edit');\n    }\n\n    // Update session data\n    this.sessionData.metrics.tokensSaved += 10; // Estimated savings\n\n    return result;\n  }\n\n  /**\n     * Post-task hook - Analyze performance and update coordination\n     */\n  async postTaskHook(args) {\n    const { taskId, analyzePerformance, updateCoordination } = args;\n\n    const performance = {\n      taskId,\n      completionTime: Date.now() - (this.sessionData.taskStartTimes?.get(taskId) || Date.now()),\n      agentsUsed: this.sessionData.taskAgents?.get(taskId) || [],\n      success: true,\n    };\n\n    // Analyze performance\n    if (analyzePerformance) {\n      performance.analysis = {\n        efficiency: this.calculateEfficiency(performance),\n        bottlenecks: this.identifyBottlenecks(performance),\n        improvements: this.suggestImprovements(performance),\n      };\n    }\n\n    // Update coordination strategies\n    if (updateCoordination) {\n      this.updateCoordinationStrategy(performance);\n    }\n\n    this.sessionData.metrics.tasksCompleted++;\n\n    return {\n      continue: true,\n      performance,\n      metadata: { taskId, optimized: true },\n    };\n  }\n\n  /**\n     * Post-web-search hook - Analyze results and update knowledge\n     */\n  async postWebSearchHook(args) {\n    const { query, updateKnowledge } = args;\n\n    // Track search patterns\n    if (!this.sessionData.searchPatterns) {\n      this.sessionData.searchPatterns = new Map();\n    }\n\n    const patterns = this.extractSearchPatterns(query);\n    patterns.forEach(pattern => {\n      const count = this.sessionData.searchPatterns.get(pattern) || 0;\n      this.sessionData.searchPatterns.set(pattern, count + 1);\n    });\n\n    // Update knowledge base\n    if (updateKnowledge) {\n      await this.updateKnowledgeBase('search', { query, patterns });\n    }\n\n    return {\n      continue: true,\n      reason: 'Search analyzed and knowledge updated',\n      metadata: {\n        query,\n        patternsExtracted: patterns.length,\n        knowledgeUpdated: updateKnowledge,\n      },\n    };\n  }\n\n  /**\n     * Post-web-fetch hook - Extract patterns and cache content\n     */\n  async postWebFetchHook(args) {\n    const { url, extractPatterns, cacheContent } = args;\n\n    const result = {\n      continue: true,\n      patterns: [],\n      cached: false,\n    };\n\n    // Extract patterns from URL\n    if (extractPatterns) {\n      result.patterns = this.extractUrlPatterns(url);\n    }\n\n    // Cache content for future use\n    if (cacheContent) {\n      if (!this.sessionData.contentCache) {\n        this.sessionData.contentCache = new Map();\n      }\n      this.sessionData.contentCache.set(url, {\n        timestamp: Date.now(),\n        patterns: result.patterns,\n      });\n      result.cached = true;\n    }\n\n    return result;\n  }\n\n  /**\n     * Notification hook - Handle notifications with swarm status\n     */\n  async notificationHook(args) {\n    const { message, level, withSwarmStatus, sendTelemetry } = args;\n\n    const notification = {\n      message,\n      level: level || 'info',\n      timestamp: Date.now(),\n    };\n\n    // Add swarm status if requested\n    if (withSwarmStatus) {\n      const status = await this.getSwarmStatus();\n      notification.swarmStatus = {\n        agents: status.agents?.size || 0,\n        activeTasks: status.activeTasks || 0,\n        health: status.health || 'unknown',\n      };\n    }\n\n    // Send telemetry if enabled\n    if (sendTelemetry && process.env.RUV_SWARM_TELEMETRY_ENABLED === 'true') {\n      this.sendTelemetry('notification', notification);\n    }\n\n    // Store notification\n    if (!this.sessionData.notifications) {\n      this.sessionData.notifications = [];\n    }\n    this.sessionData.notifications.push(notification);\n\n    return {\n      continue: true,\n      notification,\n      handled: true,\n    };\n  }\n\n  /**\n     * Pre-bash hook - Validate commands before execution\n     */\n  async preBashHook(args) {\n    const { command } = args;\n\n    // Safety checks\n    const safetyCheck = this.validateCommandSafety(command);\n    if (!safetyCheck.safe) {\n      return {\n        continue: false,\n        reason: safetyCheck.reason,\n        riskLevel: safetyCheck.riskLevel,\n      };\n    }\n\n    // Check resource requirements\n    const resources = this.estimateCommandResources(command);\n    if (resources.requiresAgent) {\n      await this.ensureAgent(resources.agentType);\n    }\n\n    return {\n      continue: true,\n      reason: 'Command validated and resources available',\n      metadata: {\n        estimatedDuration: resources.duration,\n        requiresAgent: resources.requiresAgent,\n      },\n    };\n  }\n\n  /**\n     * MCP swarm initialized hook - Persist configuration\n     */\n  async mcpSwarmInitializedHook(args) {\n    const { swarmId, topology, persistConfig, enableMonitoring } = args;\n\n    // Store swarm configuration\n    const swarmConfig = {\n      id: swarmId,\n      topology,\n      initialized: Date.now(),\n      monitoring: enableMonitoring,\n    };\n\n    // Persist configuration\n    if (persistConfig) {\n      const configDir = path.join(process.cwd(), '.ruv-swarm');\n      await fs.mkdir(configDir, { recursive: true });\n      await fs.writeFile(\n        path.join(configDir, 'swarm-config.json'),\n        JSON.stringify(swarmConfig, null, 2),\n      );\n    }\n\n    // Initialize monitoring\n    if (enableMonitoring) {\n      this.sessionData.monitoring = {\n        swarmId,\n        startTime: Date.now(),\n        events: [],\n      };\n    }\n\n    return {\n      continue: true,\n      reason: 'Swarm initialized and configured',\n      metadata: swarmConfig,\n    };\n  }\n\n  /**\n     * MCP agent spawned hook - Update roster and train\n     */\n  async mcpAgentSpawnedHook(args) {\n    const { agentId, type, updateRoster, trainSpecialization } = args;\n\n    // Update agent roster\n    if (updateRoster) {\n      const agent = {\n        id: agentId,\n        type,\n        specialization: this.getSpecializationForType(type),\n        spawned: Date.now(),\n        performance: { tasks: 0, successRate: 1.0 },\n      };\n\n      this.sessionData.agents.set(agentId, agent);\n\n      // Persist roster\n      const rosterPath = path.join(process.cwd(), '.ruv-swarm', 'agent-roster.json');\n      const roster = Array.from(this.sessionData.agents.values());\n      await fs.writeFile(rosterPath, JSON.stringify(roster, null, 2));\n    }\n\n    // Train specialization patterns\n    if (trainSpecialization) {\n      const training = {\n        agentId,\n        type,\n        patterns: this.generateSpecializationPatterns(type),\n        confidence: 0.9 + Math.random() * 0.1,\n      };\n\n      this.sessionData.learnings.push(training);\n    }\n\n    return {\n      continue: true,\n      agentId,\n      type,\n      specialized: true,\n    };\n  }\n\n  /**\n     * MCP task orchestrated hook - Monitor and optimize\n     */\n  async mcpTaskOrchestratedHook(args) {\n    const { taskId, monitorProgress, optimizeDistribution } = args;\n\n    // Initialize task tracking\n    if (!this.sessionData.taskStartTimes) {\n      this.sessionData.taskStartTimes = new Map();\n    }\n    if (!this.sessionData.taskAgents) {\n      this.sessionData.taskAgents = new Map();\n    }\n\n    this.sessionData.taskStartTimes.set(taskId, Date.now());\n\n    // Monitor progress setup\n    if (monitorProgress) {\n      this.sessionData.taskMonitoring = this.sessionData.taskMonitoring || new Map();\n      this.sessionData.taskMonitoring.set(taskId, {\n        checkpoints: [],\n        resources: [],\n        bottlenecks: [],\n      });\n    }\n\n    // Optimize distribution\n    if (optimizeDistribution) {\n      const optimization = {\n        taskId,\n        strategy: 'load-balanced',\n        agentAllocation: this.optimizeAgentAllocation(taskId),\n        parallelization: this.calculateParallelization(taskId),\n      };\n\n      return {\n        continue: true,\n        taskId,\n        optimization,\n      };\n    }\n\n    return {\n      continue: true,\n      taskId,\n      monitoring: monitorProgress,\n    };\n  }\n\n  /**\n     * MCP neural trained hook - Save improvements\n     */\n  async mcpNeuralTrainedHook(args) {\n    const { improvement, saveWeights, updatePatterns } = args;\n\n    const result = {\n      continue: true,\n      improvement: parseFloat(improvement),\n      saved: false,\n      patternsUpdated: false,\n    };\n\n    // Save neural weights\n    if (saveWeights) {\n      const weightsDir = path.join(process.cwd(), '.ruv-swarm', 'neural-weights');\n      await fs.mkdir(weightsDir, { recursive: true });\n\n      const weightData = {\n        timestamp: Date.now(),\n        improvement,\n        weights: this.generateMockWeights(),\n        version: this.sessionData.learnings.length,\n      };\n\n      await fs.writeFile(\n        path.join(weightsDir, `weights-${Date.now()}.json`),\n        JSON.stringify(weightData, null, 2),\n      );\n\n      result.saved = true;\n    }\n\n    // Update cognitive patterns\n    if (updatePatterns) {\n      this.sessionData.metrics.patternsImproved++;\n\n      const patternUpdate = {\n        timestamp: Date.now(),\n        improvement,\n        patterns: ['convergent', 'divergent', 'lateral'],\n        confidence: 0.85 + parseFloat(improvement),\n      };\n\n      this.sessionData.learnings.push(patternUpdate);\n      result.patternsUpdated = true;\n    }\n\n    return result;\n  }\n\n  /**\n     * Agent complete hook - Commit to git with detailed report\n     */\n  async agentCompleteHook(args) {\n    const { agent, prompt, output, commitToGit, generateReport, pushToGithub } = args;\n\n    try {\n      const timestamp = new Date().toISOString();\n      const agentName = agent || 'Unknown Agent';\n      // const shortOutput = output ? `${output.substring(0, 500) }...` : 'No output';\n\n      // Generate detailed report\n      let reportPath = null;\n      if (generateReport) {\n        const reportDir = path.join(process.cwd(), '.ruv-swarm', 'agent-reports');\n        await fs.mkdir(reportDir, { recursive: true });\n\n        const sanitizedAgent = agentName.replace(/[^a-zA-Z0-9-]/g, '-').toLowerCase();\n        reportPath = path.join(reportDir, `${sanitizedAgent}-${Date.now()}.md`);\n\n        const report = `# Agent Completion Report: ${agentName}\n\n## Metadata\n- **Agent**: ${agentName}\n- **Timestamp**: ${timestamp}\n- **Session**: ${this.sessionData.sessionId || 'N/A'}\n- **Duration**: ${this.formatDuration(Date.now() - this.sessionData.startTime)}\n\n## Task Description\n\\`\\`\\`\n${prompt || 'No prompt available'}\n\\`\\`\\`\n\n## Output Summary\n${output ? `### Key Accomplishments\\n${ this.extractKeyPoints(output)}` : 'No output captured'}\n\n## Performance Metrics\n- **Total Operations**: ${this.sessionData.operations.length}\n- **Files Modified**: ${this.getModifiedFilesCount()}\n- **Efficiency Score**: ${this.calculateEfficiency({ completionTime: Date.now() - this.sessionData.startTime }).rating}\n- **Tokens Saved**: ${this.sessionData.metrics.tokensSaved}\n\n## Files Modified\n${this.getModifiedFilesList()}\n\n## Coordination Activity\n- **Memory Operations**: ${this.sessionData.operations.filter(op => op.type === 'memory').length}\n- **Hook Executions**: ${this.sessionData.operations.filter(op => op.type === 'hook').length}\n- **Neural Training**: ${this.sessionData.metrics.patternsImproved} patterns improved\n\n## Learnings & Patterns\n${this.sessionData.learnings.length > 0 ? this.sessionData.learnings.map(l => `- ${l.type || 'General'}: ${l.description || JSON.stringify(l)}`).join('\\n') : 'No specific learnings captured'}\n\n---\n*Generated by ruv-swarm agent coordination system*\n`;\n\n        await fs.writeFile(reportPath, report);\n      }\n\n      // Commit to git if requested\n      if (commitToGit) {\n        try {\n          // Check if we're in a git repo\n          execSync('git rev-parse --git-dir', { stdio: 'ignore' });\n\n          // Get git status\n          const status = execSync('git status --porcelain', { encoding: 'utf-8' });\n\n          if (status.trim()) {\n            // Stage changes\n            execSync('git add -A');\n\n            // Create detailed commit message\n            const commitMessage = `feat(${agentName.toLowerCase().replace(/[^a-z0-9]/g, '-')}): Complete agent task\n\nAgent: ${agentName}\nTimestamp: ${timestamp}\n\n## Task Summary\n${prompt ? `${prompt.split('\\n')[0].substring(0, 100) }...` : 'No task description'}\n\n## Achievements\n${this.extractBulletPoints(output)}\n\n## Metrics\n- Operations: ${this.sessionData.operations.length}\n- Files: ${this.getModifiedFilesCount()}\n- Efficiency: ${this.calculateEfficiency({ completionTime: Date.now() - this.sessionData.startTime }).rating}\n${reportPath ? `\\n## Report\\nDetailed report: ${path.relative(process.cwd(), reportPath)}` : ''}\n\n🤖 Generated by ruv-swarm agent coordination\nCo-Authored-By: ${agentName} <agent@ruv-swarm.ai>`;\n\n            // Commit using heredoc to handle complex messages\n            const commitCmd = `git commit -m \"$(cat <<'EOF'\n${commitMessage}\nEOF\n)\"`;\n            execSync(commitCmd, { shell: '/bin/bash' });\n\n            // Log commit info\n            const commitHash = execSync('git rev-parse HEAD', { encoding: 'utf-8' }).trim();\n            console.log(`✅ Committed agent work: ${commitHash.substring(0, 7)}`);\n\n            // Push if requested and configured\n            if (pushToGithub && process.env.RUV_SWARM_AUTO_PUSH === 'true') {\n              console.log('📤 Pushing to GitHub...');\n              execSync('git push', { stdio: 'inherit' });\n              console.log('✅ Pushed to GitHub');\n            }\n          } else {\n            console.log('ℹ️ No changes to commit');\n          }\n\n        } catch (gitError) {\n          console.error('Git operation failed:', gitError.message);\n        }\n      }\n\n      // Update telemetry\n      this.sendTelemetry('agent_complete', {\n        agent: agentName,\n        hasReport: generateReport,\n        hasCommit: commitToGit,\n        operationCount: this.sessionData.operations.length,\n        duration: Date.now() - this.sessionData.startTime,\n      });\n\n      return {\n        continue: true,\n        agent: agentName,\n        reportGenerated: generateReport,\n        reportPath: reportPath ? path.relative(process.cwd(), reportPath) : null,\n        committed: commitToGit,\n        duration: this.formatDuration(Date.now() - this.sessionData.startTime),\n      };\n\n    } catch (error) {\n      console.error('Agent complete hook error:', error);\n      return {\n        continue: true,\n        error: error.message,\n      };\n    }\n  }\n\n  /**\n     * Extract key points from output\n     */\n  extractKeyPoints(output) {\n    const lines = output.split('\\n').filter(l => l.trim());\n    const keyPoints = [];\n\n    // Look for bullet points or numbered items\n    lines.forEach(line => {\n      if (line.match(/^[\\-\\*•]\\s/) || line.match(/^\\d+\\.\\s/)) {\n        keyPoints.push(line);\n      }\n    });\n\n    // If no bullet points, take first few lines\n    if (keyPoints.length === 0) {\n      keyPoints.push(...lines.slice(0, 5));\n    }\n\n    return keyPoints.slice(0, 10).join('\\n');\n  }\n\n  /**\n     * Extract bullet points for commit message\n     */\n  extractBulletPoints(output) {\n    if (!output) {\n      return '- No specific achievements captured';\n    }\n\n    const points = this.extractKeyPoints(output)\n      .split('\\n')\n      .slice(0, 5)\n      .map(p => `- ${p.replace(/^[\\-\\*•\\d+\\.\\s]+/, '').trim()}`);\n\n    return points.length > 0 ? points.join('\\n') : '- Task completed successfully';\n  }\n\n  /**\n     * Get count of modified files\n     */\n  getModifiedFilesCount() {\n    const fileOps = this.sessionData.operations.filter(op =>\n      ['edit', 'write', 'create'].includes(op.type),\n    );\n\n    const uniqueFiles = new Set(fileOps.map(op => op.file).filter(Boolean));\n    return uniqueFiles.size;\n  }\n\n  /**\n     * Get list of modified files\n     */\n  getModifiedFilesList() {\n    const fileOps = this.sessionData.operations.filter(op =>\n      ['edit', 'write', 'create'].includes(op.type),\n    );\n\n    const fileMap = new Map();\n    fileOps.forEach(op => {\n      if (op.file) {\n        if (!fileMap.has(op.file)) {\n          fileMap.set(op.file, []);\n        }\n        fileMap.get(op.file).push(op.type);\n      }\n    });\n\n    if (fileMap.size === 0) {\n      return 'No files modified';\n    }\n\n    return Array.from(fileMap.entries())\n      .map(([file, ops]) => `- ${file} (${[...new Set(ops)].join(', ')})`)\n      .join('\\n');\n  }\n\n  /**\n     * Session restore hook - Load previous state\n     */\n  async sessionRestoreHook(args) {\n    const { loadMemory, loadAgents } = args;\n\n    const result = {\n      continue: true,\n      restored: {\n        memory: false,\n        agents: false,\n        metrics: false,\n      },\n    };\n\n    try {\n      const sessionDir = path.join(process.cwd(), '.ruv-swarm');\n\n      // Load memory state\n      if (loadMemory) {\n        const memoryPath = path.join(sessionDir, 'memory-state.json');\n        if (await fs.access(memoryPath).then(() => true).catch(() => false)) {\n          const memory = JSON.parse(await fs.readFile(memoryPath, 'utf-8'));\n          this.sessionData = { ...this.sessionData, ...memory };\n          result.restored.memory = true;\n        }\n      }\n\n      // Load agent roster\n      if (loadAgents) {\n        const rosterPath = path.join(sessionDir, 'agent-roster.json');\n        if (await fs.access(rosterPath).then(() => true).catch(() => false)) {\n          const roster = JSON.parse(await fs.readFile(rosterPath, 'utf-8'));\n          roster.forEach(agent => {\n            this.sessionData.agents.set(agent.id, agent);\n          });\n          result.restored.agents = true;\n        }\n      }\n\n      // Load metrics\n      const metricsPath = path.join(sessionDir, 'session-metrics.json');\n      if (await fs.access(metricsPath).then(() => true).catch(() => false)) {\n        const metrics = JSON.parse(await fs.readFile(metricsPath, 'utf-8'));\n        this.sessionData.metrics = { ...this.sessionData.metrics, ...metrics };\n        result.restored.metrics = true;\n      }\n\n    } catch (error) {\n      console.error('Session restore error:', error.message);\n    }\n\n    return result;\n  }\n\n  /**\n     * Session end hook - Generate summary and persist state\n     */\n  async sessionEndHook(args) {\n    const { generateSummary, saveMemory, exportMetrics } = args;\n    const sessionDir = path.join(process.cwd(), '.claude', 'sessions');\n    await fs.mkdir(sessionDir, { recursive: true });\n\n    const timestamp = new Date().toISOString().replace(/:/g, '-');\n    const results = {};\n\n    // Generate summary\n    if (generateSummary) {\n      const summary = this.generateSessionSummary();\n      const summaryPath = path.join(sessionDir, `${timestamp}-summary.md`);\n      await fs.writeFile(summaryPath, summary);\n      results.summary = summaryPath;\n    }\n\n    // Save memory state\n    if (saveMemory) {\n      const state = this.captureSwarmState();\n      const statePath = path.join(sessionDir, `${timestamp}-state.json`);\n      await fs.writeFile(statePath, JSON.stringify(state, null, 2));\n      results.state = statePath;\n    }\n\n    // Export metrics\n    if (exportMetrics) {\n      const metrics = this.calculateSessionMetrics();\n      const metricsPath = path.join(sessionDir, `${timestamp}-metrics.json`);\n      await fs.writeFile(metricsPath, JSON.stringify(metrics, null, 2));\n      results.metrics = metricsPath;\n    }\n\n    console.log('\\n🎯 Session Summary:');\n    console.log(`Duration: ${this.formatDuration(Date.now() - this.sessionData.startTime)}`);\n    console.log(`Operations: ${this.sessionData.operations.length}`);\n    console.log(`Tokens Saved: ${this.sessionData.metrics.tokensSaved}`);\n    console.log(`Patterns Improved: ${this.sessionData.metrics.patternsImproved}`);\n\n    return {\n      continue: true,\n      files: results,\n      summary: {\n        duration: Date.now() - this.sessionData.startTime,\n        operations: this.sessionData.operations.length,\n        improvements: this.sessionData.metrics.patternsImproved,\n      },\n    };\n  }\n\n  // Helper methods\n\n  getAgentTypeForFile(extension) {\n    const mapping = {\n      '.js': 'coder',\n      '.ts': 'coder',\n      '.jsx': 'coder',\n      '.tsx': 'coder',\n      '.py': 'coder',\n      '.go': 'coder',\n      '.rs': 'coder',\n      '.md': 'researcher',\n      '.txt': 'researcher',\n      '.json': 'analyst',\n      '.yaml': 'analyst',\n      '.yml': 'analyst',\n      '.toml': 'analyst',\n      '.xml': 'analyst',\n      '.sql': 'analyst',\n    };\n    return mapping[extension] || 'coordinator';\n  }\n\n  async checkSwarmStatus() {\n    try {\n      // Check if swarm is initialized via file or global state\n      const statusFile = path.join(process.cwd(), '.ruv-swarm', 'status.json');\n      const exists = await fs.access(statusFile).then(() => true).catch(() => false);\n\n      if (exists) {\n        const status = JSON.parse(await fs.readFile(statusFile, 'utf-8'));\n        return { initialized: true, ...status };\n      }\n\n      return { initialized: false };\n    } catch (_error) {\n      return { initialized: false };\n    }\n  }\n\n  async ensureAgent(type) {\n    let agent = this.sessionData.agents.get(type);\n\n    if (!agent) {\n      // Simulate agent creation\n      agent = {\n        id: `${type}-${Date.now()}`,\n        type,\n        pattern: this.getCognitivePattern(type),\n        readiness: 0.95,\n        created: Date.now(),\n      };\n      this.sessionData.agents.set(type, agent);\n    }\n\n    return agent;\n  }\n\n  getCognitivePattern(agentType) {\n    const patterns = {\n      coder: 'convergent',\n      researcher: 'divergent',\n      analyst: 'critical',\n      coordinator: 'systems',\n      architect: 'abstract',\n      optimizer: 'lateral',\n    };\n    return patterns[agentType] || 'balanced';\n  }\n\n  async autoFormatFile(filePath) {\n    const ext = path.extname(filePath);\n    const formatters = {\n      '.js': 'prettier --write',\n      '.ts': 'prettier --write',\n      '.jsx': 'prettier --write',\n      '.tsx': 'prettier --write',\n      '.json': 'prettier --write',\n      '.md': 'prettier --write --prose-wrap always',\n      '.py': 'black',\n      '.go': 'gofmt -w',\n      '.rs': 'rustfmt',\n    };\n\n    const formatter = formatters[ext];\n    if (!formatter) {\n      return { success: false, reason: 'No formatter configured for file type' };\n    }\n\n    try {\n      execSync(`${formatter} \"${filePath}\"`, { stdio: 'pipe' });\n      return { success: true, details: { formatter, fileType: ext } };\n    } catch (error) {\n      return { success: false, reason: error.message };\n    }\n  }\n\n  async trainPatternsFromEdit(filePath) {\n    // Simulate neural pattern training\n    const improvement = Math.random() * 0.05; // 0-5% improvement\n    const confidence = 0.85 + Math.random() * 0.1; // 85-95% confidence\n\n    this.sessionData.learnings.push({\n      file: filePath,\n      timestamp: Date.now(),\n      improvement,\n      confidence,\n      pattern: `edit_pattern_${ path.extname(filePath)}`,\n    });\n\n    return {\n      pattern_updated: true,\n      improvement: improvement.toFixed(3),\n      confidence: confidence.toFixed(2),\n      total_examples: this.sessionData.learnings.length,\n    };\n  }\n\n  validateCommandSafety(command) {\n    const dangerousPatterns = [\n      /rm\\s+-rf\\s+\\//,\n      /curl.*\\|\\s*bash/,\n      /wget.*\\|\\s*sh/,\n      /eval\\s*\\(/,\n      />\\/dev\\/null\\s+2>&1/,\n    ];\n\n    for (const pattern of dangerousPatterns) {\n      if (pattern.test(command)) {\n        return {\n          safe: false,\n          reason: 'Command contains potentially dangerous pattern',\n          riskLevel: 'high',\n        };\n      }\n    }\n\n    return { safe: true };\n  }\n\n  estimateCommandResources(command) {\n    const resourceMap = {\n      'npm test': { duration: 30000, requiresAgent: true, agentType: 'coordinator' },\n      'npm run build': { duration: 60000, requiresAgent: true, agentType: 'optimizer' },\n      'git': { duration: 1000, requiresAgent: false },\n      'ls': { duration: 100, requiresAgent: false },\n    };\n\n    for (const [pattern, resources] of Object.entries(resourceMap)) {\n      if (command.includes(pattern)) {\n        return resources;\n      }\n    }\n\n    return { duration: 5000, requiresAgent: false };\n  }\n\n  generateSessionSummary() {\n    const duration = Date.now() - this.sessionData.startTime;\n    const agentList = Array.from(this.sessionData.agents.values());\n\n    return `# ruv-swarm Session Summary\nDate: ${new Date().toISOString()}\nDuration: ${this.formatDuration(duration)}\nToken Reduction: ${this.sessionData.metrics.tokensSaved} tokens\n\n## Swarm Activity\n- Active Agents: ${agentList.length} (${agentList.map(a => a.type).join(', ')})\n- Operations Performed: ${this.sessionData.operations.length}\n- Files Modified: ${new Set(this.sessionData.operations.map(o => o.file)).size}\n- Neural Improvements: ${this.sessionData.metrics.patternsImproved}\n\n## Operations Breakdown\n${this.sessionData.operations.slice(-10).map(op =>\n    `- ${new Date(op.timestamp).toLocaleTimeString()}: ${op.type} on ${op.file} (${op.agent})`,\n  ).join('\\n')}\n\n## Learning Highlights\n${this.sessionData.learnings.slice(-5).map(l =>\n    `- Pattern \"${l.pattern}\" improved by ${(l.improvement * 100).toFixed(1)}% (confidence: ${l.confidence})`,\n  ).join('\\n')}\n\n## Performance Metrics\n- Average Operation Time: ${(duration / this.sessionData.operations.length / 1000).toFixed(1)}s\n- Token Efficiency: ${(this.sessionData.metrics.tokensSaved / this.sessionData.operations.length).toFixed(0)} tokens/operation\n- Learning Rate: ${(this.sessionData.metrics.patternsImproved / this.sessionData.operations.length).toFixed(2)} improvements/operation\n`;\n  }\n\n  captureSwarmState() {\n    return {\n      session_id: `sess-${Date.now()}`,\n      agents: Object.fromEntries(this.sessionData.agents),\n      operations: this.sessionData.operations,\n      learnings: this.sessionData.learnings,\n      metrics: this.sessionData.metrics,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  calculateSessionMetrics() {\n    const duration = Date.now() - this.sessionData.startTime;\n    return {\n      performance: {\n        duration_ms: duration,\n        operations_per_minute: (this.sessionData.operations.length / (duration / 60000)).toFixed(1),\n        tokens_saved: this.sessionData.metrics.tokensSaved,\n        efficiency_score: (this.sessionData.metrics.tokensSaved / this.sessionData.operations.length).toFixed(1),\n      },\n      learning: {\n        patterns_improved: this.sessionData.metrics.patternsImproved,\n        average_improvement: (this.sessionData.learnings.reduce((acc, l) => acc + l.improvement, 0) / this.sessionData.learnings.length).toFixed(3),\n        confidence_average: (this.sessionData.learnings.reduce((acc, l) => acc + l.confidence, 0) / this.sessionData.learnings.length).toFixed(2),\n      },\n      agents: {\n        total_spawned: this.sessionData.agents.size,\n        by_type: Object.fromEntries(\n          Array.from(this.sessionData.agents.values())\n            .reduce((acc, agent) => {\n              acc.set(agent.type, (acc.get(agent.type) || 0) + 1);\n              return acc;\n            }, new Map()),\n        ),\n      },\n    };\n  }\n\n  formatDuration(ms) {\n    const seconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n\n    if (hours > 0) {\n      return `${hours}h ${minutes % 60}m`;\n    } else if (minutes > 0) {\n      return `${minutes}m ${seconds % 60}s`;\n    }\n    return `${seconds}s`;\n\n  }\n\n  // Additional helper methods for optimization\n\n  analyzeTaskComplexity(description) {\n    const keywords = {\n      simple: ['fix', 'update', 'change', 'modify', 'rename'],\n      medium: ['implement', 'create', 'add', 'integrate', 'refactor'],\n      complex: ['architect', 'design', 'optimize', 'migrate', 'scale'],\n    };\n\n    const desc = description.toLowerCase();\n    let complexity = 'simple';\n    let score = 1;\n    let estimatedMinutes = 5;\n\n    // Check for complex keywords\n    if (keywords.complex.some(k => desc.includes(k))) {\n      complexity = 'complex';\n      score = 3;\n      estimatedMinutes = 60;\n    } else if (keywords.medium.some(k => desc.includes(k))) {\n      complexity = 'medium';\n      score = 2;\n      estimatedMinutes = 30;\n    }\n\n    // Adjust for multiple files or components\n    const fileCount = (desc.match(/\\b(files?|components?|modules?)\\b/g) || []).length;\n    if (fileCount > 1) {\n      score += 0.5;\n      estimatedMinutes *= 1.5;\n    }\n\n    return {\n      level: complexity,\n      score,\n      estimatedMinutes,\n      requiresResearch: desc.includes('research') || desc.includes('analyze'),\n      requiresTesting: desc.includes('test') || desc.includes('verify'),\n    };\n  }\n\n  selectOptimalTopology(complexity) {\n    const topologyMap = {\n      simple: 'star', // Centralized for simple tasks\n      medium: 'mesh', // Flexible for medium complexity\n      complex: 'hierarchical', // Structured for complex tasks\n    };\n\n    return topologyMap[complexity.level] || 'mesh';\n  }\n\n  determineRequiredAgents(description, complexity) {\n    const agents = new Set(['coordinator']); // Always need a coordinator\n\n    const desc = description.toLowerCase();\n\n    // Add agents based on task keywords\n    if (desc.includes('code') || desc.includes('implement') || desc.includes('fix')) {\n      agents.add('coder');\n    }\n    if (desc.includes('research') || desc.includes('analyze') || desc.includes('investigate')) {\n      agents.add('researcher');\n    }\n    if (desc.includes('data') || desc.includes('metrics') || desc.includes('performance')) {\n      agents.add('analyst');\n    }\n    if (desc.includes('design') || desc.includes('architect') || desc.includes('structure')) {\n      agents.add('architect');\n    }\n    if (desc.includes('optimize') || desc.includes('improve') || desc.includes('enhance')) {\n      agents.add('optimizer');\n    }\n\n    // Add more agents for complex tasks\n    if (complexity.score >= 3) {\n      agents.add('reviewer');\n    }\n\n    return Array.from(agents);\n  }\n\n  async updateKnowledgeGraph(file, operation) {\n    if (!this.sessionData.knowledgeGraph) {\n      this.sessionData.knowledgeGraph = {\n        nodes: new Map(),\n        edges: [],\n      };\n    }\n\n    const graph = this.sessionData.knowledgeGraph;\n\n    // Add or update node\n    const nodeId = file;\n    if (!graph.nodes.has(nodeId)) {\n      graph.nodes.set(nodeId, {\n        id: nodeId,\n        type: this.getFileType(file),\n        operations: [],\n        lastModified: Date.now(),\n      });\n    }\n\n    const node = graph.nodes.get(nodeId);\n    node.operations.push({\n      type: operation,\n      timestamp: Date.now(),\n      agent: this.getCurrentAgent(),\n    });\n    node.lastModified = Date.now();\n\n    // Add edges for related files\n    const relatedFiles = await this.findRelatedFiles(file);\n    relatedFiles.forEach(related => {\n      if (!graph.edges.find(e =>\n        (e.from === nodeId && e.to === related) ||\n                (e.from === related && e.to === nodeId),\n      )) {\n        graph.edges.push({\n          from: nodeId,\n          to: related,\n          type: 'related',\n          weight: 1,\n        });\n      }\n    });\n  }\n\n  calculateEfficiency(performance) {\n    const baselineTime = 60000; // 1 minute baseline\n    const efficiencyScore = Math.max(0, Math.min(1, baselineTime / performance.completionTime));\n\n    // Adjust for agent utilization\n    const agentUtilization = performance.agentsUsed.length > 0 ?\n      0.8 + (0.2 * Math.min(1, 3 / performance.agentsUsed.length)) : 0.5;\n\n    return {\n      score: (efficiencyScore * agentUtilization).toFixed(2),\n      timeEfficiency: efficiencyScore.toFixed(2),\n      agentEfficiency: agentUtilization.toFixed(2),\n      rating: efficiencyScore > 0.8 ? 'excellent' :\n        efficiencyScore > 0.6 ? 'good' :\n          efficiencyScore > 0.4 ? 'fair' : 'needs improvement',\n    };\n  }\n\n  identifyBottlenecks(performance) {\n    const bottlenecks = [];\n\n    // Time-based bottlenecks\n    if (performance.completionTime > 300000) { // > 5 minutes\n      bottlenecks.push({\n        type: 'time',\n        severity: 'high',\n        description: 'Task took longer than expected',\n        recommendation: 'Consider breaking into smaller subtasks',\n      });\n    }\n\n    // Agent-based bottlenecks\n    if (performance.agentsUsed.length === 1) {\n      bottlenecks.push({\n        type: 'coordination',\n        severity: 'medium',\n        description: 'Single agent used for complex task',\n        recommendation: 'Spawn specialized agents for parallel work',\n      });\n    }\n\n    // Resource bottlenecks\n    if (this.sessionData.operations.length > 100) {\n      bottlenecks.push({\n        type: 'operations',\n        severity: 'medium',\n        description: 'High number of operations',\n        recommendation: 'Optimize operation batching',\n      });\n    }\n\n    return bottlenecks;\n  }\n\n  suggestImprovements(performance) {\n    const improvements = [];\n    const efficiency = this.calculateEfficiency(performance);\n\n    // Time improvements\n    if (efficiency.timeEfficiency < 0.7) {\n      improvements.push({\n        area: 'execution_time',\n        suggestion: 'Use parallel task execution',\n        expectedImprovement: '30-50% time reduction',\n      });\n    }\n\n    // Coordination improvements\n    if (efficiency.agentEfficiency < 0.8) {\n      improvements.push({\n        area: 'agent_coordination',\n        suggestion: 'Implement specialized agent patterns',\n        expectedImprovement: '20-30% efficiency gain',\n      });\n    }\n\n    // Pattern improvements\n    if (this.sessionData.learnings.length < 5) {\n      improvements.push({\n        area: 'learning',\n        suggestion: 'Enable neural pattern training',\n        expectedImprovement: 'Cumulative performance gains',\n      });\n    }\n\n    return improvements;\n  }\n\n  updateCoordinationStrategy(performance) {\n    const efficiency = this.calculateEfficiency(performance);\n\n    // Update strategy based on performance\n    if (!this.sessionData.coordinationStrategy) {\n      this.sessionData.coordinationStrategy = {\n        current: 'balanced',\n        history: [],\n        adjustments: 0,\n      };\n    }\n\n    const strategy = this.sessionData.coordinationStrategy;\n    strategy.history.push({\n      timestamp: Date.now(),\n      efficiency: efficiency.score,\n      strategy: strategy.current,\n    });\n\n    // Adjust strategy if needed\n    if (parseFloat(efficiency.score) < 0.6) {\n      strategy.current = 'adaptive';\n      strategy.adjustments++;\n    } else if (parseFloat(efficiency.score) > 0.9) {\n      strategy.current = 'specialized';\n      strategy.adjustments++;\n    }\n  }\n\n  extractSearchPatterns(query) {\n    const patterns = [];\n\n    // Extract file type patterns\n    const fileTypes = query.match(/\\.(js|ts|py|go|rs|md|json|yaml)\\b/gi);\n    if (fileTypes) {\n      patterns.push(...fileTypes.map(ft => `filetype:${ft}`));\n    }\n\n    // Extract function/class patterns\n    const codePatterns = query.match(/\\b(function|class|interface|struct|impl)\\s+\\w+/gi);\n    if (codePatterns) {\n      patterns.push(...codePatterns.map(cp => `code:${cp}`));\n    }\n\n    // Extract scope patterns\n    const scopePatterns = query.match(/\\b(src|test|lib|bin|docs?)\\//gi);\n    if (scopePatterns) {\n      patterns.push(...scopePatterns.map(sp => `scope:${sp}`));\n    }\n\n    return patterns;\n  }\n\n  async updateKnowledgeBase(type, data) {\n    const kbPath = path.join(process.cwd(), '.ruv-swarm', 'knowledge-base.json');\n\n    // Load existing knowledge base\n    let kb = {};\n    try {\n      if (await fs.access(kbPath).then(() => true).catch(() => false)) {\n        kb = JSON.parse(await fs.readFile(kbPath, 'utf-8'));\n      }\n    } catch (_error) {\n      kb = { searches: [], patterns: {}, insights: [] };\n    }\n\n    // Update based on type\n    if (type === 'search') {\n      if (!kb.searches) {\n        kb.searches = [];\n      }\n      kb.searches.push({\n        query: data.query,\n        patterns: data.patterns,\n        timestamp: Date.now(),\n      });\n\n      // Update pattern frequency\n      if (!kb.patterns) {\n        kb.patterns = {};\n      }\n      data.patterns.forEach(pattern => {\n        kb.patterns[pattern] = (kb.patterns[pattern] || 0) + 1;\n      });\n    }\n\n    // Keep only recent data\n    if (kb.searches && kb.searches.length > 100) {\n      kb.searches = kb.searches.slice(-100);\n    }\n\n    // Save updated knowledge base\n    await fs.mkdir(path.dirname(kbPath), { recursive: true });\n    await fs.writeFile(kbPath, JSON.stringify(kb, null, 2));\n  }\n\n  extractUrlPatterns(url) {\n    const patterns = [];\n\n    try {\n      const urlObj = new URL(url);\n\n      // Domain pattern\n      patterns.push(`domain:${urlObj.hostname}`);\n\n      // Path patterns\n      const pathParts = urlObj.pathname.split('/').filter(p => p);\n      if (pathParts.length > 0) {\n        patterns.push(`path:/${pathParts[0]}`); // Top level path\n      }\n\n      // Content type patterns\n      if (urlObj.pathname.endsWith('.md')) {\n        patterns.push('content:markdown');\n      }\n      if (urlObj.pathname.includes('docs')) {\n        patterns.push('content:documentation');\n      }\n      if (urlObj.pathname.includes('api')) {\n        patterns.push('content:api');\n      }\n      if (urlObj.pathname.includes('guide')) {\n        patterns.push('content:guide');\n      }\n\n      // Query patterns\n      if (urlObj.search) {\n        patterns.push('has:queryparams');\n      }\n    } catch (_error) {\n      patterns.push('pattern:invalid-url');\n    }\n\n    return patterns;\n  }\n\n  async getSwarmStatus() {\n    try {\n      const statusPath = path.join(process.cwd(), '.ruv-swarm', 'status.json');\n      if (await fs.access(statusPath).then(() => true).catch(() => false)) {\n        return JSON.parse(await fs.readFile(statusPath, 'utf-8'));\n      }\n    } catch (_error) {\n      // Fallback to session data\n    }\n\n    return {\n      agents: this.sessionData.agents,\n      activeTasks: this.sessionData.operations.filter(op =>\n        Date.now() - op.timestamp < 300000, // Last 5 minutes\n      ).length,\n      health: 'operational',\n    };\n  }\n\n  sendTelemetry(event, data) {\n    // In production, this would send to telemetry service\n    // For now, just log to telemetry file\n    const telemetryPath = path.join(process.cwd(), '.ruv-swarm', 'telemetry.jsonl');\n\n    const telemetryEvent = {\n      event,\n      data,\n      timestamp: Date.now(),\n      sessionId: this.sessionData.sessionId || 'unknown',\n      version: '1.0.0',\n    };\n\n    // Async write without blocking\n    fs.appendFile(telemetryPath, `${JSON.stringify(telemetryEvent) }\\n`).catch(() => { /* intentionally empty */ });\n  }\n\n  // Helper methods for other functionality\n\n  getSpecializationForType(type) {\n    const specializations = {\n      researcher: ['literature-review', 'data-analysis', 'trend-identification'],\n      coder: ['implementation', 'refactoring', 'optimization'],\n      analyst: ['metrics', 'performance', 'data-visualization'],\n      architect: ['system-design', 'api-design', 'database-schema'],\n      coordinator: ['task-planning', 'resource-allocation', 'progress-tracking'],\n      optimizer: ['performance-tuning', 'algorithm-optimization', 'resource-usage'],\n    };\n    return specializations[type] || ['general'];\n  }\n\n  generateSpecializationPatterns(type) {\n    const patterns = {\n      researcher: ['depth-first-search', 'breadth-first-search', 'citation-tracking'],\n      coder: ['modular-design', 'error-handling', 'code-reuse'],\n      analyst: ['statistical-analysis', 'trend-detection', 'anomaly-detection'],\n      architect: ['layered-architecture', 'microservices', 'event-driven'],\n      coordinator: ['dependency-tracking', 'parallel-execution', 'milestone-planning'],\n      optimizer: ['bottleneck-identification', 'caching-strategies', 'lazy-loading'],\n    };\n    return patterns[type] || ['adaptive-learning'];\n  }\n\n  generateMockWeights() {\n    // Generate mock neural network weights for demonstration\n    return {\n      layers: [\n        { neurons: 128, weights: Array(128).fill(0).map(() => Math.random() - 0.5) },\n        { neurons: 64, weights: Array(64).fill(0).map(() => Math.random() - 0.5) },\n        { neurons: 32, weights: Array(32).fill(0).map(() => Math.random() - 0.5) },\n      ],\n      biases: Array(224).fill(0).map(() => Math.random() - 0.5),\n    };\n  }\n\n  optimizeAgentAllocation(_taskId) {\n    // Simple load balancing algorithm\n    const agents = Array.from(this.sessionData.agents.values());\n    const allocation = {};\n\n    agents.forEach(agent => {\n      // Allocate based on agent type and current load\n      const load = this.sessionData.operations.filter(op =>\n        op.agent === agent.id &&\n                Date.now() - op.timestamp < 60000,\n      ).length;\n\n      allocation[agent.id] = {\n        agent: agent.id,\n        type: agent.type,\n        currentLoad: load,\n        capacity: Math.max(0, 10 - load), // Max 10 concurrent ops\n        priority: load < 5 ? 'high' : 'normal',\n      };\n    });\n\n    return allocation;\n  }\n\n  calculateParallelization(_taskId) {\n    // Determine parallelization factor based on task and resources\n    const agentCount = this.sessionData.agents.size;\n    const complexity = this.sessionData.taskComplexity || { score: 2 };\n\n    return {\n      factor: Math.min(agentCount, Math.ceil(complexity.score * 1.5)),\n      strategy: agentCount > 3 ? 'distributed' : 'local',\n      maxConcurrency: Math.min(agentCount * 2, 10),\n    };\n  }\n\n  getFileType(filePath) {\n    const ext = path.extname(filePath);\n    const typeMap = {\n      '.js': 'javascript',\n      '.ts': 'typescript',\n      '.py': 'python',\n      '.go': 'golang',\n      '.rs': 'rust',\n      '.json': 'config',\n      '.yaml': 'config',\n      '.yml': 'config',\n      '.md': 'documentation',\n      '.txt': 'text',\n    };\n    return typeMap[ext] || 'unknown';\n  }\n\n  getCurrentAgent() {\n    // Get the most recently active agent\n    const recentOps = this.sessionData.operations.slice(-10);\n    const agentCounts = {};\n\n    recentOps.forEach(op => {\n      if (op.agent) {\n        agentCounts[op.agent] = (agentCounts[op.agent] || 0) + 1;\n      }\n    });\n\n    const sorted = Object.entries(agentCounts).sort((a, b) => b[1] - a[1]);\n    return sorted.length > 0 ? sorted[0][0] : 'coordinator';\n  }\n\n  async findRelatedFiles(filePath) {\n    const related = [];\n    const _baseName = path.basename(filePath, path.extname(filePath));\n    // const dirName = path.dirname(filePath);\n\n    // Common related file patterns\n    // const patterns = [\n    //   `${baseName}.test.*`, // Test files\n    //   `${baseName}.spec.*`, // Spec files\n    //   `test-${baseName}.*`, // Alternative test pattern\n    //   `${baseName}.d.ts`, // TypeScript definitions\n    //   `${baseName}.types.*`, // Type definitions\n    // ];\n\n    // For now, return mock related files\n    // In production, would use file system search\n    if (filePath.endsWith('.js')) {\n      related.push(filePath.replace('.js', '.test.js'));\n    }\n    if (filePath.endsWith('.ts')) {\n      related.push(filePath.replace('.ts', '.test.ts'));\n      related.push(filePath.replace('.ts', '.d.ts'));\n    }\n\n    return related.filter(f => f !== filePath);\n  }\n}\n\n// Export singleton instance and its methods\nconst hooksInstance = new RuvSwarmHooks();\n\nexport const handleHook = (hookType, options) => hooksInstance.handleHook(hookType, options);\n\nexport default hooksInstance;"],"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","ignoreList":[]}