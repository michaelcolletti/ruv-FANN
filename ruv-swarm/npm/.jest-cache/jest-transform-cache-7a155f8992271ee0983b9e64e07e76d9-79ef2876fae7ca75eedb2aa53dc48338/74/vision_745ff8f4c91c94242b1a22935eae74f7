a09f59379eb87a13e92f97387cfbe29d
/* istanbul ignore next */
function cov_19cm7q4lps() {
  var path = "/workspaces/ruv-FANN/ruv-swarm/npm/src/neural-models/presets/vision.js";
  var hash = "b5ed4226b61218f9fa98ce400c6e54b7c29311b7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/ruv-FANN/ruv-swarm/npm/src/neural-models/presets/vision.js",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 29
        },
        end: {
          line: 376,
          column: 1
        }
      },
      "1": {
        start: {
          line: 379,
          column: 31
        },
        end: {
          line: 384,
          column: 1
        }
      },
      "2": {
        start: {
          line: 380,
          column: 2
        },
        end: {
          line: 382,
          column: 3
        }
      },
      "3": {
        start: {
          line: 381,
          column: 4
        },
        end: {
          line: 381,
          column: 124
        }
      },
      "4": {
        start: {
          line: 383,
          column: 2
        },
        end: {
          line: 383,
          column: 35
        }
      },
      "5": {
        start: {
          line: 387,
          column: 38
        },
        end: {
          line: 387,
          column: 64
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 379,
            column: 31
          },
          end: {
            line: 379,
            column: 32
          }
        },
        loc: {
          start: {
            line: 379,
            column: 47
          },
          end: {
            line: 384,
            column: 1
          }
        },
        line: 379
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 380,
            column: 2
          },
          end: {
            line: 382,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 380,
            column: 2
          },
          end: {
            line: 382,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 380
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b5ed4226b61218f9fa98ce400c6e54b7c29311b7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_19cm7q4lps = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_19cm7q4lps();
/**
 * Computer Vision Neural Network Presets
 * Production-ready configurations for image and video processing tasks
 */

export const visionPresets =
/* istanbul ignore next */
(cov_19cm7q4lps().s[0]++, {
  // Real-time Object Detection
  object_detection_realtime: {
    name: 'Real-time Object Detector',
    description: 'Optimized for real-time object detection in video streams',
    model: 'cnn',
    config: {
      inputShape: [416, 416, 3],
      architecture: 'yolo_v5',
      convLayers: [{
        filters: 32,
        kernelSize: 3,
        stride: 1,
        activation: 'mish'
      }, {
        filters: 64,
        kernelSize: 3,
        stride: 2,
        activation: 'mish'
      }, {
        filters: 128,
        kernelSize: 3,
        stride: 1,
        activation: 'mish'
      }, {
        filters: 256,
        kernelSize: 3,
        stride: 2,
        activation: 'mish'
      }],
      anchors: [[10, 13], [16, 30], [33, 23], [30, 61], [62, 45], [59, 119], [116, 90], [156, 198], [373, 326]],
      numClasses: 80,
      dropoutRate: 0.2
    },
    training: {
      batchSize: 16,
      learningRate: 1e-3,
      epochs: 100,
      optimizer: 'sgd',
      momentum: 0.9,
      augmentation: {
        rotation: 15,
        zoom: 0.2,
        flip: true,
        colorJitter: 0.2
      }
    },
    performance: {
      expectedAccuracy: '85-88% mAP',
      inferenceTime: '8ms (30+ FPS)',
      memoryUsage: '150MB',
      trainingTime: '24-48 hours on GPU'
    },
    useCase: 'Security cameras, autonomous vehicles, robotics'
  },
  // Facial Recognition
  facial_recognition_secure: {
    name: 'Secure Facial Recognition',
    description: 'High-accuracy facial recognition with privacy features',
    model: 'resnet',
    config: {
      inputShape: [160, 160, 3],
      architecture: 'facenet',
      numBlocks: 8,
      blockDepth: 3,
      hiddenDimensions: 512,
      initialChannels: 64,
      embeddingSize: 128,
      useArcFaceLoss: true
    },
    training: {
      batchSize: 128,
      learningRate: 5e-4,
      epochs: 200,
      optimizer: 'adam',
      scheduler: 'cosine',
      margin: 0.5,
      scale: 30
    },
    performance: {
      expectedAccuracy: '99.2% on LFW',
      inferenceTime: '5ms',
      memoryUsage: '200MB',
      trainingTime: '3-5 days on GPU'
    },
    useCase: 'Access control, identity verification, secure authentication'
  },
  // Medical Image Analysis
  medical_imaging_analysis: {
    name: 'Medical Image Analyzer',
    description: 'Analyze medical images for diagnosis support',
    model: 'cnn',
    config: {
      inputShape: [512, 512, 1],
      // Grayscale medical images
      architecture: 'unet_3d',
      convLayers: [{
        filters: 64,
        kernelSize: 3,
        stride: 1,
        activation: 'relu',
        batchNorm: true
      }, {
        filters: 128,
        kernelSize: 3,
        stride: 1,
        activation: 'relu',
        batchNorm: true
      }, {
        filters: 256,
        kernelSize: 3,
        stride: 1,
        activation: 'relu',
        batchNorm: true
      }, {
        filters: 512,
        kernelSize: 3,
        stride: 1,
        activation: 'relu',
        batchNorm: true
      }],
      skipConnections: true,
      attentionGates: true,
      dropoutRate: 0.3
    },
    training: {
      batchSize: 8,
      learningRate: 1e-4,
      epochs: 150,
      optimizer: 'adamw',
      lossFunction: 'dice_bce',
      classWeights: 'auto',
      augmentation: {
        rotation: 20,
        elasticDeformation: true,
        intensityShift: 0.1
      }
    },
    performance: {
      expectedAccuracy: '93-95% Dice Score',
      inferenceTime: '200ms',
      memoryUsage: '2GB',
      trainingTime: '48-72 hours on GPU'
    },
    useCase: 'Tumor detection, organ segmentation, disease classification'
  },
  // Autonomous Driving
  autonomous_driving: {
    name: 'Autonomous Driving Vision',
    description: 'Multi-task vision for autonomous vehicles',
    model: 'cnn',
    config: {
      inputShape: [640, 480, 3],
      architecture: 'multitask_network',
      backboneNetwork: 'efficientnet_b4',
      tasks: {
        segmentation: {
          numClasses: 19
        },
        detection: {
          numClasses: 10
        },
        depthEstimation: {
          outputChannels: 1
        },
        laneDetection: {
          numLanes: 4
        }
      },
      featurePyramid: true,
      dropoutRate: 0.2
    },
    training: {
      batchSize: 4,
      learningRate: 2e-4,
      epochs: 80,
      optimizer: 'adam',
      multiTaskWeights: {
        segmentation: 1.0,
        detection: 1.0,
        depth: 0.5,
        lanes: 0.8
      },
      mixedPrecision: true
    },
    performance: {
      expectedAccuracy: '88-91% mIoU',
      inferenceTime: '25ms',
      memoryUsage: '500MB',
      trainingTime: '5-7 days on multi-GPU'
    },
    useCase: 'Self-driving cars, ADAS systems, robotics navigation'
  },
  // Quality Inspection
  quality_inspection: {
    name: 'Industrial Quality Inspector',
    description: 'Detect defects in manufacturing',
    model: 'cnn',
    config: {
      inputShape: [224, 224, 3],
      architecture: 'siamese_network',
      backbone: 'resnet50',
      metricLearning: true,
      embeddingDimension: 256,
      anomalyThreshold: 0.85,
      dropoutRate: 0.3
    },
    training: {
      batchSize: 32,
      learningRate: 1e-3,
      epochs: 100,
      optimizer: 'adam',
      contrastiveLoss: true,
      hardNegativeMining: true,
      augmentation: {
        rotation: 360,
        brightness: 0.3,
        contrast: 0.3,
        noise: 0.05
      }
    },
    performance: {
      expectedAccuracy: '96-98% defect detection',
      inferenceTime: '10ms',
      memoryUsage: '300MB',
      trainingTime: '12-24 hours on GPU'
    },
    useCase: 'Manufacturing QC, PCB inspection, surface defect detection'
  },
  // Satellite Image Analysis
  satellite_image_analysis: {
    name: 'Satellite Image Analyzer',
    description: 'Analyze satellite imagery for various applications',
    model: 'cnn',
    config: {
      inputShape: [512, 512, 8],
      // Multispectral channels
      architecture: 'deeplab_v3_plus',
      backbone: 'xception',
      outputStride: 16,
      numClasses: 15,
      asppDilationRates: [6, 12, 18],
      dropoutRate: 0.3
    },
    training: {
      batchSize: 8,
      learningRate: 5e-4,
      epochs: 120,
      optimizer: 'sgd',
      momentum: 0.9,
      polynomialDecay: true,
      augmentation: {
        randomCrop: 448,
        horizontalFlip: true,
        verticalFlip: true,
        gaussianNoise: 0.01
      }
    },
    performance: {
      expectedAccuracy: '89-92% pixel accuracy',
      inferenceTime: '150ms',
      memoryUsage: '1.5GB',
      trainingTime: '36-48 hours on GPU'
    },
    useCase: 'Land use classification, change detection, disaster response'
  },
  // Document Scanner
  document_scanner: {
    name: 'Document Scanner and OCR',
    description: 'Scan and extract text from documents',
    model: 'cnn',
    config: {
      inputShape: [768, 1024, 3],
      architecture: 'crnn',
      cnnBackbone: 'mobilenet_v3',
      rnnHiddenSize: 256,
      rnnLayers: 2,
      vocabSize: 95,
      // Printable ASCII
      ctcBeamWidth: 100,
      dropoutRate: 0.3
    },
    training: {
      batchSize: 16,
      learningRate: 1e-3,
      epochs: 50,
      optimizer: 'adam',
      ctcLoss: true,
      augmentation: {
        perspective: true,
        rotation: 5,
        shear: 0.2,
        blur: 0.5
      }
    },
    performance: {
      expectedAccuracy: '98-99% character accuracy',
      inferenceTime: '50ms',
      memoryUsage: '400MB',
      trainingTime: '24-36 hours on GPU'
    },
    useCase: 'Document digitization, receipt scanning, form processing'
  },
  // Video Action Recognition
  video_action_recognition: {
    name: 'Video Action Recognizer',
    description: 'Recognize human actions in video sequences',
    model: 'cnn',
    config: {
      inputShape: [16, 224, 224, 3],
      // 16 frames
      architecture: 'i3d',
      inflatedKernels: true,
      temporalKernelSize: 3,
      numClasses: 400,
      includeOpticalFlow: false,
      dropoutRate: 0.5
    },
    training: {
      batchSize: 8,
      learningRate: 1e-3,
      epochs: 80,
      optimizer: 'sgd',
      momentum: 0.9,
      clipGradientNorm: 40,
      augmentation: {
        temporalJitter: 4,
        spatialCrop: 'random',
        colorJitter: 0.2
      }
    },
    performance: {
      expectedAccuracy: '82-85% top-1',
      inferenceTime: '100ms per clip',
      memoryUsage: '800MB',
      trainingTime: '3-5 days on GPU'
    },
    useCase: 'Sports analysis, surveillance, human-computer interaction'
  },
  // Image Enhancement
  image_enhancement: {
    name: 'AI Image Enhancer',
    description: 'Enhance image quality and resolution',
    model: 'autoencoder',
    config: {
      inputSize: 65536,
      // 256x256
      encoderLayers: [32768, 16384, 8192, 4096],
      bottleneckSize: 2048,
      decoderLayers: [4096, 8192, 16384, 32768],
      skipConnections: true,
      residualLearning: true,
      perceptualLoss: true,
      activation: 'prelu'
    },
    training: {
      batchSize: 16,
      learningRate: 2e-4,
      epochs: 200,
      optimizer: 'adam',
      lossWeights: {
        reconstruction: 1.0,
        perceptual: 0.1,
        adversarial: 0.001
      },
      scheduler: 'reduceLROnPlateau'
    },
    performance: {
      expectedAccuracy: '32-35 PSNR',
      inferenceTime: '80ms',
      memoryUsage: '600MB',
      trainingTime: '48-72 hours on GPU'
    },
    useCase: 'Photo restoration, super-resolution, denoising'
  },
  // Style Transfer
  style_transfer: {
    name: 'Neural Style Transfer',
    description: 'Apply artistic styles to images',
    model: 'cnn',
    config: {
      inputShape: [512, 512, 3],
      architecture: 'style_transfer_net',
      encoderBackbone: 'vgg19',
      decoderDepth: 5,
      instanceNormalization: true,
      styleEmbeddingSize: 256,
      numStyles: 10,
      dropoutRate: 0.0
    },
    training: {
      batchSize: 8,
      learningRate: 1e-3,
      epochs: 40,
      optimizer: 'adam',
      contentWeight: 1.0,
      styleWeight: 100000,
      tvWeight: 1e-6,
      useMultipleStyleLayers: true
    },
    performance: {
      expectedAccuracy: 'Subjective quality',
      inferenceTime: '100ms',
      memoryUsage: '500MB',
      trainingTime: '12-24 hours on GPU'
    },
    useCase: 'Artistic applications, photo filters, content creation'
  }
});

// Export utility function to get preset by name
/* istanbul ignore next */
cov_19cm7q4lps().s[1]++;
export const getVisionPreset = presetName => {
  /* istanbul ignore next */
  cov_19cm7q4lps().f[0]++;
  cov_19cm7q4lps().s[2]++;
  if (!visionPresets[presetName]) {
    /* istanbul ignore next */
    cov_19cm7q4lps().b[0][0]++;
    cov_19cm7q4lps().s[3]++;
    throw new Error(`Vision preset '${presetName}' not found. Available presets: ${Object.keys(visionPresets).join(', ')}`);
  } else
  /* istanbul ignore next */
  {
    cov_19cm7q4lps().b[0][1]++;
  }
  cov_19cm7q4lps().s[4]++;
  return visionPresets[presetName];
};

// Export list of available presets
export const availableVisionPresets =
/* istanbul ignore next */
(cov_19cm7q4lps().s[5]++, Object.keys(visionPresets));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,