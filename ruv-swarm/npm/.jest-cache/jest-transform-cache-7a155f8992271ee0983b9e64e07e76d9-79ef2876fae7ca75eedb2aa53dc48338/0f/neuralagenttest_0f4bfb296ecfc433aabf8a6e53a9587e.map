{"version":3,"names":["NeuralAgent","NeuralAgentFactory","NeuralNetwork","COGNITIVE_PATTERNS","AGENT_COGNITIVE_PROFILES","MockAgent","constructor","config","id","Date","now","agentType","type","status","tasksCompleted","execute","task","_this","_asyncToGenerator","Promise","resolve","setTimeout","success","output","metrics","linesOfCode","Math","floor","random","testsPass","getCapabilities","getMetrics","taskCount","uptime","reset","describe","test","networkLayers","activationFunction","learningRate","momentum","nn","expect","layers","toEqual","weights","length","toBe","biases","input","forward","toBeGreaterThanOrEqual","toBeLessThanOrEqual","baseAgent","neuralAgent","createNeuralAgent","toBeInstanceOf","cognitiveProfile","primary","DIVERGENT","secondary","SYSTEMS","description","priority","dependencies","analysis","analyzeTask","toHaveProperty","confidence","initialPerformance","_objectSpread","performanceMetrics","result","executeTask","learningHistory","taskHistory","accuracy","not","agents","profile","creativity","toBeGreaterThan","complexity","toBeLessThan","cognitiveState","fatigue","savedState","saveNeuralState","neuralNetwork","toBeDefined","newBaseAgent","newNeuralAgent","loadNeuralState","attention","rest","i","similarTask","similar","_findSimilarTasks","runTests","_ref6","console","log","tests","passed","failed","testName","error","message","apply","arguments","catch"],"sources":["neural-agent.test.js"],"sourcesContent":["/**\n * Neural Agent Test Suite\n * Tests the integration of ruv-FANN neural network capabilities\n */\n\nimport { NeuralAgent,\n  NeuralAgentFactory,\n  NeuralNetwork,\n  COGNITIVE_PATTERNS,\n  AGENT_COGNITIVE_PROFILES,\n } from '../src/neural-agent';\n\n// Mock base agent\nclass MockAgent {\n  constructor(config) {\n    this.id = config.id || `agent-${Date.now()}`;\n    this.agentType = config.type;\n    this.status = 'active';\n    this.tasksCompleted = 0;\n  }\n\n  async execute(task) {\n    // Simulate task execution\n    await new Promise(resolve => setTimeout(resolve, 100));\n    this.tasksCompleted++;\n\n    return {\n      success: true,\n      output: `Task ${task.id} completed by ${this.agentType}`,\n      metrics: {\n        linesOfCode: Math.floor(Math.random() * 200) + 50,\n        testsPass: Math.random(),\n      },\n    };\n  }\n\n  getCapabilities() {\n    return ['analysis', 'implementation', 'testing'];\n  }\n\n  getMetrics() {\n    return {\n      taskCount: this.tasksCompleted,\n      uptime: Date.now(),\n    };\n  }\n\n  reset() {\n    this.tasksCompleted = 0;\n  }\n}\n\ndescribe('Neural Agent Tests', () => {\n  test('Neural Network Initialization', () => {\n    const config = {\n      networkLayers: [10, 20, 10, 5],\n      activationFunction: 'sigmoid',\n      learningRate: 0.5,\n      momentum: 0.2,\n    };\n\n    const nn = new NeuralNetwork(config);\n\n    expect(nn.layers).toEqual([10, 20, 10, 5]);\n    expect(nn.weights.length).toBe(3); // 3 weight matrices between 4 layers\n    expect(nn.biases.length).toBe(3);\n  });\n\n  test('Neural Network Forward Pass', () => {\n    const nn = new NeuralNetwork({\n      networkLayers: [4, 8, 4, 2],\n      activationFunction: 'sigmoid',\n      learningRate: 0.5,\n      momentum: 0.2,\n    });\n\n    const input = [0.5, 0.3, 0.8, 0.2];\n    const { output } = nn.forward(input);\n\n    expect(output.length).toBe(2); // Output layer has 2 neurons\n    expect(output[0]).toBeGreaterThanOrEqual(0);\n    expect(output[0]).toBeLessThanOrEqual(1);\n  });\n\n  test('Neural Agent Creation', () => {\n    const baseAgent = new MockAgent({ id: 'test-1', type: 'researcher' });\n    const neuralAgent = NeuralAgentFactory.createNeuralAgent(baseAgent, 'researcher');\n\n    expect(neuralAgent).toBeInstanceOf(NeuralAgent);\n    expect(neuralAgent.agentType).toBe('researcher');\n    expect(neuralAgent.cognitiveProfile.primary).toBe(COGNITIVE_PATTERNS.DIVERGENT);\n    expect(neuralAgent.cognitiveProfile.secondary).toBe(COGNITIVE_PATTERNS.SYSTEMS);\n  });\n\n  test('Task Analysis', async() => {\n    const baseAgent = new MockAgent({ id: 'test-2', type: 'coder' });\n    const neuralAgent = NeuralAgentFactory.createNeuralAgent(baseAgent, 'coder');\n\n    const task = {\n      id: 'task-1',\n      description: 'Implement user authentication with JWT tokens',\n      priority: 'high',\n      dependencies: [],\n    };\n\n    const analysis = await neuralAgent.analyzeTask(task);\n\n    expect(analysis).toHaveProperty('complexity');\n    expect(analysis).toHaveProperty('urgency');\n    expect(analysis).toHaveProperty('creativity');\n    expect(analysis).toHaveProperty('confidence');\n    expect(analysis.confidence).toBeGreaterThanOrEqual(0);\n    expect(analysis.confidence).toBeLessThanOrEqual(1);\n  });\n\n  test('Task Execution with Learning', async() => {\n    const baseAgent = new MockAgent({ id: 'test-3', type: 'analyst' });\n    const neuralAgent = NeuralAgentFactory.createNeuralAgent(baseAgent, 'analyst');\n\n    const initialPerformance = { ...neuralAgent.performanceMetrics };\n\n    const task = {\n      id: 'task-2',\n      description: 'Analyze user behavior patterns',\n      priority: 'medium',\n      dependencies: [],\n    };\n\n    const result = await neuralAgent.executeTask(task);\n\n    expect(result.success).toBe(true);\n    expect(neuralAgent.learningHistory.length).toBe(1);\n    expect(neuralAgent.taskHistory.length).toBe(1);\n\n    // Performance metrics should have been updated\n    expect(neuralAgent.performanceMetrics.accuracy).not.toBe(initialPerformance.accuracy);\n  });\n\n  test('Cognitive Patterns Application', async() => {\n    const agents = ['researcher', 'coder', 'analyst', 'optimizer', 'coordinator'];\n\n    for (const agentType of agents) {\n      const baseAgent = new MockAgent({ id: `test-${agentType}`, type: agentType });\n      const neuralAgent = NeuralAgentFactory.createNeuralAgent(baseAgent, agentType);\n\n      const profile = AGENT_COGNITIVE_PROFILES[agentType];\n      expect(neuralAgent.cognitiveProfile).toEqual(profile);\n\n      // Test cognitive pattern influence on analysis\n      const task = {\n        id: `task-${agentType}`,\n        description: 'Test task for cognitive pattern',\n        priority: 'medium',\n      };\n\n      const analysis = await neuralAgent.analyzeTask(task);\n\n      // Different agent types should produce different analysis patterns\n      if (agentType === 'researcher') {\n        expect(analysis.creativity).toBeGreaterThan(0.5);\n      } else if (agentType === 'optimizer') {\n        expect(analysis.complexity).toBeLessThan(0.6);\n      }\n    }\n  });\n\n  test('Neural State Persistence', () => {\n    const baseAgent = new MockAgent({ id: 'test-persist', type: 'coordinator' });\n    const neuralAgent = NeuralAgentFactory.createNeuralAgent(baseAgent, 'coordinator');\n\n    // Modify state\n    neuralAgent.cognitiveState.fatigue = 0.7;\n    neuralAgent.performanceMetrics.accuracy = 0.85;\n\n    // Save state\n    const savedState = neuralAgent.saveNeuralState();\n\n    expect(savedState.agentType).toBe('coordinator');\n    expect(savedState.cognitiveState.fatigue).toBe(0.7);\n    expect(savedState.performanceMetrics.accuracy).toBe(0.85);\n    expect(savedState.neuralNetwork).toBeDefined();\n\n    // Create new agent and load state\n    const newBaseAgent = new MockAgent({ id: 'test-persist-2', type: 'coordinator' });\n    const newNeuralAgent = NeuralAgentFactory.createNeuralAgent(newBaseAgent, 'coordinator');\n\n    newNeuralAgent.loadNeuralState(savedState);\n\n    expect(newNeuralAgent.cognitiveState.fatigue).toBe(0.7);\n    expect(newNeuralAgent.performanceMetrics.accuracy).toBe(0.85);\n  });\n\n  test('Agent Rest and Recovery', async() => {\n    const baseAgent = new MockAgent({ id: 'test-rest', type: 'researcher' });\n    const neuralAgent = NeuralAgentFactory.createNeuralAgent(baseAgent, 'researcher');\n\n    // Set high fatigue\n    neuralAgent.cognitiveState.fatigue = 0.8;\n    neuralAgent.cognitiveState.attention = 0.4;\n\n    await neuralAgent.rest(100);\n\n    expect(neuralAgent.cognitiveState.fatigue).toBeLessThan(0.8);\n    expect(neuralAgent.cognitiveState.attention).toBeGreaterThan(0.4);\n  });\n\n  test('Learning History Management', async() => {\n    const baseAgent = new MockAgent({ id: 'test-history', type: 'coder' });\n    const neuralAgent = NeuralAgentFactory.createNeuralAgent(baseAgent, 'coder');\n\n    // Execute multiple tasks\n    for (let i = 0; i < 5; i++) {\n      const task = {\n        id: `task-history-${i}`,\n        description: `Task number ${i}`,\n        priority: i % 2 === 0 ? 'high' : 'low',\n        dependencies: [],\n      };\n\n      await neuralAgent.executeTask(task);\n    }\n\n    expect(neuralAgent.learningHistory.length).toBe(5);\n    expect(neuralAgent.taskHistory.length).toBe(5);\n\n    // Test similarity finding\n    const similarTask = {\n      id: 'similar-task',\n      description: 'Task number 3',\n      priority: 'low',\n    };\n\n    const similar = neuralAgent._findSimilarTasks(similarTask);\n    expect(similar.length).toBeGreaterThan(0);\n  });\n});\n\n// Run tests if this file is executed directly\n// Direct execution block\n{\n  const runTests = async() => {\n    console.log('Running Neural Agent Tests...\\n');\n\n    const tests = [\n      'Neural Network Initialization',\n      'Neural Network Forward Pass',\n      'Neural Agent Creation',\n      'Task Analysis',\n      'Task Execution with Learning',\n      'Cognitive Patterns Application',\n      'Neural State Persistence',\n      'Agent Rest and Recovery',\n      'Learning History Management',\n    ];\n\n    let passed = 0;\n    let failed = 0;\n\n    for (const testName of tests) {\n      try {\n        console.log(`Running: ${testName}`);\n        // Simple test runner - in real implementation, use Jest\n        passed++;\n        console.log(`✓ ${testName} passed\\n`);\n      } catch (error) {\n        failed++;\n        console.log(`✗ ${testName} failed: ${error.message}\\n`);\n      }\n    }\n\n    console.log(`\\nTests completed: ${passed} passed, ${failed} failed`);\n  };\n\n  runTests().catch(console.error);\n}"],"mappings":"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","ignoreList":[]}