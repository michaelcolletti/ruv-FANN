{"version":3,"names":["RuvSwarm","require","performanceCLI","fs","promises","path","spawn","PerformanceValidator","constructor","testResults","timestamp","Date","toISOString","tests","performance","simd","target","actual","passed","speed","loadTesting","memoryEfficiency","daaIntegration","coverage","lines","branches","functions","statements","recommendations","baselines","runComprehensiveValidation","_this","_asyncToGenerator","console","log","establishBaselines","validateSIMDPerformance","validateSpeedOptimizations","validateLoadTesting","validateMemoryEfficiency","validateDAAIntegration","validateCrossPlatform","generateValidationReport","_this2","startTime","now","ruvSwarm","initialize","enableNeuralNetworks","enableForecasting","loadingStrategy","singleAgentStart","swarm","createSwarm","topology","maxAgents","strategy","agent","type","execute","task","timeout","singleAgentTime","memUsage","process","memoryUsage","wasmStart","wasmSupport","detectSIMDSupport","wasmLoadTime","singleAgentExecution","baseMemoryUsage","heapUsed","simdSupport","toFixed","error","message","_this3","testResult","test","metrics","enableSIMD","noSIMDStart","swarmNoSIMD","i","noSIMDTime","ruvSwarmSIMD","simdStart","swarmSIMD","simdTime","improvement","duration","push","_this4","baselineTime","measureExecutionTime","optimizations","optimizedTime","speedup","_this5","agents","spawnPromises","name","spawnedAgents","Promise","all","taskPromises","map","totalTime","memoryMB","agentsSpawned","length","executionTime","avgTimePerAgent","_this6","memoryOptimization","initialMemory","peakMemory","memoryIncrease","memoryPerAgent","_this7","daaPath","daaExists","checkPathExists","Error","cargoTest","runCommand","mcpTest","testMCPIntegration","daaRepositoryExists","cargoTestsPassed","success","mcpIntegrationWorking","integrationPoints","_this8","platform","arch","nodeVersion","version","wasmCompatible","testWASMCompatibility","sqliteCompatible","testSQLiteCompatibility","nodeCompatible","checkNodeCompatibility","architecture","_this9","passedTests","filter","t","totalTests","successRate","report","_objectSpread","summary","failedTests","overallPassed","generateRecommendations","reportPath","writeFile","JSON","stringify","Object","entries","forEach","key","value","rec","config","enableOptimizations","start","tasks","access","command","resolve","cmd","args","split","stdio","output","stdout","on","data","toString","stderr","code","setTimeout","kill","mcp","undefined","PersistenceManager","pm","major","parseInt","slice","runValidation","_runValidation","apply","arguments","validator","results","exit","main","module","exports"],"sources":["comprehensive-performance-validation.test.js"],"sourcesContent":["\n\n/**\n * Comprehensive Performance Validation Framework\n * Tests all performance targets and validates DAA integration\n */\n\nconst { RuvSwarm } = require('../src/index-enhanced');\nconst { performanceCLI } = require('../src/performance');\nconst fs = require('fs').promises;\nconst path = require('path');\nconst { spawn } = require('child_process');\n\nclass PerformanceValidator {\n    constructor() {\n        this.testResults = {\n            timestamp: new Date().toISOString(),\n            tests: [],\n            performance: {\n                simd: { target: '6-10x', actual: null, passed: false },\n                speed: { target: '2.8-4.4x', actual: null, passed: false },\n                loadTesting: { target: '50+ agents', actual: null, passed: false },\n                memoryEfficiency: { target: '<500MB@50agents', actual: null, passed: false },\n                daaIntegration: { target: 'seamless', actual: null, passed: false }\n            },\n            coverage: {\n                lines: 0,\n                branches: 0,\n                functions: 0,\n                statements: 0\n            },\n            recommendations: []\n        };\n        this.baselines = {};\n    }\n\n    async runComprehensiveValidation() {\n        console.log('🚀 Starting Comprehensive Performance Validation\\n');\n        \n        // 1. Establish baselines\n        await this.establishBaselines();\n        \n        // 2. SIMD Performance Tests\n        await this.validateSIMDPerformance();\n        \n        // 3. Speed Optimization Tests\n        await this.validateSpeedOptimizations();\n        \n        // 4. Load Testing with 50+ Agents\n        await this.validateLoadTesting();\n        \n        // 5. Memory Efficiency Tests\n        await this.validateMemoryEfficiency();\n        \n        // 6. DAA Integration Tests\n        await this.validateDAAIntegration();\n        \n        // 7. Cross-Platform Compatibility\n        await this.validateCrossPlatform();\n        \n        // 8. Generate Comprehensive Report\n        await this.generateValidationReport();\n        \n        return this.testResults;\n    }\n\n    async establishBaselines() {\n        console.log('📊 Establishing Performance Baselines...');\n        \n        const startTime = Date.now();\n        \n        try {\n            // Initialize RuvSwarm for baseline measurements\n            const ruvSwarm = await RuvSwarm.initialize({\n                enableNeuralNetworks: true,\n                enableForecasting: true,\n                loadingStrategy: 'progressive'\n            });\n\n            // Baseline: Single agent task execution\n            const singleAgentStart = Date.now();\n            const swarm = await ruvSwarm.createSwarm({ \n                topology: 'mesh', \n                maxAgents: 1,\n                strategy: 'balanced'\n            });\n            const agent = await swarm.spawn({ type: 'coder' });\n            await agent.execute({ task: 'Simple arithmetic: 2+2', timeout: 5000 });\n            const singleAgentTime = Date.now() - singleAgentStart;\n\n            // Baseline: Memory usage\n            const memUsage = process.memoryUsage();\n\n            // Baseline: WASM loading time\n            const wasmStart = Date.now();\n            const wasmSupport = await ruvSwarm.detectSIMDSupport();\n            const wasmLoadTime = Date.now() - wasmStart;\n\n            this.baselines = {\n                singleAgentExecution: singleAgentTime,\n                baseMemoryUsage: memUsage.heapUsed,\n                wasmLoadTime: wasmLoadTime,\n                simdSupport: wasmSupport\n            };\n\n            console.log(`✅ Baselines established in ${Date.now() - startTime}ms`);\n            console.log(`   Single Agent: ${singleAgentTime}ms`);\n            console.log(`   Memory: ${(memUsage.heapUsed / 1024 / 1024).toFixed(1)}MB`);\n            console.log(`   WASM Load: ${wasmLoadTime}ms`);\n            console.log(`   SIMD Support: ${wasmSupport}\\n`);\n\n        } catch (error) {\n            console.error('❌ Failed to establish baselines:', error.message);\n            throw error;\n        }\n    }\n\n    async validateSIMDPerformance() {\n        console.log('⚡ Validating SIMD Performance (Target: 6-10x improvement)...');\n        \n        const testResult = {\n            test: 'SIMD Performance',\n            target: '6-10x improvement',\n            startTime: Date.now(),\n            passed: false,\n            metrics: {}\n        };\n\n        try {\n            const ruvSwarm = await RuvSwarm.initialize({\n                enableNeuralNetworks: true,\n                enableSIMD: false\n            });\n\n            // Test without SIMD\n            const noSIMDStart = Date.now();\n            const swarmNoSIMD = await ruvSwarm.createSwarm({ topology: 'mesh', maxAgents: 4 });\n            for (let i = 0; i < 4; i++) {\n                const agent = await swarmNoSIMD.spawn({ type: 'optimizer' });\n                await agent.execute({ \n                    task: 'Matrix multiplication: 100x100', \n                    timeout: 10000 \n                });\n            }\n            const noSIMDTime = Date.now() - noSIMDStart;\n\n            // Test with SIMD\n            const ruvSwarmSIMD = await RuvSwarm.initialize({\n                enableNeuralNetworks: true,\n                enableSIMD: true\n            });\n\n            const simdStart = Date.now();\n            const swarmSIMD = await ruvSwarmSIMD.createSwarm({ topology: 'mesh', maxAgents: 4 });\n            for (let i = 0; i < 4; i++) {\n                const agent = await swarmSIMD.spawn({ type: 'optimizer' });\n                await agent.execute({ \n                    task: 'Matrix multiplication: 100x100 (SIMD)', \n                    timeout: 10000 \n                });\n            }\n            const simdTime = Date.now() - simdStart;\n\n            const improvement = noSIMDTime / simdTime;\n            testResult.metrics = {\n                noSIMDTime,\n                simdTime,\n                improvement: improvement.toFixed(2) + 'x'\n            };\n\n            testResult.passed = improvement >= 6.0 && improvement <= 10.0;\n            this.testResults.performance.simd.actual = improvement.toFixed(2) + 'x';\n            this.testResults.performance.simd.passed = testResult.passed;\n\n            console.log(`   No SIMD: ${noSIMDTime}ms`);\n            console.log(`   With SIMD: ${simdTime}ms`);\n            console.log(`   Improvement: ${improvement.toFixed(2)}x`);\n            console.log(`   ${testResult.passed ? '✅ PASSED' : '❌ FAILED'} (Target: 6-10x)\\n`);\n\n        } catch (error) {\n            testResult.error = error.message;\n            console.error(`❌ SIMD test failed: ${error.message}\\n`);\n        }\n\n        testResult.duration = Date.now() - testResult.startTime;\n        this.testResults.tests.push(testResult);\n    }\n\n    async validateSpeedOptimizations() {\n        console.log('🏃 Validating Speed Optimizations (Target: 2.8-4.4x improvement)...');\n        \n        const testResult = {\n            test: 'Speed Optimizations',\n            target: '2.8-4.4x improvement',\n            startTime: Date.now(),\n            passed: false,\n            metrics: {}\n        };\n\n        try {\n            // Test baseline speed (conservative settings)\n            const baselineTime = await this.measureExecutionTime({\n                topology: 'star',\n                maxAgents: 1,\n                strategy: 'sequential',\n                optimizations: false\n            });\n\n            // Test optimized speed\n            const optimizedTime = await this.measureExecutionTime({\n                topology: 'mesh',\n                maxAgents: 6,\n                strategy: 'parallel',\n                optimizations: true\n            });\n\n            const speedup = baselineTime / optimizedTime;\n            testResult.metrics = {\n                baselineTime,\n                optimizedTime,\n                speedup: speedup.toFixed(2) + 'x'\n            };\n\n            testResult.passed = speedup >= 2.8 && speedup <= 4.4;\n            this.testResults.performance.speed.actual = speedup.toFixed(2) + 'x';\n            this.testResults.performance.speed.passed = testResult.passed;\n\n            console.log(`   Baseline: ${baselineTime}ms`);\n            console.log(`   Optimized: ${optimizedTime}ms`);\n            console.log(`   Speedup: ${speedup.toFixed(2)}x`);\n            console.log(`   ${testResult.passed ? '✅ PASSED' : '❌ FAILED'} (Target: 2.8-4.4x)\\n`);\n\n        } catch (error) {\n            testResult.error = error.message;\n            console.error(`❌ Speed optimization test failed: ${error.message}\\n`);\n        }\n\n        testResult.duration = Date.now() - testResult.startTime;\n        this.testResults.tests.push(testResult);\n    }\n\n    async validateLoadTesting() {\n        console.log('🔥 Validating Load Testing (Target: 50+ concurrent agents)...');\n        \n        const testResult = {\n            test: 'Load Testing',\n            target: '50+ concurrent agents',\n            startTime: Date.now(),\n            passed: false,\n            metrics: {}\n        };\n\n        try {\n            const ruvSwarm = await RuvSwarm.initialize({\n                enableNeuralNetworks: true,\n                enableForecasting: true,\n                loadingStrategy: 'progressive'\n            });\n\n            const swarm = await ruvSwarm.createSwarm({ \n                topology: 'hierarchical', \n                maxAgents: 60,\n                strategy: 'parallel'\n            });\n\n            const agents = [];\n            const startTime = Date.now();\n\n            // Spawn 55 agents in parallel\n            const spawnPromises = [];\n            for (let i = 0; i < 55; i++) {\n                spawnPromises.push(\n                    swarm.spawn({ \n                        type: i % 5 === 0 ? 'coordinator' : 'coder',\n                        name: `agent-${i}`\n                    })\n                );\n            }\n\n            const spawnedAgents = await Promise.all(spawnPromises);\n            agents.push(...spawnedAgents);\n\n            // Execute tasks concurrently\n            const taskPromises = agents.map((agent, i) => \n                agent.execute({\n                    task: `Task ${i}: Calculate fibonacci(20)`,\n                    timeout: 15000\n                })\n            );\n\n            await Promise.all(taskPromises);\n            const totalTime = Date.now() - startTime;\n\n            const memUsage = process.memoryUsage();\n            const memoryMB = memUsage.heapUsed / 1024 / 1024;\n\n            testResult.metrics = {\n                agentsSpawned: agents.length,\n                executionTime: totalTime,\n                memoryUsage: memoryMB.toFixed(1) + 'MB',\n                avgTimePerAgent: (totalTime / agents.length).toFixed(1) + 'ms'\n            };\n\n            testResult.passed = agents.length >= 50 && totalTime < 30000; // 30 second limit\n            this.testResults.performance.loadTesting.actual = `${agents.length} agents`;\n            this.testResults.performance.loadTesting.passed = testResult.passed;\n\n            console.log(`   Agents spawned: ${agents.length}`);\n            console.log(`   Total time: ${totalTime}ms`);\n            console.log(`   Memory usage: ${memoryMB.toFixed(1)}MB`);\n            console.log(`   Avg per agent: ${(totalTime / agents.length).toFixed(1)}ms`);\n            console.log(`   ${testResult.passed ? '✅ PASSED' : '❌ FAILED'} (Target: 50+ agents)\\n`);\n\n        } catch (error) {\n            testResult.error = error.message;\n            console.error(`❌ Load testing failed: ${error.message}\\n`);\n        }\n\n        testResult.duration = Date.now() - testResult.startTime;\n        this.testResults.tests.push(testResult);\n    }\n\n    async validateMemoryEfficiency() {\n        console.log('💾 Validating Memory Efficiency (Target: <500MB @ 50 agents)...');\n        \n        const testResult = {\n            test: 'Memory Efficiency',\n            target: '<500MB @ 50 agents',\n            startTime: Date.now(),\n            passed: false,\n            metrics: {}\n        };\n\n        try {\n            const ruvSwarm = await RuvSwarm.initialize({\n                enableNeuralNetworks: true,\n                memoryOptimization: true\n            });\n\n            const initialMemory = process.memoryUsage().heapUsed / 1024 / 1024;\n\n            const swarm = await ruvSwarm.createSwarm({ \n                topology: 'mesh', \n                maxAgents: 50,\n                strategy: 'balanced'\n            });\n\n            const agents = [];\n            for (let i = 0; i < 50; i++) {\n                const agent = await swarm.spawn({ type: 'coder' });\n                agents.push(agent);\n            }\n\n            const peakMemory = process.memoryUsage().heapUsed / 1024 / 1024;\n            const memoryIncrease = peakMemory - initialMemory;\n\n            testResult.metrics = {\n                initialMemory: initialMemory.toFixed(1) + 'MB',\n                peakMemory: peakMemory.toFixed(1) + 'MB',\n                memoryIncrease: memoryIncrease.toFixed(1) + 'MB',\n                memoryPerAgent: (memoryIncrease / 50).toFixed(1) + 'MB'\n            };\n\n            testResult.passed = peakMemory < 500;\n            this.testResults.performance.memoryEfficiency.actual = peakMemory.toFixed(1) + 'MB';\n            this.testResults.performance.memoryEfficiency.passed = testResult.passed;\n\n            console.log(`   Initial memory: ${initialMemory.toFixed(1)}MB`);\n            console.log(`   Peak memory: ${peakMemory.toFixed(1)}MB`);\n            console.log(`   Memory increase: ${memoryIncrease.toFixed(1)}MB`);\n            console.log(`   Per agent: ${(memoryIncrease / 50).toFixed(1)}MB`);\n            console.log(`   ${testResult.passed ? '✅ PASSED' : '❌ FAILED'} (Target: <500MB)\\n`);\n\n        } catch (error) {\n            testResult.error = error.message;\n            console.error(`❌ Memory efficiency test failed: ${error.message}\\n`);\n        }\n\n        testResult.duration = Date.now() - testResult.startTime;\n        this.testResults.tests.push(testResult);\n    }\n\n    async validateDAAIntegration() {\n        console.log('🔗 Validating DAA Integration (Target: seamless integration)...');\n        \n        const testResult = {\n            test: 'DAA Integration',\n            target: 'seamless integration',\n            startTime: Date.now(),\n            passed: false,\n            metrics: {}\n        };\n\n        try {\n            // Test DAA AI module integration\n            const daaPath = '/workspaces/ruv-FANN/daa-repository';\n            const daaExists = await this.checkPathExists(daaPath);\n\n            if (!daaExists) {\n                throw new Error('DAA repository not found');\n            }\n\n            // Test Rust integration\n            const cargoTest = await this.runCommand('cargo test --manifest-path /workspaces/ruv-FANN/daa-repository/Cargo.toml');\n            \n            // Test MCP integration\n            const mcpTest = await this.testMCPIntegration();\n\n            testResult.metrics = {\n                daaRepositoryExists: daaExists,\n                cargoTestsPassed: cargoTest.success,\n                mcpIntegrationWorking: mcpTest.success,\n                integrationPoints: ['AI module', 'MCP server', 'WASM bindings']\n            };\n\n            testResult.passed = daaExists && cargoTest.success && mcpTest.success;\n            this.testResults.performance.daaIntegration.actual = testResult.passed ? 'integrated' : 'partial';\n            this.testResults.performance.daaIntegration.passed = testResult.passed;\n\n            console.log(`   DAA Repository: ${daaExists ? '✅' : '❌'}`);\n            console.log(`   Cargo Tests: ${cargoTest.success ? '✅' : '❌'}`);\n            console.log(`   MCP Integration: ${mcpTest.success ? '✅' : '❌'}`);\n            console.log(`   ${testResult.passed ? '✅ PASSED' : '❌ FAILED'} (Target: seamless)\\n`);\n\n        } catch (error) {\n            testResult.error = error.message;\n            console.error(`❌ DAA integration test failed: ${error.message}\\n`);\n        }\n\n        testResult.duration = Date.now() - testResult.startTime;\n        this.testResults.tests.push(testResult);\n    }\n\n    async validateCrossPlatform() {\n        console.log('🌐 Validating Cross-Platform Compatibility...');\n        \n        const testResult = {\n            test: 'Cross-Platform Compatibility',\n            target: 'Linux, macOS, Windows support',\n            startTime: Date.now(),\n            passed: false,\n            metrics: {}\n        };\n\n        try {\n            const platform = process.platform;\n            const arch = process.arch;\n            const nodeVersion = process.version;\n\n            // Test WASM compatibility\n            const wasmCompatible = await this.testWASMCompatibility();\n            \n            // Test SQLite compatibility\n            const sqliteCompatible = await this.testSQLiteCompatibility();\n            \n            // Test Node.js version compatibility\n            const nodeCompatible = this.checkNodeCompatibility(nodeVersion);\n\n            testResult.metrics = {\n                platform,\n                architecture: arch,\n                nodeVersion,\n                wasmCompatible,\n                sqliteCompatible,\n                nodeCompatible\n            };\n\n            testResult.passed = wasmCompatible && sqliteCompatible && nodeCompatible;\n\n            console.log(`   Platform: ${platform} ${arch}`);\n            console.log(`   Node.js: ${nodeVersion} ${nodeCompatible ? '✅' : '❌'}`);\n            console.log(`   WASM: ${wasmCompatible ? '✅' : '❌'}`);\n            console.log(`   SQLite: ${sqliteCompatible ? '✅' : '❌'}`);\n            console.log(`   ${testResult.passed ? '✅ PASSED' : '❌ FAILED'}\\n`);\n\n        } catch (error) {\n            testResult.error = error.message;\n            console.error(`❌ Cross-platform test failed: ${error.message}\\n`);\n        }\n\n        testResult.duration = Date.now() - testResult.startTime;\n        this.testResults.tests.push(testResult);\n    }\n\n    async generateValidationReport() {\n        console.log('📄 Generating Comprehensive Validation Report...');\n\n        const passedTests = this.testResults.tests.filter(t => t.passed).length;\n        const totalTests = this.testResults.tests.length;\n        const successRate = ((passedTests / totalTests) * 100).toFixed(1);\n\n        const report = {\n            ...this.testResults,\n            summary: {\n                totalTests,\n                passedTests,\n                failedTests: totalTests - passedTests,\n                successRate: successRate + '%',\n                overallPassed: successRate >= 90\n            },\n            recommendations: this.generateRecommendations()\n        };\n\n        // Save detailed report\n        const reportPath = '/workspaces/ruv-FANN/ruv-swarm/npm/test/validation-report.json';\n        await fs.writeFile(reportPath, JSON.stringify(report, null, 2));\n\n        // Generate readable summary\n        console.log('\\n📊 VALIDATION SUMMARY');\n        console.log('=====================');\n        console.log(`Tests Passed: ${passedTests}/${totalTests} (${successRate}%)`);\n        console.log(`Overall Status: ${report.summary.overallPassed ? '✅ PASSED' : '❌ FAILED'}`);\n        \n        console.log('\\n🎯 Performance Targets:');\n        Object.entries(this.testResults.performance).forEach(([key, value]) => {\n            console.log(`   ${key}: ${value.actual || 'N/A'} ${value.passed ? '✅' : '❌'} (Target: ${value.target})`);\n        });\n\n        if (report.recommendations.length > 0) {\n            console.log('\\n💡 Recommendations:');\n            report.recommendations.forEach((rec, i) => {\n                console.log(`   ${i + 1}. ${rec}`);\n            });\n        }\n\n        console.log(`\\n📄 Detailed report saved to: ${reportPath}`);\n        \n        return report;\n    }\n\n    // Helper methods\n    async measureExecutionTime(config) {\n        const ruvSwarm = await RuvSwarm.initialize({\n            enableNeuralNetworks: true,\n            enableOptimizations: config.optimizations\n        });\n\n        const start = Date.now();\n        const swarm = await ruvSwarm.createSwarm(config);\n        \n        const agents = [];\n        for (let i = 0; i < config.maxAgents; i++) {\n            agents.push(await swarm.spawn({ type: 'coder' }));\n        }\n\n        const tasks = agents.map(agent => \n            agent.execute({ task: 'Calculate: sum(1..1000)', timeout: 10000 })\n        );\n\n        if (config.strategy === 'parallel') {\n            await Promise.all(tasks);\n        } else {\n            for (const task of tasks) {\n                await task;\n            }\n        }\n\n        return Date.now() - start;\n    }\n\n    async checkPathExists(path) {\n        try {\n            await fs.access(path);\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    async runCommand(command) {\n        return new Promise((resolve) => {\n            const [cmd, ...args] = command.split(' ');\n            const process = spawn(cmd, args, { stdio: 'pipe' });\n            \n            let output = '';\n            process.stdout.on('data', (data) => output += data.toString());\n            process.stderr.on('data', (data) => output += data.toString());\n            \n            process.on('close', (code) => {\n                resolve({ success: code === 0, output });\n            });\n\n            setTimeout(() => {\n                process.kill();\n                resolve({ success: false, output: 'Timeout' });\n            }, 30000);\n        });\n    }\n\n    async testMCPIntegration() {\n        try {\n            // Test basic MCP functionality\n            const { mcp } = require('../src/mcp-tools-enhanced');\n            return { success: true };\n        } catch {\n            return { success: false };\n        }\n    }\n\n    async testWASMCompatibility() {\n        try {\n            const ruvSwarm = await RuvSwarm.initialize();\n            return await ruvSwarm.detectSIMDSupport() !== undefined;\n        } catch {\n            return false;\n        }\n    }\n\n    async testSQLiteCompatibility() {\n        try {\n            const { PersistenceManager } = require('../src/persistence');\n            const pm = new PersistenceManager(':memory:');\n            await pm.initialize();\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    checkNodeCompatibility(version) {\n        const major = parseInt(version.slice(1).split('.')[0]);\n        return major >= 14; // Minimum Node.js 14\n    }\n\n    generateRecommendations() {\n        const recommendations = [];\n        \n        this.testResults.tests.forEach(test => {\n            if (!test.passed) {\n                switch (test.test) {\n                    case 'SIMD Performance':\n                        recommendations.push('Enable SIMD optimizations and verify WASM module compilation');\n                        break;\n                    case 'Speed Optimizations':\n                        recommendations.push('Review parallel execution strategy and agent coordination');\n                        break;\n                    case 'Load Testing':\n                        recommendations.push('Optimize memory usage and consider agent pooling');\n                        break;\n                    case 'Memory Efficiency':\n                        recommendations.push('Implement memory pooling and garbage collection tuning');\n                        break;\n                    case 'DAA Integration':\n                        recommendations.push('Verify DAA repository setup and MCP server configuration');\n                        break;\n                }\n            }\n        });\n\n        return recommendations;\n    }\n}\n\n// Main execution\nasync function runValidation() {\n    try {\n        const validator = new PerformanceValidator();\n        const results = await validator.runComprehensiveValidation();\n        \n        process.exit(results.summary.overallPassed ? 0 : 1);\n    } catch (error) {\n        console.error('💥 Validation failed:', error);\n        process.exit(1);\n    }\n}\n\nif (require.main === module) {\n    runValidation();\n}\n\nmodule.exports = { PerformanceValidator };"],"mappings":"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","ignoreList":[]}