{"version":3,"names":["NeuralAgent","NeuralAgentFactory","NeuralNetwork","COGNITIVE_PATTERNS","AGENT_COGNITIVE_PROFILES","assert","EventEmitter","require","MockAgent","constructor","id","type","status","capabilities","execute","task","_asyncToGenerator","success","result","metrics","linesOfCode","testsPass","describe","network","config","networkLayers","activationFunction","learningRate","momentum","beforeEach","it","deepStrictEqual","layers","strictEqual","weights","length","biases","previousWeightDeltas","nn","_objectSpread","_activation","derivative","input","forward","output","activations","forEach","val","target","train","Array","isArray","initialWeight","notStrictEqual","savedState","save","newNetwork","load","mockAgent","neuralAgent","agent","agentType","cognitiveProfile","neuralNetwork","cognitiveState","attention","fatigue","confidence","exploration","performanceMetrics","accuracy","speed","creativity","efficiency","description","priority","dependencies","analysis","analyzeTask","executeTask","done","once","event","performance","initialFatigue","learningHistory","vector","_taskToVector","executionTime","_calculatePerformance","overall","taskHistory","newTask","similar","_findSimilarTasks","includes","complexity","coderAgent","_applyCognitivePattern","collaborationNeeded","dataIntensity","rest","getStatus","neuralState","push","timestamp","Date","now","state","saveNeuralState","loadNeuralState","networkState","newPerformance","_updatePerformanceMetrics","createNeuralAgent","throws","profiles","getCognitiveProfiles","researcher","coder","analyst","optimizer","coordinator","patterns","getCognitivePatterns","Object","entries","profile","primary","secondary","validPatterns","values","main","module","console","log"],"sources":["neural-agent.test.js"],"sourcesContent":["/**\n * Unit tests for Neural Agent module\n */\n\nimport { NeuralAgent,\n  NeuralAgentFactory,\n  NeuralNetwork,\n  COGNITIVE_PATTERNS,\n  AGENT_COGNITIVE_PROFILES,\n } from '../../../src/neural-agent';\nimport assert from 'assert';\nconst EventEmitter = require('events');\n\n// Mock base agent for testing\nclass MockAgent {\n  constructor() {\n    this.id = 'mock-agent-123';\n    this.type = 'researcher';\n    this.status = 'idle';\n    this.capabilities = ['research', 'analysis'];\n  }\n\n  async execute(task) {\n    return {\n      success: true,\n      result: 'Mock execution result',\n      metrics: {\n        linesOfCode: 50,\n        testsPass: 0.9,\n      },\n    };\n  }\n}\n\ndescribe('NeuralNetwork Tests', () => {\n  let network;\n  const config = {\n    networkLayers: [4, 8, 4, 2],\n    activationFunction: 'sigmoid',\n    learningRate: 0.5,\n    momentum: 0.2,\n  };\n\n  beforeEach(() => {\n    network = new NeuralNetwork(config);\n  });\n\n  describe('Initialization', () => {\n    it('should initialize with correct configuration', () => {\n      assert.deepStrictEqual(network.layers, config.networkLayers);\n      assert.strictEqual(network.activationFunction, config.activationFunction);\n      assert.strictEqual(network.learningRate, config.learningRate);\n      assert.strictEqual(network.momentum, config.momentum);\n    });\n\n    it('should initialize weights and biases', () => {\n      assert.strictEqual(network.weights.length, 3); // 4 layers = 3 weight matrices\n      assert.strictEqual(network.biases.length, 3);\n      assert.strictEqual(network.previousWeightDeltas.length, 3);\n\n      // Check dimensions\n      assert.strictEqual(network.weights[0].length, 8); // 8 neurons in layer 2\n      assert.strictEqual(network.weights[0][0].length, 4); // 4 inputs from layer 1\n    });\n  });\n\n  describe('Activation Functions', () => {\n    it('should compute sigmoid activation', () => {\n      const nn = new NeuralNetwork({ ...config, activationFunction: 'sigmoid' });\n      const result = nn._activation(0);\n      assert.strictEqual(result, 0.5);\n\n      const derivative = nn._activation(0, true);\n      assert.strictEqual(derivative, 0.25);\n    });\n\n    it('should compute tanh activation', () => {\n      const nn = new NeuralNetwork({ ...config, activationFunction: 'tanh' });\n      const result = nn._activation(0);\n      assert.strictEqual(result, 0);\n\n      const derivative = nn._activation(0, true);\n      assert.strictEqual(derivative, 1);\n    });\n\n    it('should compute relu activation', () => {\n      const nn = new NeuralNetwork({ ...config, activationFunction: 'relu' });\n      assert.strictEqual(nn._activation(-1), 0);\n      assert.strictEqual(nn._activation(1), 1);\n\n      assert.strictEqual(nn._activation(-1, true), 0);\n      assert.strictEqual(nn._activation(1, true), 1);\n    });\n  });\n\n  describe('Forward Propagation', () => {\n    it('should perform forward propagation', () => {\n      const input = [0.5, 0.3, 0.2, 0.8];\n      const result = network.forward(input);\n\n      assert(result.output);\n      assert(result.activations);\n      assert.strictEqual(result.output.length, 2); // Final layer has 2 neurons\n      assert.strictEqual(result.activations.length, 4); // 4 layers total\n      assert.strictEqual(result.activations[0], input); // First activation is input\n    });\n\n    it('should handle different input sizes', () => {\n      const input = [1, 0, 0, 1];\n      const result = network.forward(input);\n      assert.strictEqual(result.output.length, 2);\n      result.output.forEach(val => {\n        assert(val >= 0 && val <= 1); // Sigmoid outputs\n      });\n    });\n  });\n\n  describe('Training', () => {\n    it('should train the network', () => {\n      const input = [0.5, 0.3, 0.2, 0.8];\n      const target = [0.7, 0.3];\n\n      const output = network.train(input, target);\n      assert(Array.isArray(output));\n      assert.strictEqual(output.length, target.length);\n    });\n\n    it('should use custom learning rate', () => {\n      const input = [0.5, 0.3, 0.2, 0.8];\n      const target = [0.7, 0.3];\n\n      const output = network.train(input, target, 0.1);\n      assert(Array.isArray(output));\n    });\n\n    it('should update weights during training', () => {\n      const input = [0.5, 0.3, 0.2, 0.8];\n      const target = [0.7, 0.3];\n\n      // Get initial weights\n      const initialWeight = network.weights[0][0][0];\n\n      // Train\n      network.train(input, target);\n\n      // Check weights changed\n      assert.notStrictEqual(network.weights[0][0][0], initialWeight);\n    });\n  });\n\n  describe('Save and Load', () => {\n    it('should save network state', () => {\n      const savedState = network.save();\n      assert(savedState.config);\n      assert(savedState.weights);\n      assert(savedState.biases);\n      assert.deepStrictEqual(savedState.config, config);\n    });\n\n    it('should load network state', () => {\n      const savedState = network.save();\n\n      // Create new network and load state\n      const newNetwork = new NeuralNetwork(config);\n      newNetwork.load(savedState);\n\n      assert.deepStrictEqual(newNetwork.weights, savedState.weights);\n      assert.deepStrictEqual(newNetwork.biases, savedState.biases);\n    });\n  });\n});\n\ndescribe('NeuralAgent Tests', () => {\n  let mockAgent, neuralAgent;\n\n  beforeEach(() => {\n    mockAgent = new MockAgent();\n    neuralAgent = new NeuralAgent(mockAgent, 'researcher');\n  });\n\n  describe('Initialization', () => {\n    it('should initialize with correct properties', () => {\n      assert.strictEqual(neuralAgent.agent, mockAgent);\n      assert.strictEqual(neuralAgent.agentType, 'researcher');\n      assert(neuralAgent.cognitiveProfile);\n      assert(neuralAgent.neuralNetwork instanceof NeuralNetwork);\n      assert(neuralAgent instanceof EventEmitter);\n    });\n\n    it('should initialize cognitive state', () => {\n      assert.deepStrictEqual(neuralAgent.cognitiveState, {\n        attention: 1.0,\n        fatigue: 0.0,\n        confidence: 0.5,\n        exploration: 0.5,\n      });\n    });\n\n    it('should initialize performance metrics', () => {\n      assert.deepStrictEqual(neuralAgent.performanceMetrics, {\n        accuracy: 0,\n        speed: 0,\n        creativity: 0,\n        efficiency: 0,\n      });\n    });\n  });\n\n  describe('Task Analysis', () => {\n    it('should analyze task', async() => {\n      const task = {\n        description: 'Analyze the data and create a report',\n        priority: 'high',\n        dependencies: ['data-collection'],\n      };\n\n      const analysis = await neuralAgent.analyzeTask(task);\n      assert(analysis);\n      assert('complexity' in analysis);\n      assert('urgency' in analysis);\n      assert('creativity' in analysis);\n      assert('dataIntensity' in analysis);\n      assert('collaborationNeeded' in analysis);\n      assert('confidence' in analysis);\n    });\n\n    it('should apply cognitive pattern to analysis', async() => {\n      const task = { description: 'Create innovative solution' };\n      const analysis = await neuralAgent.analyzeTask(task);\n\n      // Researcher has DIVERGENT primary pattern, should boost creativity\n      assert(analysis.creativity > 0);\n    });\n  });\n\n  describe('Task Execution', () => {\n    it('should execute task with neural enhancement', async() => {\n      const task = {\n        id: 'task-123',\n        description: 'Research new algorithms',\n        priority: 'medium',\n      };\n\n      const result = await neuralAgent.executeTask(task);\n      assert(result);\n      assert.strictEqual(result.success, true);\n    });\n\n    it('should emit taskCompleted event', (done) => {\n      const task = {\n        id: 'task-123',\n        description: 'Test task',\n        priority: 'low',\n      };\n\n      neuralAgent.once('taskCompleted', (event) => {\n        assert.deepStrictEqual(event.task, task);\n        assert(event.result);\n        assert(event.performance);\n        assert(event.cognitiveState);\n        done();\n      });\n\n      neuralAgent.executeTask(task);\n    });\n\n    it('should update cognitive state after execution', async() => {\n      const task = {\n        description: 'Complex research task',\n        priority: 'high',\n      };\n\n      const initialFatigue = neuralAgent.cognitiveState.fatigue;\n      await neuralAgent.executeTask(task);\n\n      // Fatigue should increase after complex task\n      assert(neuralAgent.cognitiveState.fatigue > initialFatigue);\n    });\n\n    it('should track learning history', async() => {\n      const task = {\n        id: 'task-123',\n        description: 'Learn from this task',\n      };\n\n      assert.strictEqual(neuralAgent.learningHistory.length, 0);\n      await neuralAgent.executeTask(task);\n      assert.strictEqual(neuralAgent.learningHistory.length, 1);\n    });\n  });\n\n  describe('Task Vector Conversion', () => {\n    it('should convert task to vector', () => {\n      const task = {\n        description: 'This is a Test Task with Numbers 123',\n        priority: 'high',\n        dependencies: ['task1', 'task2'],\n      };\n\n      const vector = neuralAgent._taskToVector(task);\n      assert(Array.isArray(vector));\n      assert.strictEqual(vector.length, neuralAgent.neuralNetwork.layers[0]);\n      vector.forEach(val => {\n        assert(typeof val === 'number');\n      });\n    });\n\n    it('should handle missing task properties', () => {\n      const task = {};\n      const vector = neuralAgent._taskToVector(task);\n      assert(Array.isArray(vector));\n      assert.strictEqual(vector.length, neuralAgent.neuralNetwork.layers[0]);\n    });\n  });\n\n  describe('Performance Calculation', () => {\n    it('should calculate performance metrics', () => {\n      const task = { id: 'task-123' };\n      const result = { success: true, metrics: { linesOfCode: 50, testsPass: 0.9 } };\n      const executionTime = 30000; // 30 seconds\n\n      const performance = neuralAgent._calculatePerformance(task, result, executionTime);\n      assert(performance);\n      assert(performance.speed > 0 && performance.speed <= 1);\n      assert.strictEqual(performance.accuracy, 0.9);\n      assert(performance.overall > 0 && performance.overall <= 1);\n    });\n\n    it('should handle failed tasks', () => {\n      const task = { id: 'task-123' };\n      const result = { success: false };\n      const executionTime = 5000;\n\n      const performance = neuralAgent._calculatePerformance(task, result, executionTime);\n      assert.strictEqual(performance.accuracy, 0.2);\n    });\n  });\n\n  describe('Similar Task Finding', () => {\n    beforeEach(() => {\n      // Add some task history\n      neuralAgent.taskHistory = [\n        {\n          task: { description: 'Research machine learning', priority: 'high' },\n          performance: { overall: 0.8 },\n        },\n        {\n          task: { description: 'Analyze data patterns', priority: 'medium' },\n          performance: { overall: 0.7 },\n        },\n        {\n          task: { description: 'Code review', priority: 'low' },\n          performance: { overall: 0.9 },\n        },\n      ];\n    });\n\n    it('should find similar tasks', () => {\n      const newTask = { description: 'Research deep learning', priority: 'high' };\n      const similar = neuralAgent._findSimilarTasks(newTask);\n\n      assert(similar.length > 0);\n      // Should find the machine learning task as most similar\n      assert(similar[0].task.description.includes('machine learning'));\n    });\n\n    it('should limit similar tasks returned', () => {\n      const newTask = { description: 'Generic task' };\n      const similar = neuralAgent._findSimilarTasks(newTask, 2);\n      assert(similar.length <= 2);\n    });\n\n    it('should handle empty history', () => {\n      neuralAgent.taskHistory = [];\n      const newTask = { description: 'New task' };\n      const similar = neuralAgent._findSimilarTasks(newTask);\n      assert.strictEqual(similar.length, 0);\n    });\n  });\n\n  describe('Cognitive Pattern Application', () => {\n    it('should apply convergent pattern', () => {\n      const analysis = {\n        complexity: 1.0,\n        confidence: 0.5,\n        creativity: 0.5,\n      };\n\n      const coderAgent = new NeuralAgent(mockAgent, 'coder'); // Has convergent primary\n      coderAgent._applyCognitivePattern(analysis);\n\n      assert(analysis.complexity < 1.0); // Should simplify\n      assert(analysis.confidence > 0.5); // Should increase confidence\n    });\n\n    it('should apply divergent pattern', () => {\n      const analysis = {\n        creativity: 0.5,\n        exploration: 0.5,\n      };\n\n      neuralAgent._applyCognitivePattern(analysis); // Researcher has divergent\n      assert(analysis.creativity > 0.5); // Should boost creativity\n    });\n\n    it('should apply secondary pattern', () => {\n      const analysis = {\n        collaborationNeeded: 0.5,\n        dataIntensity: 0.5,\n      };\n\n      // Researcher has systems as secondary\n      neuralAgent._applyCognitivePattern(analysis);\n      assert(analysis.collaborationNeeded > 0.5);\n    });\n  });\n\n  describe('Rest Functionality', () => {\n    it('should reduce fatigue when resting', async() => {\n      // Increase fatigue first\n      neuralAgent.cognitiveState.fatigue = 0.8;\n      neuralAgent.cognitiveState.attention = 0.4;\n\n      await neuralAgent.rest(100);\n\n      assert(neuralAgent.cognitiveState.fatigue < 0.8);\n      assert(neuralAgent.cognitiveState.attention > 0.4);\n    });\n  });\n\n  describe('Status and State Management', () => {\n    it('should get complete status', () => {\n      const status = neuralAgent.getStatus();\n      assert(status);\n      assert(status.neuralState);\n      assert(status.neuralState.cognitiveProfile);\n      assert(status.neuralState.cognitiveState);\n      assert(status.neuralState.performanceMetrics);\n    });\n\n    it('should save neural state', () => {\n      // Add some history\n      neuralAgent.learningHistory.push({\n        timestamp: Date.now(),\n        task: 'test',\n        performance: 0.8,\n      });\n\n      const state = neuralAgent.saveNeuralState();\n      assert.strictEqual(state.agentType, 'researcher');\n      assert(state.neuralNetwork);\n      assert(state.cognitiveState);\n      assert(state.learningHistory.length > 0);\n    });\n\n    it('should load neural state', () => {\n      const savedState = {\n        neuralNetwork: neuralAgent.neuralNetwork.save(),\n        cognitiveState: { attention: 0.8, fatigue: 0.2, confidence: 0.7, exploration: 0.3 },\n        performanceMetrics: { accuracy: 0.9, speed: 0.8, creativity: 0.7, efficiency: 0.85 },\n        learningHistory: [{ timestamp: Date.now(), task: 'old-task', performance: 0.75 }],\n        taskHistory: [],\n      };\n\n      neuralAgent.loadNeuralState(savedState);\n      assert.deepStrictEqual(neuralAgent.cognitiveState, savedState.cognitiveState);\n      assert.deepStrictEqual(neuralAgent.performanceMetrics, savedState.performanceMetrics);\n      assert.strictEqual(neuralAgent.learningHistory.length, 1);\n    });\n  });\n\n  describe('Learning Event', () => {\n    it('should emit learning event after task execution', (done) => {\n      const task = {\n        id: 'learning-task',\n        description: 'Task to learn from',\n      };\n\n      neuralAgent.once('learning', (event) => {\n        assert.strictEqual(event.task, task.id);\n        assert(event.performance);\n        assert(event.networkState);\n        done();\n      });\n\n      neuralAgent.executeTask(task);\n    });\n  });\n\n  describe('Performance Metrics Update', () => {\n    it('should update performance metrics with exponential moving average', () => {\n      neuralAgent.performanceMetrics = {\n        accuracy: 0.5,\n        speed: 0.5,\n        creativity: 0.5,\n        efficiency: 0.5,\n      };\n\n      const newPerformance = {\n        accuracy: 1.0,\n        speed: 1.0,\n        creativity: 1.0,\n        efficiency: 1.0,\n      };\n\n      neuralAgent._updatePerformanceMetrics(newPerformance);\n\n      // Should be between old and new values\n      assert(neuralAgent.performanceMetrics.accuracy > 0.5);\n      assert(neuralAgent.performanceMetrics.accuracy < 1.0);\n    });\n  });\n});\n\ndescribe('NeuralAgentFactory Tests', () => {\n  it('should create neural agent for valid agent type', () => {\n    const mockAgent = new MockAgent();\n    const neuralAgent = NeuralAgentFactory.createNeuralAgent(mockAgent, 'researcher');\n    assert(neuralAgent instanceof NeuralAgent);\n    assert.strictEqual(neuralAgent.agentType, 'researcher');\n  });\n\n  it('should throw error for invalid agent type', () => {\n    const mockAgent = new MockAgent();\n    assert.throws(() => {\n      NeuralAgentFactory.createNeuralAgent(mockAgent, 'invalid-type');\n    }, /Unknown agent type/);\n  });\n\n  it('should provide cognitive profiles', () => {\n    const profiles = NeuralAgentFactory.getCognitiveProfiles();\n    assert(profiles);\n    assert(profiles.researcher);\n    assert(profiles.coder);\n    assert(profiles.analyst);\n    assert(profiles.optimizer);\n    assert(profiles.coordinator);\n  });\n\n  it('should provide cognitive patterns', () => {\n    const patterns = NeuralAgentFactory.getCognitivePatterns();\n    assert.deepStrictEqual(patterns, COGNITIVE_PATTERNS);\n  });\n});\n\ndescribe('Cognitive Profiles Tests', () => {\n  it('should have valid profiles for all agent types', () => {\n    Object.entries(AGENT_COGNITIVE_PROFILES).forEach(([agentType, profile]) => {\n      assert(profile.primary);\n      assert(profile.secondary);\n      assert(typeof profile.learningRate === 'number');\n      assert(typeof profile.momentum === 'number');\n      assert(Array.isArray(profile.networkLayers));\n      assert(profile.activationFunction);\n    });\n  });\n\n  it('should have valid cognitive patterns', () => {\n    const validPatterns = Object.values(COGNITIVE_PATTERNS);\n    Object.values(AGENT_COGNITIVE_PROFILES).forEach(profile => {\n      assert(validPatterns.includes(profile.primary));\n      assert(validPatterns.includes(profile.secondary));\n    });\n  });\n});\n\n// Run tests when this file is executed directly\nif (require.main === module) {\n  console.log('Running Neural Agent Unit Tests...');\n  require('../../../node_modules/.bin/jest');\n}"],"mappings":"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","ignoreList":[]}