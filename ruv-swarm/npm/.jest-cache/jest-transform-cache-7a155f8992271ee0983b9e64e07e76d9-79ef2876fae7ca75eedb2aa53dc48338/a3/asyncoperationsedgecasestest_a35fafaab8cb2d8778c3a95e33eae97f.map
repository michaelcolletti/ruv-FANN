{"version":3,"names":["describe","it","expect","jest","beforeEach","afterEach","RuvSwarm","NeuralAgent","SwarmPersistence","useFakeTimers","ruv","swarm","_asyncToGenerator","createSwarm","fn","mockResolvedValue","id","spawn","orchestrate","terminate","topology","clearAllTimers","useRealTimers","longOperation","Promise","resolve","setTimeout","timeoutPromise","_","reject","Error","racePromise","race","rejects","toThrow","operations","delay","timeout","shouldTimeout","results","operation","resultPromise","then","status","catch","push","advanceTimersByTime","Math","max","resolvedResults","all","forEach","op","index","toBe","nestedOperation","_ref5","error","message","apply","arguments","cleanupCalled","errorInFinally","operationWithFinally","_ref7","e","events","unhandledHandler","reason","type","process","on","setImmediate","off","sharedState","counter","increment","_ref0","current","_x","promises","i","toBeLessThanOrEqual","length","settled","toEqual","problematicGenerator","errorCaught","value","generatorWithCleanup","gen","next","return","allSettled","toHaveLength","objectContaining","rejections","any","AsyncQueue","constructor","maxSize","queue","processing","add","task","_this","_this2","shift","resources","cleanupCount","AsyncResource","acquired","use","_this3","cleanup","_this4","acquireResources","_ref19","resource","map","r","EventEmitter","emitter","listeners","listener","err","emit","listenerResults","toContain","import","meta","url","argv","console","log","run","__filename"],"sources":["async-operations-edge-cases.test.js"],"sourcesContent":["/**\n * Async Operations Edge Cases\n * Tests promise handling, timeouts, race conditions, and async edge cases\n */\n\nimport { describe, it, expect, jest, beforeEach, afterEach } from '@jest/globals';\nimport { RuvSwarm } from '../../src/index-enhanced.js';\nimport { NeuralAgent } from '../../src/neural-agent.js';\nimport { SwarmPersistence } from '../../src/persistence.js';\n\n// Mock timers for timeout testing\njest.useFakeTimers();\n\ndescribe('Async Operations Edge Cases', () => {\n  let ruv;\n  let swarm;\n\n  beforeEach(async () => {\n    // Initialize with mocks\n    ruv = {\n      createSwarm: jest.fn().mockResolvedValue({\n        id: 'test-swarm',\n        spawn: jest.fn(),\n        orchestrate: jest.fn(),\n        terminate: jest.fn(),\n      }),\n    };\n    swarm = await ruv.createSwarm({ topology: 'mesh' });\n  });\n\n  afterEach(() => {\n    jest.clearAllTimers();\n    jest.useRealTimers();\n  });\n\n  describe('Promise Timeout Scenarios', () => {\n    it('should timeout after max wait period', async () => {\n      const longOperation = () => new Promise((resolve) => {\n        setTimeout(() => resolve('completed'), 10000); // 10 seconds\n      });\n\n      const timeoutPromise = new Promise((_, reject) => {\n        setTimeout(() => reject(new Error('Operation timeout')), 5000);\n      });\n\n      jest.useRealTimers(); // Use real timers for this test\n      \n      const racePromise = Promise.race([longOperation(), timeoutPromise]);\n      \n      await expect(racePromise).rejects.toThrow('Operation timeout');\n    });\n\n    it('should handle multiple timeout scenarios', async () => {\n      jest.useFakeTimers();\n      \n      const operations = [\n        { delay: 1000, timeout: 500, shouldTimeout: true },\n        { delay: 500, timeout: 1000, shouldTimeout: false },\n        { delay: 1000, timeout: 1000, shouldTimeout: false }, // Edge case\n        { delay: 0, timeout: 100, shouldTimeout: false },\n      ];\n\n      const results = [];\n      \n      for (const { delay, timeout, shouldTimeout } of operations) {\n        const operation = new Promise((resolve) => {\n          setTimeout(() => resolve('success'), delay);\n        });\n\n        const timeoutPromise = new Promise((_, reject) => {\n          setTimeout(() => reject(new Error('timeout')), timeout);\n        });\n\n        const resultPromise = Promise.race([operation, timeoutPromise])\n          .then(() => ({ status: 'success' }))\n          .catch(() => ({ status: 'timeout' }));\n\n        results.push(resultPromise);\n        \n        // Advance timers to the max of delay and timeout\n        jest.advanceTimersByTime(Math.max(delay, timeout) + 1);\n      }\n\n      const resolvedResults = await Promise.all(results);\n      \n      operations.forEach((op, index) => {\n        if (op.shouldTimeout) {\n          expect(resolvedResults[index].status).toBe('timeout');\n        } else {\n          expect(resolvedResults[index].status).toBe('success');\n        }\n      });\n    });\n  });\n\n  describe('Promise Rejection Handling', () => {\n    it('should handle nested promise rejections', async () => {\n      const nestedOperation = async () => {\n        try {\n          await Promise.resolve().then(() => {\n            return Promise.reject(new Error('Inner rejection'));\n          });\n        } catch (error) {\n          // Re-throw with context\n          throw new Error(`Wrapped: ${error.message}`);\n        }\n      };\n\n      await expect(nestedOperation()).rejects.toThrow('Wrapped: Inner rejection');\n    });\n\n    it('should handle promise rejection in finally block', async () => {\n      let cleanupCalled = false;\n      let errorInFinally = false;\n\n      const operationWithFinally = async () => {\n        try {\n          throw new Error('Main error');\n        } finally {\n          cleanupCalled = true;\n          try {\n            // Cleanup that might fail\n            await Promise.reject(new Error('Cleanup error'));\n          } catch (e) {\n            errorInFinally = true;\n          }\n        }\n      };\n\n      await expect(operationWithFinally()).rejects.toThrow('Main error');\n      expect(cleanupCalled).toBe(true);\n      expect(errorInFinally).toBe(true);\n    });\n\n    it('should handle unhandled promise rejections in callbacks', async () => {\n      const events = [];\n      \n      // Track unhandled rejections\n      const unhandledHandler = (reason) => {\n        events.push({ type: 'unhandled', reason: reason.message });\n      };\n      \n      process.on('unhandledRejection', unhandledHandler);\n\n      // Create promise that will be rejected after a delay\n      setTimeout(() => {\n        Promise.reject(new Error('Async rejection'));\n      }, 0);\n\n      // Wait for event loop\n      await new Promise(resolve => setImmediate(resolve));\n\n      process.off('unhandledRejection', unhandledHandler);\n      \n      // Note: In test environment, this might not capture the event\n      // This test demonstrates the pattern for handling such cases\n    });\n  });\n\n  describe('Race Condition Edge Cases', () => {\n    it('should handle concurrent state modifications', async () => {\n      const sharedState = { counter: 0, operations: [] };\n      \n      const increment = async (id) => {\n        const current = sharedState.counter;\n        // Simulate async operation\n        await new Promise(resolve => setImmediate(resolve));\n        sharedState.counter = current + 1;\n        sharedState.operations.push(id);\n      };\n\n      // Create many concurrent operations\n      const promises = [];\n      for (let i = 0; i < 100; i++) {\n        promises.push(increment(i));\n      }\n\n      await Promise.all(promises);\n\n      // Due to race conditions, counter might not be 100\n      expect(sharedState.counter).toBeLessThanOrEqual(100);\n      expect(sharedState.operations.length).toBe(100);\n    });\n\n    it('should handle promise settlement order', async () => {\n      const results = [];\n      \n      const promises = [\n        new Promise(resolve => setTimeout(() => {\n          results.push(1);\n          resolve(1);\n        }, 100)),\n        new Promise(resolve => setTimeout(() => {\n          results.push(2);\n          resolve(2);\n        }, 50)),\n        new Promise(resolve => setTimeout(() => {\n          results.push(3);\n          resolve(3);\n        }, 75)),\n      ];\n\n      jest.useRealTimers();\n      const settled = await Promise.all(promises);\n      \n      // Results array shows actual execution order\n      expect(results).toEqual([2, 3, 1]); // Based on timeout order\n      // Promise.all preserves input order\n      expect(settled).toEqual([1, 2, 3]);\n    });\n  });\n\n  describe('Async Iterator Edge Cases', () => {\n    it('should handle async generator errors', async () => {\n      async function* problematicGenerator() {\n        yield 1;\n        yield 2;\n        throw new Error('Generator error');\n        yield 3; // Never reached\n      }\n\n      const results = [];\n      let errorCaught = false;\n\n      try {\n        for await (const value of problematicGenerator()) {\n          results.push(value);\n        }\n      } catch (error) {\n        errorCaught = true;\n        expect(error.message).toBe('Generator error');\n      }\n\n      expect(results).toEqual([1, 2]);\n      expect(errorCaught).toBe(true);\n    });\n\n    it('should handle async generator cleanup', async () => {\n      let cleanupCalled = false;\n\n      async function* generatorWithCleanup() {\n        try {\n          yield 1;\n          yield 2;\n          yield 3;\n        } finally {\n          cleanupCalled = true;\n        }\n      }\n\n      const gen = generatorWithCleanup();\n      \n      // Consume only first two values\n      await gen.next(); // 1\n      await gen.next(); // 2\n      \n      // Return early (triggers cleanup)\n      await gen.return();\n      \n      expect(cleanupCalled).toBe(true);\n    });\n  });\n\n  describe('Concurrent Async Operations', () => {\n    it('should handle Promise.allSettled with mixed results', async () => {\n      const operations = [\n        Promise.resolve('success-1'),\n        Promise.reject(new Error('failure-1')),\n        Promise.resolve('success-2'),\n        Promise.reject(new Error('failure-2')),\n        new Promise(resolve => setTimeout(() => resolve('delayed'), 100)),\n      ];\n\n      jest.useRealTimers();\n      const results = await Promise.allSettled(operations);\n\n      expect(results).toHaveLength(5);\n      expect(results[0]).toEqual({ status: 'fulfilled', value: 'success-1' });\n      expect(results[1]).toEqual({ \n        status: 'rejected', \n        reason: expect.objectContaining({ message: 'failure-1' })\n      });\n      expect(results[2]).toEqual({ status: 'fulfilled', value: 'success-2' });\n      expect(results[3]).toEqual({ \n        status: 'rejected', \n        reason: expect.objectContaining({ message: 'failure-2' })\n      });\n      expect(results[4]).toEqual({ status: 'fulfilled', value: 'delayed' });\n    });\n\n    it('should handle Promise.race with all rejections', async () => {\n      const rejections = [\n        new Promise((_, reject) => setTimeout(() => reject(new Error('Error 1')), 100)),\n        new Promise((_, reject) => setTimeout(() => reject(new Error('Error 2')), 50)),\n        new Promise((_, reject) => setTimeout(() => reject(new Error('Error 3')), 150)),\n      ];\n\n      jest.useRealTimers();\n      \n      // Should reject with the fastest rejection\n      await expect(Promise.race(rejections)).rejects.toThrow('Error 2');\n    });\n\n    it('should handle Promise.any with all rejections', async () => {\n      const rejections = [\n        Promise.reject(new Error('Error 1')),\n        Promise.reject(new Error('Error 2')),\n        Promise.reject(new Error('Error 3')),\n      ];\n\n      await expect(Promise.any(rejections)).rejects.toThrow('All promises were rejected');\n    });\n  });\n\n  describe('Async Queue Edge Cases', () => {\n    it('should handle queue overflow', async () => {\n      class AsyncQueue {\n        constructor(maxSize = 10) {\n          this.queue = [];\n          this.maxSize = maxSize;\n          this.processing = false;\n        }\n\n        async add(task) {\n          if (this.queue.length >= this.maxSize) {\n            throw new Error('Queue overflow');\n          }\n          this.queue.push(task);\n          if (!this.processing) {\n            this.process();\n          }\n        }\n\n        async process() {\n          this.processing = true;\n          while (this.queue.length > 0) {\n            const task = this.queue.shift();\n            try {\n              await task();\n            } catch (error) {\n              // Task failed, continue processing\n            }\n          }\n          this.processing = false;\n        }\n      }\n\n      const queue = new AsyncQueue(5);\n      const results = [];\n\n      // Fill queue to capacity\n      for (let i = 0; i < 5; i++) {\n        await queue.add(async () => {\n          results.push(i);\n        });\n      }\n\n      // This should throw\n      await expect(queue.add(async () => {})).rejects.toThrow('Queue overflow');\n\n      // Wait for processing\n      await new Promise(resolve => setTimeout(resolve, 100));\n      \n      expect(results.length).toBe(5);\n    });\n  });\n\n  describe('Async Resource Cleanup', () => {\n    it('should cleanup resources on async failure', async () => {\n      const resources = [];\n      let cleanupCount = 0;\n\n      class AsyncResource {\n        constructor(id) {\n          this.id = id;\n          this.acquired = true;\n          resources.push(this);\n        }\n\n        async use() {\n          if (this.id === 2) {\n            throw new Error('Resource 2 failed');\n          }\n          return `Used ${this.id}`;\n        }\n\n        async cleanup() {\n          this.acquired = false;\n          cleanupCount++;\n        }\n      }\n\n      const acquireResources = async () => {\n        const acquired = [];\n        try {\n          for (let i = 0; i < 5; i++) {\n            const resource = new AsyncResource(i);\n            acquired.push(resource);\n            await resource.use();\n          }\n        } catch (error) {\n          // Cleanup all acquired resources\n          await Promise.all(acquired.map(r => r.cleanup()));\n          throw error;\n        }\n      };\n\n      await expect(acquireResources()).rejects.toThrow('Resource 2 failed');\n      expect(cleanupCount).toBe(3); // Resources 0, 1, and 2 were cleaned up\n    });\n  });\n\n  describe('Async Event Emitter Edge Cases', () => {\n    it('should handle async event listeners with errors', async () => {\n      const { EventEmitter } = await import('events');\n      const emitter = new EventEmitter();\n      const results = [];\n\n      // Add multiple async listeners, some failing\n      emitter.on('test', async () => {\n        results.push('listener-1-start');\n        await new Promise(resolve => setTimeout(resolve, 50));\n        results.push('listener-1-end');\n      });\n\n      emitter.on('test', async () => {\n        results.push('listener-2-start');\n        throw new Error('Listener 2 failed');\n      });\n\n      emitter.on('test', async () => {\n        results.push('listener-3-start');\n        await new Promise(resolve => setTimeout(resolve, 25));\n        results.push('listener-3-end');\n      });\n\n      // Emit and wait for all listeners\n      const promises = [];\n      emitter.listeners('test').forEach(listener => {\n        promises.push(\n          listener().catch(err => ({ error: err.message }))\n        );\n      });\n\n      emitter.emit('test');\n      const listenerResults = await Promise.all(promises);\n\n      expect(results).toContain('listener-1-start');\n      expect(results).toContain('listener-2-start');\n      expect(results).toContain('listener-3-start');\n      expect(listenerResults[1]).toEqual({ error: 'Listener 2 failed' });\n    });\n  });\n});\n\n// Run tests when executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  console.log('Running async operations edge case tests...');\n  \n  // Run all tests\n  const { run } = await import('../test-runner.js');\n  await run(__filename);\n}"],"mappings":"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","ignoreList":[]}