{"version":3,"names":["jest","createNeuralNetwork","createTrainer","createAgentNeuralManager","ActivationFunctions","initializeNeuralWasm","ACTIVATION_FUNCTIONS","TRAINING_ALGORITHMS","COGNITIVE_PATTERNS","describe","wasm","beforeAll","_asyncToGenerator","test","network","inputSize","hiddenLayers","size","activation","SIGMOID","outputSize","outputActivation","expect","toBeDefined","info","getInfo","numInputs","toBe","numOutputs","numLayers","toBeGreaterThanOrEqual","RELU","output","run","toHaveLength","toBeLessThanOrEqual","weights","getWeights","toBeInstanceOf","Float32Array","length","toBeGreaterThan","newWeights","i","Math","random","setWeights","retrievedWeights","toEqual","each","INCREMENTAL_BACKPROP","BATCH_BACKPROP","RPROP","QUICKPROP","SARPROP","_ref5","algorithm","trainer","maxEpochs","targetError","getAlgorithmInfo","name","type","_x","apply","arguments","trainingData","inputs","outputs","result","trainUntilTarget","converged","finalError","toBeLessThan","predictions","Promise","all","map","input","functions","getAll","functionNames","toContain","sigmoid","toBeCloseTo","relu","relu2","comparison","compare","tanh","props","getProperties","trainable","output_range","min","max","manager","beforeEach","agentConfig","agentId","agentType","cognitivePattern","DIVERGENT","taskSpecialization","createAgentNetwork","state","getAgentCognitiveState","pattern_type","neuralArchitecture","layers","patterns","Object","values","agentIds","pattern","push","CRITICAL","getAgentInference","CONVERGENT","Array","fill","trainAgentNetwork","epochs","final_loss","LATERAL","experienceData","expected_outputs","actual_outputs","rewards","context","task","fineTuneDuringExecution","adapted","testInput","inferencePromises","id","results","forEach","SOFTMAX","startTime","performance","now","iterations","endTime","avgTime","console","log","toFixed"],"sources":["neural-network.test.js"],"sourcesContent":["// neural-network.test.js - Tests for neural network WASM integration\n\nimport { jest } from '@jest/globals';\nimport {\n  createNeuralNetwork,\n  createTrainer,\n  createAgentNeuralManager,\n  ActivationFunctions,\n  initializeNeuralWasm,\n  ACTIVATION_FUNCTIONS,\n  TRAINING_ALGORITHMS,\n  COGNITIVE_PATTERNS,\n} from '../src/neural-network.js';\n\ndescribe('Neural Network WASM Integration', () => {\n  let wasm;\n\n  beforeAll(async() => {\n    wasm = await initializeNeuralWasm();\n  });\n\n  describe('Basic Neural Network', () => {\n    test('should create a neural network', async() => {\n      const network = await createNeuralNetwork({\n        inputSize: 2,\n        hiddenLayers: [\n          { size: 3, activation: ACTIVATION_FUNCTIONS.SIGMOID },\n        ],\n        outputSize: 1,\n        outputActivation: ACTIVATION_FUNCTIONS.SIGMOID,\n      });\n\n      expect(network).toBeDefined();\n\n      const info = network.getInfo();\n      expect(info.numInputs).toBe(2);\n      expect(info.numOutputs).toBe(1);\n      expect(info.numLayers).toBeGreaterThanOrEqual(3); // input, hidden, output\n    });\n\n    test('should run inference', async() => {\n      const network = await createNeuralNetwork({\n        inputSize: 2,\n        hiddenLayers: [{ size: 3, activation: ACTIVATION_FUNCTIONS.RELU }],\n        outputSize: 1,\n        outputActivation: ACTIVATION_FUNCTIONS.SIGMOID,\n      });\n\n      const output = await network.run([0.5, 0.5]);\n      expect(output).toHaveLength(1);\n      expect(output[0]).toBeGreaterThanOrEqual(0);\n      expect(output[0]).toBeLessThanOrEqual(1);\n    });\n\n    test('should get and set weights', async() => {\n      const network = await createNeuralNetwork({\n        inputSize: 2,\n        hiddenLayers: [{ size: 2, activation: ACTIVATION_FUNCTIONS.SIGMOID }],\n        outputSize: 1,\n        outputActivation: ACTIVATION_FUNCTIONS.SIGMOID,\n      });\n\n      const weights = network.getWeights();\n      expect(weights).toBeInstanceOf(Float32Array);\n      expect(weights.length).toBeGreaterThan(0);\n\n      // Modify weights\n      const newWeights = new Float32Array(weights.length);\n      for (let i = 0; i < weights.length; i++) {\n        newWeights[i] = Math.random() * 2 - 1;\n      }\n\n      network.setWeights(newWeights);\n      const retrievedWeights = network.getWeights();\n      expect(retrievedWeights).toEqual(newWeights);\n    });\n  });\n\n  describe('Training Algorithms', () => {\n    test.each([\n      TRAINING_ALGORITHMS.INCREMENTAL_BACKPROP,\n      TRAINING_ALGORITHMS.BATCH_BACKPROP,\n      TRAINING_ALGORITHMS.RPROP,\n      TRAINING_ALGORITHMS.QUICKPROP,\n      TRAINING_ALGORITHMS.SARPROP,\n    ])('should create trainer with %s algorithm', async(algorithm) => {\n      const trainer = await createTrainer({\n        algorithm,\n        maxEpochs: 100,\n        targetError: 0.01,\n      });\n\n      expect(trainer).toBeDefined();\n      const info = trainer.getAlgorithmInfo();\n      expect(info.name).toBeDefined();\n      expect(info.type).toBeDefined();\n    });\n\n    test('should train XOR problem', async() => {\n      const network = await createNeuralNetwork({\n        inputSize: 2,\n        hiddenLayers: [\n          { size: 4, activation: ACTIVATION_FUNCTIONS.SIGMOID },\n          { size: 3, activation: ACTIVATION_FUNCTIONS.SIGMOID },\n        ],\n        outputSize: 1,\n        outputActivation: ACTIVATION_FUNCTIONS.SIGMOID,\n      });\n\n      const trainer = await createTrainer({\n        algorithm: TRAINING_ALGORITHMS.RPROP,\n        maxEpochs: 500,\n        targetError: 0.01,\n      });\n\n      const trainingData = {\n        inputs: [[0, 0], [0, 1], [1, 0], [1, 1]],\n        outputs: [[0], [1], [1], [0]],\n      };\n\n      const result = await trainer.trainUntilTarget(network, trainingData, 0.01, 500);\n      expect(result.converged).toBe(true);\n      expect(result.finalError).toBeLessThan(0.01);\n\n      // Test predictions\n      const predictions = await Promise.all(\n        trainingData.inputs.map(input => network.run(input)),\n      );\n\n      // Check XOR logic\n      expect(predictions[0][0]).toBeLessThan(0.5); // [0,0] => 0\n      expect(predictions[1][0]).toBeGreaterThan(0.5); // [0,1] => 1\n      expect(predictions[2][0]).toBeGreaterThan(0.5); // [1,0] => 1\n      expect(predictions[3][0]).toBeLessThan(0.5); // [1,1] => 0\n    });\n  });\n\n  describe('Activation Functions', () => {\n    test('should list all 18 activation functions', async() => {\n      const functions = await ActivationFunctions.getAll(wasm);\n      expect(functions).toHaveLength(18);\n\n      const functionNames = functions.map(([name]) => name);\n      expect(functionNames).toContain('sigmoid');\n      expect(functionNames).toContain('relu');\n      expect(functionNames).toContain('tanh');\n      expect(functionNames).toContain('gaussian');\n    });\n\n    test('should test activation functions', async() => {\n      const sigmoid = await ActivationFunctions.test(wasm, 'sigmoid', 0);\n      expect(sigmoid).toBeCloseTo(0.5, 5);\n\n      const relu = await ActivationFunctions.test(wasm, 'relu', -1);\n      expect(relu).toBe(0);\n\n      const relu2 = await ActivationFunctions.test(wasm, 'relu', 1);\n      expect(relu2).toBe(1);\n    });\n\n    test('should compare activation functions', async() => {\n      const comparison = await ActivationFunctions.compare(wasm, 0);\n      expect(comparison).toBeDefined();\n      expect(comparison.sigmoid).toBeCloseTo(0.5, 5);\n      expect(comparison.tanh).toBeCloseTo(0, 5);\n      expect(comparison.relu).toBe(0);\n    });\n\n    test('should get activation function properties', async() => {\n      const props = await ActivationFunctions.getProperties(wasm, 'sigmoid');\n      expect(props.name).toBe('Sigmoid');\n      expect(props.trainable).toBe(true);\n      expect(props.output_range.min).toBe('0');\n      expect(props.output_range.max).toBe('1');\n    });\n  });\n\n  describe('Agent Neural Networks', () => {\n    let manager;\n\n    beforeEach(async() => {\n      manager = await createAgentNeuralManager();\n    });\n\n    test('should create agent networks with cognitive patterns', async() => {\n      const agentConfig = {\n        agentId: 'test-agent-001',\n        agentType: 'researcher',\n        cognitivePattern: COGNITIVE_PATTERNS.DIVERGENT,\n        inputSize: 10,\n        outputSize: 5,\n        taskSpecialization: ['pattern_recognition'],\n      };\n\n      const agentId = await manager.createAgentNetwork(agentConfig);\n      expect(agentId).toBe('test-agent-001');\n\n      const state = await manager.getAgentCognitiveState(agentId);\n      expect(state.agentId).toBe('test-agent-001');\n      expect(state.cognitivePattern.pattern_type).toBe('divergent');\n      expect(state.neuralArchitecture.layers).toBeGreaterThan(0);\n    });\n\n    test('should support multiple agents with different patterns', async() => {\n      const patterns = Object.values(COGNITIVE_PATTERNS);\n      const agentIds = [];\n\n      for (const pattern of patterns) {\n        const agentId = `agent-${pattern}`;\n        await manager.createAgentNetwork({\n          agentId,\n          agentType: 'test',\n          cognitivePattern: pattern,\n          inputSize: 5,\n          outputSize: 3,\n        });\n        agentIds.push(agentId);\n      }\n\n      // Verify each agent has correct pattern\n      for (let i = 0; i < patterns.length; i++) {\n        const state = await manager.getAgentCognitiveState(agentIds[i]);\n        expect(state.cognitivePattern.pattern_type).toBe(patterns[i]);\n      }\n    });\n\n    test('should perform inference for agents', async() => {\n      const agentId = await manager.createAgentNetwork({\n        agentId: 'inference-test',\n        agentType: 'analyst',\n        cognitivePattern: COGNITIVE_PATTERNS.CRITICAL,\n        inputSize: 4,\n        outputSize: 2,\n      });\n\n      const input = [0.1, 0.2, 0.3, 0.4];\n      const output = await manager.getAgentInference(agentId, input);\n\n      expect(output).toHaveLength(2);\n      expect(output[0]).toBeGreaterThanOrEqual(0);\n      expect(output[1]).toBeGreaterThanOrEqual(0);\n    });\n\n    test('should train agent networks', async() => {\n      const agentId = await manager.createAgentNetwork({\n        agentId: 'training-test',\n        agentType: 'coder',\n        cognitivePattern: COGNITIVE_PATTERNS.CONVERGENT,\n        inputSize: 3,\n        outputSize: 2,\n      });\n\n      const trainingData = {\n        inputs: Array(10).fill(null).map(() => [Math.random(), Math.random(), Math.random()]),\n        outputs: Array(10).fill(null).map(() => [Math.random() > 0.5 ? 1 : 0, Math.random() > 0.5 ? 1 : 0]),\n      };\n\n      const result = await manager.trainAgentNetwork(agentId, trainingData);\n      expect(result).toBeDefined();\n      expect(result.epochs).toBeGreaterThan(0);\n      expect(result.final_loss).toBeDefined();\n    });\n\n    test('should support online adaptation', async() => {\n      const agentId = await manager.createAgentNetwork({\n        agentId: 'adaptation-test',\n        agentType: 'optimizer',\n        cognitivePattern: COGNITIVE_PATTERNS.LATERAL,\n        inputSize: 5,\n        outputSize: 3,\n      });\n\n      const experienceData = {\n        inputs: [[0.1, 0.2, 0.3, 0.4, 0.5]],\n        expected_outputs: [[1, 0, 1]],\n        actual_outputs: [[0.8, 0.2, 0.9]],\n        rewards: [0.85],\n        context: { task: 'optimization' },\n      };\n\n      const result = await manager.fineTuneDuringExecution(agentId, experienceData);\n      expect(result).toBeDefined();\n      expect(result.adapted).toBe(true);\n    });\n  });\n\n  describe('Performance and Memory', () => {\n    test('should handle 100+ simultaneous agent networks', async() => {\n      const manager = await createAgentNeuralManager();\n      const agentIds = [];\n\n      // Create 100 agents\n      for (let i = 0; i < 100; i++) {\n        const patterns = Object.values(COGNITIVE_PATTERNS);\n        const pattern = patterns[i % patterns.length];\n\n        const agentId = await manager.createAgentNetwork({\n          agentId: `perf-agent-${i}`,\n          agentType: 'test',\n          cognitivePattern: pattern,\n          inputSize: 10,\n          outputSize: 5,\n        });\n\n        agentIds.push(agentId);\n      }\n\n      expect(agentIds).toHaveLength(100);\n\n      // Test inference on all agents\n      const testInput = Array(10).fill(0.5);\n      const inferencePromises = agentIds.map(id =>\n        manager.getAgentInference(id, testInput),\n      );\n\n      const results = await Promise.all(inferencePromises);\n      expect(results).toHaveLength(100);\n      results.forEach(output => {\n        expect(output).toHaveLength(5);\n      });\n    });\n\n    test('should measure inference performance', async() => {\n      const network = await createNeuralNetwork({\n        inputSize: 100,\n        hiddenLayers: [\n          { size: 50, activation: ACTIVATION_FUNCTIONS.RELU },\n          { size: 25, activation: ACTIVATION_FUNCTIONS.RELU },\n        ],\n        outputSize: 10,\n        outputActivation: ACTIVATION_FUNCTIONS.SOFTMAX,\n      });\n\n      const input = Array(100).fill(0).map(() => Math.random());\n\n      const startTime = performance.now();\n      const iterations = 1000;\n\n      for (let i = 0; i < iterations; i++) {\n        await network.run(input);\n      }\n\n      const endTime = performance.now();\n      const avgTime = (endTime - startTime) / iterations;\n\n      console.log(`Average inference time: ${avgTime.toFixed(3)}ms`);\n      expect(avgTime).toBeLessThan(10); // Should be fast\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}