c0cceaf7bfb41d65c21f2986ee888d44
// Mock WebSocket
_getJestObj().mock('ws');

// Mock the swarm module
_getJestObj().mock('../src/index.js', () => ({
  default: {
    init: jest.fn(),
    spawnAgent: jest.fn(),
    executeTask: jest.fn(),
    getSwarmStatus: jest.fn(),
    listAgents: jest.fn(),
    getAgentMetrics: jest.fn(),
    getTaskStatus: jest.fn(),
    getTaskResults: jest.fn(),
    runBenchmark: jest.fn(),
    detectSystemFeatures: jest.fn(),
    monitorSwarm: jest.fn(),
    storeMemory: jest.fn(),
    retrieveMemory: jest.fn(),
    listMemoryKeys: jest.fn(),
    getNeuralStatus: jest.fn(),
    trainNeuralAgent: jest.fn(),
    getNeuralPatterns: jest.fn()
  }
}));

// Import after mocking
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
/**
 * Test suite for MCP server implementation
 */

import { describe, it, expect, jest, beforeEach, afterEach } from '@jest/globals';
import WebSocket from 'ws';
import { MCPServer } from '../src/mcp-server.js';
import RuvSwarm from '../src/index.js';
describe('MCPServer', () => {
  let server;
  let mockWsServer;
  let mockClient;
  beforeEach(() => {
    mockWsServer = {
      on: jest.fn(),
      close: jest.fn()
    };
    WebSocket.Server.mockReturnValue(mockWsServer);
    mockClient = {
      on: jest.fn(),
      send: jest.fn(),
      close: jest.fn(),
      readyState: WebSocket.OPEN
    };
    server = new MCPServer();
    jest.clearAllMocks();
  });
  afterEach(() => {
    jest.restoreAllMocks();
  });
  describe('constructor', () => {
    it('should initialize with default port', () => {
      const newServer = new MCPServer();
      expect(newServer.port).toBe(3000);
      expect(newServer.clients).toBeInstanceOf(Set);
    });
    it('should accept custom port', () => {
      const customServer = new MCPServer(8080);
      expect(customServer.port).toBe(8080);
    });
  });
  describe('start', () => {
    it('should create WebSocket server and setup handlers', /*#__PURE__*/_asyncToGenerator(function* () {
      yield server.start();
      expect(WebSocket.Server).toHaveBeenCalledWith({
        port: 3000
      });
      expect(mockWsServer.on).toHaveBeenCalledWith('connection', expect.any(Function));
      expect(mockWsServer.on).toHaveBeenCalledWith('error', expect.any(Function));
    }));
    it('should handle new connections', /*#__PURE__*/_asyncToGenerator(function* () {
      yield server.start();
      const connectionHandler = mockWsServer.on.mock.calls.find(call => call[0] === 'connection')[1];
      connectionHandler(mockClient);
      expect(server.clients.has(mockClient)).toBe(true);
      expect(mockClient.on).toHaveBeenCalledWith('message', expect.any(Function));
      expect(mockClient.on).toHaveBeenCalledWith('close', expect.any(Function));
      expect(mockClient.on).toHaveBeenCalledWith('error', expect.any(Function));
    }));
  });
  describe('handleMessage', () => {
    beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {
      yield server.start();
      const connectionHandler = mockWsServer.on.mock.calls.find(call => call[0] === 'connection')[1];
      connectionHandler(mockClient);
    }));
    it('should handle swarm_init tool', /*#__PURE__*/_asyncToGenerator(function* () {
      const message = {
        jsonrpc: '2.0',
        id: 1,
        method: 'tool_call',
        params: {
          tool: 'swarm_init',
          arguments: {
            topology: 'mesh',
            maxAgents: 10,
            strategy: 'adaptive'
          }
        }
      };
      RuvSwarm.init.mockResolvedValue({
        swarmId: 'test-123'
      });
      yield server.handleMessage(mockClient, JSON.stringify(message));
      expect(RuvSwarm.init).toHaveBeenCalledWith('mesh', 10, 'adaptive');
      expect(mockClient.send).toHaveBeenCalledWith(expect.stringContaining('"result":{"swarmId":"test-123"}'));
    }));
    it('should handle agent_spawn tool', /*#__PURE__*/_asyncToGenerator(function* () {
      const message = {
        jsonrpc: '2.0',
        id: 2,
        method: 'tool_call',
        params: {
          tool: 'agent_spawn',
          arguments: {
            type: 'researcher',
            name: 'Agent 1',
            config: {
              model: 'advanced'
            }
          }
        }
      };
      RuvSwarm.spawnAgent.mockResolvedValue({
        agentId: 'agent-123'
      });
      yield server.handleMessage(mockClient, JSON.stringify(message));
      expect(RuvSwarm.spawnAgent).toHaveBeenCalledWith('researcher', 'Agent 1', {
        model: 'advanced'
      });
    }));
    it('should handle task_orchestrate tool', /*#__PURE__*/_asyncToGenerator(function* () {
      const message = {
        jsonrpc: '2.0',
        id: 3,
        method: 'tool_call',
        params: {
          tool: 'task_orchestrate',
          arguments: {
            task: 'Build REST API',
            agents: ['agent-1', 'agent-2'],
            strategy: 'parallel'
          }
        }
      };
      RuvSwarm.executeTask.mockResolvedValue({
        taskId: 'task-123'
      });
      yield server.handleMessage(mockClient, JSON.stringify(message));
      expect(RuvSwarm.executeTask).toHaveBeenCalledWith({
        task: 'Build REST API',
        agents: ['agent-1', 'agent-2'],
        strategy: 'parallel'
      });
    }));
    it('should handle memory_usage tool with store action', /*#__PURE__*/_asyncToGenerator(function* () {
      const message = {
        jsonrpc: '2.0',
        id: 4,
        method: 'tool_call',
        params: {
          tool: 'memory_usage',
          arguments: {
            action: 'store',
            key: 'test/key',
            value: {
              data: 'test'
            }
          }
        }
      };
      RuvSwarm.storeMemory.mockResolvedValue({
        stored: true
      });
      yield server.handleMessage(mockClient, JSON.stringify(message));
      expect(RuvSwarm.storeMemory).toHaveBeenCalledWith('test/key', {
        data: 'test'
      });
    }));
    it('should handle memory_usage tool with retrieve action', /*#__PURE__*/_asyncToGenerator(function* () {
      const message = {
        jsonrpc: '2.0',
        id: 5,
        method: 'tool_call',
        params: {
          tool: 'memory_usage',
          arguments: {
            action: 'retrieve',
            key: 'test/key'
          }
        }
      };
      RuvSwarm.retrieveMemory.mockResolvedValue({
        data: 'test'
      });
      yield server.handleMessage(mockClient, JSON.stringify(message));
      expect(RuvSwarm.retrieveMemory).toHaveBeenCalledWith('test/key');
    }));
    it('should handle memory_usage tool with list action', /*#__PURE__*/_asyncToGenerator(function* () {
      const message = {
        jsonrpc: '2.0',
        id: 6,
        method: 'tool_call',
        params: {
          tool: 'memory_usage',
          arguments: {
            action: 'list',
            pattern: 'test/*'
          }
        }
      };
      RuvSwarm.listMemoryKeys.mockResolvedValue(['test/key1', 'test/key2']);
      yield server.handleMessage(mockClient, JSON.stringify(message));
      expect(RuvSwarm.listMemoryKeys).toHaveBeenCalledWith('test/*');
    }));
    it('should handle neural_train tool', /*#__PURE__*/_asyncToGenerator(function* () {
      const message = {
        jsonrpc: '2.0',
        id: 7,
        method: 'tool_call',
        params: {
          tool: 'neural_train',
          arguments: {
            agentId: 'agent-123',
            data: [1, 2, 3],
            epochs: 100
          }
        }
      };
      RuvSwarm.trainNeuralAgent.mockResolvedValue({
        trained: true
      });
      yield server.handleMessage(mockClient, JSON.stringify(message));
      expect(RuvSwarm.trainNeuralAgent).toHaveBeenCalledWith('agent-123', [1, 2, 3], 100);
    }));
    it('should handle benchmark_run tool', /*#__PURE__*/_asyncToGenerator(function* () {
      const message = {
        jsonrpc: '2.0',
        id: 8,
        method: 'tool_call',
        params: {
          tool: 'benchmark_run',
          arguments: {
            suite: 'full',
            iterations: 10
          }
        }
      };
      RuvSwarm.runBenchmark.mockResolvedValue({
        results: {
          performance: 'excellent'
        }
      });
      yield server.handleMessage(mockClient, JSON.stringify(message));
      expect(RuvSwarm.runBenchmark).toHaveBeenCalledWith('full', 10);
    }));
    it('should handle invalid JSON', /*#__PURE__*/_asyncToGenerator(function* () {
      yield server.handleMessage(mockClient, 'invalid json');
      expect(mockClient.send).toHaveBeenCalledWith(expect.stringContaining('"error"'));
    }));
    it('should handle unknown tools', /*#__PURE__*/_asyncToGenerator(function* () {
      const message = {
        jsonrpc: '2.0',
        id: 9,
        method: 'tool_call',
        params: {
          tool: 'unknown_tool',
          arguments: {}
        }
      };
      yield server.handleMessage(mockClient, JSON.stringify(message));
      expect(mockClient.send).toHaveBeenCalledWith(expect.stringContaining('Unknown tool: unknown_tool'));
    }));
    it('should handle tool errors gracefully', /*#__PURE__*/_asyncToGenerator(function* () {
      const message = {
        jsonrpc: '2.0',
        id: 10,
        method: 'tool_call',
        params: {
          tool: 'swarm_init',
          arguments: {}
        }
      };
      RuvSwarm.init.mockRejectedValue(new Error('Initialization failed'));
      yield server.handleMessage(mockClient, JSON.stringify(message));
      expect(mockClient.send).toHaveBeenCalledWith(expect.stringContaining('Initialization failed'));
    }));
  });
  describe('broadcast', () => {
    it('should send message to all connected clients', /*#__PURE__*/_asyncToGenerator(function* () {
      yield server.start();
      const client1 = _objectSpread(_objectSpread({}, mockClient), {}, {
        readyState: WebSocket.OPEN
      });
      const client2 = _objectSpread(_objectSpread({}, mockClient), {}, {
        readyState: WebSocket.OPEN
      });
      const client3 = _objectSpread(_objectSpread({}, mockClient), {}, {
        readyState: WebSocket.CLOSED
      });
      server.clients.add(client1);
      server.clients.add(client2);
      server.clients.add(client3);
      const message = {
        type: 'broadcast',
        data: 'test'
      };
      server.broadcast(message);
      expect(client1.send).toHaveBeenCalledWith(JSON.stringify(message));
      expect(client2.send).toHaveBeenCalledWith(JSON.stringify(message));
      expect(client3.send).not.toHaveBeenCalled();
    }));
  });
  describe('client management', () => {
    it('should remove client on disconnect', /*#__PURE__*/_asyncToGenerator(function* () {
      yield server.start();
      const connectionHandler = mockWsServer.on.mock.calls.find(call => call[0] === 'connection')[1];
      connectionHandler(mockClient);
      expect(server.clients.has(mockClient)).toBe(true);
      const closeHandler = mockClient.on.mock.calls.find(call => call[0] === 'close')[1];
      closeHandler();
      expect(server.clients.has(mockClient)).toBe(false);
    }));
    it('should handle client errors', /*#__PURE__*/_asyncToGenerator(function* () {
      yield server.start();
      const connectionHandler = mockWsServer.on.mock.calls.find(call => call[0] === 'connection')[1];
      connectionHandler(mockClient);
      const errorHandler = mockClient.on.mock.calls.find(call => call[0] === 'error')[1];
      const consoleError = jest.spyOn(console, 'error').mockImplementation();
      errorHandler(new Error('Client error'));
      expect(consoleError).toHaveBeenCalledWith('Client error:', expect.any(Error));
      consoleError.mockRestore();
    }));
  });
  describe('stop', () => {
    it('should close server and all client connections', /*#__PURE__*/_asyncToGenerator(function* () {
      yield server.start();
      const client1 = _objectSpread({}, mockClient);
      const client2 = _objectSpread({}, mockClient);
      server.clients.add(client1);
      server.clients.add(client2);
      yield server.stop();
      expect(client1.close).toHaveBeenCalled();
      expect(client2.close).toHaveBeenCalled();
      expect(mockWsServer.close).toHaveBeenCalled();
      expect(server.clients.size).toBe(0);
    }));
  });
  describe('error handling', () => {
    it('should handle server errors', /*#__PURE__*/_asyncToGenerator(function* () {
      yield server.start();
      const errorHandler = mockWsServer.on.mock.calls.find(call => call[0] === 'error')[1];
      const consoleError = jest.spyOn(console, 'error').mockImplementation();
      errorHandler(new Error('Server error'));
      expect(consoleError).toHaveBeenCalledWith('WebSocket server error:', expect.any(Error));
      consoleError.mockRestore();
    }));
    it('should handle missing arguments in tool calls', /*#__PURE__*/_asyncToGenerator(function* () {
      yield server.start();
      const connectionHandler = mockWsServer.on.mock.calls.find(call => call[0] === 'connection')[1];
      connectionHandler(mockClient);
      const message = {
        jsonrpc: '2.0',
        id: 11,
        method: 'tool_call',
        params: {
          tool: 'swarm_init'
          // Missing arguments
        }
      };
      yield server.handleMessage(mockClient, JSON.stringify(message));
      expect(mockClient.send).toHaveBeenCalledWith(expect.stringContaining('error'));
    }));
  });
  describe('integration scenarios', () => {
    it('should handle complete swarm workflow', /*#__PURE__*/_asyncToGenerator(function* () {
      yield server.start();
      const connectionHandler = mockWsServer.on.mock.calls.find(call => call[0] === 'connection')[1];
      connectionHandler(mockClient);

      // Initialize swarm
      RuvSwarm.init.mockResolvedValue({
        swarmId: 'swarm-123'
      });
      yield server.handleMessage(mockClient, JSON.stringify({
        jsonrpc: '2.0',
        id: 1,
        method: 'tool_call',
        params: {
          tool: 'swarm_init',
          arguments: {
            topology: 'mesh'
          }
        }
      }));

      // Spawn agents
      RuvSwarm.spawnAgent.mockResolvedValue({
        agentId: 'agent-1'
      });
      yield server.handleMessage(mockClient, JSON.stringify({
        jsonrpc: '2.0',
        id: 2,
        method: 'tool_call',
        params: {
          tool: 'agent_spawn',
          arguments: {
            type: 'researcher'
          }
        }
      }));

      // Execute task
      RuvSwarm.executeTask.mockResolvedValue({
        taskId: 'task-1'
      });
      yield server.handleMessage(mockClient, JSON.stringify({
        jsonrpc: '2.0',
        id: 3,
        method: 'tool_call',
        params: {
          tool: 'task_orchestrate',
          arguments: {
            task: 'Research topic'
          }
        }
      }));

      // Check status
      RuvSwarm.getSwarmStatus.mockResolvedValue({
        status: 'active'
      });
      yield server.handleMessage(mockClient, JSON.stringify({
        jsonrpc: '2.0',
        id: 4,
        method: 'tool_call',
        params: {
          tool: 'swarm_status',
          arguments: {}
        }
      }));
      expect(mockClient.send).toHaveBeenCalledTimes(4);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,