{"version":3,"names":["describe","it","expect","jest","beforeEach","afterEach","RuvSwarm","EnhancedMCPTools","SwarmPersistence","mcpTools","mockRuvSwarm","createSwarm","fn","benchmark","clearAllMocks","restoreAllMocks","_asyncToGenerator","createNestedError","Error","level1","message","level2","level3","mockImplementation","initialize","swarm_init","topology","rejects","toThrow","errors","failingOperations","Promise","reject","results","allSettled","map","op","forEach","result","status","push","reason","toHaveLength","toContain","createCircularError","error1","error2","cause","circularError","JSON","stringify","safeErrorString","String","attemptCount","maxAttempts","backoffTimes","unreliableOperation","_ref5","backoffTime","Math","pow","jitter","random","totalWait","apply","arguments","retryWithBackoff","_ref6","operation","maxRetries","i","error","resolve","setTimeout","_x","toBe","toBeGreaterThan","StatefulService","constructor","state","healthy","data","_this","corruptState","recover","_this2","safeOperation","_this3","includes","service","result1","result2","CircuitBreaker","threshold","timeout","failureThreshold","failureCount","lastFailureTime","execute","_this4","Date","now","onSuccess","onFailure","circuitBreaker","operationCount","flakyOperation","_ref9","resources","cleanupSuccesses","cleanupFailures","FailingResource","id","shouldFailCleanup","acquired","cleanup","_this5","acquireResources","_ref1","shouldFail","cleanupPromises","resource","catch","err","cleanupResults","successfulCleanups","filter","_result$value","value","length","cleanupLog","NestedResource","children","_this6","childCleanupPromises","child","all","leaf1","leaf2","leaf3","branch1","branch2","root","createContextualError","context","timestamp","asyncOperation1","_ref12","setImmediate","step","asyncOperation2","_ref13","wrappedError","originalError","asyncOperation3","_ref14","finalError","errorChain","createComplexError","user","name","metadata","circular","self","complexError","safeSerialize","obj","seen","WeakSet","key","has","add","serialized","AbortController","globalThis","controller","signal","longRunningOperation","_ref17","aborted","_x2","abort","operationWithResources","_ref19","timeoutMs","acquiredResources","timeoutPromise","_","workPromise","race","_x3","r","strategies","immediate","attempt","linear","exponential","fibonacci","fib","next","strategyName","backoffFn","Object","entries","attempts","retryWithStrategy","_ref22","strategy","delay","min","_x4","_x5","_ref23","import","meta","url","process","argv","console","log","run","__filename"],"sources":["error-recovery-edge-cases.test.js"],"sourcesContent":["/**\n * Error Handling and Recovery Edge Cases\n * Tests error propagation, recovery mechanisms, and failure scenarios\n */\n\nimport { describe, it, expect, jest, beforeEach, afterEach } from '@jest/globals';\nimport { RuvSwarm } from '../../src/index-enhanced.js';\nimport { EnhancedMCPTools } from '../../src/mcp-tools-enhanced.js';\nimport { SwarmPersistence } from '../../src/persistence.js';\n\ndescribe('Error Handling and Recovery Edge Cases', () => {\n  let mcpTools;\n  let mockRuvSwarm;\n\n  beforeEach(() => {\n    mockRuvSwarm = {\n      createSwarm: jest.fn(),\n      benchmark: jest.fn(),\n    };\n    mcpTools = new EnhancedMCPTools();\n    jest.clearAllMocks();\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  describe('Error Propagation Edge Cases', () => {\n    it('should handle nested error chains', async () => {\n      const createNestedError = () => {\n        try {\n          throw new Error('Level 1 error');\n        } catch (level1) {\n          try {\n            throw new Error(`Level 2: ${level1.message}`);\n          } catch (level2) {\n            try {\n              throw new Error(`Level 3: ${level2.message}`);\n            } catch (level3) {\n              throw new Error(`Level 4: ${level3.message}`);\n            }\n          }\n        }\n      };\n\n      mockRuvSwarm.createSwarm.mockImplementation(() => {\n        createNestedError();\n      });\n\n      await mcpTools.initialize(mockRuvSwarm);\n      \n      await expect(mcpTools.swarm_init({ topology: 'mesh' }))\n        .rejects.toThrow(/Level 4.*Level 3.*Level 2.*Level 1/);\n    });\n\n    it('should handle error aggregation from multiple sources', async () => {\n      const errors = [];\n      \n      const failingOperations = [\n        () => Promise.reject(new Error('Database error')),\n        () => Promise.reject(new Error('Network error')),\n        () => Promise.reject(new Error('Validation error')),\n        () => Promise.reject(new Error('Permission error')),\n      ];\n\n      const results = await Promise.allSettled(\n        failingOperations.map(op => op())\n      );\n\n      results.forEach(result => {\n        if (result.status === 'rejected') {\n          errors.push(result.reason.message);\n        }\n      });\n\n      expect(errors).toHaveLength(4);\n      expect(errors).toContain('Database error');\n      expect(errors).toContain('Network error');\n      expect(errors).toContain('Validation error');\n      expect(errors).toContain('Permission error');\n    });\n\n    it('should handle circular error references', async () => {\n      const createCircularError = () => {\n        const error1 = new Error('Error 1');\n        const error2 = new Error('Error 2');\n        \n        // Create circular reference\n        error1.cause = error2;\n        error2.cause = error1;\n        \n        return error1;\n      };\n\n      const circularError = createCircularError();\n      \n      // Should handle circular references without infinite loops\n      expect(() => {\n        JSON.stringify(circularError, null, 2);\n      }).toThrow(/circular|Converting/);\n\n      // Custom error handler should handle this gracefully\n      const safeErrorString = String(circularError);\n      expect(safeErrorString).toContain('Error 1');\n    });\n  });\n\n  describe('Recovery Mechanism Edge Cases', () => {\n    it('should implement exponential backoff with jitter', async () => {\n      let attemptCount = 0;\n      const maxAttempts = 5;\n      const backoffTimes = [];\n\n      const unreliableOperation = async () => {\n        attemptCount++;\n        const backoffTime = Math.pow(2, attemptCount - 1) * 100; // Exponential backoff\n        const jitter = Math.random() * 100; // Add jitter\n        const totalWait = backoffTime + jitter;\n        \n        backoffTimes.push(totalWait);\n\n        if (attemptCount < maxAttempts) {\n          throw new Error(`Attempt ${attemptCount} failed`);\n        }\n        \n        return `Success after ${attemptCount} attempts`;\n      };\n\n      const retryWithBackoff = async (operation, maxRetries = 5) => {\n        for (let i = 0; i < maxRetries; i++) {\n          try {\n            return await operation();\n          } catch (error) {\n            if (i === maxRetries - 1) throw error;\n            \n            const backoffTime = backoffTimes[i];\n            await new Promise(resolve => setTimeout(resolve, backoffTime));\n          }\n        }\n      };\n\n      const result = await retryWithBackoff(unreliableOperation);\n      \n      expect(result).toContain('Success');\n      expect(attemptCount).toBe(maxAttempts);\n      expect(backoffTimes).toHaveLength(maxAttempts);\n      \n      // Verify exponential growth with jitter\n      expect(backoffTimes[1]).toBeGreaterThan(backoffTimes[0]);\n      expect(backoffTimes[2]).toBeGreaterThan(backoffTimes[1]);\n    });\n\n    it('should handle recovery from corrupted state', async () => {\n      class StatefulService {\n        constructor() {\n          this.state = { healthy: true, data: [] };\n        }\n\n        async operation() {\n          if (!this.state.healthy) {\n            throw new Error('Service in corrupted state');\n          }\n          return 'Operation successful';\n        }\n\n        corruptState() {\n          this.state.healthy = false;\n          this.state.data = null;\n        }\n\n        async recover() {\n          // Simulate recovery process\n          this.state = { healthy: true, data: [] };\n          await new Promise(resolve => setTimeout(resolve, 100));\n        }\n\n        async safeOperation() {\n          try {\n            return await this.operation();\n          } catch (error) {\n            if (error.message.includes('corrupted')) {\n              await this.recover();\n              return await this.operation();\n            }\n            throw error;\n          }\n        }\n      }\n\n      const service = new StatefulService();\n      \n      // First operation should succeed\n      const result1 = await service.safeOperation();\n      expect(result1).toBe('Operation successful');\n      \n      // Corrupt the state\n      service.corruptState();\n      \n      // Operation should fail but recover\n      const result2 = await service.safeOperation();\n      expect(result2).toBe('Operation successful');\n      expect(service.state.healthy).toBe(true);\n    });\n\n    it('should handle cascading failures with circuit breaker', async () => {\n      class CircuitBreaker {\n        constructor(threshold = 5, timeout = 60000) {\n          this.failureThreshold = threshold;\n          this.timeout = timeout;\n          this.failureCount = 0;\n          this.lastFailureTime = null;\n          this.state = 'CLOSED'; // CLOSED, OPEN, HALF_OPEN\n        }\n\n        async execute(operation) {\n          if (this.state === 'OPEN') {\n            if (Date.now() - this.lastFailureTime > this.timeout) {\n              this.state = 'HALF_OPEN';\n            } else {\n              throw new Error('Circuit breaker is OPEN');\n            }\n          }\n\n          try {\n            const result = await operation();\n            this.onSuccess();\n            return result;\n          } catch (error) {\n            this.onFailure();\n            throw error;\n          }\n        }\n\n        onSuccess() {\n          this.failureCount = 0;\n          this.state = 'CLOSED';\n        }\n\n        onFailure() {\n          this.failureCount++;\n          this.lastFailureTime = Date.now();\n          \n          if (this.failureCount >= this.failureThreshold) {\n            this.state = 'OPEN';\n          }\n        }\n      }\n\n      const circuitBreaker = new CircuitBreaker(3, 1000);\n      let operationCount = 0;\n\n      const flakyOperation = async () => {\n        operationCount++;\n        if (operationCount <= 5) {\n          throw new Error(`Operation failed (${operationCount})`);\n        }\n        return 'Success';\n      };\n\n      // First 3 failures should succeed in failing\n      for (let i = 0; i < 3; i++) {\n        await expect(circuitBreaker.execute(flakyOperation))\n          .rejects.toThrow(/Operation failed/);\n      }\n\n      expect(circuitBreaker.state).toBe('OPEN');\n\n      // Next attempts should fail immediately due to circuit breaker\n      await expect(circuitBreaker.execute(flakyOperation))\n        .rejects.toThrow(/Circuit breaker is OPEN/);\n\n      // Wait for timeout and try again\n      await new Promise(resolve => setTimeout(resolve, 1100));\n      \n      // Should succeed now (operationCount > 5)\n      const result = await circuitBreaker.execute(flakyOperation);\n      expect(result).toBe('Success');\n      expect(circuitBreaker.state).toBe('CLOSED');\n    });\n  });\n\n  describe('Resource Cleanup on Failure', () => {\n    it('should cleanup resources even when cleanup fails', async () => {\n      const resources = [];\n      let cleanupSuccesses = 0;\n      let cleanupFailures = 0;\n\n      class FailingResource {\n        constructor(id, shouldFailCleanup = false) {\n          this.id = id;\n          this.shouldFailCleanup = shouldFailCleanup;\n          this.acquired = true;\n          resources.push(this);\n        }\n\n        async cleanup() {\n          if (this.shouldFailCleanup) {\n            cleanupFailures++;\n            throw new Error(`Cleanup failed for resource ${this.id}`);\n          }\n          this.acquired = false;\n          cleanupSuccesses++;\n        }\n      }\n\n      const acquireResources = async () => {\n        const acquired = [];\n        try {\n          // Acquire resources, some will fail cleanup\n          for (let i = 0; i < 10; i++) {\n            const shouldFail = i % 3 === 0; // Every 3rd resource fails cleanup\n            acquired.push(new FailingResource(i, shouldFail));\n          }\n          \n          // Simulate operation failure\n          throw new Error('Operation failed');\n          \n        } catch (error) {\n          // Cleanup all resources, even if some cleanups fail\n          const cleanupPromises = acquired.map(resource => \n            resource.cleanup().catch(err => ({ error: err.message }))\n          );\n          \n          const cleanupResults = await Promise.allSettled(cleanupPromises);\n          \n          // Count successful cleanups\n          const successfulCleanups = cleanupResults.filter(\n            result => result.status === 'fulfilled' && !result.value?.error\n          ).length;\n          \n          throw new Error(`Operation failed. Cleaned up ${successfulCleanups}/${acquired.length} resources`);\n        }\n      };\n\n      await expect(acquireResources()).rejects.toThrow(/Operation failed/);\n      \n      expect(cleanupSuccesses).toBe(7); // 7 resources should cleanup successfully\n      expect(cleanupFailures).toBe(3); // 3 resources should fail cleanup\n    });\n\n    it('should handle nested resource cleanup failures', async () => {\n      const cleanupLog = [];\n\n      class NestedResource {\n        constructor(id, children = []) {\n          this.id = id;\n          this.children = children;\n          this.acquired = true;\n        }\n\n        async cleanup() {\n          cleanupLog.push(`Cleaning up ${this.id}`);\n          \n          // Cleanup children first\n          const childCleanupPromises = this.children.map(child => \n            child.cleanup().catch(error => {\n              cleanupLog.push(`Child cleanup failed: ${error.message}`);\n              return { error };\n            })\n          );\n          \n          await Promise.all(childCleanupPromises);\n          \n          // Then cleanup self\n          if (this.id.includes('fail')) {\n            throw new Error(`Failed to cleanup ${this.id}`);\n          }\n          \n          this.acquired = false;\n          cleanupLog.push(`Cleaned up ${this.id}`);\n        }\n      }\n\n      // Create nested resource structure\n      const leaf1 = new NestedResource('leaf-1');\n      const leaf2 = new NestedResource('leaf-2-fail');\n      const leaf3 = new NestedResource('leaf-3');\n      \n      const branch1 = new NestedResource('branch-1', [leaf1, leaf2]);\n      const branch2 = new NestedResource('branch-2-fail', [leaf3]);\n      \n      const root = new NestedResource('root', [branch1, branch2]);\n\n      await expect(root.cleanup()).rejects.toThrow(/Failed to cleanup/);\n      \n      // Check cleanup log\n      expect(cleanupLog).toContain('Cleaning up root');\n      expect(cleanupLog).toContain('Cleaning up branch-1');\n      expect(cleanupLog).toContain('Cleaning up leaf-1');\n      expect(cleanupLog).toContain('Child cleanup failed: Failed to cleanup leaf-2-fail');\n    });\n  });\n\n  describe('Error Context Preservation', () => {\n    it('should preserve error context through async boundaries', async () => {\n      const createContextualError = (context) => {\n        const error = new Error('Base error');\n        error.context = context;\n        error.timestamp = Date.now();\n        return error;\n      };\n\n      const asyncOperation1 = async () => {\n        await new Promise(resolve => setImmediate(resolve));\n        throw createContextualError({ operation: 'async-1', step: 'validation' });\n      };\n\n      const asyncOperation2 = async () => {\n        try {\n          await asyncOperation1();\n        } catch (error) {\n          const wrappedError = new Error(`Wrapped: ${error.message}`);\n          wrappedError.originalError = error;\n          wrappedError.context = { operation: 'async-2', step: 'processing' };\n          throw wrappedError;\n        }\n      };\n\n      const asyncOperation3 = async () => {\n        try {\n          await asyncOperation2();\n        } catch (error) {\n          const finalError = new Error(`Final: ${error.message}`);\n          finalError.errorChain = [error];\n          finalError.context = { operation: 'async-3', step: 'finalization' };\n          throw finalError;\n        }\n      };\n\n      try {\n        await asyncOperation3();\n      } catch (error) {\n        expect(error.message).toContain('Final: Wrapped: Base error');\n        expect(error.context.operation).toBe('async-3');\n        expect(error.errorChain[0].originalError.context.operation).toBe('async-1');\n      }\n    });\n\n    it('should handle error context serialization', async () => {\n      const createComplexError = () => {\n        const error = new Error('Complex error');\n        error.context = {\n          user: { id: 123, name: 'test' },\n          operation: 'data-processing',\n          metadata: {\n            timestamp: new Date(),\n            circular: {}, // Will create circular reference\n          },\n        };\n        \n        // Create circular reference\n        error.context.metadata.circular.self = error.context.metadata;\n        \n        return error;\n      };\n\n      const complexError = createComplexError();\n      \n      // Test safe serialization\n      const safeSerialize = (obj) => {\n        const seen = new WeakSet();\n        return JSON.stringify(obj, (key, value) => {\n          if (typeof value === 'object' && value !== null) {\n            if (seen.has(value)) {\n              return '[Circular]';\n            }\n            seen.add(value);\n          }\n          return value;\n        });\n      };\n\n      const serialized = safeSerialize({\n        message: complexError.message,\n        context: complexError.context,\n      });\n\n      expect(serialized).toContain('Complex error');\n      expect(serialized).toContain('[Circular]');\n      expect(serialized).toContain('data-processing');\n    });\n  });\n\n  describe('Timeout and Cancellation Edge Cases', () => {\n    it('should handle operation cancellation during execution', async () => {\n      const { AbortController } = globalThis;\n      \n      if (!AbortController) {\n        // Skip if AbortController not available\n        return;\n      }\n\n      const controller = new AbortController();\n      const { signal } = controller;\n\n      const longRunningOperation = async (signal) => {\n        for (let i = 0; i < 1000; i++) {\n          if (signal.aborted) {\n            throw new Error('Operation was cancelled');\n          }\n          \n          await new Promise(resolve => setTimeout(resolve, 10));\n        }\n        return 'Completed';\n      };\n\n      // Cancel after 100ms\n      setTimeout(() => controller.abort(), 100);\n\n      await expect(longRunningOperation(signal))\n        .rejects.toThrow('Operation was cancelled');\n    });\n\n    it('should handle timeout with resource cleanup', async () => {\n      const resources = [];\n      \n      const operationWithResources = async (timeoutMs) => {\n        const acquiredResources = [];\n        const timeoutPromise = new Promise((_, reject) => {\n          setTimeout(() => reject(new Error('Operation timeout')), timeoutMs);\n        });\n\n        try {\n          const workPromise = (async () => {\n            // Acquire resources\n            for (let i = 0; i < 5; i++) {\n              const resource = { id: i, acquired: true };\n              acquiredResources.push(resource);\n              resources.push(resource);\n              await new Promise(resolve => setTimeout(resolve, 50));\n            }\n\n            // Do work (this will timeout)\n            await new Promise(resolve => setTimeout(resolve, 1000));\n            return 'Work completed';\n          })();\n\n          return await Promise.race([workPromise, timeoutPromise]);\n        } catch (error) {\n          // Cleanup resources on timeout\n          acquiredResources.forEach(resource => {\n            resource.acquired = false;\n          });\n          throw error;\n        }\n      };\n\n      await expect(operationWithResources(200)).rejects.toThrow('Operation timeout');\n      \n      // Check that resources were cleaned up\n      const acquiredResources = resources.filter(r => r.acquired);\n      expect(acquiredResources).toHaveLength(0);\n    });\n  });\n\n  describe('Error Recovery Strategies', () => {\n    it('should implement retry with different strategies', async () => {\n      const strategies = {\n        immediate: (attempt) => 0,\n        linear: (attempt) => attempt * 100,\n        exponential: (attempt) => Math.pow(2, attempt) * 100,\n        fibonacci: (() => {\n          const fib = [100, 100];\n          return (attempt) => {\n            if (attempt < 2) return fib[attempt];\n            const next = fib[0] + fib[1];\n            fib[0] = fib[1];\n            fib[1] = next;\n            return next;\n          };\n        })(),\n      };\n\n      for (const [strategyName, backoffFn] of Object.entries(strategies)) {\n        let attempts = 0;\n        const maxAttempts = 4;\n\n        const retryWithStrategy = async (operation, strategy) => {\n          for (let attempt = 0; attempt < maxAttempts; attempt++) {\n            try {\n              return await operation();\n            } catch (error) {\n              if (attempt === maxAttempts - 1) throw error;\n              \n              const delay = strategy(attempt);\n              await new Promise(resolve => setTimeout(resolve, Math.min(delay, 1000)));\n            }\n          }\n        };\n\n        const flakyOperation = async () => {\n          attempts++;\n          if (attempts < 3) {\n            throw new Error(`${strategyName} attempt ${attempts} failed`);\n          }\n          return `${strategyName} succeeded`;\n        };\n\n        const result = await retryWithStrategy(flakyOperation, backoffFn);\n        expect(result).toContain('succeeded');\n        \n        // Reset for next strategy\n        attempts = 0;\n      }\n    });\n  });\n});\n\n// Run tests when executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  console.log('Running error handling and recovery edge case tests...');\n  \n  // Run all tests\n  const { run } = await import('../test-runner.js');\n  await run(__filename);\n}"],"mappings":"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","ignoreList":[]}