{"version":3,"names":["expect","require","sinon","os","RuvSwarm","PerformanceMonitor","describe","sandbox","swarm","performanceMonitor","beforeEach","createSandbox","afterEach","_asyncToGenerator","shutdown","restore","it","timeout","init","topology","maxAgents","performance","monitoring","adaptiveScaling","startTracking","agents","batchSize","totalAgents","batch","batchPromises","i","agentType","push","spawnAgent","type","lightweight","batchAgents","Promise","all","resolve","setTimeout","creationMetrics","stopTracking","to","have","lengthOf","totalTime","be","lessThan","averageTimePerOperation","tasks","orchestrateTask","task","strategy","taskResults","executionMetrics","forEach","result","property","resourceStats","getResourceStats","agentCount","equal","memoryUsage","cpuUsage","targetResponseTime","autoOptimize","Array","fill","map","loadLevels","responseTimesByLoad","load","requests","startTime","Date","now","executeAgentTask","length","id","complexity","results","metrics","avgResponseTime","p95ResponseTime","percentile95","p99ResponseTime","percentile99","successRate","filter","r","success","Object","values","at","least","initialAgents","scalingPolicy","enabled","minAgents","scaleUpThreshold","scaleDownThreshold","cooldownPeriod","scalingEvents","on","event","currentLoad","loadGenerator","setInterval","duration","clearInterval","scaleUpEvents","e","action","scaleDownEvents","finalStatus","getStatus","within","memory","gcInterval","maxHeapUsage","memorySnapshots","memoryInterval","timestamp","heapUsed","process","external","rss","workloadTasks","data","Buffer","alloc","Math","random","splice","avgMemory","reduce","sum","s","maxMemory","max","minMemory","min","memoryVariance","firstHalf","slice","secondHalf","avgFirstHalf","avgSecondHalf","streaming","chunkSize","specialization","largeDataSize","chunks","processingTasks","chunkId","size","operation","true","processed","throughput","greaterThan","memoryStats","getMemoryStats","peakUsage","workloadBalancing","weight","workloadTypes","frequency","totalTasks","rand","cumulativeFreq","selectedWorkload","workload","estimatedDuration","affinityType","replace","resultsByType","w","count","successful","index","taskType","entries","stats","avgDuration","expectedDuration","find","stages","name","pipelining","bufferSize","pipeline","createPipeline","processedItems","totalItems","feedInterval","pipelineStats","getStats","stage","utilization","utilizations","minUtilization","maxUtilization","initialMemory","initialHandles","_getActiveHandles","initialRequests","_getActiveRequests","cleanup","aggressive","trackLeaks","global","gc","finalMemory","finalHandles","finalRequests","memoryGrowth","lessThanOrEqual"],"sources":["load-testing.test.js"],"sourcesContent":["const { expect } = require('chai');\nconst sinon = require('sinon');\nconst os = require('os');\nconst RuvSwarm = require('../../../../src/core/ruv-swarm');\nconst PerformanceMonitor = require('../../../../src/performance-monitor');\n\ndescribe('Performance Under Load Integration Tests', () => {\n  let sandbox;\n  let swarm;\n  let performanceMonitor;\n\n  beforeEach(() => {\n    sandbox = sinon.createSandbox();\n    performanceMonitor = new PerformanceMonitor();\n  });\n\n  afterEach(async () => {\n    if (swarm) {\n      await swarm.shutdown();\n    }\n    sandbox.restore();\n  });\n\n  describe('High Agent Count Stress Tests', () => {\n    it('should handle 100+ agents efficiently', async function() {\n      this.timeout(60000); // 60 second timeout\n\n      swarm = new RuvSwarm();\n      await swarm.init({ \n        topology: 'hierarchical',\n        maxAgents: 150,\n        performance: {\n          monitoring: true,\n          adaptiveScaling: true\n        }\n      });\n\n      performanceMonitor.startTracking('agent-creation');\n\n      // Spawn agents in batches\n      const agents = [];\n      const batchSize = 20;\n      const totalAgents = 100;\n\n      for (let batch = 0; batch < totalAgents / batchSize; batch++) {\n        const batchPromises = [];\n        for (let i = 0; i < batchSize; i++) {\n          const agentType = ['coder', 'researcher', 'analyst', 'optimizer'][i % 4];\n          batchPromises.push(swarm.spawnAgent({ \n            type: agentType,\n            lightweight: true \n          }));\n        }\n        \n        const batchAgents = await Promise.all(batchPromises);\n        agents.push(...batchAgents);\n        \n        // Brief pause between batches\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n\n      const creationMetrics = performanceMonitor.stopTracking('agent-creation');\n\n      // Verify all agents created\n      expect(agents).to.have.lengthOf(100);\n      \n      // Check creation performance\n      expect(creationMetrics.totalTime).to.be.lessThan(30000); // Under 30 seconds\n      expect(creationMetrics.averageTimePerOperation).to.be.lessThan(300); // Under 300ms per agent\n\n      // Test concurrent task execution\n      performanceMonitor.startTracking('task-execution');\n\n      const tasks = [];\n      for (let i = 0; i < 50; i++) {\n        tasks.push(swarm.orchestrateTask({\n          task: `Stress test task ${i}`,\n          strategy: 'parallel',\n          maxAgents: 5\n        }));\n      }\n\n      const taskResults = await Promise.all(tasks);\n      const executionMetrics = performanceMonitor.stopTracking('task-execution');\n\n      // Verify task completion\n      expect(taskResults).to.have.lengthOf(50);\n      taskResults.forEach(result => {\n        expect(result).to.have.property('id');\n        expect(result).to.have.property('status');\n      });\n\n      // Check execution performance\n      expect(executionMetrics.totalTime).to.be.lessThan(20000); // Under 20 seconds for 50 tasks\n      \n      // Monitor resource usage\n      const resourceStats = await swarm.getResourceStats();\n      expect(resourceStats.agentCount).to.equal(100);\n      expect(resourceStats.memoryUsage).to.be.lessThan(1024 * 1024 * 1024); // Under 1GB\n      expect(resourceStats.cpuUsage).to.be.lessThan(80); // Under 80% CPU\n    });\n\n    it('should maintain response times under heavy load', async function() {\n      this.timeout(30000);\n\n      swarm = new RuvSwarm();\n      await swarm.init({ \n        topology: 'mesh',\n        maxAgents: 50,\n        performance: {\n          targetResponseTime: 100, // 100ms target\n          autoOptimize: true\n        }\n      });\n\n      // Create worker agents\n      const agents = await Promise.all(\n        Array(30).fill().map(() => swarm.spawnAgent({ type: 'coder' }))\n      );\n\n      // Measure response times under increasing load\n      const loadLevels = [10, 50, 100, 200];\n      const responseTimesByLoad = {};\n\n      for (const load of loadLevels) {\n        performanceMonitor.startTracking(`load-${load}`);\n        \n        const requests = [];\n        const startTime = Date.now();\n\n        // Send concurrent requests\n        for (let i = 0; i < load; i++) {\n          requests.push(swarm.executeAgentTask(\n            agents[i % agents.length].id,\n            { task: 'Quick computation', complexity: 'low' }\n          ));\n        }\n\n        const results = await Promise.all(requests);\n        const metrics = performanceMonitor.stopTracking(`load-${load}`);\n\n        responseTimesByLoad[load] = {\n          avgResponseTime: metrics.averageTimePerOperation,\n          p95ResponseTime: metrics.percentile95,\n          p99ResponseTime: metrics.percentile99,\n          successRate: results.filter(r => r.success).length / results.length\n        };\n      }\n\n      // Verify performance doesn't degrade significantly\n      expect(responseTimesByLoad[10].avgResponseTime).to.be.lessThan(150);\n      expect(responseTimesByLoad[50].avgResponseTime).to.be.lessThan(300);\n      expect(responseTimesByLoad[100].avgResponseTime).to.be.lessThan(500);\n      expect(responseTimesByLoad[200].avgResponseTime).to.be.lessThan(1000);\n\n      // Success rate should remain high\n      Object.values(responseTimesByLoad).forEach(metrics => {\n        expect(metrics.successRate).to.be.at.least(0.95);\n      });\n    });\n\n    it('should scale dynamically based on load', async function() {\n      this.timeout(30000);\n\n      swarm = new RuvSwarm();\n      await swarm.init({ \n        topology: 'elastic',\n        initialAgents: 5,\n        scalingPolicy: {\n          enabled: true,\n          minAgents: 5,\n          maxAgents: 50,\n          scaleUpThreshold: 0.8,\n          scaleDownThreshold: 0.3,\n          cooldownPeriod: 2000\n        }\n      });\n\n      // Monitor scaling events\n      const scalingEvents = [];\n      swarm.on('scaling', (event) => scalingEvents.push(event));\n\n      // Start with baseline load\n      let currentLoad = 10;\n      const loadGenerator = setInterval(async () => {\n        const tasks = [];\n        for (let i = 0; i < currentLoad; i++) {\n          tasks.push(swarm.orchestrateTask({\n            task: 'Dynamic load task',\n            duration: 500 // 500ms tasks\n          }));\n        }\n        await Promise.all(tasks);\n      }, 1000);\n\n      // Increase load after 5 seconds\n      setTimeout(() => { currentLoad = 50; }, 5000);\n\n      // Decrease load after 10 seconds\n      setTimeout(() => { currentLoad = 5; }, 10000);\n\n      // Run for 15 seconds\n      await new Promise(resolve => setTimeout(resolve, 15000));\n      clearInterval(loadGenerator);\n\n      // Verify scaling occurred\n      expect(scalingEvents).to.have.length.at.least(2);\n      \n      const scaleUpEvents = scalingEvents.filter(e => e.action === 'scale-up');\n      const scaleDownEvents = scalingEvents.filter(e => e.action === 'scale-down');\n      \n      expect(scaleUpEvents).to.have.length.at.least(1);\n      expect(scaleDownEvents).to.have.length.at.least(1);\n\n      // Final agent count should be reasonable\n      const finalStatus = await swarm.getStatus();\n      expect(finalStatus.agents.length).to.be.within(5, 20);\n    });\n  });\n\n  describe('Memory Usage Optimization', () => {\n    it('should maintain stable memory under sustained load', async function() {\n      this.timeout(45000);\n\n      swarm = new RuvSwarm();\n      await swarm.init({ \n        topology: 'mesh',\n        maxAgents: 20,\n        memory: {\n          monitoring: true,\n          gcInterval: 2000,\n          maxHeapUsage: 512 * 1024 * 1024 // 512MB\n        }\n      });\n\n      // Track memory over time\n      const memorySnapshots = [];\n      const memoryInterval = setInterval(() => {\n        memorySnapshots.push({\n          timestamp: Date.now(),\n          heapUsed: process.memoryUsage().heapUsed,\n          external: process.memoryUsage().external,\n          rss: process.memoryUsage().rss\n        });\n      }, 1000);\n\n      // Create agents\n      const agents = await Promise.all(\n        Array(20).fill().map(() => swarm.spawnAgent({ type: 'coder' }))\n      );\n\n      // Sustained workload for 30 seconds\n      const startTime = Date.now();\n      const workloadTasks = [];\n\n      while (Date.now() - startTime < 30000) {\n        // Create tasks with varying memory requirements\n        for (let i = 0; i < 5; i++) {\n          workloadTasks.push(swarm.orchestrateTask({\n            task: 'Memory test task',\n            data: Buffer.alloc(Math.random() * 1024 * 1024), // 0-1MB random data\n            strategy: 'parallel'\n          }));\n        }\n        \n        // Process in batches\n        if (workloadTasks.length >= 20) {\n          await Promise.all(workloadTasks.splice(0, 20));\n        }\n        \n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n\n      // Process remaining tasks\n      await Promise.all(workloadTasks);\n      clearInterval(memoryInterval);\n\n      // Analyze memory usage\n      const avgMemory = memorySnapshots.reduce((sum, s) => sum + s.heapUsed, 0) / memorySnapshots.length;\n      const maxMemory = Math.max(...memorySnapshots.map(s => s.heapUsed));\n      const minMemory = Math.min(...memorySnapshots.map(s => s.heapUsed));\n      const memoryVariance = maxMemory - minMemory;\n\n      // Memory should be stable\n      expect(avgMemory).to.be.lessThan(300 * 1024 * 1024); // Average under 300MB\n      expect(maxMemory).to.be.lessThan(400 * 1024 * 1024); // Peak under 400MB\n      expect(memoryVariance).to.be.lessThan(100 * 1024 * 1024); // Variance under 100MB\n\n      // Check for memory leaks\n      const firstHalf = memorySnapshots.slice(0, memorySnapshots.length / 2);\n      const secondHalf = memorySnapshots.slice(memorySnapshots.length / 2);\n      \n      const avgFirstHalf = firstHalf.reduce((sum, s) => sum + s.heapUsed, 0) / firstHalf.length;\n      const avgSecondHalf = secondHalf.reduce((sum, s) => sum + s.heapUsed, 0) / secondHalf.length;\n      \n      // Second half shouldn't be significantly higher (no leak)\n      expect(avgSecondHalf).to.be.lessThan(avgFirstHalf * 1.2);\n    });\n\n    it('should efficiently handle large data processing', async function() {\n      this.timeout(30000);\n\n      swarm = new RuvSwarm();\n      await swarm.init({ \n        topology: 'hierarchical',\n        maxAgents: 10,\n        streaming: {\n          enabled: true,\n          chunkSize: 1024 * 1024 // 1MB chunks\n        }\n      });\n\n      // Create specialized agents\n      const agents = await Promise.all([\n        swarm.spawnAgent({ type: 'coder', specialization: 'data-processing' }),\n        swarm.spawnAgent({ type: 'analyst', specialization: 'aggregation' }),\n        swarm.spawnAgent({ type: 'optimizer', specialization: 'compression' })\n      ]);\n\n      // Process large dataset\n      const largeDataSize = 50 * 1024 * 1024; // 50MB\n      const chunks = 50;\n      \n      performanceMonitor.startTracking('large-data-processing');\n\n      const processingTasks = [];\n      for (let i = 0; i < chunks; i++) {\n        processingTasks.push(swarm.orchestrateTask({\n          task: 'Process data chunk',\n          data: {\n            chunkId: i,\n            size: largeDataSize / chunks,\n            operation: 'transform'\n          },\n          streaming: true\n        }));\n      }\n\n      const results = await Promise.all(processingTasks);\n      const metrics = performanceMonitor.stopTracking('large-data-processing');\n\n      // Verify all chunks processed\n      expect(results).to.have.lengthOf(chunks);\n      results.forEach(result => {\n        expect(result.success).to.be.true;\n        expect(result.processed).to.be.true;\n      });\n\n      // Check processing efficiency\n      const throughput = largeDataSize / (metrics.totalTime / 1000); // bytes per second\n      expect(throughput).to.be.greaterThan(10 * 1024 * 1024); // At least 10MB/s\n\n      // Memory shouldn't spike\n      const memoryStats = await swarm.getMemoryStats();\n      expect(memoryStats.peakUsage).to.be.lessThan(200 * 1024 * 1024); // Peak under 200MB\n    });\n  });\n\n  describe('Concurrent Operation Performance', () => {\n    it('should handle mixed workload efficiently', async function() {\n      this.timeout(30000);\n\n      swarm = new RuvSwarm();\n      await swarm.init({ \n        topology: 'mesh',\n        maxAgents: 30,\n        workloadBalancing: {\n          enabled: true,\n          strategy: 'weighted-round-robin'\n        }\n      });\n\n      // Create diverse agent pool\n      const agents = await Promise.all([\n        ...Array(10).fill().map(() => swarm.spawnAgent({ type: 'coder', weight: 3 })),\n        ...Array(5).fill().map(() => swarm.spawnAgent({ type: 'researcher', weight: 2 })),\n        ...Array(5).fill().map(() => swarm.spawnAgent({ type: 'analyst', weight: 2 })),\n        ...Array(5).fill().map(() => swarm.spawnAgent({ type: 'optimizer', weight: 1 })),\n        ...Array(5).fill().map(() => swarm.spawnAgent({ type: 'tester', weight: 1 }))\n      ]);\n\n      // Define mixed workload\n      const workloadTypes = [\n        { type: 'coding', duration: 200, frequency: 0.4 },\n        { type: 'research', duration: 500, frequency: 0.2 },\n        { type: 'analysis', duration: 300, frequency: 0.2 },\n        { type: 'optimization', duration: 1000, frequency: 0.1 },\n        { type: 'testing', duration: 400, frequency: 0.1 }\n      ];\n\n      // Generate mixed tasks\n      const tasks = [];\n      const totalTasks = 200;\n      \n      performanceMonitor.startTracking('mixed-workload');\n\n      for (let i = 0; i < totalTasks; i++) {\n        const rand = Math.random();\n        let cumulativeFreq = 0;\n        let selectedWorkload;\n\n        for (const workload of workloadTypes) {\n          cumulativeFreq += workload.frequency;\n          if (rand < cumulativeFreq) {\n            selectedWorkload = workload;\n            break;\n          }\n        }\n\n        tasks.push(swarm.orchestrateTask({\n          task: `${selectedWorkload.type} task ${i}`,\n          type: selectedWorkload.type,\n          estimatedDuration: selectedWorkload.duration,\n          affinityType: selectedWorkload.type.replace('ing', 'er')\n        }));\n      }\n\n      const results = await Promise.all(tasks);\n      const metrics = performanceMonitor.stopTracking('mixed-workload');\n\n      // Analyze results by type\n      const resultsByType = {};\n      workloadTypes.forEach(w => {\n        resultsByType[w.type] = {\n          count: 0,\n          successful: 0,\n          totalTime: 0\n        };\n      });\n\n      results.forEach((result, index) => {\n        const taskType = tasks[index].type;\n        if (resultsByType[taskType]) {\n          resultsByType[taskType].count++;\n          if (result.success) resultsByType[taskType].successful++;\n          if (result.duration) resultsByType[taskType].totalTime += result.duration;\n        }\n      });\n\n      // Verify balanced execution\n      Object.entries(resultsByType).forEach(([type, stats]) => {\n        const successRate = stats.successful / stats.count;\n        expect(successRate).to.be.at.least(0.95);\n        \n        // Average duration should be close to estimated\n        const avgDuration = stats.totalTime / stats.count;\n        const expectedDuration = workloadTypes.find(w => w.type === type).duration;\n        expect(avgDuration).to.be.within(expectedDuration * 0.8, expectedDuration * 1.5);\n      });\n\n      // Overall performance\n      expect(metrics.totalTime).to.be.lessThan(10000); // Complete in under 10 seconds\n      expect(metrics.successRate).to.be.at.least(0.95);\n    });\n\n    it('should optimize throughput with pipelining', async function() {\n      this.timeout(30000);\n\n      swarm = new RuvSwarm();\n      await swarm.init({ \n        topology: 'pipeline',\n        stages: [\n          { name: 'input', agents: 3 },\n          { name: 'processing', agents: 5 },\n          { name: 'analysis', agents: 3 },\n          { name: 'output', agents: 2 }\n        ],\n        pipelining: {\n          enabled: true,\n          bufferSize: 10\n        }\n      });\n\n      // Create pipeline stages\n      const pipeline = await swarm.createPipeline({\n        stages: [\n          { type: 'researcher', count: 3 },\n          { type: 'coder', count: 5 },\n          { type: 'analyst', count: 3 },\n          { type: 'optimizer', count: 2 }\n        ]\n      });\n\n      // Track throughput\n      let processedItems = 0;\n      const startTime = Date.now();\n      \n      pipeline.on('complete', () => processedItems++);\n\n      // Feed items into pipeline\n      const totalItems = 100;\n      const feedInterval = setInterval(async () => {\n        if (processedItems >= totalItems) {\n          clearInterval(feedInterval);\n          return;\n        }\n\n        // Feed multiple items\n        const batch = Math.min(5, totalItems - processedItems);\n        for (let i = 0; i < batch; i++) {\n          pipeline.process({\n            id: `item-${processedItems + i}`,\n            data: `Processing item ${processedItems + i}`,\n            complexity: Math.random() > 0.5 ? 'high' : 'low'\n          });\n        }\n      }, 100);\n\n      // Wait for completion\n      while (processedItems < totalItems) {\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n\n      const totalTime = Date.now() - startTime;\n      const throughput = (processedItems / totalTime) * 1000; // items per second\n\n      // Verify pipeline efficiency\n      expect(throughput).to.be.greaterThan(10); // At least 10 items/second\n      \n      const pipelineStats = await pipeline.getStats();\n      expect(pipelineStats.stages).to.have.lengthOf(4);\n      \n      // Each stage should have processed items\n      pipelineStats.stages.forEach(stage => {\n        expect(stage.processed).to.be.greaterThan(0);\n        expect(stage.utilization).to.be.greaterThan(0.5); // At least 50% utilized\n      });\n\n      // No significant bottlenecks\n      const utilizations = pipelineStats.stages.map(s => s.utilization);\n      const minUtilization = Math.min(...utilizations);\n      const maxUtilization = Math.max(...utilizations);\n      expect(maxUtilization - minUtilization).to.be.lessThan(0.3); // Balanced pipeline\n    });\n  });\n\n  describe('Resource Cleanup Verification', () => {\n    it('should clean up all resources after stress test', async function() {\n      this.timeout(30000);\n\n      // Baseline measurements\n      const initialMemory = process.memoryUsage();\n      const initialHandles = process._getActiveHandles().length;\n      const initialRequests = process._getActiveRequests().length;\n\n      swarm = new RuvSwarm();\n      await swarm.init({ \n        topology: 'mesh',\n        maxAgents: 50,\n        cleanup: {\n          aggressive: true,\n          trackLeaks: true\n        }\n      });\n\n      // Stress test\n      const agents = await Promise.all(\n        Array(50).fill().map(() => swarm.spawnAgent({ type: 'coder' }))\n      );\n\n      // Execute many tasks\n      const tasks = [];\n      for (let i = 0; i < 100; i++) {\n        tasks.push(swarm.orchestrateTask({\n          task: `Cleanup test task ${i}`,\n          timeout: 5000\n        }));\n      }\n\n      await Promise.all(tasks);\n\n      // Proper shutdown\n      await swarm.shutdown();\n      swarm = null;\n\n      // Force garbage collection\n      if (global.gc) {\n        global.gc();\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        global.gc();\n      }\n\n      // Verify cleanup\n      const finalMemory = process.memoryUsage();\n      const finalHandles = process._getActiveHandles().length;\n      const finalRequests = process._getActiveRequests().length;\n\n      // Memory should return close to baseline\n      const memoryGrowth = finalMemory.heapUsed - initialMemory.heapUsed;\n      expect(memoryGrowth).to.be.lessThan(10 * 1024 * 1024); // Less than 10MB growth\n\n      // No leaked handles or requests\n      expect(finalHandles).to.be.lessThanOrEqual(initialHandles + 2); // Allow small variance\n      expect(finalRequests).to.be.lessThanOrEqual(initialRequests + 2);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}