bdc8148501f9d3b7fe170fd6bdfe212d
/* istanbul ignore next */
function cov_1mva4k893e() {
  var path = "/workspaces/ruv-FANN/ruv-swarm/npm/src/neural-models/presets/nlp.js";
  var hash = "20397db20d73c3ff2e9fce9ca619c8ddb211b5d2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/ruv-FANN/ruv-swarm/npm/src/neural-models/presets/nlp.js",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 26
        },
        end: {
          line: 317,
          column: 1
        }
      },
      "1": {
        start: {
          line: 320,
          column: 28
        },
        end: {
          line: 325,
          column: 1
        }
      },
      "2": {
        start: {
          line: 321,
          column: 2
        },
        end: {
          line: 323,
          column: 3
        }
      },
      "3": {
        start: {
          line: 322,
          column: 4
        },
        end: {
          line: 322,
          column: 118
        }
      },
      "4": {
        start: {
          line: 324,
          column: 2
        },
        end: {
          line: 324,
          column: 32
        }
      },
      "5": {
        start: {
          line: 328,
          column: 35
        },
        end: {
          line: 328,
          column: 58
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 320,
            column: 28
          },
          end: {
            line: 320,
            column: 29
          }
        },
        loc: {
          start: {
            line: 320,
            column: 44
          },
          end: {
            line: 325,
            column: 1
          }
        },
        line: 320
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 321,
            column: 2
          },
          end: {
            line: 323,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 321,
            column: 2
          },
          end: {
            line: 323,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 321
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "20397db20d73c3ff2e9fce9ca619c8ddb211b5d2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1mva4k893e = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1mva4k893e();
/**
 * NLP Neural Network Presets
 * Production-ready configurations for natural language processing tasks
 */

export const nlpPresets =
/* istanbul ignore next */
(cov_1mva4k893e().s[0]++, {
  // Social Media Sentiment Analysis
  sentiment_analysis_social: {
    name: 'Social Media Sentiment Analyzer',
    description: 'Optimized for real-time sentiment analysis on social media posts',
    model: 'transformer',
    config: {
      dimensions: 512,
      heads: 8,
      layers: 6,
      ffDimensions: 2048,
      vocabSize: 30000,
      maxLength: 280,
      dropoutRate: 0.1
    },
    training: {
      batchSize: 32,
      learningRate: 5e-5,
      warmupSteps: 1000,
      epochs: 10,
      optimizer: 'adamw'
    },
    performance: {
      expectedAccuracy: '92-94%',
      inferenceTime: '12ms',
      memoryUsage: '512MB',
      trainingTime: '2-3 hours on GPU'
    },
    useCase: 'Twitter, Facebook, Instagram sentiment tracking'
  },
  // Document Summarization
  document_summarization: {
    name: 'Document Summarizer',
    description: 'Extract key information from long documents',
    model: 'transformer',
    config: {
      dimensions: 768,
      heads: 12,
      layers: 12,
      ffDimensions: 3072,
      vocabSize: 50000,
      maxLength: 1024,
      dropoutRate: 0.15
    },
    training: {
      batchSize: 16,
      learningRate: 3e-5,
      warmupSteps: 2000,
      epochs: 15,
      optimizer: 'adamw',
      gradientAccumulation: 4
    },
    performance: {
      expectedAccuracy: '88-91%',
      inferenceTime: '45ms',
      memoryUsage: '1.2GB',
      trainingTime: '8-10 hours on GPU'
    },
    useCase: 'News articles, research papers, legal documents'
  },
  // Question Answering
  question_answering: {
    name: 'Question Answering System',
    description: 'Extract answers from context paragraphs',
    model: 'transformer',
    config: {
      dimensions: 768,
      heads: 12,
      layers: 8,
      ffDimensions: 3072,
      vocabSize: 40000,
      maxLength: 512,
      dropoutRate: 0.1,
      includePositionalEmbeddings: true
    },
    training: {
      batchSize: 24,
      learningRate: 2e-5,
      warmupSteps: 1500,
      epochs: 20,
      optimizer: 'adamw'
    },
    performance: {
      expectedAccuracy: '85-88%',
      inferenceTime: '25ms',
      memoryUsage: '900MB',
      trainingTime: '6-8 hours on GPU'
    },
    useCase: 'Customer support, educational systems, information retrieval'
  },
  // Named Entity Recognition
  named_entity_recognition: {
    name: 'Named Entity Recognizer',
    description: 'Identify and classify named entities in text',
    model: 'lstm',
    config: {
      inputSize: 300,
      hiddenSize: 256,
      numLayers: 2,
      outputSize: 9,
      // B-PER, I-PER, B-ORG, I-ORG, B-LOC, I-LOC, B-MISC, I-MISC, O
      bidirectional: true,
      returnSequence: true,
      dropoutRate: 0.3
    },
    training: {
      batchSize: 64,
      learningRate: 1e-3,
      epochs: 30,
      optimizer: 'adam',
      earlyStoppingPatience: 5
    },
    performance: {
      expectedAccuracy: '91-93%',
      inferenceTime: '8ms',
      memoryUsage: '256MB',
      trainingTime: '3-4 hours on GPU'
    },
    useCase: 'Information extraction, document processing, knowledge graphs'
  },
  // Language Translation
  language_translation: {
    name: 'Neural Machine Translator',
    description: 'Translate between multiple languages',
    model: 'transformer',
    config: {
      dimensions: 512,
      heads: 8,
      layers: 6,
      ffDimensions: 2048,
      vocabSize: 32000,
      maxLength: 256,
      dropoutRate: 0.1,
      shareEmbeddings: true
    },
    training: {
      batchSize: 128,
      learningRate: 1e-4,
      warmupSteps: 4000,
      epochs: 50,
      optimizer: 'adam',
      labelSmoothing: 0.1
    },
    performance: {
      expectedAccuracy: '86-89% BLEU',
      inferenceTime: '30ms',
      memoryUsage: '800MB',
      trainingTime: '24-48 hours on GPU'
    },
    useCase: 'Real-time translation, document localization'
  },
  // Text Classification
  text_classification_multi: {
    name: 'Multi-class Text Classifier',
    description: 'Classify text into multiple categories',
    model: 'gru',
    config: {
      inputSize: 300,
      hiddenSize: 256,
      numLayers: 3,
      outputSize: 20,
      // Number of classes
      bidirectional: true,
      dropoutRate: 0.4,
      returnSequence: false
    },
    training: {
      batchSize: 128,
      learningRate: 1e-3,
      epochs: 25,
      optimizer: 'adam',
      classWeights: 'balanced'
    },
    performance: {
      expectedAccuracy: '89-92%',
      inferenceTime: '6ms',
      memoryUsage: '384MB',
      trainingTime: '2-3 hours on GPU'
    },
    useCase: 'Email categorization, content moderation, topic classification'
  },
  // Conversational AI
  conversational_ai: {
    name: 'Conversational AI Model',
    description: 'Generate contextual responses in conversations',
    model: 'transformer',
    config: {
      dimensions: 768,
      heads: 12,
      layers: 10,
      ffDimensions: 3072,
      vocabSize: 50000,
      maxLength: 512,
      dropoutRate: 0.1,
      useMemory: true
    },
    training: {
      batchSize: 16,
      learningRate: 2e-5,
      warmupSteps: 2000,
      epochs: 30,
      optimizer: 'adamw',
      useReinforcementLearning: true
    },
    performance: {
      expectedAccuracy: '87-90%',
      inferenceTime: '40ms',
      memoryUsage: '1.5GB',
      trainingTime: '48-72 hours on GPU'
    },
    useCase: 'Chatbots, virtual assistants, customer service'
  },
  // Code Generation
  code_generation: {
    name: 'Code Generator',
    description: 'Generate code from natural language descriptions',
    model: 'transformer',
    config: {
      dimensions: 1024,
      heads: 16,
      layers: 12,
      ffDimensions: 4096,
      vocabSize: 64000,
      maxLength: 2048,
      dropoutRate: 0.1,
      useRotaryPositionalEmbedding: true
    },
    training: {
      batchSize: 8,
      learningRate: 1e-5,
      warmupSteps: 5000,
      epochs: 20,
      optimizer: 'adamw',
      gradientAccumulation: 8
    },
    performance: {
      expectedAccuracy: '78-82%',
      inferenceTime: '100ms',
      memoryUsage: '3GB',
      trainingTime: '5-7 days on GPU'
    },
    useCase: 'Code completion, bug fixing, code documentation'
  },
  // Semantic Search
  semantic_search: {
    name: 'Semantic Search Engine',
    description: 'Find semantically similar content',
    model: 'transformer',
    config: {
      dimensions: 768,
      heads: 12,
      layers: 6,
      ffDimensions: 3072,
      vocabSize: 30000,
      maxLength: 512,
      dropoutRate: 0.1,
      poolingStrategy: 'mean'
    },
    training: {
      batchSize: 32,
      learningRate: 2e-5,
      warmupSteps: 1000,
      epochs: 10,
      optimizer: 'adamw',
      useContrastiveLoss: true
    },
    performance: {
      expectedAccuracy: '91-93%',
      inferenceTime: '15ms',
      memoryUsage: '800MB',
      trainingTime: '12-16 hours on GPU'
    },
    useCase: 'Document retrieval, FAQ systems, knowledge bases'
  },
  // Grammar Correction
  grammar_correction: {
    name: 'Grammar and Style Corrector',
    description: 'Detect and correct grammatical errors',
    model: 'transformer',
    config: {
      dimensions: 512,
      heads: 8,
      layers: 6,
      ffDimensions: 2048,
      vocabSize: 40000,
      maxLength: 256,
      dropoutRate: 0.15
    },
    training: {
      batchSize: 64,
      learningRate: 3e-5,
      warmupSteps: 1500,
      epochs: 15,
      optimizer: 'adamw',
      useDataAugmentation: true
    },
    performance: {
      expectedAccuracy: '93-95%',
      inferenceTime: '20ms',
      memoryUsage: '600MB',
      trainingTime: '8-10 hours on GPU'
    },
    useCase: 'Writing assistants, educational tools, content editing'
  }
});

// Export utility function to get preset by name
/* istanbul ignore next */
cov_1mva4k893e().s[1]++;
export const getNLPPreset = presetName => {
  /* istanbul ignore next */
  cov_1mva4k893e().f[0]++;
  cov_1mva4k893e().s[2]++;
  if (!nlpPresets[presetName]) {
    /* istanbul ignore next */
    cov_1mva4k893e().b[0][0]++;
    cov_1mva4k893e().s[3]++;
    throw new Error(`NLP preset '${presetName}' not found. Available presets: ${Object.keys(nlpPresets).join(', ')}`);
  } else
  /* istanbul ignore next */
  {
    cov_1mva4k893e().b[0][1]++;
  }
  cov_1mva4k893e().s[4]++;
  return nlpPresets[presetName];
};

// Export list of available presets
export const availableNLPPresets =
/* istanbul ignore next */
(cov_1mva4k893e().s[5]++, Object.keys(nlpPresets));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,