{"version":3,"names":["RuvSwarm","WasmModuleLoader","EnhancedMCPTools","NeuralNetworkManager","assert","path","fileURLToPath","dirname","__filename","import","meta","url","__dirname","assertApprox","actual","expected","tolerance","Math","abs","measureTime","_x","_measureTime","apply","arguments","_asyncToGenerator","fn","start","performance","now","result","time","WasmIntegrationTests","constructor","testResults","ruvSwarm","mcpTools","setup","_this","console","log","initialize","loadingStrategy","enablePersistence","enableNeuralNetworks","enableForecasting","useSIMD","debug","runAll","_this2","tests","testWasmModuleLoading","testProgressiveLoading","testSwarmCreation","testAgentSpawning","testTaskOrchestration","testNeuralNetworks","testMCPTools","testMemoryManagement","testPerformance","testBackwardCompatibility","passed","failed","test","name","call","toFixed","push","status","error","message","printSummary","loader","modules","Map","moduleManifest","core","equal","coreModule","loadModule","exports","isPlaceholder","getModuleStatus","loaded","loading","status1","neural","neuralModule","memoryUsage","getTotalMemoryUsage","_this3","swarm1","createSwarm","topology","maxAgents","id","activeSwarms","size","topologies","swarm","getStatus","agents","tasks","_this4","agentTypes","type","agent","spawn","enableNeuralNetwork","cognitivePattern","metrics","getMetrics","length","_this5","task","orchestrate","description","priority","progress","task1","task2","dependencies","_this6","features","neural_networks","nnManager","wasmLoader","network","createAgentNeuralNetwork","template","input","Array","fill","output","forward","Float32Array","isArray","trainingData","samples","map","random","target","train","epochs","batchSize","loss","epochs_trained","network2","session","enableCollaborativeLearning","strategy","_this7","initResult","swarm_init","spawnResult","agent_spawn","swarm_info","taskResult","task_orchestrate","taskId","statusResult","swarm_status","verbose","active_swarms","features_detect","category","runtime","wasm","benchmarks","benchmark_run","iterations","results","_this8","initialMemory","memory_usage","detail","total_mb","wasm_mb","beforeSwarms","i","afterSwarms","detailedMemory","wasm_modules","agentMemory","_this9","swarmTimes","avgSwarmTime","reduce","a","b","agentTimes","avgAgentTime","loadTime","LegacyRuvSwarm","legacy","wasmPath","join","version","getVersion","repeat","forEach","icon","process","heapUsed","exit","catch"],"sources":["wasm-integration.test.js"],"sourcesContent":["/**\n * Comprehensive test suite for WASM integration\n * Tests progressive loading, neural networks, and swarm orchestration\n */\n\nimport { RuvSwarm  } from '../src/index-enhanced';\nimport { WasmModuleLoader  } from '../src/wasm-loader';\nimport { EnhancedMCPTools  } from '../src/mcp-tools-enhanced';\nimport { NeuralNetworkManager  } from '../src/neural-network-manager';\n\nimport assert from 'assert';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\n// Test utilities\nfunction assertApprox(actual, expected, tolerance = 0.01) {\n  assert(Math.abs(actual - expected) < tolerance,\n    `Expected ${actual} to be approximately ${expected} (tolerance: ${tolerance})`);\n}\n\nasync function measureTime(fn) {\n  const start = performance.now();\n  const result = await fn();\n  const time = performance.now() - start;\n  return { result, time };\n}\n\n// Test suite\nclass WasmIntegrationTests {\n  constructor() {\n    this.testResults = [];\n    this.ruvSwarm = null;\n    this.mcpTools = null;\n  }\n\n  async setup() {\n    console.log('üîß Setting up test environment...');\n\n    // Initialize RuvSwarm with test configuration\n    this.ruvSwarm = await RuvSwarm.initialize({\n      loadingStrategy: 'progressive',\n      enablePersistence: false, // Disable for tests\n      enableNeuralNetworks: true,\n      enableForecasting: false, // Start with disabled\n      useSIMD: true,\n      debug: true,\n    });\n\n    // Initialize MCP tools\n    this.mcpTools = new EnhancedMCPTools();\n    await this.mcpTools.initialize();\n\n    console.log('‚úÖ Test environment ready\\n');\n  }\n\n  async runAll() {\n    await this.setup();\n\n    const tests = [\n      this.testWasmModuleLoading,\n      this.testProgressiveLoading,\n      this.testSwarmCreation,\n      this.testAgentSpawning,\n      this.testTaskOrchestration,\n      this.testNeuralNetworks,\n      this.testMCPTools,\n      this.testMemoryManagement,\n      this.testPerformance,\n      this.testBackwardCompatibility,\n    ];\n\n    let passed = 0;\n    let failed = 0;\n\n    for (const test of tests) {\n      try {\n        console.log(`\\nüß™ Running: ${test.name}`);\n        const { time } = await measureTime(() => test.call(this));\n        console.log(`‚úÖ ${test.name} passed (${time.toFixed(1)}ms)`);\n        passed++;\n        this.testResults.push({ test: test.name, status: 'passed', time });\n      } catch (error) {\n        console.error(`‚ùå ${test.name} failed: ${error.message}`);\n        failed++;\n        this.testResults.push({ test: test.name, status: 'failed', error: error.message });\n      }\n    }\n\n    this.printSummary(passed, failed);\n  }\n\n  async testWasmModuleLoading() {\n    // Test 1: Module loader initialization\n    const loader = new WasmModuleLoader();\n    assert(loader.modules instanceof Map, 'Modules should be a Map');\n    assert(loader.moduleManifest.core, 'Core module should be in manifest');\n\n    // Test 2: Progressive loading strategy\n    await loader.initialize('progressive');\n    assert.equal(loader.loadingStrategy, 'progressive');\n\n    // Test 3: Core module loading\n    const coreModule = await loader.loadModule('core');\n    assert(coreModule, 'Core module should load');\n    assert(coreModule.exports || coreModule.isPlaceholder, 'Core module should have exports or be placeholder');\n\n    // Test 4: Module status\n    const status = loader.getModuleStatus();\n    assert(status.core.loaded || status.core.loading, 'Core module should be loaded or loading');\n  }\n\n  async testProgressiveLoading() {\n    const loader = new WasmModuleLoader();\n\n    // Test 1: Progressive strategy loads only core modules\n    await loader.initialize('progressive');\n    const status1 = loader.getModuleStatus();\n    assert(status1.core.loaded || status1.core.loading, 'Core should be loaded');\n    assert(!status1.neural.loaded, 'Neural should not be loaded yet');\n\n    // Test 2: On-demand loading\n    const neuralModule = await loader.loadModule('neural');\n    assert(neuralModule, 'Neural module should load on demand');\n\n    // Test 3: Memory usage tracking\n    const memoryUsage = loader.getTotalMemoryUsage();\n    assert(typeof memoryUsage === 'number', 'Memory usage should be a number');\n  }\n\n  async testSwarmCreation() {\n    // Test 1: Create swarm with default config\n    const swarm1 = await this.ruvSwarm.createSwarm({\n      name: 'test-swarm-1',\n      topology: 'mesh',\n      maxAgents: 5,\n    });\n    assert(swarm1.id, 'Swarm should have an ID');\n    assert.equal(this.ruvSwarm.activeSwarms.size, 1, 'Should have 1 active swarm');\n\n    // Test 2: Create swarm with different topologies\n    const topologies = ['star', 'hierarchical', 'ring'];\n    for (const topology of topologies) {\n      const swarm = await this.ruvSwarm.createSwarm({\n        name: `test-${topology}`,\n        topology,\n        maxAgents: 3,\n      });\n      assert(swarm.id, `${topology} swarm should be created`);\n    }\n\n    // Test 3: Swarm status\n    const status = await swarm1.getStatus();\n    assert(status.agents, 'Status should have agents info');\n    assert(status.tasks, 'Status should have tasks info');\n  }\n\n  async testAgentSpawning() {\n    const swarm = await this.ruvSwarm.createSwarm({\n      name: 'agent-test-swarm',\n      maxAgents: 10,\n    });\n\n    // Test 1: Spawn different agent types\n    const agentTypes = ['researcher', 'coder', 'analyst', 'optimizer', 'coordinator'];\n    const agents = [];\n\n    for (const type of agentTypes) {\n      const agent = await swarm.spawn({\n        type,\n        name: `test-${type}`,\n        enableNeuralNetwork: true,\n      });\n      assert(agent.id, `${type} agent should have ID`);\n      assert.equal(agent.type, type, `Agent type should be ${type}`);\n      assert(agent.cognitivePattern, 'Agent should have cognitive pattern');\n      agents.push(agent);\n    }\n\n    // Test 2: Agent metrics\n    for (const agent of agents) {\n      const metrics = await agent.getMetrics();\n      assert(typeof metrics.memoryUsage === 'number', 'Memory usage should be a number');\n    }\n\n    // Test 3: Swarm agent count\n    assert.equal(swarm.agents.size, agentTypes.length, 'Swarm should have all spawned agents');\n  }\n\n  async testTaskOrchestration() {\n    const swarm = await this.ruvSwarm.createSwarm({\n      name: 'task-test-swarm',\n      maxAgents: 5,\n    });\n\n    // Spawn some agents\n    await swarm.spawn({ type: 'researcher' });\n    await swarm.spawn({ type: 'coder' });\n    await swarm.spawn({ type: 'analyst' });\n\n    // Test 1: Create task\n    const task = await swarm.orchestrate({\n      description: 'Test task for orchestration',\n      priority: 'high',\n    });\n    assert(task.id, 'Task should have ID');\n    assert.equal(task.description, 'Test task for orchestration');\n\n    // Test 2: Task status\n    const status = await task.getStatus();\n    assert(status.id, 'Task status should have ID');\n    assert(typeof status.progress === 'number', 'Progress should be a number');\n\n    // Test 3: Multiple tasks with dependencies\n    const task1 = await swarm.orchestrate({\n      description: 'Parent task',\n      priority: 'medium',\n    });\n\n    const task2 = await swarm.orchestrate({\n      description: 'Child task',\n      dependencies: [task1.id],\n    });\n    assert(task2.id !== task1.id, 'Tasks should have unique IDs');\n  }\n\n  async testNeuralNetworks() {\n    if (!this.ruvSwarm.features.neural_networks) {\n      console.log('‚ö†Ô∏è  Neural networks not available, skipping detailed tests');\n      return;\n    }\n\n    const nnManager = new NeuralNetworkManager(this.ruvSwarm.wasmLoader);\n\n    // Test 1: Create neural network for agent\n    const network = await nnManager.createAgentNeuralNetwork('test-agent-1', {\n      template: 'deep_analyzer',\n    });\n    assert(network, 'Neural network should be created');\n\n    // Test 2: Forward pass\n    const input = new Array(128).fill(0.5);\n    const output = await network.forward(input);\n    assert(output instanceof Float32Array || Array.isArray(output), 'Output should be array-like');\n\n    // Test 3: Training\n    const trainingData = {\n      samples: Array(10).fill(null).map(() => ({\n        input: new Array(128).fill(Math.random()),\n        target: new Array(128).fill(Math.random()),\n      })),\n    };\n\n    const metrics = await network.train(trainingData, {\n      epochs: 1,\n      batchSize: 5,\n    });\n    assert(typeof metrics.loss === 'number', 'Loss should be a number');\n    assert(metrics.epochs_trained >= 1, 'Should have trained at least 1 epoch');\n\n    // Test 4: Collaborative learning setup\n    const network2 = await nnManager.createAgentNeuralNetwork('test-agent-2');\n    const session = await nnManager.enableCollaborativeLearning(\n      ['test-agent-1', 'test-agent-2'],\n      { strategy: 'federated' },\n    );\n    assert(session.id, 'Collaborative session should have ID');\n  }\n\n  async testMCPTools() {\n    // Test 1: swarm_init\n    const initResult = await this.mcpTools.swarm_init({\n      topology: 'mesh',\n      maxAgents: 3,\n    });\n    assert(initResult.id, 'Swarm init should return ID');\n    assert(initResult.features, 'Should include features');\n\n    // Test 2: agent_spawn\n    const spawnResult = await this.mcpTools.agent_spawn({\n      type: 'researcher',\n      name: 'mcp-test-agent',\n    });\n    assert(spawnResult.agent.id, 'Agent spawn should return agent ID');\n    assert(spawnResult.swarm_info, 'Should include swarm info');\n\n    // Test 3: task_orchestrate\n    const taskResult = await this.mcpTools.task_orchestrate({\n      task: 'Test MCP task orchestration',\n      priority: 'medium',\n    });\n    assert(taskResult.taskId, 'Task orchestrate should return task ID');\n\n    // Test 4: swarm_status\n    const statusResult = await this.mcpTools.swarm_status({\n      verbose: true,\n    });\n    assert(statusResult.active_swarms >= 0, 'Should have active swarms count');\n\n    // Test 5: features_detect\n    const features = await this.mcpTools.features_detect({\n      category: 'all',\n    });\n    assert(features.runtime, 'Should detect runtime features');\n    assert(features.wasm, 'Should detect WASM features');\n\n    // Test 6: benchmark_run\n    const benchmarks = await this.mcpTools.benchmark_run({\n      type: 'wasm',\n      iterations: 3,\n    });\n    assert(benchmarks.results, 'Should have benchmark results');\n  }\n\n  async testMemoryManagement() {\n    // Test 1: Initial memory usage\n    const initialMemory = await this.mcpTools.memory_usage({ detail: 'summary' });\n    assert(typeof initialMemory.total_mb === 'number', 'Total memory should be a number');\n    assert(typeof initialMemory.wasm_mb === 'number', 'WASM memory should be a number');\n\n    // Test 2: Memory growth with swarm creation\n    const beforeSwarms = initialMemory.total_mb;\n\n    // Create multiple swarms\n    for (let i = 0; i < 3; i++) {\n      await this.ruvSwarm.createSwarm({\n        name: `memory-test-${i}`,\n        maxAgents: 5,\n      });\n    }\n\n    const afterSwarms = await this.mcpTools.memory_usage({ detail: 'summary' });\n    assert(afterSwarms.total_mb >= beforeSwarms, 'Memory should increase or stay same');\n\n    // Test 3: Detailed memory report\n    const detailedMemory = await this.mcpTools.memory_usage({ detail: 'detailed' });\n    assert(detailedMemory.wasm_modules, 'Should have WASM modules breakdown');\n\n    // Test 4: Per-agent memory\n    const swarm = await this.ruvSwarm.createSwarm({ name: 'agent-memory-test' });\n    await swarm.spawn({ type: 'researcher' });\n    await swarm.spawn({ type: 'coder' });\n\n    const agentMemory = await this.mcpTools.memory_usage({ detail: 'by-agent' });\n    assert(Array.isArray(agentMemory.agents), 'Should have agents array');\n    assert(agentMemory.agents.length >= 2, 'Should have at least 2 agents');\n  }\n\n  async testPerformance() {\n    // Test 1: Swarm creation performance\n    const swarmTimes = [];\n    for (let i = 0; i < 5; i++) {\n      const { time } = await measureTime(() =>\n        this.ruvSwarm.createSwarm({\n          name: `perf-swarm-${i}`,\n          maxAgents: 10,\n        }),\n      );\n      swarmTimes.push(time);\n    }\n\n    const avgSwarmTime = swarmTimes.reduce((a, b) => a + b) / swarmTimes.length;\n    assert(avgSwarmTime < 1000, 'Average swarm creation should be under 1s');\n\n    // Test 2: Agent spawning performance\n    const swarm = await this.ruvSwarm.createSwarm({ name: 'perf-agent-test' });\n    const agentTimes = [];\n\n    for (let i = 0; i < 10; i++) {\n      const { time } = await measureTime(() =>\n        swarm.spawn({ type: 'researcher' }),\n      );\n      agentTimes.push(time);\n    }\n\n    const avgAgentTime = agentTimes.reduce((a, b) => a + b) / agentTimes.length;\n    assert(avgAgentTime < 500, 'Average agent spawn should be under 500ms');\n\n    // Test 3: WASM module loading performance\n    const loader = new WasmModuleLoader();\n    const { time: loadTime } = await measureTime(() =>\n      loader.initialize('progressive'),\n    );\n    assert(loadTime < 2000, 'Progressive loading should complete under 2s');\n  }\n\n  async testBackwardCompatibility() {\n    // Test 1: Legacy API still works\n    const { RuvSwarm: LegacyRuvSwarm } = await import('../src/index.js');\n    assert(LegacyRuvSwarm, 'Legacy RuvSwarm should be available');\n\n    // Test 2: Old initialization pattern\n    const legacy = await LegacyRuvSwarm.initialize({\n      wasmPath: path.join(__dirname, '..', 'wasm'),\n      useSIMD: false,\n      debug: false,\n    });\n    assert(legacy, 'Legacy initialization should work');\n\n    // Test 3: Check version compatibility\n    const version = RuvSwarm.getVersion();\n    assert(version === '0.2.0', 'Version should be 0.2.0');\n  }\n\n  printSummary(passed, failed) {\n    console.log(`\\n${ '='.repeat(60)}`);\n    console.log('üìä Test Summary');\n    console.log('='.repeat(60));\n    console.log(`‚úÖ Passed: ${passed}`);\n    console.log(`‚ùå Failed: ${failed}`);\n    console.log(`üìà Success Rate: ${((passed / (passed + failed)) * 100).toFixed(1)}%`);\n\n    console.log('\\nüìã Detailed Results:');\n    this.testResults.forEach(result => {\n      const icon = result.status === 'passed' ? '‚úÖ' : '‚ùå';\n      const time = result.time ? ` (${result.time.toFixed(1)}ms)` : '';\n      const error = result.error ? ` - ${result.error}` : '';\n      console.log(`${icon} ${result.test}${time}${error}`);\n    });\n\n    console.log('\\nüíæ Memory Usage:');\n    console.log(`Peak Memory: ${(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)}MB`);\n\n    if (failed > 0) {\n      process.exit(1);\n    }\n  }\n}\n\n// Run tests if called directly\n// Direct execution block\n{\n  const tests = new WasmIntegrationTests();\n  tests.runAll().catch(error => {\n    console.error('‚ùå Test suite failed:', error);\n    process.exit(1);\n  });\n}\n\nexport { WasmIntegrationTests };"],"mappings":"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","ignoreList":[]}