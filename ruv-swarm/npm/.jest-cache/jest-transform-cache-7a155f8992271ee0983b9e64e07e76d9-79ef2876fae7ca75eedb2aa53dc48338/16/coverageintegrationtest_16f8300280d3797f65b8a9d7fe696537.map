{"version":3,"names":["RuvSwarm","RuvSwarmEnhanced","NeuralAgent","NeuralNetworkManager","SwarmPersistence","WasmLoader","BenchmarkCLI","getMemoryConfig","NeuralCLI","createRequire","require","import","meta","url","PerformanceCLI","console","log","memConfig","neural","ruv","initialize","version","getVersion","simdSupport","detectSIMDSupport","swarm","createSwarm","name","topology","maxAgents","agent","spawn","type","id","result","execute","task","status","getStatus","orchestrated","orchestrate","error","message","enhanced","swarmEnhanced","enableNeuralAgents","neuralAgent","createNeuralAgent","modelType","model","train","input","output","prediction","predict","manager","network","createNetwork","layers","activation","models","listModels","length","persistence","saveSwarm","state","agents","loaded","loadSwarm","close","loader","supported","isSupported","simd","hasSIMDSupport","benchmark","arg","getArg","perfCLI","command","parseCommand","neuralCLI","PATTERN_MEMORY_CONFIG","Object","keys"],"sources":["coverage-integration.test.js"],"sourcesContent":["/**\n * Integration Tests for Coverage - Actually imports and tests real modules\n */\n\nimport { RuvSwarm } from '../src/index.js';\nimport { RuvSwarmEnhanced } from '../src/index-enhanced.js';\nimport { NeuralAgent } from '../src/neural-agent.js';\nimport { NeuralNetworkManager } from '../src/neural-network-manager.js';\nimport { SwarmPersistence } from '../src/persistence.js';\nimport { WasmLoader } from '../src/wasm-loader.js';\nimport { BenchmarkCLI } from '../src/benchmark.js';\nimport { getMemoryConfig } from '../src/memory-config.js';\nimport { NeuralCLI } from '../src/neural.js';\nimport { createRequire } from 'module';\n\nconst require = createRequire(import.meta.url);\nconst { PerformanceCLI } = require('../src/performance.js');\n\n// Test memory config\nconsole.log('Testing memory-config.js...');\nconst memConfig = getMemoryConfig();\nconsole.log('✓ Memory config loaded:', memConfig.neural ? 'with neural' : 'basic');\n\n// Test basic initialization\nconsole.log('\\nTesting index.js...');\ntry {\n  const ruv = await RuvSwarm.initialize();\n  console.log('✓ RuvSwarm initialized');\n  \n  const version = RuvSwarm.getVersion();\n  console.log('✓ Version:', version);\n  \n  const simdSupport = RuvSwarm.detectSIMDSupport();\n  console.log('✓ SIMD support:', simdSupport);\n  \n  const swarm = await ruv.createSwarm({\n    name: 'test-swarm',\n    topology: 'mesh',\n    maxAgents: 3\n  });\n  console.log('✓ Swarm created:', swarm.name);\n  \n  const agent = await swarm.spawn({ type: 'researcher' });\n  console.log('✓ Agent spawned:', agent.id);\n  \n  const result = await agent.execute({ task: 'test-task' });\n  console.log('✓ Task executed:', result.status);\n  \n  const status = await swarm.getStatus();\n  console.log('✓ Status retrieved:', status);\n  \n  const orchestrated = await swarm.orchestrate({ task: 'complex-task' });\n  console.log('✓ Task orchestrated:', orchestrated.id);\n  \n} catch (error) {\n  console.error('✗ RuvSwarm test failed:', error.message);\n}\n\n// Test enhanced version\nconsole.log('\\nTesting index-enhanced.js...');\ntry {\n  const enhanced = new RuvSwarmEnhanced();\n  await enhanced.initialize();\n  console.log('✓ RuvSwarmEnhanced initialized');\n  \n  const swarmEnhanced = await enhanced.createSwarm({\n    topology: 'hierarchical',\n    enableNeuralAgents: true\n  });\n  console.log('✓ Enhanced swarm created');\n  \n  const neuralAgent = await swarmEnhanced.createNeuralAgent({\n    type: 'adaptive',\n    modelType: 'gru'\n  });\n  console.log('✓ Neural agent created');\n  \n} catch (error) {\n  console.error('✗ RuvSwarmEnhanced test failed:', error.message);\n}\n\n// Test neural agent\nconsole.log('\\nTesting neural-agent.js...');\ntry {\n  const neuralAgent = new NeuralAgent({\n    type: 'researcher',\n    model: 'transformer'\n  });\n  await neuralAgent.initialize();\n  console.log('✓ NeuralAgent initialized');\n  \n  await neuralAgent.train([\n    { input: [1, 2, 3], output: [0, 1] }\n  ]);\n  console.log('✓ NeuralAgent trained');\n  \n  const prediction = await neuralAgent.predict([1, 2, 3]);\n  console.log('✓ Prediction made:', prediction);\n  \n} catch (error) {\n  console.error('✗ NeuralAgent test failed:', error.message);\n}\n\n// Test neural network manager\nconsole.log('\\nTesting neural-network-manager.js...');\ntry {\n  const manager = new NeuralNetworkManager();\n  await manager.initialize();\n  console.log('✓ NeuralNetworkManager initialized');\n  \n  const network = await manager.createNetwork({\n    layers: [10, 20, 10],\n    activation: 'relu'\n  });\n  console.log('✓ Network created');\n  \n  const models = manager.listModels();\n  console.log('✓ Models listed:', models.length);\n  \n} catch (error) {\n  console.error('✗ NeuralNetworkManager test failed:', error.message);\n}\n\n// Test persistence\nconsole.log('\\nTesting persistence.js...');\ntry {\n  const persistence = new SwarmPersistence();\n  await persistence.initialize();\n  console.log('✓ SwarmPersistence initialized');\n  \n  await persistence.saveSwarm({\n    id: 'test-swarm',\n    state: { agents: 3 }\n  });\n  console.log('✓ Swarm saved');\n  \n  const loaded = await persistence.loadSwarm('test-swarm');\n  console.log('✓ Swarm loaded:', loaded);\n  \n  await persistence.close();\n  console.log('✓ Persistence closed');\n  \n} catch (error) {\n  console.error('✗ SwarmPersistence test failed:', error.message);\n}\n\n// Test WASM loader\nconsole.log('\\nTesting wasm-loader.js...');\ntry {\n  const loader = new WasmLoader();\n  console.log('✓ WasmLoader created');\n  \n  const supported = loader.isSupported();\n  console.log('✓ WASM support checked:', supported);\n  \n  const simd = loader.hasSIMDSupport();\n  console.log('✓ SIMD support checked:', simd);\n  \n} catch (error) {\n  console.error('✗ WasmLoader test failed:', error.message);\n}\n\n// Test benchmark\nconsole.log('\\nTesting benchmark.js...');\ntry {\n  const benchmark = new BenchmarkCLI();\n  console.log('✓ BenchmarkCLI created');\n  \n  // Test getArg method\n  const arg = benchmark.getArg(['--type', 'wasm'], '--type');\n  console.log('✓ Arg parsing works:', arg);\n  \n} catch (error) {\n  console.error('✗ Benchmark test failed:', error.message);\n}\n\n// Test performance analyzer\nconsole.log('\\nTesting performance.js...');\ntry {\n  const perfCLI = new PerformanceCLI();\n  console.log('✓ PerformanceCLI created');\n  \n  // Test command parsing\n  const command = perfCLI.parseCommand(['analyze', '--metric', 'cpu']);\n  console.log('✓ Command parsed:', command);\n  \n} catch (error) {\n  console.error('✗ Performance test failed:', error.message);\n}\n\n// Test neural module\nconsole.log('\\nTesting neural.js...');\ntry {\n  const neuralCLI = new NeuralCLI();\n  console.log('✓ NeuralCLI created');\n  \n  // Test pattern memory config\n  const { PATTERN_MEMORY_CONFIG } = await import('../src/neural.js');\n  console.log('✓ Pattern memory config loaded:', Object.keys(PATTERN_MEMORY_CONFIG));\n  \n} catch (error) {\n  console.error('✗ Neural test failed:', error.message);\n}\n\nconsole.log('\\n✅ Integration tests completed');"],"mappings":"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","ignoreList":[]}