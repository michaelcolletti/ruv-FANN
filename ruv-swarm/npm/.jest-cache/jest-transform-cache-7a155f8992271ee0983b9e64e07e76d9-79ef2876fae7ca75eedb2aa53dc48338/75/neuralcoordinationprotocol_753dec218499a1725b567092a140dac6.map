{"version":3,"names":["cov_1u1kmyco79","actualCoverage","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","value","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","asyncGeneratorStep","n","a","c","u","done","Promise","resolve","then","_asyncToGenerator","_next","_throw","NeuralCoordinationProtocol","constructor","f","s","activeSessions","Map","coordinationStrategies","communicationChannels","consensusProtocols","coordinationResults","coordinationMetrics","initializeCoordinationStrategies","initializeConsensusProtocols","set","name","description","structure","characteristics","leadershipType","decisionFlow","communicationPattern","consensusRequired","scalability","robustness","parameters","leaderSelectionCriteria","maxHierarchyDepth","commandPropagationDelay","leaderRotationInterval","consensusThreshold","communicationTimeout","maxNegotiationRounds","conflictResolutionMethod","neighborhoodRadius","influenceDecayRate","emergenceThreshold","adaptationRate","auctionType","biddingTimeout","reservePrice","profitSharingRatio","taskAnnouncementDelay","biddingPeriod","contractDuration","performanceEvaluationInterval","blackboardSize","knowledgeExpirationTime","priorityQueueSize","triggerThreshold","learningRate","explorationRate","rewardSharingRatio","communicationBandwidth","faultTolerance","viewChangeTimeout","messageAuthenticationRequired","committeeSize","stakingPeriod","minimumStake","slashingPenalty","rewardDistribution","applicability","trustRequired","performanceWeight","energyEfficiency","phaseTimeout","checkpointInterval","maxFaultyNodes","electionTimeout","heartbeatInterval","logReplicationBatchSize","leaderElectionBackoff","gossipRounds","gossipFanout","gossipInterval","convergenceThreshold","registerAgent","agentId","agent","_this","agentInfo","id","capabilities","analyzeAgentCapabilities","trustScore","performanceHistory","Set","coordinationRole","lastHeartbeat","Date","now","status","has","b","messagesExchanged","consensusParticipation","coordinationSuccessRate","averageResponseTime","lastUpdate","console","log","processingPower","memoryCapacity","specializations","reliability","latency","coordinationExperience","modelType","getMetrics","metrics","Math","min","accuracy","epochsTrained","initializeSession","session","_this2","sessionId","strategy","selectCoordinationStrategy","consensusProtocol","selectConsensusProtocol","coordinationSession","communicationGraph","buildCommunicationGraph","agentIds","coordinationState","startTime","messageQueue","consensusRounds","coordinationEvents","initializeCommunicationChannels","agentCount","trustLevel","calculateSessionTrustLevel","taskComplexity","estimateTaskComplexity","bestStrategy","bestScore","strategyName","entries","score","scalabilityScore","calculateScalabilityScore","isHeterogeneousSession","get","strategyScalability","optimalRange","deviation","abs","max","totalTrust","complexity","knowledgeGraph","size","agentTypes","agentType","add","graph","buildStarTopology","buildMeshTopology","buildRingTopology","buildNeighborhoodTopology","centerAgent","j","agentA","agentB","current","next","prev","radius","_this3","connections","agentChannels","connectedAgentId","calculateChannelLatency","bandwidth","calculateChannelBandwidth","calculateChannelReliability","messageHistory","baseLatency","randomVariation","random","baseBandwidth","agentAMetrics","agentBMetrics","agentABandwidth","agentBBandwidth","agentAReliability","agentBReliability","coordinate","_this4","Error","coordinationResult","executeCoordinationStrategy","consensusResult","executeConsensusProtocol","consensus","updateCoordinationMetrics","error","_this5","executeHierarchicalCoordination","executePeerToPeerCoordination","executeSwarmCoordination","executeMarketBasedCoordination","executeContractNetCoordination","executeBlackboardCoordination","executeMARLCoordination","executeByzantineCoordination","_this6","leader","selectLeader","coordinationPlan","createCoordinationPlan","results","task","tasks","result","assignTask","plan","success","timestamp","_this7","negotiations","neighbors","agentNegotiations","neighborId","negotiation","negotiateWithPeer","coordinationAgreements","aggregateNegotiations","agreements","_this8","swarmBehaviors","emergentPatterns","neighborhood","getNeighborhood","localState","calculateLocalState","behavior","updateSwarmBehavior","pattern","detectEmergentPattern","behaviors","_this9","auctionResults","identifyCoordinationTasks","auction","runTaskAuction","taskAllocations","allocateTasksFromAuctions","auctions","allocations","_this0","contractResults","announcements","createTaskAnnouncements","announcement","bids","collectBids","selectedBid","selectWinningBid","contract","establishContract","taskId","contracts","_this1","blackboard","initializeBlackboard","knowledgeSources","activateKnowledgeSources","coordinationComplete","iterations","maxIterations","ks","executeKnowledgeSource","checkCoordinationCompletion","serializeBlackboard","_this10","agentPolicies","sharedReward","calculateSharedReward","currentPolicy","getAgentPolicy","updatedPolicy","updatePolicyWithSharedReward","coordinatedActions","policy","action","selectCoordinatedAction","policies","actions","_this11","byzantineResults","decisions","gatherAgentDecisions","decisionTypes","decision","type","decisionType","typeDecisions","runByzantineConsensus","_this12","executeProofOfStakeConsensus","executePBFTConsensus","executeRaftConsensus","executeGossipConsensus","getResults","_this13","currentSuccess","getStatistics","totalAgents","avgSuccessRate","totalMessages","availableStrategies","availableConsensusProtocols","bestAgent","priority","deadline","participants","outcome","terms","cooperation","agentAgreements","neighborCount","averagePerformance","localEnergy","intensity","direction","PI","strength","_Array$from$find","bid","winningBid","values","map","winner","Array","from","find","contractor","sources","data","fromEntries","reward","confidence","d","median","sort","floor","consensusValue","protocol"],"sources":["neural-coordination-protocol.js"],"sourcesContent":["/**\n * Neural Coordination Protocol\n * Enables sophisticated coordination between neural network agents\n */\n\nclass NeuralCoordinationProtocol {\n  constructor() {\n    this.activeSessions = new Map();\n    this.coordinationStrategies = new Map();\n    this.communicationChannels = new Map();\n    this.consensusProtocols = new Map();\n    this.coordinationResults = new Map();\n    this.coordinationMetrics = new Map();\n    \n    // Initialize coordination strategies\n    this.initializeCoordinationStrategies();\n    \n    // Initialize consensus protocols\n    this.initializeConsensusProtocols();\n  }\n\n  /**\n   * Initialize coordination strategies\n   */\n  initializeCoordinationStrategies() {\n    // Hierarchical Coordination\n    this.coordinationStrategies.set('hierarchical', {\n      name: 'Hierarchical Coordination',\n      description: 'Leader-follower structure with centralized decision making',\n      structure: 'tree',\n      characteristics: {\n        leadershipType: 'single_leader',\n        decisionFlow: 'top_down',\n        communicationPattern: 'star',\n        consensusRequired: false,\n        scalability: 0.7,\n        robustness: 0.6\n      },\n      parameters: {\n        leaderSelectionCriteria: 'performance',\n        maxHierarchyDepth: 3,\n        commandPropagationDelay: 100,\n        leaderRotationInterval: 3600000 // 1 hour\n      }\n    });\n\n    // Peer-to-Peer Coordination\n    this.coordinationStrategies.set('peer_to_peer', {\n      name: 'Peer-to-Peer Coordination',\n      description: 'Decentralized coordination with equal agent status',\n      structure: 'mesh',\n      characteristics: {\n        leadershipType: 'distributed',\n        decisionFlow: 'lateral',\n        communicationPattern: 'mesh',\n        consensusRequired: true,\n        scalability: 0.8,\n        robustness: 0.9\n      },\n      parameters: {\n        consensusThreshold: 0.66,\n        communicationTimeout: 5000,\n        maxNegotiationRounds: 10,\n        conflictResolutionMethod: 'voting'\n      }\n    });\n\n    // Swarm Coordination\n    this.coordinationStrategies.set('swarm', {\n      name: 'Swarm Coordination',\n      description: 'Emergent coordination through local interactions',\n      structure: 'dynamic',\n      characteristics: {\n        leadershipType: 'emergent',\n        decisionFlow: 'emergent',\n        communicationPattern: 'local_neighborhood',\n        consensusRequired: false,\n        scalability: 0.9,\n        robustness: 0.8\n      },\n      parameters: {\n        neighborhoodRadius: 3,\n        influenceDecayRate: 0.9,\n        emergenceThreshold: 0.75,\n        adaptationRate: 0.1\n      }\n    });\n\n    // Market-Based Coordination\n    this.coordinationStrategies.set('market_based', {\n      name: 'Market-Based Coordination',\n      description: 'Economic auction-based task allocation',\n      structure: 'auction',\n      characteristics: {\n        leadershipType: 'auctioneer',\n        decisionFlow: 'bidding',\n        communicationPattern: 'broadcast_bidding',\n        consensusRequired: false,\n        scalability: 0.8,\n        robustness: 0.7\n      },\n      parameters: {\n        auctionType: 'first_price_sealed_bid',\n        biddingTimeout: 3000,\n        reservePrice: 0.1,\n        profitSharingRatio: 0.8\n      }\n    });\n\n    // Contract Net Coordination\n    this.coordinationStrategies.set('contract_net', {\n      name: 'Contract Net Protocol',\n      description: 'Task announcement and bidding system',\n      structure: 'contract',\n      characteristics: {\n        leadershipType: 'task_specific',\n        decisionFlow: 'contract_based',\n        communicationPattern: 'announcement_bidding',\n        consensusRequired: false,\n        scalability: 0.75,\n        robustness: 0.8\n      },\n      parameters: {\n        taskAnnouncementDelay: 1000,\n        biddingPeriod: 5000,\n        contractDuration: 300000, // 5 minutes\n        performanceEvaluationInterval: 60000\n      }\n    });\n\n    // Blackboard Coordination\n    this.coordinationStrategies.set('blackboard', {\n      name: 'Blackboard System',\n      description: 'Shared knowledge space for coordination',\n      structure: 'shared_memory',\n      characteristics: {\n        leadershipType: 'knowledge_driven',\n        decisionFlow: 'opportunistic',\n        communicationPattern: 'publish_subscribe',\n        consensusRequired: false,\n        scalability: 0.6,\n        robustness: 0.7\n      },\n      parameters: {\n        blackboardSize: 1000,\n        knowledgeExpirationTime: 600000, // 10 minutes\n        priorityQueueSize: 100,\n        triggerThreshold: 0.7\n      }\n    });\n\n    // Multi-Agent Reinforcement Learning Coordination\n    this.coordinationStrategies.set('marl', {\n      name: 'Multi-Agent Reinforcement Learning',\n      description: 'Learning-based coordination through shared rewards',\n      structure: 'learning',\n      characteristics: {\n        leadershipType: 'learned',\n        decisionFlow: 'policy_based',\n        communicationPattern: 'learned_communication',\n        consensusRequired: false,\n        scalability: 0.8,\n        robustness: 0.8\n      },\n      parameters: {\n        learningRate: 0.001,\n        explorationRate: 0.1,\n        rewardSharingRatio: 0.5,\n        communicationBandwidth: 64\n      }\n    });\n\n    // Byzantine Fault Tolerant Coordination\n    this.coordinationStrategies.set('byzantine_ft', {\n      name: 'Byzantine Fault Tolerant',\n      description: 'Coordination robust to malicious or faulty agents',\n      structure: 'fault_tolerant',\n      characteristics: {\n        leadershipType: 'rotating_committee',\n        decisionFlow: 'byzantine_consensus',\n        communicationPattern: 'authenticated_broadcast',\n        consensusRequired: true,\n        scalability: 0.5,\n        robustness: 0.95\n      },\n      parameters: {\n        faultTolerance: 0.33, // Can tolerate up to 1/3 faulty agents\n        viewChangeTimeout: 10000,\n        messageAuthenticationRequired: true,\n        committeeSize: 7\n      }\n    });\n  }\n\n  /**\n   * Initialize consensus protocols\n   */\n  initializeConsensusProtocols() {\n    // Proof of Stake Consensus\n    this.consensusProtocols.set('proof_of_stake', {\n      name: 'Proof of Stake',\n      description: 'Consensus based on agent performance stake',\n      parameters: {\n        stakingPeriod: 3600000, // 1 hour\n        minimumStake: 0.1,\n        slashingPenalty: 0.05,\n        rewardDistribution: 'proportional'\n      },\n      applicability: {\n        trustRequired: 0.7,\n        performanceWeight: 0.9,\n        energyEfficiency: 0.9\n      }\n    });\n\n    // Practical Byzantine Fault Tolerance\n    this.consensusProtocols.set('pbft', {\n      name: 'Practical Byzantine Fault Tolerance',\n      description: 'Byzantine consensus for unreliable environments',\n      parameters: {\n        phaseTimeout: 5000,\n        viewChangeTimeout: 10000,\n        checkpointInterval: 100,\n        maxFaultyNodes: 0.33\n      },\n      applicability: {\n        trustRequired: 0.3,\n        performanceWeight: 0.6,\n        energyEfficiency: 0.4\n      }\n    });\n\n    // Raft Consensus\n    this.consensusProtocols.set('raft', {\n      name: 'Raft Consensus',\n      description: 'Leader-based consensus for crash-fault tolerance',\n      parameters: {\n        electionTimeout: 5000,\n        heartbeatInterval: 1000,\n        logReplicationBatchSize: 10,\n        leaderElectionBackoff: 1.5\n      },\n      applicability: {\n        trustRequired: 0.8,\n        performanceWeight: 0.8,\n        energyEfficiency: 0.7\n      }\n    });\n\n    // Gossip Protocol\n    this.consensusProtocols.set('gossip', {\n      name: 'Gossip Protocol',\n      description: 'Probabilistic information dissemination',\n      parameters: {\n        gossipRounds: 10,\n        gossipFanout: 3,\n        gossipInterval: 1000,\n        convergenceThreshold: 0.95\n      },\n      applicability: {\n        trustRequired: 0.9,\n        performanceWeight: 0.5,\n        energyEfficiency: 0.8\n      }\n    });\n  }\n\n  /**\n   * Register agent with coordination protocol\n   * @param {string} agentId - Agent identifier\n   * @param {Object} agent - Agent instance\n   */\n  async registerAgent(agentId, agent) {\n    const agentInfo = {\n      id: agentId,\n      agent: agent,\n      capabilities: this.analyzeAgentCapabilities(agent),\n      trustScore: 1.0,\n      performanceHistory: [],\n      communicationChannels: new Set(),\n      coordinationRole: 'peer',\n      lastHeartbeat: Date.now(),\n      status: 'active'\n    };\n\n    // Initialize communication channels for this agent\n    if (!this.communicationChannels.has(agentId)) {\n      this.communicationChannels.set(agentId, new Map());\n    }\n\n    // Initialize coordination metrics\n    this.coordinationMetrics.set(agentId, {\n      messagesExchanged: 0,\n      consensusParticipation: 0,\n      coordinationSuccessRate: 1.0,\n      averageResponseTime: 0,\n      lastUpdate: Date.now()\n    });\n\n    console.log(`Registered agent ${agentId} with coordination protocol`);\n    return agentInfo;\n  }\n\n  /**\n   * Analyze agent capabilities for coordination\n   * @param {Object} agent - Agent instance\n   */\n  analyzeAgentCapabilities(agent) {\n    const capabilities = {\n      communicationBandwidth: 1000, // Default bandwidth\n      processingPower: 1.0,\n      memoryCapacity: 1.0,\n      specializations: [],\n      reliability: 1.0,\n      latency: 100, // Default latency in ms\n      coordinationExperience: 0\n    };\n\n    // Analyze based on agent type and configuration\n    if (agent.modelType) {\n      switch (agent.modelType) {\n        case 'transformer':\n        case 'lstm':\n        case 'gru':\n          capabilities.specializations.push('sequence_processing', 'language_understanding');\n          capabilities.processingPower = 0.9;\n          break;\n        case 'cnn':\n        case 'resnet':\n          capabilities.specializations.push('image_processing', 'pattern_recognition');\n          capabilities.processingPower = 0.8;\n          break;\n        case 'gnn':\n        case 'gat':\n          capabilities.specializations.push('graph_analysis', 'relationship_modeling');\n          capabilities.processingPower = 0.7;\n          break;\n        case 'diffusion_model':\n        case 'vae':\n          capabilities.specializations.push('generation', 'creativity');\n          capabilities.processingPower = 0.6;\n          break;\n      }\n    }\n\n    // Estimate performance based on metrics\n    if (agent.getMetrics) {\n      const metrics = agent.getMetrics();\n      capabilities.reliability = Math.min(1, metrics.accuracy || 0.8);\n      capabilities.coordinationExperience = metrics.epochsTrained / 100 || 0;\n    }\n\n    return capabilities;\n  }\n\n  /**\n   * Initialize coordination session\n   * @param {Object} session - Session configuration\n   */\n  async initializeSession(session) {\n    const sessionId = session.id;\n    \n    // Select optimal coordination strategy\n    const strategy = this.selectCoordinationStrategy(session);\n    \n    // Select consensus protocol if needed\n    const consensusProtocol = strategy.characteristics.consensusRequired \n      ? this.selectConsensusProtocol(session, strategy)\n      : null;\n\n    const coordinationSession = {\n      ...session,\n      strategy,\n      consensusProtocol,\n      communicationGraph: this.buildCommunicationGraph(session.agentIds, strategy),\n      coordinationState: 'initializing',\n      startTime: Date.now(),\n      messageQueue: new Map(),\n      consensusRounds: 0,\n      coordinationEvents: []\n    };\n\n    this.activeSessions.set(sessionId, coordinationSession);\n    \n    // Initialize communication channels for session\n    await this.initializeCommunicationChannels(coordinationSession);\n    \n    console.log(`Initialized coordination session ${sessionId} with strategy: ${strategy.name}`);\n    \n    return coordinationSession;\n  }\n\n  /**\n   * Select optimal coordination strategy for session\n   * @param {Object} session - Session configuration\n   */\n  selectCoordinationStrategy(session) {\n    const agentCount = session.agentIds.length;\n    const trustLevel = this.calculateSessionTrustLevel(session);\n    const taskComplexity = this.estimateTaskComplexity(session);\n    \n    let bestStrategy = null;\n    let bestScore = 0;\n\n    for (const [strategyName, strategy] of this.coordinationStrategies.entries()) {\n      let score = 0;\n\n      // Score based on agent count and scalability\n      const scalabilityScore = this.calculateScalabilityScore(agentCount, strategy.characteristics.scalability);\n      score += scalabilityScore * 0.3;\n\n      // Score based on trust level and robustness requirements\n      if (trustLevel < 0.7 && strategy.characteristics.robustness > 0.8) {\n        score += 0.2;\n      }\n\n      // Score based on task complexity\n      if (taskComplexity > 0.7) {\n        if (strategy.characteristics.decisionFlow === 'lateral' || strategy.characteristics.decisionFlow === 'emergent') {\n          score += 0.2;\n        }\n      } else {\n        if (strategy.characteristics.decisionFlow === 'top_down') {\n          score += 0.15;\n        }\n      }\n\n      // Prefer consensus-based strategies for heterogeneous agents\n      if (this.isHeterogeneousSession(session) && strategy.characteristics.consensusRequired) {\n        score += 0.1;\n      }\n\n      // Performance-based preferences\n      if (session.strategy === 'parallel' && strategy.characteristics.communicationPattern === 'mesh') {\n        score += 0.15;\n      }\n\n      if (score > bestScore) {\n        bestScore = score;\n        bestStrategy = strategy;\n      }\n    }\n\n    return bestStrategy || this.coordinationStrategies.get('peer_to_peer');\n  }\n\n  /**\n   * Calculate scalability score for agent count\n   * @param {number} agentCount - Number of agents\n   * @param {number} strategyScalability - Strategy scalability factor\n   */\n  calculateScalabilityScore(agentCount, strategyScalability) {\n    const optimalRange = strategyScalability * 10; // Optimal agent count for strategy\n    const deviation = Math.abs(agentCount - optimalRange) / optimalRange;\n    return Math.max(0, 1 - deviation);\n  }\n\n  /**\n   * Calculate session trust level\n   * @param {Object} session - Session configuration\n   */\n  calculateSessionTrustLevel(session) {\n    if (!session.agentIds || session.agentIds.length === 0) return 1.0;\n\n    let totalTrust = 0;\n    let agentCount = 0;\n\n    for (const agentId of session.agentIds) {\n      const metrics = this.coordinationMetrics.get(agentId);\n      if (metrics) {\n        totalTrust += metrics.coordinationSuccessRate;\n        agentCount++;\n      }\n    }\n\n    return agentCount > 0 ? totalTrust / agentCount : 1.0;\n  }\n\n  /**\n   * Estimate task complexity for session\n   * @param {Object} session - Session configuration\n   */\n  estimateTaskComplexity(session) {\n    let complexity = 0.5; // Base complexity\n\n    // Increase complexity based on agent count\n    complexity += Math.min(0.3, session.agentIds.length / 20);\n\n    // Increase complexity for parallel strategy\n    if (session.strategy === 'parallel') {\n      complexity += 0.2;\n    }\n\n    // Increase complexity if collaboration is enabled\n    if (session.knowledgeGraph && session.knowledgeGraph.size > 0) {\n      complexity += 0.1;\n    }\n\n    return Math.min(1, complexity);\n  }\n\n  /**\n   * Check if session has heterogeneous agents\n   * @param {Object} session - Session configuration\n   */\n  isHeterogeneousSession(session) {\n    const agentTypes = new Set();\n    \n    for (const agentId of session.agentIds) {\n      const metrics = this.coordinationMetrics.get(agentId);\n      if (metrics && metrics.agentType) {\n        agentTypes.add(metrics.agentType);\n      }\n    }\n\n    return agentTypes.size > 1;\n  }\n\n  /**\n   * Select consensus protocol for strategy\n   * @param {Object} session - Session configuration\n   * @param {Object} strategy - Coordination strategy\n   */\n  selectConsensusProtocol(session, strategy) {\n    const trustLevel = this.calculateSessionTrustLevel(session);\n    const agentCount = session.agentIds.length;\n\n    // Select based on trust level and agent count\n    if (trustLevel < 0.5 || agentCount > 20) {\n      return this.consensusProtocols.get('pbft');\n    } else if (trustLevel > 0.8 && agentCount <= 10) {\n      return this.consensusProtocols.get('raft');\n    } else if (agentCount > 10) {\n      return this.consensusProtocols.get('gossip');\n    } else {\n      return this.consensusProtocols.get('proof_of_stake');\n    }\n  }\n\n  /**\n   * Build communication graph for session\n   * @param {Array} agentIds - Agent identifiers\n   * @param {Object} strategy - Coordination strategy\n   */\n  buildCommunicationGraph(agentIds, strategy) {\n    const graph = new Map();\n\n    // Initialize nodes\n    for (const agentId of agentIds) {\n      graph.set(agentId, new Set());\n    }\n\n    // Build connections based on strategy\n    switch (strategy.characteristics.communicationPattern) {\n      case 'star':\n        this.buildStarTopology(graph, agentIds);\n        break;\n      case 'mesh':\n        this.buildMeshTopology(graph, agentIds);\n        break;\n      case 'ring':\n        this.buildRingTopology(graph, agentIds);\n        break;\n      case 'local_neighborhood':\n        this.buildNeighborhoodTopology(graph, agentIds, strategy.parameters.neighborhoodRadius);\n        break;\n      default:\n        this.buildMeshTopology(graph, agentIds); // Default to mesh\n    }\n\n    return graph;\n  }\n\n  /**\n   * Build star topology (one central node connected to all others)\n   * @param {Map} graph - Communication graph\n   * @param {Array} agentIds - Agent identifiers\n   */\n  buildStarTopology(graph, agentIds) {\n    if (agentIds.length === 0) return;\n\n    const centerAgent = agentIds[0]; // Select first agent as center\n    \n    for (let i = 1; i < agentIds.length; i++) {\n      const agentId = agentIds[i];\n      graph.get(centerAgent).add(agentId);\n      graph.get(agentId).add(centerAgent);\n    }\n  }\n\n  /**\n   * Build mesh topology (all nodes connected to all others)\n   * @param {Map} graph - Communication graph\n   * @param {Array} agentIds - Agent identifiers\n   */\n  buildMeshTopology(graph, agentIds) {\n    for (let i = 0; i < agentIds.length; i++) {\n      for (let j = i + 1; j < agentIds.length; j++) {\n        const agentA = agentIds[i];\n        const agentB = agentIds[j];\n        graph.get(agentA).add(agentB);\n        graph.get(agentB).add(agentA);\n      }\n    }\n  }\n\n  /**\n   * Build ring topology (each node connected to neighbors in a ring)\n   * @param {Map} graph - Communication graph\n   * @param {Array} agentIds - Agent identifiers\n   */\n  buildRingTopology(graph, agentIds) {\n    for (let i = 0; i < agentIds.length; i++) {\n      const current = agentIds[i];\n      const next = agentIds[(i + 1) % agentIds.length];\n      const prev = agentIds[(i - 1 + agentIds.length) % agentIds.length];\n      \n      graph.get(current).add(next);\n      graph.get(current).add(prev);\n    }\n  }\n\n  /**\n   * Build neighborhood topology (each node connected to nearby nodes)\n   * @param {Map} graph - Communication graph\n   * @param {Array} agentIds - Agent identifiers\n   * @param {number} radius - Neighborhood radius\n   */\n  buildNeighborhoodTopology(graph, agentIds, radius = 2) {\n    for (let i = 0; i < agentIds.length; i++) {\n      const current = agentIds[i];\n      \n      for (let j = 1; j <= radius; j++) {\n        // Connect to agents within radius in both directions\n        const next = agentIds[(i + j) % agentIds.length];\n        const prev = agentIds[(i - j + agentIds.length) % agentIds.length];\n        \n        if (next !== current) graph.get(current).add(next);\n        if (prev !== current) graph.get(current).add(prev);\n      }\n    }\n  }\n\n  /**\n   * Initialize communication channels for session\n   * @param {Object} session - Coordination session\n   */\n  async initializeCommunicationChannels(session) {\n    const { communicationGraph, agentIds } = session;\n\n    // Create message queues for each agent\n    for (const agentId of agentIds) {\n      if (!session.messageQueue.has(agentId)) {\n        session.messageQueue.set(agentId, []);\n      }\n    }\n\n    // Establish bidirectional channels based on communication graph\n    for (const [agentId, connections] of communicationGraph.entries()) {\n      const agentChannels = this.communicationChannels.get(agentId);\n      \n      for (const connectedAgentId of connections) {\n        if (!agentChannels.has(connectedAgentId)) {\n          agentChannels.set(connectedAgentId, {\n            sessionId: session.id,\n            latency: this.calculateChannelLatency(agentId, connectedAgentId),\n            bandwidth: this.calculateChannelBandwidth(agentId, connectedAgentId),\n            reliability: this.calculateChannelReliability(agentId, connectedAgentId),\n            messageHistory: []\n          });\n        }\n      }\n    }\n\n    console.log(`Initialized communication channels for session ${session.id}`);\n  }\n\n  /**\n   * Calculate communication latency between agents\n   * @param {string} agentA - First agent ID\n   * @param {string} agentB - Second agent ID\n   */\n  calculateChannelLatency(agentA, agentB) {\n    // Simplified latency calculation (in practice, would consider network topology)\n    const baseLatency = 50; // Base latency in milliseconds\n    const randomVariation = Math.random() * 50; // Random variation\n    return baseLatency + randomVariation;\n  }\n\n  /**\n   * Calculate communication bandwidth between agents\n   * @param {string} agentA - First agent ID\n   * @param {string} agentB - Second agent ID\n   */\n  calculateChannelBandwidth(agentA, agentB) {\n    // Simplified bandwidth calculation (in practice, would consider agent capabilities)\n    const baseBandwidth = 1000; // Base bandwidth\n    const agentAMetrics = this.coordinationMetrics.get(agentA);\n    const agentBMetrics = this.coordinationMetrics.get(agentB);\n    \n    // Bandwidth limited by slower agent\n    const agentABandwidth = agentAMetrics?.communicationBandwidth || baseBandwidth;\n    const agentBBandwidth = agentBMetrics?.communicationBandwidth || baseBandwidth;\n    \n    return Math.min(agentABandwidth, agentBBandwidth);\n  }\n\n  /**\n   * Calculate communication reliability between agents\n   * @param {string} agentA - First agent ID\n   * @param {string} agentB - Second agent ID\n   */\n  calculateChannelReliability(agentA, agentB) {\n    const agentAMetrics = this.coordinationMetrics.get(agentA);\n    const agentBMetrics = this.coordinationMetrics.get(agentB);\n    \n    const agentAReliability = agentAMetrics?.coordinationSuccessRate || 1.0;\n    const agentBReliability = agentBMetrics?.coordinationSuccessRate || 1.0;\n    \n    // Channel reliability is product of agent reliabilities\n    return agentAReliability * agentBReliability;\n  }\n\n  /**\n   * Coordinate agents in session\n   * @param {Object} session - Coordination session\n   */\n  async coordinate(session) {\n    const coordinationSession = this.activeSessions.get(session.id);\n    if (!coordinationSession) {\n      throw new Error(`Session ${session.id} not found`);\n    }\n\n    coordinationSession.coordinationState = 'coordinating';\n\n    try {\n      // Execute coordination based on strategy\n      const coordinationResult = await this.executeCoordinationStrategy(coordinationSession);\n      \n      // Apply consensus if required\n      if (coordinationSession.consensusProtocol) {\n        const consensusResult = await this.executeConsensusProtocol(coordinationSession, coordinationResult);\n        coordinationResult.consensus = consensusResult;\n      }\n\n      // Store coordination results\n      this.coordinationResults.set(session.id, coordinationResult);\n      \n      // Update coordination metrics\n      this.updateCoordinationMetrics(coordinationSession, coordinationResult);\n      \n      coordinationSession.coordinationState = 'completed';\n      \n      return coordinationResult;\n      \n    } catch (error) {\n      coordinationSession.coordinationState = 'error';\n      console.error(`Coordination failed for session ${session.id}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Execute coordination strategy\n   * @param {Object} session - Coordination session\n   */\n  async executeCoordinationStrategy(session) {\n    const { strategy } = session;\n    \n    switch (strategy.name) {\n      case 'Hierarchical Coordination':\n        return this.executeHierarchicalCoordination(session);\n      case 'Peer-to-Peer Coordination':\n        return this.executePeerToPeerCoordination(session);\n      case 'Swarm Coordination':\n        return this.executeSwarmCoordination(session);\n      case 'Market-Based Coordination':\n        return this.executeMarketBasedCoordination(session);\n      case 'Contract Net Protocol':\n        return this.executeContractNetCoordination(session);\n      case 'Blackboard System':\n        return this.executeBlackboardCoordination(session);\n      case 'Multi-Agent Reinforcement Learning':\n        return this.executeMARLCoordination(session);\n      case 'Byzantine Fault Tolerant':\n        return this.executeByzantineCoordination(session);\n      default:\n        return this.executePeerToPeerCoordination(session); // Default\n    }\n  }\n\n  /**\n   * Execute hierarchical coordination\n   * @param {Object} session - Coordination session\n   */\n  async executeHierarchicalCoordination(session) {\n    const leader = this.selectLeader(session);\n    const coordinationPlan = await this.createCoordinationPlan(session, leader);\n    \n    // Distribute plan from leader to followers\n    const results = new Map();\n    \n    for (const agentId of session.agentIds) {\n      if (agentId !== leader) {\n        const task = coordinationPlan.tasks.get(agentId);\n        if (task) {\n          const result = await this.assignTask(agentId, task, session);\n          results.set(agentId, result);\n        }\n      }\n    }\n\n    return {\n      strategy: 'hierarchical',\n      leader,\n      plan: coordinationPlan,\n      results,\n      success: true,\n      timestamp: Date.now()\n    };\n  }\n\n  /**\n   * Execute peer-to-peer coordination\n   * @param {Object} session - Coordination session\n   */\n  async executePeerToPeerCoordination(session) {\n    const negotiations = new Map();\n    \n    // Each agent negotiates with its neighbors\n    for (const agentId of session.agentIds) {\n      const neighbors = session.communicationGraph.get(agentId) || new Set();\n      const agentNegotiations = [];\n      \n      for (const neighborId of neighbors) {\n        const negotiation = await this.negotiateWithPeer(agentId, neighborId, session);\n        agentNegotiations.push(negotiation);\n      }\n      \n      negotiations.set(agentId, agentNegotiations);\n    }\n\n    // Aggregate negotiation results\n    const coordinationAgreements = this.aggregateNegotiations(negotiations);\n\n    return {\n      strategy: 'peer_to_peer',\n      negotiations,\n      agreements: coordinationAgreements,\n      success: true,\n      timestamp: Date.now()\n    };\n  }\n\n  /**\n   * Execute swarm coordination\n   * @param {Object} session - Coordination session\n   */\n  async executeSwarmCoordination(session) {\n    const swarmBehaviors = new Map();\n    const emergentPatterns = new Map();\n    \n    // Each agent updates its behavior based on local neighborhood\n    for (const agentId of session.agentIds) {\n      const neighborhood = this.getNeighborhood(agentId, session);\n      const localState = await this.calculateLocalState(agentId, neighborhood, session);\n      const behavior = this.updateSwarmBehavior(agentId, localState, session);\n      \n      swarmBehaviors.set(agentId, behavior);\n    }\n\n    // Detect emergent coordination patterns\n    for (const agentId of session.agentIds) {\n      const pattern = this.detectEmergentPattern(agentId, swarmBehaviors, session);\n      emergentPatterns.set(agentId, pattern);\n    }\n\n    return {\n      strategy: 'swarm',\n      behaviors: swarmBehaviors,\n      emergentPatterns,\n      success: true,\n      timestamp: Date.now()\n    };\n  }\n\n  /**\n   * Execute market-based coordination\n   * @param {Object} session - Coordination session\n   */\n  async executeMarketBasedCoordination(session) {\n    const auctionResults = new Map();\n    const tasks = this.identifyCoordinationTasks(session);\n    \n    // Run auction for each task\n    for (const task of tasks) {\n      const auction = await this.runTaskAuction(task, session);\n      auctionResults.set(task.id, auction);\n    }\n\n    // Allocate tasks based on auction results\n    const taskAllocations = this.allocateTasksFromAuctions(auctionResults);\n\n    return {\n      strategy: 'market_based',\n      auctions: auctionResults,\n      allocations: taskAllocations,\n      success: true,\n      timestamp: Date.now()\n    };\n  }\n\n  /**\n   * Execute contract net coordination\n   * @param {Object} session - Coordination session\n   */\n  async executeContractNetCoordination(session) {\n    const contractResults = new Map();\n    const announcements = await this.createTaskAnnouncements(session);\n    \n    // Process each task announcement\n    for (const announcement of announcements) {\n      const bids = await this.collectBids(announcement, session);\n      const selectedBid = this.selectWinningBid(bids, announcement);\n      const contract = await this.establishContract(announcement, selectedBid, session);\n      \n      contractResults.set(announcement.taskId, {\n        announcement,\n        bids,\n        selectedBid,\n        contract\n      });\n    }\n\n    return {\n      strategy: 'contract_net',\n      contracts: contractResults,\n      success: true,\n      timestamp: Date.now()\n    };\n  }\n\n  /**\n   * Execute blackboard coordination\n   * @param {Object} session - Coordination session\n   */\n  async executeBlackboardCoordination(session) {\n    const blackboard = this.initializeBlackboard(session);\n    const knowledgeSources = this.activateKnowledgeSources(session);\n    \n    // Opportunistic coordination through blackboard\n    let coordinationComplete = false;\n    let iterations = 0;\n    const maxIterations = 10;\n    \n    while (!coordinationComplete && iterations < maxIterations) {\n      // Each knowledge source contributes to blackboard\n      for (const [agentId, ks] of knowledgeSources.entries()) {\n        await this.executeKnowledgeSource(agentId, ks, blackboard, session);\n      }\n      \n      // Check for coordination completion\n      coordinationComplete = this.checkCoordinationCompletion(blackboard, session);\n      iterations++;\n    }\n\n    return {\n      strategy: 'blackboard',\n      blackboard: this.serializeBlackboard(blackboard),\n      iterations,\n      success: coordinationComplete,\n      timestamp: Date.now()\n    };\n  }\n\n  /**\n   * Execute multi-agent reinforcement learning coordination\n   * @param {Object} session - Coordination session\n   */\n  async executeMARLCoordination(session) {\n    const agentPolicies = new Map();\n    const sharedReward = this.calculateSharedReward(session);\n    \n    // Update each agent's policy based on shared reward\n    for (const agentId of session.agentIds) {\n      const currentPolicy = await this.getAgentPolicy(agentId, session);\n      const updatedPolicy = await this.updatePolicyWithSharedReward(\n        agentId, \n        currentPolicy, \n        sharedReward, \n        session\n      );\n      agentPolicies.set(agentId, updatedPolicy);\n    }\n\n    // Execute coordinated actions based on updated policies\n    const coordinatedActions = new Map();\n    for (const [agentId, policy] of agentPolicies.entries()) {\n      const action = await this.selectCoordinatedAction(agentId, policy, session);\n      coordinatedActions.set(agentId, action);\n    }\n\n    return {\n      strategy: 'marl',\n      policies: agentPolicies,\n      sharedReward,\n      actions: coordinatedActions,\n      success: true,\n      timestamp: Date.now()\n    };\n  }\n\n  /**\n   * Execute Byzantine fault tolerant coordination\n   * @param {Object} session - Coordination session\n   */\n  async executeByzantineCoordination(session) {\n    const byzantineResults = new Map();\n    const decisions = await this.gatherAgentDecisions(session);\n    \n    // Run Byzantine consensus on each decision type\n    const decisionTypes = new Set();\n    for (const [agentId, decision] of decisions.entries()) {\n      decisionTypes.add(decision.type);\n    }\n    \n    for (const decisionType of decisionTypes) {\n      const typeDecisions = new Map();\n      for (const [agentId, decision] of decisions.entries()) {\n        if (decision.type === decisionType) {\n          typeDecisions.set(agentId, decision);\n        }\n      }\n      \n      const consensus = await this.runByzantineConsensus(typeDecisions, session);\n      byzantineResults.set(decisionType, consensus);\n    }\n\n    return {\n      strategy: 'byzantine_ft',\n      decisions,\n      consensus: byzantineResults,\n      success: true,\n      timestamp: Date.now()\n    };\n  }\n\n  /**\n   * Execute consensus protocol\n   * @param {Object} session - Coordination session\n   * @param {Object} coordinationResult - Result from coordination strategy\n   */\n  async executeConsensusProtocol(session, coordinationResult) {\n    const { consensusProtocol } = session;\n    \n    switch (consensusProtocol.name) {\n      case 'Proof of Stake':\n        return this.executeProofOfStakeConsensus(session, coordinationResult);\n      case 'Practical Byzantine Fault Tolerance':\n        return this.executePBFTConsensus(session, coordinationResult);\n      case 'Raft Consensus':\n        return this.executeRaftConsensus(session, coordinationResult);\n      case 'Gossip Protocol':\n        return this.executeGossipConsensus(session, coordinationResult);\n      default:\n        return this.executeGossipConsensus(session, coordinationResult); // Default\n    }\n  }\n\n  /**\n   * Get coordination results for session\n   * @param {string} sessionId - Session identifier\n   */\n  async getResults(sessionId) {\n    return this.coordinationResults.get(sessionId) || null;\n  }\n\n  /**\n   * Update coordination metrics after coordination\n   * @param {Object} session - Coordination session\n   * @param {Object} result - Coordination result\n   */\n  updateCoordinationMetrics(session, result) {\n    for (const agentId of session.agentIds) {\n      const metrics = this.coordinationMetrics.get(agentId);\n      if (metrics) {\n        metrics.consensusParticipation++;\n        if (result.success) {\n          const currentSuccess = metrics.coordinationSuccessRate * metrics.consensusParticipation;\n          metrics.coordinationSuccessRate = (currentSuccess + 1) / (metrics.consensusParticipation + 1);\n        } else {\n          const currentSuccess = metrics.coordinationSuccessRate * metrics.consensusParticipation;\n          metrics.coordinationSuccessRate = currentSuccess / (metrics.consensusParticipation + 1);\n        }\n        metrics.lastUpdate = Date.now();\n      }\n    }\n  }\n\n  /**\n   * Get coordination statistics\n   */\n  getStatistics() {\n    const activeSessions = this.activeSessions.size;\n    const totalAgents = this.coordinationMetrics.size;\n    let avgSuccessRate = 0;\n    let totalMessages = 0;\n\n    for (const [agentId, metrics] of this.coordinationMetrics.entries()) {\n      avgSuccessRate += metrics.coordinationSuccessRate;\n      totalMessages += metrics.messagesExchanged;\n    }\n\n    return {\n      activeSessions,\n      totalAgents,\n      avgSuccessRate: totalAgents > 0 ? avgSuccessRate / totalAgents : 0,\n      totalMessages,\n      availableStrategies: this.coordinationStrategies.size,\n      availableConsensusProtocols: this.consensusProtocols.size\n    };\n  }\n\n  // Helper methods for coordination strategies (simplified implementations)\n\n  selectLeader(session) {\n    // Select agent with highest performance as leader\n    let bestAgent = session.agentIds[0];\n    let bestScore = 0;\n\n    for (const agentId of session.agentIds) {\n      const metrics = this.coordinationMetrics.get(agentId);\n      if (metrics && metrics.coordinationSuccessRate > bestScore) {\n        bestScore = metrics.coordinationSuccessRate;\n        bestAgent = agentId;\n      }\n    }\n\n    return bestAgent;\n  }\n\n  async createCoordinationPlan(session, leader) {\n    const tasks = new Map();\n    \n    // Create simple task distribution plan\n    for (let i = 0; i < session.agentIds.length; i++) {\n      const agentId = session.agentIds[i];\n      if (agentId !== leader) {\n        tasks.set(agentId, {\n          id: `task_${i}`,\n          type: 'coordination',\n          priority: 'medium',\n          deadline: Date.now() + 300000 // 5 minutes\n        });\n      }\n    }\n\n    return { tasks, leader, timestamp: Date.now() };\n  }\n\n  async assignTask(agentId, task, session) {\n    // Simulate task assignment\n    return {\n      agentId,\n      taskId: task.id,\n      status: 'assigned',\n      timestamp: Date.now()\n    };\n  }\n\n  async negotiateWithPeer(agentA, agentB, session) {\n    // Simulate negotiation between peers\n    return {\n      participants: [agentA, agentB],\n      outcome: 'agreement',\n      terms: { cooperation: 0.8 },\n      timestamp: Date.now()\n    };\n  }\n\n  aggregateNegotiations(negotiations) {\n    const agreements = new Map();\n    \n    for (const [agentId, agentNegotiations] of negotiations.entries()) {\n      const agentAgreements = agentNegotiations.filter(n => n.outcome === 'agreement');\n      agreements.set(agentId, agentAgreements);\n    }\n\n    return agreements;\n  }\n\n  getNeighborhood(agentId, session) {\n    return session.communicationGraph.get(agentId) || new Set();\n  }\n\n  async calculateLocalState(agentId, neighborhood, session) {\n    // Calculate local state based on neighborhood\n    return {\n      agentId,\n      neighborCount: neighborhood.size,\n      averagePerformance: 0.8, // Simplified\n      localEnergy: Math.random()\n    };\n  }\n\n  updateSwarmBehavior(agentId, localState, session) {\n    // Update agent behavior based on local state\n    return {\n      agentId,\n      behavior: 'cooperative',\n      intensity: localState.localEnergy,\n      direction: Math.random() * 2 * Math.PI\n    };\n  }\n\n  detectEmergentPattern(agentId, swarmBehaviors, session) {\n    // Detect emergent coordination patterns\n    return {\n      agentId,\n      pattern: 'flocking',\n      strength: Math.random(),\n      timestamp: Date.now()\n    };\n  }\n\n  identifyCoordinationTasks(session) {\n    // Identify tasks that need coordination\n    return [\n      { id: 'task1', type: 'computation', complexity: 0.5 },\n      { id: 'task2', type: 'communication', complexity: 0.3 }\n    ];\n  }\n\n  async runTaskAuction(task, session) {\n    // Simulate task auction\n    const bids = new Map();\n    \n    for (const agentId of session.agentIds) {\n      const bid = Math.random() * 100; // Random bid\n      bids.set(agentId, { agentId, bid, task: task.id });\n    }\n\n    const winningBid = Math.max(...bids.values().map(b => b.bid));\n    const winner = Array.from(bids.entries()).find(([id, bid]) => bid.bid === winningBid)?.[0];\n\n    return { task, bids, winner, winningBid };\n  }\n\n  allocateTasksFromAuctions(auctionResults) {\n    const allocations = new Map();\n    \n    for (const [taskId, auction] of auctionResults.entries()) {\n      if (auction.winner) {\n        allocations.set(taskId, auction.winner);\n      }\n    }\n\n    return allocations;\n  }\n\n  // Additional helper methods would be implemented here...\n  // For brevity, including placeholder implementations\n\n  async createTaskAnnouncements(session) {\n    return [{ taskId: 'announce1', description: 'Coordination task' }];\n  }\n\n  async collectBids(announcement, session) {\n    return [{ agentId: session.agentIds[0], bid: 50 }];\n  }\n\n  selectWinningBid(bids, announcement) {\n    return bids[0];\n  }\n\n  async establishContract(announcement, selectedBid, session) {\n    return { contractor: selectedBid.agentId, task: announcement.taskId };\n  }\n\n  initializeBlackboard(session) {\n    return new Map();\n  }\n\n  activateKnowledgeSources(session) {\n    const sources = new Map();\n    for (const agentId of session.agentIds) {\n      sources.set(agentId, { type: 'agent_knowledge', priority: 1 });\n    }\n    return sources;\n  }\n\n  async executeKnowledgeSource(agentId, ks, blackboard, session) {\n    // Simulate knowledge source execution\n    blackboard.set(`${agentId}_contribution`, { data: 'knowledge', timestamp: Date.now() });\n  }\n\n  checkCoordinationCompletion(blackboard, session) {\n    return blackboard.size >= session.agentIds.length;\n  }\n\n  serializeBlackboard(blackboard) {\n    return Object.fromEntries(blackboard);\n  }\n\n  calculateSharedReward(session) {\n    return Math.random(); // Simplified shared reward\n  }\n\n  async getAgentPolicy(agentId, session) {\n    return { agentId, policy: 'default', parameters: {} };\n  }\n\n  async updatePolicyWithSharedReward(agentId, policy, reward, session) {\n    return { ...policy, reward };\n  }\n\n  async selectCoordinatedAction(agentId, policy, session) {\n    return { agentId, action: 'cooperate', confidence: 0.8 };\n  }\n\n  async gatherAgentDecisions(session) {\n    const decisions = new Map();\n    for (const agentId of session.agentIds) {\n      decisions.set(agentId, { type: 'coordination', value: Math.random() });\n    }\n    return decisions;\n  }\n\n  async runByzantineConsensus(decisions, session) {\n    // Simplified Byzantine consensus\n    const values = Array.from(decisions.values()).map(d => d.value);\n    const median = values.sort()[Math.floor(values.length / 2)];\n    return { consensusValue: median, participants: decisions.size };\n  }\n\n  // Consensus protocol implementations (simplified)\n\n  async executeProofOfStakeConsensus(session, coordinationResult) {\n    return { protocol: 'proof_of_stake', result: 'consensus_reached' };\n  }\n\n  async executePBFTConsensus(session, coordinationResult) {\n    return { protocol: 'pbft', result: 'consensus_reached' };\n  }\n\n  async executeRaftConsensus(session, coordinationResult) {\n    return { protocol: 'raft', result: 'consensus_reached' };\n  }\n\n  async executeGossipConsensus(session, coordinationResult) {\n    return { protocol: 'gossip', result: 'consensus_reached' };\n  }\n}\n\nexport { NeuralCoordinationProtocol };"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}