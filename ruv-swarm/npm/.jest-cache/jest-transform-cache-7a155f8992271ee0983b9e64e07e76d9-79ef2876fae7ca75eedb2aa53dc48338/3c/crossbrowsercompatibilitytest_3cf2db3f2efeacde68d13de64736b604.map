{"version":3,"names":["describe","it","expect","beforeAll","afterAll","chromium","firefox","webkit","path","fileURLToPath","createServer","readFile","handler","__filename","import","meta","url","__dirname","dirname","server","serverUrl","browsers","_asyncToGenerator","request","response","public","join","headers","source","key","value","Promise","resolve","listen","port","address","console","log","browserTypes","name","launcher","browser","launch","headless","args","push","close","context","newContext","page","newPage","goto","wasmSupported","evaluate","WebAssembly","instantiate","toBe","moduleLoaded","fetch","buffer","arrayBuffer","module","compile","Module","error","simdInfo","RuvSwarm","swarm","initialize","debug","simdDetected","features","simd","simdInWasm","wasmLoader","detectSIMDSupport","sharedMemoryTest","SharedArrayBuffer","available","reason","view","Int32Array","Atomics","store","load","atomicsSupported","testValue","message","memoryTest","initialMemory","getMemorySize","allocations","i","data","Float32Array","allocateAndStore","afterAllocMemory","ptr","deallocate","initial","afterAlloc","grew","nnTest","enableNeuralNetworks","network","neuralManager","createNetwork","type","layers","units","activation","input","fill","startTime","performance","now","output","predict","inferenceTime","success","outputLength","length","outputSum","Array","from","reduce","a","b","toBeCloseTo","toFixed","swarmTest","ruvSwarm","createSwarm","topology","maxAgents","agents","agent","spawn","id","status","result","orchestrate","task","strategy","swarmCreated","agentCount","taskCompleted","completed","perfTest","useSIMD","benchmarks","vectorSize","vectorStart","vectorResult","vectorAdd","vectorOps","matrixSize","matA","matB","matrixStart","matrixResult","matrixMultiply","matrixOps","nnInput","iterations","nnStart","nnInference","toBeLessThan","errorTest","errors","then","s","test","caught","allocate","Number","MAX_SAFE_INTEGER","toHaveLength","forEach","toBeTruthy","workerTest","workerScript","blob","Blob","worker","Worker","URL","createObjectURL","onmessage","e","postMessage","terminate","toEqual","createTestHTML","_createTestHTML","apply","arguments","html","writeFile"],"sources":["cross-browser-compatibility.test.js"],"sourcesContent":["/**\n * Cross-Browser Compatibility Tests\n * Tests WASM functionality across different browser environments\n */\n\nimport { describe, it, expect, beforeAll, afterAll } from '@playwright/test';\nimport { chromium, firefox, webkit } from 'playwright';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport { createServer } from 'http';\nimport { readFile } from 'fs/promises';\nimport handler from 'serve-handler';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\ndescribe('Cross-Browser WASM Compatibility', () => {\n  let server;\n  let serverUrl;\n  const browsers = [];\n\n  beforeAll(async () => {\n    // Start local server to serve test files\n    server = createServer((request, response) => {\n      return handler(request, response, {\n        public: path.join(__dirname, '../../'),\n        headers: [\n          {\n            source: '**/*.wasm',\n            headers: [{\n              key: 'Content-Type',\n              value: 'application/wasm'\n            }]\n          },\n          {\n            source: '**/*',\n            headers: [{\n              key: 'Cross-Origin-Embedder-Policy',\n              value: 'require-corp'\n            }, {\n              key: 'Cross-Origin-Opener-Policy',\n              value: 'same-origin'\n            }]\n          }\n        ]\n      });\n    });\n\n    await new Promise((resolve) => {\n      server.listen(0, '127.0.0.1', () => {\n        const { port } = server.address();\n        serverUrl = `http://127.0.0.1:${port}`;\n        console.log(`Test server running at ${serverUrl}`);\n        resolve();\n      });\n    });\n\n    // Launch browsers\n    const browserTypes = [\n      { name: 'chromium', launcher: chromium },\n      { name: 'firefox', launcher: firefox },\n      { name: 'webkit', launcher: webkit }\n    ];\n\n    for (const { name, launcher } of browserTypes) {\n      const browser = await launcher.launch({\n        headless: true,\n        args: name === 'chromium' ? ['--enable-unsafe-webgpu'] : []\n      });\n      browsers.push({ name, browser });\n    }\n  });\n\n  afterAll(async () => {\n    // Close all browsers\n    for (const { browser } of browsers) {\n      await browser.close();\n    }\n\n    // Close server\n    await new Promise((resolve) => {\n      server.close(resolve);\n    });\n  });\n\n  describe('Basic WASM Support', () => {\n    for (const { name, browser } of browsers) {\n      it(`should detect WASM support in ${name}`, async () => {\n        const context = await browser.newContext();\n        const page = await context.newPage();\n\n        await page.goto(`${serverUrl}/test/browser/wasm-test.html`);\n\n        const wasmSupported = await page.evaluate(() => {\n          return typeof WebAssembly !== 'undefined' &&\n                 typeof WebAssembly.instantiate === 'function';\n        });\n\n        expect(wasmSupported).toBe(true);\n\n        await context.close();\n      });\n\n      it(`should load WASM module in ${name}`, async () => {\n        const context = await browser.newContext();\n        const page = await context.newPage();\n\n        await page.goto(`${serverUrl}/test/browser/wasm-test.html`);\n\n        const moduleLoaded = await page.evaluate(async () => {\n          try {\n            const response = await fetch('/wasm/ruv_swarm_wasm_bg.wasm');\n            const buffer = await response.arrayBuffer();\n            const module = await WebAssembly.compile(buffer);\n            return module instanceof WebAssembly.Module;\n          } catch (error) {\n            console.error('WASM load error:', error);\n            return false;\n          }\n        });\n\n        expect(moduleLoaded).toBe(true);\n\n        await context.close();\n      });\n    }\n  });\n\n  describe('SIMD Support', () => {\n    for (const { name, browser } of browsers) {\n      it(`should detect SIMD support in ${name}`, async () => {\n        const context = await browser.newContext();\n        const page = await context.newPage();\n\n        await page.goto(`${serverUrl}/test/browser/wasm-test.html`);\n\n        const simdInfo = await page.evaluate(async () => {\n          // Load RuvSwarm module\n          const { RuvSwarm } = await import('/src/index-enhanced.js');\n          const swarm = await RuvSwarm.initialize({ debug: true });\n          \n          return {\n            simdDetected: swarm.features.simd,\n            simdInWasm: await swarm.wasmLoader.detectSIMDSupport()\n          };\n        });\n\n        console.log(`${name} SIMD support:`, simdInfo);\n\n        // SIMD is optional, so we just log the result\n        if (simdInfo.simdDetected) {\n          expect(simdInfo.simdInWasm).toBe(true);\n        }\n\n        await context.close();\n      });\n    }\n  });\n\n  describe('Memory Management', () => {\n    for (const { name, browser } of browsers) {\n      it(`should handle SharedArrayBuffer in ${name}`, async () => {\n        const context = await browser.newContext();\n        const page = await context.newPage();\n\n        await page.goto(`${serverUrl}/test/browser/wasm-test.html`);\n\n        const sharedMemoryTest = await page.evaluate(() => {\n          try {\n            // Check if SharedArrayBuffer is available\n            if (typeof SharedArrayBuffer === 'undefined') {\n              return { available: false, reason: 'SharedArrayBuffer not defined' };\n            }\n\n            // Try to create one\n            const buffer = new SharedArrayBuffer(1024);\n            const view = new Int32Array(buffer);\n            view[0] = 42;\n\n            // Test Atomics if available\n            if (typeof Atomics !== 'undefined') {\n              Atomics.store(view, 0, 123);\n              const value = Atomics.load(view, 0);\n              return { \n                available: true, \n                atomicsSupported: true,\n                testValue: value \n              };\n            }\n\n            return { available: true, atomicsSupported: false };\n          } catch (error) {\n            return { \n              available: false, \n              reason: error.message \n            };\n          }\n        });\n\n        console.log(`${name} SharedArrayBuffer:`, sharedMemoryTest);\n\n        // SharedArrayBuffer requires specific headers, may not be available\n        if (sharedMemoryTest.available && sharedMemoryTest.atomicsSupported) {\n          expect(sharedMemoryTest.testValue).toBe(123);\n        }\n\n        await context.close();\n      });\n\n      it(`should handle memory growth in ${name}`, async () => {\n        const context = await browser.newContext();\n        const page = await context.newPage();\n\n        await page.goto(`${serverUrl}/test/browser/wasm-test.html`);\n\n        const memoryTest = await page.evaluate(async () => {\n          const { RuvSwarm } = await import('/src/index-enhanced.js');\n          const swarm = await RuvSwarm.initialize({ debug: false });\n\n          const initialMemory = swarm.wasmLoader.getMemorySize();\n          \n          // Allocate large amount of memory\n          const allocations = [];\n          for (let i = 0; i < 10; i++) {\n            const data = new Float32Array(100000); // ~400KB each\n            allocations.push(await swarm.wasmLoader.allocateAndStore(data));\n          }\n\n          const afterAllocMemory = swarm.wasmLoader.getMemorySize();\n\n          // Clean up\n          for (const ptr of allocations) {\n            await swarm.wasmLoader.deallocate(ptr);\n          }\n\n          return {\n            initial: initialMemory,\n            afterAlloc: afterAllocMemory,\n            grew: afterAllocMemory > initialMemory\n          };\n        });\n\n        expect(memoryTest.grew).toBe(true);\n        console.log(`${name} memory growth: ${memoryTest.initial} -> ${memoryTest.afterAlloc}`);\n\n        await context.close();\n      });\n    }\n  });\n\n  describe('Neural Network Operations', () => {\n    for (const { name, browser } of browsers) {\n      it(`should run neural network in ${name}`, async () => {\n        const context = await browser.newContext();\n        const page = await context.newPage();\n\n        await page.goto(`${serverUrl}/test/browser/wasm-test.html`);\n\n        const nnTest = await page.evaluate(async () => {\n          const { RuvSwarm } = await import('/src/index-enhanced.js');\n          const swarm = await RuvSwarm.initialize({ \n            enableNeuralNetworks: true,\n            debug: false \n          });\n\n          // Create simple neural network\n          const network = await swarm.neuralManager.createNetwork({\n            type: 'mlp',\n            layers: [\n              { units: 10, activation: 'relu' },\n              { units: 5, activation: 'softmax' }\n            ]\n          });\n\n          // Run inference\n          const input = new Float32Array(10).fill(0.5);\n          const startTime = performance.now();\n          const output = await network.predict(input);\n          const inferenceTime = performance.now() - startTime;\n\n          return {\n            success: true,\n            outputLength: output.length,\n            inferenceTime,\n            outputSum: Array.from(output).reduce((a, b) => a + b, 0)\n          };\n        });\n\n        expect(nnTest.success).toBe(true);\n        expect(nnTest.outputLength).toBe(5);\n        expect(nnTest.outputSum).toBeCloseTo(1.0, 1); // Softmax should sum to ~1\n        console.log(`${name} NN inference time: ${nnTest.inferenceTime.toFixed(2)}ms`);\n\n        await context.close();\n      });\n    }\n  });\n\n  describe('Swarm Operations', () => {\n    for (const { name, browser } of browsers) {\n      it(`should create and manage swarm in ${name}`, async () => {\n        const context = await browser.newContext();\n        const page = await context.newPage();\n\n        await page.goto(`${serverUrl}/test/browser/wasm-test.html`);\n\n        const swarmTest = await page.evaluate(async () => {\n          const { RuvSwarm } = await import('/src/index-enhanced.js');\n          const ruvSwarm = await RuvSwarm.initialize({ debug: false });\n\n          // Create swarm\n          const swarm = await ruvSwarm.createSwarm({\n            name: 'browser-test-swarm',\n            topology: 'mesh',\n            maxAgents: 5\n          });\n\n          // Spawn agents\n          const agents = [];\n          for (let i = 0; i < 3; i++) {\n            const agent = await swarm.spawn({\n              type: ['researcher', 'coder', 'analyst'][i]\n            });\n            agents.push({\n              id: agent.id,\n              type: agent.type,\n              status: agent.status\n            });\n          }\n\n          // Execute task\n          const result = await swarm.orchestrate({\n            task: 'test-task',\n            strategy: 'parallel'\n          });\n\n          return {\n            swarmCreated: true,\n            agentCount: agents.length,\n            agents,\n            taskCompleted: result.completed\n          };\n        });\n\n        expect(swarmTest.swarmCreated).toBe(true);\n        expect(swarmTest.agentCount).toBe(3);\n        expect(swarmTest.taskCompleted).toBe(true);\n\n        await context.close();\n      });\n    }\n  });\n\n  describe('Performance Characteristics', () => {\n    for (const { name, browser } of browsers) {\n      it(`should measure WASM performance in ${name}`, async () => {\n        const context = await browser.newContext();\n        const page = await context.newPage();\n\n        await page.goto(`${serverUrl}/test/browser/wasm-test.html`);\n\n        const perfTest = await page.evaluate(async () => {\n          const { RuvSwarm } = await import('/src/index-enhanced.js');\n          const swarm = await RuvSwarm.initialize({ \n            useSIMD: true,\n            debug: false \n          });\n\n          const benchmarks = {};\n\n          // Benchmark 1: Vector operations\n          const vectorSize = 100000;\n          const a = new Float32Array(vectorSize).fill(1.0);\n          const b = new Float32Array(vectorSize).fill(2.0);\n\n          const vectorStart = performance.now();\n          const vectorResult = await swarm.wasmLoader.vectorAdd(a, b);\n          benchmarks.vectorOps = performance.now() - vectorStart;\n\n          // Benchmark 2: Matrix multiplication\n          const matrixSize = 100;\n          const matA = new Float32Array(matrixSize * matrixSize).fill(1.0);\n          const matB = new Float32Array(matrixSize * matrixSize).fill(2.0);\n\n          const matrixStart = performance.now();\n          const matrixResult = await swarm.wasmLoader.matrixMultiply(\n            matA, matB, matrixSize, matrixSize, matrixSize\n          );\n          benchmarks.matrixOps = performance.now() - matrixStart;\n\n          // Benchmark 3: Neural network\n          const network = await swarm.neuralManager.createNetwork({\n            type: 'mlp',\n            layers: [\n              { units: 100, activation: 'relu' },\n              { units: 50, activation: 'relu' },\n              { units: 10, activation: 'softmax' }\n            ]\n          });\n\n          const nnInput = new Float32Array(100).fill(0.5);\n          const iterations = 100;\n\n          const nnStart = performance.now();\n          for (let i = 0; i < iterations; i++) {\n            await network.predict(nnInput);\n          }\n          benchmarks.nnInference = (performance.now() - nnStart) / iterations;\n\n          return benchmarks;\n        });\n\n        console.log(`${name} Performance Benchmarks:`);\n        console.log(`  Vector ops (100k elements): ${perfTest.vectorOps.toFixed(2)}ms`);\n        console.log(`  Matrix mult (100x100): ${perfTest.matrixOps.toFixed(2)}ms`);\n        console.log(`  NN inference (avg): ${perfTest.nnInference.toFixed(2)}ms`);\n\n        // Performance should be reasonable across browsers\n        expect(perfTest.vectorOps).toBeLessThan(50);\n        expect(perfTest.matrixOps).toBeLessThan(100);\n        expect(perfTest.nnInference).toBeLessThan(5);\n\n        await context.close();\n      });\n    }\n  });\n\n  describe('Error Handling', () => {\n    for (const { name, browser } of browsers) {\n      it(`should handle WASM errors gracefully in ${name}`, async () => {\n        const context = await browser.newContext();\n        const page = await context.newPage();\n\n        await page.goto(`${serverUrl}/test/browser/wasm-test.html`);\n\n        const errorTest = await page.evaluate(async () => {\n          const { RuvSwarm } = await import('/src/index-enhanced.js');\n          const swarm = await RuvSwarm.initialize({ debug: false });\n\n          const errors = [];\n\n          // Test 1: Invalid agent type\n          try {\n            await swarm.createSwarm({ name: 'test' })\n              .then(s => s.spawn({ type: 'invalid-type' }));\n          } catch (error) {\n            errors.push({\n              test: 'invalid-agent-type',\n              caught: true,\n              message: error.message\n            });\n          }\n\n          // Test 2: Memory allocation failure\n          try {\n            await swarm.wasmLoader.allocate(Number.MAX_SAFE_INTEGER);\n          } catch (error) {\n            errors.push({\n              test: 'memory-allocation',\n              caught: true,\n              message: error.message\n            });\n          }\n\n          // Test 3: Invalid neural network config\n          try {\n            await swarm.neuralManager.createNetwork({\n              type: 'invalid',\n              layers: []\n            });\n          } catch (error) {\n            errors.push({\n              test: 'invalid-network',\n              caught: true,\n              message: error.message\n            });\n          }\n\n          return errors;\n        });\n\n        expect(errorTest).toHaveLength(3);\n        errorTest.forEach(error => {\n          expect(error.caught).toBe(true);\n          expect(error.message).toBeTruthy();\n        });\n\n        await context.close();\n      });\n    }\n  });\n\n  describe('WebWorker Integration', () => {\n    for (const { name, browser } of browsers) {\n      it(`should run WASM in WebWorker in ${name}`, async () => {\n        const context = await browser.newContext();\n        const page = await context.newPage();\n\n        await page.goto(`${serverUrl}/test/browser/wasm-test.html`);\n\n        const workerTest = await page.evaluate(async () => {\n          // Create worker script\n          const workerScript = `\n            importScripts('/src/index.js');\n            \n            self.onmessage = async (e) => {\n              const { RuvSwarm } = self;\n              const swarm = await RuvSwarm.initialize({ debug: false });\n              \n              const result = await swarm.wasmLoader.vectorAdd(\n                e.data.a,\n                e.data.b\n              );\n              \n              self.postMessage({ result: Array.from(result) });\n            };\n          `;\n\n          const blob = new Blob([workerScript], { type: 'application/javascript' });\n          const worker = new Worker(URL.createObjectURL(blob));\n\n          const result = await new Promise((resolve) => {\n            worker.onmessage = (e) => resolve(e.data);\n            worker.postMessage({\n              a: new Float32Array([1, 2, 3, 4]),\n              b: new Float32Array([5, 6, 7, 8])\n            });\n          });\n\n          worker.terminate();\n\n          return result;\n        });\n\n        expect(workerTest.result).toEqual([6, 8, 10, 12]);\n\n        await context.close();\n      });\n    }\n  });\n});\n\n// Create test HTML file\nexport async function createTestHTML() {\n  const html = `<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>WASM Browser Test</title>\n    <meta http-equiv=\"Cross-Origin-Embedder-Policy\" content=\"require-corp\">\n    <meta http-equiv=\"Cross-Origin-Opener-Policy\" content=\"same-origin\">\n</head>\n<body>\n    <h1>RuvSwarm WASM Browser Test</h1>\n    <div id=\"status\">Loading...</div>\n    <div id=\"results\"></div>\n    \n    <script type=\"module\">\n        import { RuvSwarm } from '/src/index-enhanced.js';\n        \n        window.RuvSwarm = RuvSwarm;\n        \n        async function runTests() {\n            const status = document.getElementById('status');\n            const results = document.getElementById('results');\n            \n            try {\n                status.textContent = 'Initializing RuvSwarm...';\n                const swarm = await RuvSwarm.initialize({\n                    debug: true,\n                    enableNeuralNetworks: true,\n                    useSIMD: true\n                });\n                \n                status.textContent = 'RuvSwarm initialized successfully!';\n                \n                // Display features\n                results.innerHTML = \\`\n                    <h2>Detected Features:</h2>\n                    <ul>\n                        <li>WASM Support: ✓</li>\n                        <li>SIMD Support: \\${swarm.features.simd ? '✓' : '✗'}</li>\n                        <li>SharedArrayBuffer: \\${typeof SharedArrayBuffer !== 'undefined' ? '✓' : '✗'}</li>\n                        <li>Atomics: \\${typeof Atomics !== 'undefined' ? '✓' : '✗'}</li>\n                        <li>WebWorkers: \\${typeof Worker !== 'undefined' ? '✓' : '✗'}</li>\n                    </ul>\n                \\`;\n                \n                window.swarm = swarm;\n            } catch (error) {\n                status.textContent = 'Error: ' + error.message;\n                console.error(error);\n            }\n        }\n        \n        runTests();\n    </script>\n</body>\n</html>`;\n\n  await writeFile(\n    path.join(__dirname, 'wasm-test.html'),\n    html\n  );\n}"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,EAAEC,EAAE,EAAEC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,kBAAkB;AAC5E,SAASC,QAAQ,EAAEC,OAAO,EAAEC,MAAM,QAAQ,YAAY;AACtD,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,aAAa,QAAQ,KAAK;AACnC,SAASC,YAAY,QAAQ,MAAM;AACnC,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAOC,OAAO,MAAM,eAAe;AAEnC,MAAMC,UAAU,GAAGJ,aAAa,CAACK,MAAM,CAACC,IAAI,CAACC,GAAG,CAAC;AACjD,MAAMC,SAAS,GAAGT,IAAI,CAACU,OAAO,CAACL,UAAU,CAAC;AAE1Cb,QAAQ,CAAC,kCAAkC,EAAE,MAAM;EACjD,IAAImB,MAAM;EACV,IAAIC,SAAS;EACb,MAAMC,QAAQ,GAAG,EAAE;EAEnBlB,SAAS,cAAAmB,iBAAA,CAAC,aAAY;IACpB;IACAH,MAAM,GAAGT,YAAY,CAAC,CAACa,OAAO,EAAEC,QAAQ,KAAK;MAC3C,OAAOZ,OAAO,CAACW,OAAO,EAAEC,QAAQ,EAAE;QAChCC,MAAM,EAAEjB,IAAI,CAACkB,IAAI,CAACT,SAAS,EAAE,QAAQ,CAAC;QACtCU,OAAO,EAAE,CACP;UACEC,MAAM,EAAE,WAAW;UACnBD,OAAO,EAAE,CAAC;YACRE,GAAG,EAAE,cAAc;YACnBC,KAAK,EAAE;UACT,CAAC;QACH,CAAC,EACD;UACEF,MAAM,EAAE,MAAM;UACdD,OAAO,EAAE,CAAC;YACRE,GAAG,EAAE,8BAA8B;YACnCC,KAAK,EAAE;UACT,CAAC,EAAE;YACDD,GAAG,EAAE,4BAA4B;YACjCC,KAAK,EAAE;UACT,CAAC;QACH,CAAC;MAEL,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAK;MAC7Bb,MAAM,CAACc,MAAM,CAAC,CAAC,EAAE,WAAW,EAAE,MAAM;QAClC,MAAM;UAAEC;QAAK,CAAC,GAAGf,MAAM,CAACgB,OAAO,CAAC,CAAC;QACjCf,SAAS,GAAG,oBAAoBc,IAAI,EAAE;QACtCE,OAAO,CAACC,GAAG,CAAC,0BAA0BjB,SAAS,EAAE,CAAC;QAClDY,OAAO,CAAC,CAAC;MACX,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACA,MAAMM,YAAY,GAAG,CACnB;MAAEC,IAAI,EAAE,UAAU;MAAEC,QAAQ,EAAEnC;IAAS,CAAC,EACxC;MAAEkC,IAAI,EAAE,SAAS;MAAEC,QAAQ,EAAElC;IAAQ,CAAC,EACtC;MAAEiC,IAAI,EAAE,QAAQ;MAAEC,QAAQ,EAAEjC;IAAO,CAAC,CACrC;IAED,KAAK,MAAM;MAAEgC,IAAI;MAAEC;IAAS,CAAC,IAAIF,YAAY,EAAE;MAC7C,MAAMG,OAAO,SAASD,QAAQ,CAACE,MAAM,CAAC;QACpCC,QAAQ,EAAE,IAAI;QACdC,IAAI,EAAEL,IAAI,KAAK,UAAU,GAAG,CAAC,wBAAwB,CAAC,GAAG;MAC3D,CAAC,CAAC;MACFlB,QAAQ,CAACwB,IAAI,CAAC;QAAEN,IAAI;QAAEE;MAAQ,CAAC,CAAC;IAClC;EACF,CAAC,EAAC;EAEFrC,QAAQ,cAAAkB,iBAAA,CAAC,aAAY;IACnB;IACA,KAAK,MAAM;MAAEmB;IAAQ,CAAC,IAAIpB,QAAQ,EAAE;MAClC,MAAMoB,OAAO,CAACK,KAAK,CAAC,CAAC;IACvB;;IAEA;IACA,MAAM,IAAIf,OAAO,CAAEC,OAAO,IAAK;MAC7Bb,MAAM,CAAC2B,KAAK,CAACd,OAAO,CAAC;IACvB,CAAC,CAAC;EACJ,CAAC,EAAC;EAEFhC,QAAQ,CAAC,oBAAoB,EAAE,MAAM;IACnC,KAAK,MAAM;MAAEuC,IAAI;MAAEE;IAAQ,CAAC,IAAIpB,QAAQ,EAAE;MACxCpB,EAAE,CAAC,iCAAiCsC,IAAI,EAAE,eAAAjB,iBAAA,CAAE,aAAY;QACtD,MAAMyB,OAAO,SAASN,OAAO,CAACO,UAAU,CAAC,CAAC;QAC1C,MAAMC,IAAI,SAASF,OAAO,CAACG,OAAO,CAAC,CAAC;QAEpC,MAAMD,IAAI,CAACE,IAAI,CAAC,GAAG/B,SAAS,8BAA8B,CAAC;QAE3D,MAAMgC,aAAa,SAASH,IAAI,CAACI,QAAQ,CAAC,MAAM;UAC9C,OAAO,OAAOC,WAAW,KAAK,WAAW,IAClC,OAAOA,WAAW,CAACC,WAAW,KAAK,UAAU;QACtD,CAAC,CAAC;QAEFrD,MAAM,CAACkD,aAAa,CAAC,CAACI,IAAI,CAAC,IAAI,CAAC;QAEhC,MAAMT,OAAO,CAACD,KAAK,CAAC,CAAC;MACvB,CAAC,EAAC;MAEF7C,EAAE,CAAC,8BAA8BsC,IAAI,EAAE,eAAAjB,iBAAA,CAAE,aAAY;QACnD,MAAMyB,OAAO,SAASN,OAAO,CAACO,UAAU,CAAC,CAAC;QAC1C,MAAMC,IAAI,SAASF,OAAO,CAACG,OAAO,CAAC,CAAC;QAEpC,MAAMD,IAAI,CAACE,IAAI,CAAC,GAAG/B,SAAS,8BAA8B,CAAC;QAE3D,MAAMqC,YAAY,SAASR,IAAI,CAACI,QAAQ,cAAA/B,iBAAA,CAAC,aAAY;UACnD,IAAI;YACF,MAAME,QAAQ,SAASkC,KAAK,CAAC,8BAA8B,CAAC;YAC5D,MAAMC,MAAM,SAASnC,QAAQ,CAACoC,WAAW,CAAC,CAAC;YAC3C,MAAMC,MAAM,SAASP,WAAW,CAACQ,OAAO,CAACH,MAAM,CAAC;YAChD,OAAOE,MAAM,YAAYP,WAAW,CAACS,MAAM;UAC7C,CAAC,CAAC,OAAOC,KAAK,EAAE;YACd5B,OAAO,CAAC4B,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;YACxC,OAAO,KAAK;UACd;QACF,CAAC,EAAC;QAEF9D,MAAM,CAACuD,YAAY,CAAC,CAACD,IAAI,CAAC,IAAI,CAAC;QAE/B,MAAMT,OAAO,CAACD,KAAK,CAAC,CAAC;MACvB,CAAC,EAAC;IACJ;EACF,CAAC,CAAC;EAEF9C,QAAQ,CAAC,cAAc,EAAE,MAAM;IAC7B,KAAK,MAAM;MAAEuC,IAAI;MAAEE;IAAQ,CAAC,IAAIpB,QAAQ,EAAE;MACxCpB,EAAE,CAAC,iCAAiCsC,IAAI,EAAE,eAAAjB,iBAAA,CAAE,aAAY;QACtD,MAAMyB,OAAO,SAASN,OAAO,CAACO,UAAU,CAAC,CAAC;QAC1C,MAAMC,IAAI,SAASF,OAAO,CAACG,OAAO,CAAC,CAAC;QAEpC,MAAMD,IAAI,CAACE,IAAI,CAAC,GAAG/B,SAAS,8BAA8B,CAAC;QAE3D,MAAM6C,QAAQ,SAAShB,IAAI,CAACI,QAAQ,cAAA/B,iBAAA,CAAC,aAAY;UAC/C;UACA,MAAM;YAAE4C;UAAS,CAAC,SAAS,MAAM,CAAC,wBAAwB,CAAC;UAC3D,MAAMC,KAAK,SAASD,QAAQ,CAACE,UAAU,CAAC;YAAEC,KAAK,EAAE;UAAK,CAAC,CAAC;UAExD,OAAO;YACLC,YAAY,EAAEH,KAAK,CAACI,QAAQ,CAACC,IAAI;YACjCC,UAAU,QAAQN,KAAK,CAACO,UAAU,CAACC,iBAAiB,CAAC;UACvD,CAAC;QACH,CAAC,EAAC;QAEFvC,OAAO,CAACC,GAAG,CAAC,GAAGE,IAAI,gBAAgB,EAAE0B,QAAQ,CAAC;;QAE9C;QACA,IAAIA,QAAQ,CAACK,YAAY,EAAE;UACzBpE,MAAM,CAAC+D,QAAQ,CAACQ,UAAU,CAAC,CAACjB,IAAI,CAAC,IAAI,CAAC;QACxC;QAEA,MAAMT,OAAO,CAACD,KAAK,CAAC,CAAC;MACvB,CAAC,EAAC;IACJ;EACF,CAAC,CAAC;EAEF9C,QAAQ,CAAC,mBAAmB,EAAE,MAAM;IAClC,KAAK,MAAM;MAAEuC,IAAI;MAAEE;IAAQ,CAAC,IAAIpB,QAAQ,EAAE;MACxCpB,EAAE,CAAC,sCAAsCsC,IAAI,EAAE,eAAAjB,iBAAA,CAAE,aAAY;QAC3D,MAAMyB,OAAO,SAASN,OAAO,CAACO,UAAU,CAAC,CAAC;QAC1C,MAAMC,IAAI,SAASF,OAAO,CAACG,OAAO,CAAC,CAAC;QAEpC,MAAMD,IAAI,CAACE,IAAI,CAAC,GAAG/B,SAAS,8BAA8B,CAAC;QAE3D,MAAMwD,gBAAgB,SAAS3B,IAAI,CAACI,QAAQ,CAAC,MAAM;UACjD,IAAI;YACF;YACA,IAAI,OAAOwB,iBAAiB,KAAK,WAAW,EAAE;cAC5C,OAAO;gBAAEC,SAAS,EAAE,KAAK;gBAAEC,MAAM,EAAE;cAAgC,CAAC;YACtE;;YAEA;YACA,MAAMpB,MAAM,GAAG,IAAIkB,iBAAiB,CAAC,IAAI,CAAC;YAC1C,MAAMG,IAAI,GAAG,IAAIC,UAAU,CAACtB,MAAM,CAAC;YACnCqB,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE;;YAEZ;YACA,IAAI,OAAOE,OAAO,KAAK,WAAW,EAAE;cAClCA,OAAO,CAACC,KAAK,CAACH,IAAI,EAAE,CAAC,EAAE,GAAG,CAAC;cAC3B,MAAMlD,KAAK,GAAGoD,OAAO,CAACE,IAAI,CAACJ,IAAI,EAAE,CAAC,CAAC;cACnC,OAAO;gBACLF,SAAS,EAAE,IAAI;gBACfO,gBAAgB,EAAE,IAAI;gBACtBC,SAAS,EAAExD;cACb,CAAC;YACH;YAEA,OAAO;cAAEgD,SAAS,EAAE,IAAI;cAAEO,gBAAgB,EAAE;YAAM,CAAC;UACrD,CAAC,CAAC,OAAOrB,KAAK,EAAE;YACd,OAAO;cACLc,SAAS,EAAE,KAAK;cAChBC,MAAM,EAAEf,KAAK,CAACuB;YAChB,CAAC;UACH;QACF,CAAC,CAAC;QAEFnD,OAAO,CAACC,GAAG,CAAC,GAAGE,IAAI,qBAAqB,EAAEqC,gBAAgB,CAAC;;QAE3D;QACA,IAAIA,gBAAgB,CAACE,SAAS,IAAIF,gBAAgB,CAACS,gBAAgB,EAAE;UACnEnF,MAAM,CAAC0E,gBAAgB,CAACU,SAAS,CAAC,CAAC9B,IAAI,CAAC,GAAG,CAAC;QAC9C;QAEA,MAAMT,OAAO,CAACD,KAAK,CAAC,CAAC;MACvB,CAAC,EAAC;MAEF7C,EAAE,CAAC,kCAAkCsC,IAAI,EAAE,eAAAjB,iBAAA,CAAE,aAAY;QACvD,MAAMyB,OAAO,SAASN,OAAO,CAACO,UAAU,CAAC,CAAC;QAC1C,MAAMC,IAAI,SAASF,OAAO,CAACG,OAAO,CAAC,CAAC;QAEpC,MAAMD,IAAI,CAACE,IAAI,CAAC,GAAG/B,SAAS,8BAA8B,CAAC;QAE3D,MAAMoE,UAAU,SAASvC,IAAI,CAACI,QAAQ,cAAA/B,iBAAA,CAAC,aAAY;UACjD,MAAM;YAAE4C;UAAS,CAAC,SAAS,MAAM,CAAC,wBAAwB,CAAC;UAC3D,MAAMC,KAAK,SAASD,QAAQ,CAACE,UAAU,CAAC;YAAEC,KAAK,EAAE;UAAM,CAAC,CAAC;UAEzD,MAAMoB,aAAa,GAAGtB,KAAK,CAACO,UAAU,CAACgB,aAAa,CAAC,CAAC;;UAEtD;UACA,MAAMC,WAAW,GAAG,EAAE;UACtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;YAC3B,MAAMC,IAAI,GAAG,IAAIC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YACvCH,WAAW,CAAC9C,IAAI,OAAOsB,KAAK,CAACO,UAAU,CAACqB,gBAAgB,CAACF,IAAI,CAAC,CAAC;UACjE;UAEA,MAAMG,gBAAgB,GAAG7B,KAAK,CAACO,UAAU,CAACgB,aAAa,CAAC,CAAC;;UAEzD;UACA,KAAK,MAAMO,GAAG,IAAIN,WAAW,EAAE;YAC7B,MAAMxB,KAAK,CAACO,UAAU,CAACwB,UAAU,CAACD,GAAG,CAAC;UACxC;UAEA,OAAO;YACLE,OAAO,EAAEV,aAAa;YACtBW,UAAU,EAAEJ,gBAAgB;YAC5BK,IAAI,EAAEL,gBAAgB,GAAGP;UAC3B,CAAC;QACH,CAAC,EAAC;QAEFvF,MAAM,CAACsF,UAAU,CAACa,IAAI,CAAC,CAAC7C,IAAI,CAAC,IAAI,CAAC;QAClCpB,OAAO,CAACC,GAAG,CAAC,GAAGE,IAAI,mBAAmBiD,UAAU,CAACW,OAAO,OAAOX,UAAU,CAACY,UAAU,EAAE,CAAC;QAEvF,MAAMrD,OAAO,CAACD,KAAK,CAAC,CAAC;MACvB,CAAC,EAAC;IACJ;EACF,CAAC,CAAC;EAEF9C,QAAQ,CAAC,2BAA2B,EAAE,MAAM;IAC1C,KAAK,MAAM;MAAEuC,IAAI;MAAEE;IAAQ,CAAC,IAAIpB,QAAQ,EAAE;MACxCpB,EAAE,CAAC,gCAAgCsC,IAAI,EAAE,eAAAjB,iBAAA,CAAE,aAAY;QACrD,MAAMyB,OAAO,SAASN,OAAO,CAACO,UAAU,CAAC,CAAC;QAC1C,MAAMC,IAAI,SAASF,OAAO,CAACG,OAAO,CAAC,CAAC;QAEpC,MAAMD,IAAI,CAACE,IAAI,CAAC,GAAG/B,SAAS,8BAA8B,CAAC;QAE3D,MAAMkF,MAAM,SAASrD,IAAI,CAACI,QAAQ,cAAA/B,iBAAA,CAAC,aAAY;UAC7C,MAAM;YAAE4C;UAAS,CAAC,SAAS,MAAM,CAAC,wBAAwB,CAAC;UAC3D,MAAMC,KAAK,SAASD,QAAQ,CAACE,UAAU,CAAC;YACtCmC,oBAAoB,EAAE,IAAI;YAC1BlC,KAAK,EAAE;UACT,CAAC,CAAC;;UAEF;UACA,MAAMmC,OAAO,SAASrC,KAAK,CAACsC,aAAa,CAACC,aAAa,CAAC;YACtDC,IAAI,EAAE,KAAK;YACXC,MAAM,EAAE,CACN;cAAEC,KAAK,EAAE,EAAE;cAAEC,UAAU,EAAE;YAAO,CAAC,EACjC;cAAED,KAAK,EAAE,CAAC;cAAEC,UAAU,EAAE;YAAU,CAAC;UAEvC,CAAC,CAAC;;UAEF;UACA,MAAMC,KAAK,GAAG,IAAIjB,YAAY,CAAC,EAAE,CAAC,CAACkB,IAAI,CAAC,GAAG,CAAC;UAC5C,MAAMC,SAAS,GAAGC,WAAW,CAACC,GAAG,CAAC,CAAC;UACnC,MAAMC,MAAM,SAASZ,OAAO,CAACa,OAAO,CAACN,KAAK,CAAC;UAC3C,MAAMO,aAAa,GAAGJ,WAAW,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS;UAEnD,OAAO;YACLM,OAAO,EAAE,IAAI;YACbC,YAAY,EAAEJ,MAAM,CAACK,MAAM;YAC3BH,aAAa;YACbI,SAAS,EAAEC,KAAK,CAACC,IAAI,CAACR,MAAM,CAAC,CAACS,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC;UACzD,CAAC;QACH,CAAC,EAAC;QAEF7H,MAAM,CAACoG,MAAM,CAACiB,OAAO,CAAC,CAAC/D,IAAI,CAAC,IAAI,CAAC;QACjCtD,MAAM,CAACoG,MAAM,CAACkB,YAAY,CAAC,CAAChE,IAAI,CAAC,CAAC,CAAC;QACnCtD,MAAM,CAACoG,MAAM,CAACoB,SAAS,CAAC,CAACM,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;QAC9C5F,OAAO,CAACC,GAAG,CAAC,GAAGE,IAAI,uBAAuB+D,MAAM,CAACgB,aAAa,CAACW,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;QAE9E,MAAMlF,OAAO,CAACD,KAAK,CAAC,CAAC;MACvB,CAAC,EAAC;IACJ;EACF,CAAC,CAAC;EAEF9C,QAAQ,CAAC,kBAAkB,EAAE,MAAM;IACjC,KAAK,MAAM;MAAEuC,IAAI;MAAEE;IAAQ,CAAC,IAAIpB,QAAQ,EAAE;MACxCpB,EAAE,CAAC,qCAAqCsC,IAAI,EAAE,eAAAjB,iBAAA,CAAE,aAAY;QAC1D,MAAMyB,OAAO,SAASN,OAAO,CAACO,UAAU,CAAC,CAAC;QAC1C,MAAMC,IAAI,SAASF,OAAO,CAACG,OAAO,CAAC,CAAC;QAEpC,MAAMD,IAAI,CAACE,IAAI,CAAC,GAAG/B,SAAS,8BAA8B,CAAC;QAE3D,MAAM8G,SAAS,SAASjF,IAAI,CAACI,QAAQ,cAAA/B,iBAAA,CAAC,aAAY;UAChD,MAAM;YAAE4C;UAAS,CAAC,SAAS,MAAM,CAAC,wBAAwB,CAAC;UAC3D,MAAMiE,QAAQ,SAASjE,QAAQ,CAACE,UAAU,CAAC;YAAEC,KAAK,EAAE;UAAM,CAAC,CAAC;;UAE5D;UACA,MAAMF,KAAK,SAASgE,QAAQ,CAACC,WAAW,CAAC;YACvC7F,IAAI,EAAE,oBAAoB;YAC1B8F,QAAQ,EAAE,MAAM;YAChBC,SAAS,EAAE;UACb,CAAC,CAAC;;UAEF;UACA,MAAMC,MAAM,GAAG,EAAE;UACjB,KAAK,IAAI3C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;YAC1B,MAAM4C,KAAK,SAASrE,KAAK,CAACsE,KAAK,CAAC;cAC9B9B,IAAI,EAAE,CAAC,YAAY,EAAE,OAAO,EAAE,SAAS,CAAC,CAACf,CAAC;YAC5C,CAAC,CAAC;YACF2C,MAAM,CAAC1F,IAAI,CAAC;cACV6F,EAAE,EAAEF,KAAK,CAACE,EAAE;cACZ/B,IAAI,EAAE6B,KAAK,CAAC7B,IAAI;cAChBgC,MAAM,EAAEH,KAAK,CAACG;YAChB,CAAC,CAAC;UACJ;;UAEA;UACA,MAAMC,MAAM,SAASzE,KAAK,CAAC0E,WAAW,CAAC;YACrCC,IAAI,EAAE,WAAW;YACjBC,QAAQ,EAAE;UACZ,CAAC,CAAC;UAEF,OAAO;YACLC,YAAY,EAAE,IAAI;YAClBC,UAAU,EAAEV,MAAM,CAACd,MAAM;YACzBc,MAAM;YACNW,aAAa,EAAEN,MAAM,CAACO;UACxB,CAAC;QACH,CAAC,EAAC;QAEFjJ,MAAM,CAACgI,SAAS,CAACc,YAAY,CAAC,CAACxF,IAAI,CAAC,IAAI,CAAC;QACzCtD,MAAM,CAACgI,SAAS,CAACe,UAAU,CAAC,CAACzF,IAAI,CAAC,CAAC,CAAC;QACpCtD,MAAM,CAACgI,SAAS,CAACgB,aAAa,CAAC,CAAC1F,IAAI,CAAC,IAAI,CAAC;QAE1C,MAAMT,OAAO,CAACD,KAAK,CAAC,CAAC;MACvB,CAAC,EAAC;IACJ;EACF,CAAC,CAAC;EAEF9C,QAAQ,CAAC,6BAA6B,EAAE,MAAM;IAC5C,KAAK,MAAM;MAAEuC,IAAI;MAAEE;IAAQ,CAAC,IAAIpB,QAAQ,EAAE;MACxCpB,EAAE,CAAC,sCAAsCsC,IAAI,EAAE,eAAAjB,iBAAA,CAAE,aAAY;QAC3D,MAAMyB,OAAO,SAASN,OAAO,CAACO,UAAU,CAAC,CAAC;QAC1C,MAAMC,IAAI,SAASF,OAAO,CAACG,OAAO,CAAC,CAAC;QAEpC,MAAMD,IAAI,CAACE,IAAI,CAAC,GAAG/B,SAAS,8BAA8B,CAAC;QAE3D,MAAMgI,QAAQ,SAASnG,IAAI,CAACI,QAAQ,cAAA/B,iBAAA,CAAC,aAAY;UAC/C,MAAM;YAAE4C;UAAS,CAAC,SAAS,MAAM,CAAC,wBAAwB,CAAC;UAC3D,MAAMC,KAAK,SAASD,QAAQ,CAACE,UAAU,CAAC;YACtCiF,OAAO,EAAE,IAAI;YACbhF,KAAK,EAAE;UACT,CAAC,CAAC;UAEF,MAAMiF,UAAU,GAAG,CAAC,CAAC;;UAErB;UACA,MAAMC,UAAU,GAAG,MAAM;UACzB,MAAMzB,CAAC,GAAG,IAAIhC,YAAY,CAACyD,UAAU,CAAC,CAACvC,IAAI,CAAC,GAAG,CAAC;UAChD,MAAMe,CAAC,GAAG,IAAIjC,YAAY,CAACyD,UAAU,CAAC,CAACvC,IAAI,CAAC,GAAG,CAAC;UAEhD,MAAMwC,WAAW,GAAGtC,WAAW,CAACC,GAAG,CAAC,CAAC;UACrC,MAAMsC,YAAY,SAAStF,KAAK,CAACO,UAAU,CAACgF,SAAS,CAAC5B,CAAC,EAAEC,CAAC,CAAC;UAC3DuB,UAAU,CAACK,SAAS,GAAGzC,WAAW,CAACC,GAAG,CAAC,CAAC,GAAGqC,WAAW;;UAEtD;UACA,MAAMI,UAAU,GAAG,GAAG;UACtB,MAAMC,IAAI,GAAG,IAAI/D,YAAY,CAAC8D,UAAU,GAAGA,UAAU,CAAC,CAAC5C,IAAI,CAAC,GAAG,CAAC;UAChE,MAAM8C,IAAI,GAAG,IAAIhE,YAAY,CAAC8D,UAAU,GAAGA,UAAU,CAAC,CAAC5C,IAAI,CAAC,GAAG,CAAC;UAEhE,MAAM+C,WAAW,GAAG7C,WAAW,CAACC,GAAG,CAAC,CAAC;UACrC,MAAM6C,YAAY,SAAS7F,KAAK,CAACO,UAAU,CAACuF,cAAc,CACxDJ,IAAI,EAAEC,IAAI,EAAEF,UAAU,EAAEA,UAAU,EAAEA,UACtC,CAAC;UACDN,UAAU,CAACY,SAAS,GAAGhD,WAAW,CAACC,GAAG,CAAC,CAAC,GAAG4C,WAAW;;UAEtD;UACA,MAAMvD,OAAO,SAASrC,KAAK,CAACsC,aAAa,CAACC,aAAa,CAAC;YACtDC,IAAI,EAAE,KAAK;YACXC,MAAM,EAAE,CACN;cAAEC,KAAK,EAAE,GAAG;cAAEC,UAAU,EAAE;YAAO,CAAC,EAClC;cAAED,KAAK,EAAE,EAAE;cAAEC,UAAU,EAAE;YAAO,CAAC,EACjC;cAAED,KAAK,EAAE,EAAE;cAAEC,UAAU,EAAE;YAAU,CAAC;UAExC,CAAC,CAAC;UAEF,MAAMqD,OAAO,GAAG,IAAIrE,YAAY,CAAC,GAAG,CAAC,CAACkB,IAAI,CAAC,GAAG,CAAC;UAC/C,MAAMoD,UAAU,GAAG,GAAG;UAEtB,MAAMC,OAAO,GAAGnD,WAAW,CAACC,GAAG,CAAC,CAAC;UACjC,KAAK,IAAIvB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwE,UAAU,EAAExE,CAAC,EAAE,EAAE;YACnC,MAAMY,OAAO,CAACa,OAAO,CAAC8C,OAAO,CAAC;UAChC;UACAb,UAAU,CAACgB,WAAW,GAAG,CAACpD,WAAW,CAACC,GAAG,CAAC,CAAC,GAAGkD,OAAO,IAAID,UAAU;UAEnE,OAAOd,UAAU;QACnB,CAAC,EAAC;QAEFlH,OAAO,CAACC,GAAG,CAAC,GAAGE,IAAI,0BAA0B,CAAC;QAC9CH,OAAO,CAACC,GAAG,CAAC,iCAAiC+G,QAAQ,CAACO,SAAS,CAAC1B,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;QAC/E7F,OAAO,CAACC,GAAG,CAAC,4BAA4B+G,QAAQ,CAACc,SAAS,CAACjC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;QAC1E7F,OAAO,CAACC,GAAG,CAAC,yBAAyB+G,QAAQ,CAACkB,WAAW,CAACrC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;;QAEzE;QACA/H,MAAM,CAACkJ,QAAQ,CAACO,SAAS,CAAC,CAACY,YAAY,CAAC,EAAE,CAAC;QAC3CrK,MAAM,CAACkJ,QAAQ,CAACc,SAAS,CAAC,CAACK,YAAY,CAAC,GAAG,CAAC;QAC5CrK,MAAM,CAACkJ,QAAQ,CAACkB,WAAW,CAAC,CAACC,YAAY,CAAC,CAAC,CAAC;QAE5C,MAAMxH,OAAO,CAACD,KAAK,CAAC,CAAC;MACvB,CAAC,EAAC;IACJ;EACF,CAAC,CAAC;EAEF9C,QAAQ,CAAC,gBAAgB,EAAE,MAAM;IAC/B,KAAK,MAAM;MAAEuC,IAAI;MAAEE;IAAQ,CAAC,IAAIpB,QAAQ,EAAE;MACxCpB,EAAE,CAAC,2CAA2CsC,IAAI,EAAE,eAAAjB,iBAAA,CAAE,aAAY;QAChE,MAAMyB,OAAO,SAASN,OAAO,CAACO,UAAU,CAAC,CAAC;QAC1C,MAAMC,IAAI,SAASF,OAAO,CAACG,OAAO,CAAC,CAAC;QAEpC,MAAMD,IAAI,CAACE,IAAI,CAAC,GAAG/B,SAAS,8BAA8B,CAAC;QAE3D,MAAMoJ,SAAS,SAASvH,IAAI,CAACI,QAAQ,cAAA/B,iBAAA,CAAC,aAAY;UAChD,MAAM;YAAE4C;UAAS,CAAC,SAAS,MAAM,CAAC,wBAAwB,CAAC;UAC3D,MAAMC,KAAK,SAASD,QAAQ,CAACE,UAAU,CAAC;YAAEC,KAAK,EAAE;UAAM,CAAC,CAAC;UAEzD,MAAMoG,MAAM,GAAG,EAAE;;UAEjB;UACA,IAAI;YACF,MAAMtG,KAAK,CAACiE,WAAW,CAAC;cAAE7F,IAAI,EAAE;YAAO,CAAC,CAAC,CACtCmI,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAClC,KAAK,CAAC;cAAE9B,IAAI,EAAE;YAAe,CAAC,CAAC,CAAC;UACjD,CAAC,CAAC,OAAO3C,KAAK,EAAE;YACdyG,MAAM,CAAC5H,IAAI,CAAC;cACV+H,IAAI,EAAE,oBAAoB;cAC1BC,MAAM,EAAE,IAAI;cACZtF,OAAO,EAAEvB,KAAK,CAACuB;YACjB,CAAC,CAAC;UACJ;;UAEA;UACA,IAAI;YACF,MAAMpB,KAAK,CAACO,UAAU,CAACoG,QAAQ,CAACC,MAAM,CAACC,gBAAgB,CAAC;UAC1D,CAAC,CAAC,OAAOhH,KAAK,EAAE;YACdyG,MAAM,CAAC5H,IAAI,CAAC;cACV+H,IAAI,EAAE,mBAAmB;cACzBC,MAAM,EAAE,IAAI;cACZtF,OAAO,EAAEvB,KAAK,CAACuB;YACjB,CAAC,CAAC;UACJ;;UAEA;UACA,IAAI;YACF,MAAMpB,KAAK,CAACsC,aAAa,CAACC,aAAa,CAAC;cACtCC,IAAI,EAAE,SAAS;cACfC,MAAM,EAAE;YACV,CAAC,CAAC;UACJ,CAAC,CAAC,OAAO5C,KAAK,EAAE;YACdyG,MAAM,CAAC5H,IAAI,CAAC;cACV+H,IAAI,EAAE,iBAAiB;cACvBC,MAAM,EAAE,IAAI;cACZtF,OAAO,EAAEvB,KAAK,CAACuB;YACjB,CAAC,CAAC;UACJ;UAEA,OAAOkF,MAAM;QACf,CAAC,EAAC;QAEFvK,MAAM,CAACsK,SAAS,CAAC,CAACS,YAAY,CAAC,CAAC,CAAC;QACjCT,SAAS,CAACU,OAAO,CAAClH,KAAK,IAAI;UACzB9D,MAAM,CAAC8D,KAAK,CAAC6G,MAAM,CAAC,CAACrH,IAAI,CAAC,IAAI,CAAC;UAC/BtD,MAAM,CAAC8D,KAAK,CAACuB,OAAO,CAAC,CAAC4F,UAAU,CAAC,CAAC;QACpC,CAAC,CAAC;QAEF,MAAMpI,OAAO,CAACD,KAAK,CAAC,CAAC;MACvB,CAAC,EAAC;IACJ;EACF,CAAC,CAAC;EAEF9C,QAAQ,CAAC,uBAAuB,EAAE,MAAM;IACtC,KAAK,MAAM;MAAEuC,IAAI;MAAEE;IAAQ,CAAC,IAAIpB,QAAQ,EAAE;MACxCpB,EAAE,CAAC,mCAAmCsC,IAAI,EAAE,eAAAjB,iBAAA,CAAE,aAAY;QACxD,MAAMyB,OAAO,SAASN,OAAO,CAACO,UAAU,CAAC,CAAC;QAC1C,MAAMC,IAAI,SAASF,OAAO,CAACG,OAAO,CAAC,CAAC;QAEpC,MAAMD,IAAI,CAACE,IAAI,CAAC,GAAG/B,SAAS,8BAA8B,CAAC;QAE3D,MAAMgK,UAAU,SAASnI,IAAI,CAACI,QAAQ,cAAA/B,iBAAA,CAAC,aAAY;UACjD;UACA,MAAM+J,YAAY,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;UAED,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACF,YAAY,CAAC,EAAE;YAAE1E,IAAI,EAAE;UAAyB,CAAC,CAAC;UACzE,MAAM6E,MAAM,GAAG,IAAIC,MAAM,CAACC,GAAG,CAACC,eAAe,CAACL,IAAI,CAAC,CAAC;UAEpD,MAAM1C,MAAM,SAAS,IAAI7G,OAAO,CAAEC,OAAO,IAAK;YAC5CwJ,MAAM,CAACI,SAAS,GAAIC,CAAC,IAAK7J,OAAO,CAAC6J,CAAC,CAAChG,IAAI,CAAC;YACzC2F,MAAM,CAACM,WAAW,CAAC;cACjBhE,CAAC,EAAE,IAAIhC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;cACjCiC,CAAC,EAAE,IAAIjC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YAClC,CAAC,CAAC;UACJ,CAAC,CAAC;UAEF0F,MAAM,CAACO,SAAS,CAAC,CAAC;UAElB,OAAOnD,MAAM;QACf,CAAC,EAAC;QAEF1I,MAAM,CAACkL,UAAU,CAACxC,MAAM,CAAC,CAACoD,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAEjD,MAAMjJ,OAAO,CAACD,KAAK,CAAC,CAAC;MACvB,CAAC,EAAC;IACJ;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACA,gBAAsBmJ,cAAcA,CAAA;EAAA,OAAAC,eAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AA6DnC,SAAAF,gBAAA;EAAAA,eAAA,GAAA5K,iBAAA,CA7DM,aAAgC;IACrC,MAAM+K,IAAI,GAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;IAEN,MAAMC,SAAS,CACb9L,IAAI,CAACkB,IAAI,CAACT,SAAS,EAAE,gBAAgB,CAAC,EACtCoL,IACF,CAAC;EACH,CAAC;EAAA,OAAAH,eAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA","ignoreList":[]}