{"version":3,"names":["cov_28z3ai4p9y","actualCoverage","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","value","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","asyncGeneratorStep","n","a","c","u","done","Promise","resolve","then","_asyncToGenerator","_next","_throw","path","promises","fs","WasmModuleLoader","constructor","f","s","modules","Map","loadingPromises","loadingStrategy","moduleManifest","core","jsBindings","size","priority","dependencies","exists","type","neural","optional","forecasting","swarm","persistence","baseDir","join","URL","import","meta","url","pathname","initialize","_this","strategy","b","loadAllModules","loadCoreModules","setupLazyLoading","Error","loadModule","moduleName","_this2","has","get","moduleInfo","coreModule","set","console","warn","dep","loadingPromise","loadWasmModule","module","delete","log","formatBytes","error","_this3","loadCoreModule","wasmPath","wasmBuffer","window","response","fetch","ok","statusText","arrayBuffer","readFile","createPlaceholderModule","imports","getModuleImports","wasmModule","WebAssembly","instantiate","instance","exports","memory","message","_this4","wasmJsUrl","href","bindings","default","baseImports","env","Memory","initial","maximum","wasi_snapshot_preview1","proc_exit","code","fd_write","fd_prestat_get","fd_prestat_dir_name","environ_sizes_get","environ_get","args_sizes_get","args_get","clock_time_get","Date","now","path_open","fd_close","fd_read","fd_seek","random_get","ptr","len","bytes","Uint8Array","buffer","crypto","getRandomValues","log_training_progress","epoch","loss","log_forecast","model","horizon","placeholderExports","__wbindgen_malloc","__wbindgen_realloc","oldSize","newSize","__wbindgen_free","create_neural_network","train_network","forward_pass","Float32Array","create_forecasting_model","forecast","create_swarm_orchestrator","isPlaceholder","_this5","_this6","existingModules","name","all","map","moduleProxies","Proxy","target","prop","getModuleStatus","status","info","entries","loaded","loading","getTotalMemoryUsage","totalBytes","values","byteLength","k","sizes","Math","floor","parseFloat","pow","toFixed"],"sources":["wasm-loader2.js"],"sourcesContent":["/**\n * Progressive WASM Module Loader\n * Implements on-demand, eager, and progressive loading strategies\n * for optimal performance and memory usage\n */\n\nimport path from 'path';\nimport { promises as fs } from 'fs';\n\nclass WasmModuleLoader {\n  constructor() {\n    this.modules = new Map();\n    this.loadingPromises = new Map();\n    this.loadingStrategy = 'on-demand'; // 'eager', 'on-demand', 'progressive'\n    this.moduleManifest = {\n      core: {\n        path: './wasm/ruv_swarm_wasm_bg.wasm',\n        jsBindings: './wasm/ruv_swarm_wasm.js',\n        size: 512 * 1024, // 512KB\n        priority: 'high',\n        dependencies: [],\n        exists: true, // This module definitely exists\n        type: 'wasm-bindgen', // Uses wasm-bindgen generated bindings\n      },\n      // Legacy modules - keep for compatibility but mark as optional\n      neural: {\n        path: './wasm/ruv-fann.wasm',\n        size: 1024 * 1024, // 1MB\n        priority: 'medium',\n        dependencies: ['core'],\n        exists: false, // This is a standalone module, not currently built\n        optional: true,\n      },\n      forecasting: {\n        path: './wasm/neuro-divergent.wasm',\n        size: 1536 * 1024, // 1.5MB\n        priority: 'medium',\n        dependencies: ['core'],\n        exists: false, // This is a standalone module, not currently built\n        optional: true,\n      },\n      swarm: {\n        path: './wasm/ruv-swarm-orchestration.wasm',\n        size: 768 * 1024, // 768KB\n        priority: 'high',\n        dependencies: ['core'],\n        exists: false, // This functionality is in core module\n        optional: true,\n      },\n      persistence: {\n        path: './wasm/ruv-swarm-persistence.wasm',\n        size: 256 * 1024, // 256KB\n        priority: 'high',\n        dependencies: ['core'],\n        exists: false, // This functionality is handled by Node.js layer\n        optional: true,\n      },\n    };\n    this.baseDir = path.join(new URL('.', import.meta.url).pathname, '..');\n  }\n\n  async initialize(strategy = 'progressive') {\n    this.loadingStrategy = strategy;\n\n    switch (strategy) {\n    case 'eager':\n      return this.loadAllModules();\n    case 'progressive':\n      return this.loadCoreModules();\n    case 'on-demand':\n      return this.setupLazyLoading();\n    default:\n      throw new Error(`Unknown loading strategy: ${strategy}`);\n    }\n  }\n\n  async loadModule(moduleName) {\n    if (this.modules.has(moduleName)) {\n      return this.modules.get(moduleName);\n    }\n\n    if (this.loadingPromises.has(moduleName)) {\n      return this.loadingPromises.get(moduleName);\n    }\n\n    const moduleInfo = this.moduleManifest[moduleName];\n    if (!moduleInfo) {\n      throw new Error(`Unknown module: ${moduleName}`);\n    }\n\n    // Check if module is marked as non-existent and optional\n    if (!moduleInfo.exists && moduleInfo.optional) {\n      // Silently use core module for neural and forecasting features\n      // These are integrated into the core module, not separate files\n      if (moduleName === 'neural' || moduleName === 'forecasting') {\n        if (this.modules.has('core')) {\n          const coreModule = this.modules.get('core');\n          this.modules.set(moduleName, coreModule); // Alias to core module\n          return coreModule;\n        }\n      } else {\n        // Only warn for other optional modules\n        console.warn(`⚠️ Optional module ${moduleName} is not available, functionality will be provided by core module`);\n      }\n\n      // Return a reference to the core module instead of a placeholder\n      if (moduleName !== 'core' && this.modules.has('core')) {\n        const coreModule = this.modules.get('core');\n        this.modules.set(moduleName, coreModule); // Alias to core module\n        return coreModule;\n      }\n      throw new Error(`Optional module ${moduleName} not available and core module not loaded`);\n    }\n\n    // Load dependencies first\n    for (const dep of moduleInfo.dependencies) {\n      await this.loadModule(dep);\n    }\n\n    const loadingPromise = this.loadWasmModule(moduleName, moduleInfo);\n    this.loadingPromises.set(moduleName, loadingPromise);\n\n    try {\n      const module = await loadingPromise;\n      this.modules.set(moduleName, module);\n      this.loadingPromises.delete(moduleName);\n\n      console.log(`✅ Loaded WASM module: ${moduleName} (${this.formatBytes(moduleInfo.size)})`);\n      return module;\n    } catch (error) {\n      this.loadingPromises.delete(moduleName);\n\n      // If it's an optional module, provide fallback to core functionality\n      if (moduleInfo.optional && this.modules.has('core')) {\n        console.warn(`⚠️ Optional module ${moduleName} failed to load, using core module functionality`);\n        const coreModule = this.modules.get('core');\n        this.modules.set(moduleName, coreModule);\n        return coreModule;\n      }\n\n      console.error(`❌ Failed to load WASM module: ${moduleName}`, error);\n      throw error;\n    }\n  }\n\n  async loadWasmModule(moduleName, moduleInfo) {\n    // Special handling for the core module which uses ES module bindings\n    if (moduleName === 'core') {\n      return this.loadCoreModule();\n    }\n\n    // For other modules, load the WASM file directly\n    const wasmPath = path.join(this.baseDir, moduleInfo.path);\n\n    try {\n      let wasmBuffer;\n\n      if (typeof window !== 'undefined') {\n        // Browser environment\n        const response = await fetch(wasmPath);\n        if (!response.ok) {\n          throw new Error(`Failed to fetch WASM module: ${response.statusText}`);\n        }\n        wasmBuffer = await response.arrayBuffer();\n      } else {\n        // Node.js environment\n        try {\n          wasmBuffer = await fs.readFile(wasmPath);\n        } catch (error) {\n          // Fallback: module might not exist yet, return a placeholder\n          console.warn(`Module ${moduleName} not found at ${wasmPath}, using placeholder`);\n          return this.createPlaceholderModule(moduleName);\n        }\n      }\n\n      const imports = this.getModuleImports(moduleName);\n      const wasmModule = await WebAssembly.instantiate(wasmBuffer, imports);\n\n      return {\n        instance: wasmModule.instance,\n        module: wasmModule.module,\n        exports: wasmModule.instance.exports,\n        memory: wasmModule.instance.exports.memory,\n      };\n    } catch (error) {\n      console.warn(`Failed to load ${moduleName}, using placeholder:`, error.message);\n      return this.createPlaceholderModule(moduleName);\n    }\n  }\n\n  async loadCoreModule() {\n    // Load the core module using ES module bindings\n    try {\n      // Ensure we're using URL-based import for ES modules\n      const wasmJsUrl = new URL('../wasm/ruv_swarm_wasm.js', import.meta.url).href;\n\n      // Use dynamic import with URL protocol for ES modules\n      const bindings = await import(wasmJsUrl);\n\n      // Initialize WASM module with file buffer for Node.js\n      if (bindings.default && typeof window === 'undefined') {\n        const wasmPath = path.join(this.baseDir, 'wasm', 'ruv_swarm_wasm_bg.wasm');\n        try {\n          const wasmBuffer = await fs.readFile(wasmPath);\n          await bindings.default(wasmBuffer);\n        } catch (error) {\n          console.warn('Failed to load WASM file, using bindings defaults:', error);\n        }\n      }\n\n      return {\n        instance: { exports: bindings },\n        module: null,\n        exports: bindings,\n        memory: bindings.memory,\n      };\n    } catch (error) {\n      console.warn('Failed to load core module bindings:', error);\n      return this.createPlaceholderModule('core');\n    }\n  }\n\n  getModuleImports(moduleName) {\n    const baseImports = {\n      env: {\n        memory: new WebAssembly.Memory({ initial: 256, maximum: 4096 }),\n      },\n      wasi_snapshot_preview1: {\n        // Basic WASI imports for compatibility\n        proc_exit: (code) => {\n          throw new Error(`Process exited with code ${code}`);\n        },\n        fd_write: () => 0,\n        fd_prestat_get: () => 1,\n        fd_prestat_dir_name: () => 1,\n        environ_sizes_get: () => 0,\n        environ_get: () => 0,\n        args_sizes_get: () => 0,\n        args_get: () => 0,\n        clock_time_get: () => Date.now() * 1000000,\n        path_open: () => 1,\n        fd_close: () => 0,\n        fd_read: () => 0,\n        fd_seek: () => 0,\n        random_get: (ptr, len) => {\n          const bytes = new Uint8Array(this.memory.buffer, ptr, len);\n          crypto.getRandomValues(bytes);\n          return 0;\n        },\n      },\n    };\n\n    // Module-specific imports\n    switch (moduleName) {\n    case 'neural':\n      return {\n        ...baseImports,\n        neural: {\n          log_training_progress: (epoch, loss) => {\n            console.log(`Training progress - Epoch: ${epoch}, Loss: ${loss}`);\n          },\n        },\n      };\n    case 'forecasting':\n      return {\n        ...baseImports,\n        forecasting: {\n          log_forecast: (model, horizon) => {\n            console.log(`Forecasting with model: ${model}, horizon: ${horizon}`);\n          },\n        },\n      };\n    default:\n      return baseImports;\n    }\n  }\n\n  createPlaceholderModule(moduleName) {\n    // Create a placeholder module with basic functionality\n    console.warn(`Creating placeholder for module: ${moduleName}`);\n\n    const placeholderExports = {\n      memory: new WebAssembly.Memory({ initial: 1, maximum: 10 }),\n      __wbindgen_malloc: (size) => 0,\n      __wbindgen_realloc: (ptr, oldSize, newSize) => ptr,\n      __wbindgen_free: (ptr, size) => {},\n    };\n\n    // Add module-specific placeholder functions\n    switch (moduleName) {\n    case 'neural':\n      placeholderExports.create_neural_network = () => {\n        console.warn('Neural network module not loaded, using placeholder');\n        return 0;\n      };\n      placeholderExports.train_network = () => 0;\n      placeholderExports.forward_pass = () => new Float32Array([0.5]);\n      break;\n    case 'forecasting':\n      placeholderExports.create_forecasting_model = () => {\n        console.warn('Forecasting module not loaded, using placeholder');\n        return 0;\n      };\n      placeholderExports.forecast = () => new Float32Array([0.0]);\n      break;\n    case 'swarm':\n      placeholderExports.create_swarm_orchestrator = () => {\n        console.warn('Swarm orchestration module not loaded, using placeholder');\n        return 0;\n      };\n      break;\n    }\n\n    return {\n      instance: { exports: placeholderExports },\n      module: null,\n      exports: placeholderExports,\n      memory: placeholderExports.memory,\n      isPlaceholder: true,\n    };\n  }\n\n  async loadCoreModules() {\n    // Load only the core module - other functionality is included in it\n    await this.loadModule('core');\n\n    console.log('🚀 Core WASM module loaded successfully');\n    return true;\n  }\n\n  async loadAllModules() {\n    // Only load modules that actually exist\n    const existingModules = Object.keys(this.moduleManifest)\n      .filter(name => this.moduleManifest[name].exists);\n\n    await Promise.all(existingModules.map(name => this.loadModule(name)));\n\n    console.log(`🎯 All available WASM modules loaded successfully (${existingModules.length} modules)`);\n    return true;\n  }\n\n  setupLazyLoading() {\n    // Create proxy objects that load modules on first access\n    const moduleProxies = {};\n\n    for (const moduleName of Object.keys(this.moduleManifest)) {\n      moduleProxies[moduleName] = new Proxy({}, {\n        get: (target, prop) => {\n          if (!this.modules.has(moduleName)) {\n            // Trigger module loading\n            this.loadModule(moduleName);\n            throw new Error(`Module ${moduleName} is loading. Please await loadModule('${moduleName}') first.`);\n          }\n\n          const module = this.modules.get(moduleName);\n          return module.exports[prop];\n        },\n      });\n    }\n\n    return moduleProxies;\n  }\n\n  getModuleStatus() {\n    const status = {};\n\n    for (const [name, info] of Object.entries(this.moduleManifest)) {\n      status[name] = {\n        loaded: this.modules.has(name),\n        loading: this.loadingPromises.has(name),\n        size: info.size,\n        priority: info.priority,\n        dependencies: info.dependencies,\n        isPlaceholder: this.modules.has(name) && this.modules.get(name).isPlaceholder,\n      };\n    }\n\n    return status;\n  }\n\n  getTotalMemoryUsage() {\n    let totalBytes = 0;\n\n    for (const module of this.modules.values()) {\n      if (module.memory && module.memory.buffer) {\n        totalBytes += module.memory.buffer.byteLength;\n      }\n    }\n\n    return totalBytes;\n  }\n\n  formatBytes(bytes) {\n    if (bytes === 0) {\n      return '0 Bytes';\n    }\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2)) } ${ sizes[i]}`;\n  }\n}\n\nexport { WasmModuleLoader };"],"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","ignoreList":[]}