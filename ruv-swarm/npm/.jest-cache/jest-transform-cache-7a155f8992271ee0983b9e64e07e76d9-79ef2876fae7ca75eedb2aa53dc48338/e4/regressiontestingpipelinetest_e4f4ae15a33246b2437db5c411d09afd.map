{"version":3,"names":["RuvSwarm","require","fs","promises","path","spawn","RegressionTestingPipeline","constructor","pipelineResults","timestamp","Date","toISOString","buildInfo","commit","process","env","GITHUB_SHA","branch","GITHUB_REF_NAME","buildNumber","GITHUB_RUN_NUMBER","environment","NODE_ENV","baseline","currentResults","regressions","improvements","stages","overallStatus","baselineFile","thresholds","performance","memory","errorRate","coverage","runRegressionPipeline","_this","_asyncToGenerator","console","log","logBuildInfo","runStage","setupEnvironment","bind","runCodeQualityChecks","runUnitTests","runIntegrationTests","runPerformanceBenchmarks","runLoadTests","runSecurityScans","runCrossPlatformTests","performRegressionAnalysis","generateRegressionReport","error","stageName","stageFunction","_this2","stage","name","startTime","now","passed","duration","output","errors","result","data","push","message","setupResult","nodeVersion","version","packageJson","JSON","parse","readFile","testDbPath","unlink","RUV_SWARM_TEST_MODE","packageVersion","_this3","qualityResult","linting","issues","formatting","typeChecking","lintResult","runCommand","cwd","success","countLintIssues","tsFiles","findFiles","length","_this4","unitTestResult","testsRun","testsPassed","testsFailed","lines","branches","functions","statements","testResult","timeout","testOutput","extractTestCount","coverageData","parseCoverageResults","_this5","integrationResult","scenarios","totalTime","resultsFile","results","suites","calculateErrorRate","_this6","perfResult","simdPerformance","speedOptimization","memoryUsage","throughput","perfTestResult","_results$performance","_results$performance2","_results$performance3","simd","actual","speed","memoryEfficiency","calculateThroughput","_this7","loadResult","maxAgents","avgResponseTime","memoryPeak","loadTestResult","_results$performance4","_results$performance5","_results$performance6","_results$performance7","maxConcurrentAgents","parseFloat","_this8","securityResult","securityScore","vulnerabilities","memoryLeaks","securityLevel","secTestResult","_results$overallSecur","_results$vulnerabilit","_results$memoryTests","_results$overallSecur2","overallSecurity","score","memoryTests","filter","t","level","platformResult","platform","arch","wasmSupport","sqliteSupport","ruvSwarm","initialize","detectSIMDSupport","undefined","PersistenceManager","pm","_this9","regressionResult","baselineLoaded","regressionCount","improvementCount","significantChanges","loadBaseline","collectCurrentResults","analyzeRegressions","saveBaseline","_this0","reportResult","passedStages","s","totalStages","successRate","report","_objectSpread","summary","failedStages","toFixed","reduce","sum","cicdIntegration","shouldDeploy","deploymentReady","checkDeploymentReadiness","recommendations","generateCICDRecommendations","reportPath","writeFile","stringify","generateCICDOutputs","Math","round","_x","command","options","Promise","resolve","cmd","args","split","stdio","stdout","on","toString","stderr","code","exitCode","setTimeout","kill","apply","arguments","directory","extension","files","readdir","recursive","file","endsWith","matches","match","numbers","parseInt","type","patterns","total","failed","_coverage$total","_coverage$total2","_coverage$total3","_coverage$total4","coveragePath","pct","status","tests","totalDuration","test","totalTests","_this1","perfStage","find","loadStage","unitStage","loadTesting","unitTests","systemInfo","_baseline$performance","_current$performance","_baseline$performance2","_current$performance2","_baseline$loadTesting","_current$loadTesting","_baseline$loadTesting2","_current$loadTesting2","_baseline$unitTests","_current$unitTests","current","checkPerformanceRegression","checkNumericRegression","parseMemoryValue","metric","baselineValue","currentValue","baselineMultiplier","replace","currentMultiplier","change","severity","threshold","lowerIsBetter","isRegression","isImprovement","abs","memoryString","_this10","criticalStages","criticalPassed","every","_this$pipelineResults","map","join","_this11","githubOutput","junitXml","generateJUnitXML","testcases","_runRegressionPipeline","_results$summary","_results$summary2","_results$cicdIntegrat","pipeline","exit","main","module","exports"],"sources":["regression-testing-pipeline.test.js"],"sourcesContent":["\n\n/**\n * Regression Testing Pipeline for ruv-swarm\n * Automated CI/CD integration with performance regression detection\n */\n\nconst { RuvSwarm } = require('../src/index-enhanced');\nconst fs = require('fs').promises;\nconst path = require('path');\nconst { spawn } = require('child_process');\n\nclass RegressionTestingPipeline {\n    constructor() {\n        this.pipelineResults = {\n            timestamp: new Date().toISOString(),\n            buildInfo: {\n                commit: process.env.GITHUB_SHA || 'local',\n                branch: process.env.GITHUB_REF_NAME || 'local',\n                buildNumber: process.env.GITHUB_RUN_NUMBER || '0',\n                environment: process.env.NODE_ENV || 'test'\n            },\n            baseline: null,\n            currentResults: null,\n            regressions: [],\n            improvements: [],\n            stages: [],\n            overallStatus: 'UNKNOWN'\n        };\n        this.baselineFile = '/workspaces/ruv-FANN/ruv-swarm/npm/test/baseline-performance.json';\n        this.thresholds = {\n            performance: 0.05, // 5% degradation threshold\n            memory: 0.10,      // 10% memory increase threshold\n            errorRate: 0.02,   // 2% error rate increase threshold\n            coverage: 0.01     // 1% coverage decrease threshold\n        };\n    }\n\n    async runRegressionPipeline() {\n        console.log('üîÑ Starting Regression Testing Pipeline');\n        console.log('=======================================\\n');\n\n        this.logBuildInfo();\n\n        try {\n            // Stage 1: Environment Setup\n            await this.runStage('Environment Setup', this.setupEnvironment.bind(this));\n\n            // Stage 2: Code Quality Checks\n            await this.runStage('Code Quality Checks', this.runCodeQualityChecks.bind(this));\n\n            // Stage 3: Unit Tests with Coverage\n            await this.runStage('Unit Tests', this.runUnitTests.bind(this));\n\n            // Stage 4: Integration Tests\n            await this.runStage('Integration Tests', this.runIntegrationTests.bind(this));\n\n            // Stage 5: Performance Benchmarks\n            await this.runStage('Performance Benchmarks', this.runPerformanceBenchmarks.bind(this));\n\n            // Stage 6: Load Testing\n            await this.runStage('Load Testing', this.runLoadTests.bind(this));\n\n            // Stage 7: Security Scanning\n            await this.runStage('Security Scanning', this.runSecurityScans.bind(this));\n\n            // Stage 8: Cross-Platform Testing\n            await this.runStage('Cross-Platform Testing', this.runCrossPlatformTests.bind(this));\n\n            // Stage 9: Regression Analysis\n            await this.runStage('Regression Analysis', this.performRegressionAnalysis.bind(this));\n\n            // Stage 10: Report Generation\n            await this.runStage('Report Generation', this.generateRegressionReport.bind(this));\n\n        } catch (error) {\n            console.error('‚ùå Pipeline failed:', error);\n            this.pipelineResults.overallStatus = 'FAILED';\n            throw error;\n        }\n\n        return this.pipelineResults;\n    }\n\n    logBuildInfo() {\n        console.log('üèóÔ∏è  Build Information:');\n        console.log(`   Commit: ${this.pipelineResults.buildInfo.commit}`);\n        console.log(`   Branch: ${this.pipelineResults.buildInfo.branch}`);\n        console.log(`   Build: #${this.pipelineResults.buildInfo.buildNumber}`);\n        console.log(`   Environment: ${this.pipelineResults.buildInfo.environment}\\n`);\n    }\n\n    async runStage(stageName, stageFunction) {\n        console.log(`üìã Stage: ${stageName}`);\n        \n        const stage = {\n            name: stageName,\n            startTime: Date.now(),\n            passed: false,\n            duration: 0,\n            output: [],\n            errors: []\n        };\n\n        try {\n            const result = await stageFunction();\n            stage.passed = result.passed !== false;\n            stage.output = result.output || [];\n            stage.data = result.data || {};\n            \n            console.log(`   ${stage.passed ? '‚úÖ' : '‚ùå'} ${stageName} ${stage.passed ? 'passed' : 'failed'}`);\n            \n        } catch (error) {\n            stage.passed = false;\n            stage.errors.push(error.message);\n            console.log(`   ‚ùå ${stageName} failed: ${error.message}`);\n        }\n\n        stage.duration = Date.now() - stage.startTime;\n        this.pipelineResults.stages.push(stage);\n        console.log('');\n\n        return stage;\n    }\n\n    async setupEnvironment() {\n        const setupResult = {\n            passed: true,\n            output: [],\n            data: {}\n        };\n\n        try {\n            // Check Node.js version\n            const nodeVersion = process.version;\n            setupResult.output.push(`Node.js version: ${nodeVersion}`);\n\n            // Check dependencies\n            const packageJson = JSON.parse(\n                await fs.readFile('/workspaces/ruv-FANN/ruv-swarm/npm/package.json', 'utf8')\n            );\n            setupResult.output.push(`Package version: ${packageJson.version}`);\n\n            // Initialize test database\n            const testDbPath = '/workspaces/ruv-FANN/ruv-swarm/npm/test/regression-test.db';\n            try {\n                await fs.unlink(testDbPath);\n            } catch (error) {\n                // File doesn't exist, that's fine\n            }\n\n            // Set environment variables\n            process.env.NODE_ENV = 'test';\n            process.env.RUV_SWARM_TEST_MODE = 'regression';\n\n            setupResult.data = {\n                nodeVersion,\n                packageVersion: packageJson.version,\n                timestamp: new Date().toISOString()\n            };\n\n        } catch (error) {\n            setupResult.passed = false;\n            setupResult.errors = [error.message];\n        }\n\n        return setupResult;\n    }\n\n    async runCodeQualityChecks() {\n        const qualityResult = {\n            passed: true,\n            output: [],\n            data: {\n                linting: { passed: false, issues: 0 },\n                formatting: { passed: false, issues: 0 },\n                typeChecking: { passed: false, issues: 0 }\n            }\n        };\n\n        try {\n            // Run ESLint\n            const lintResult = await this.runCommand('npm run lint:check', { cwd: '/workspaces/ruv-FANN/ruv-swarm/npm' });\n            qualityResult.data.linting.passed = lintResult.success;\n            qualityResult.data.linting.issues = this.countLintIssues(lintResult.output);\n            qualityResult.output.push(`Linting: ${lintResult.success ? 'PASSED' : 'FAILED'} (${qualityResult.data.linting.issues} issues)`);\n\n            // Check if TypeScript definitions exist\n            const tsFiles = await this.findFiles('/workspaces/ruv-FANN/ruv-swarm/npm/src', '.d.ts');\n            qualityResult.data.typeChecking.passed = tsFiles.length > 0;\n            qualityResult.output.push(`Type definitions: ${tsFiles.length} files found`);\n\n            qualityResult.passed = qualityResult.data.linting.passed && \n                                 qualityResult.data.linting.issues < 10; // Allow up to 10 linting issues\n\n        } catch (error) {\n            qualityResult.passed = false;\n            qualityResult.output.push(`Quality check error: ${error.message}`);\n        }\n\n        return qualityResult;\n    }\n\n    async runUnitTests() {\n        const unitTestResult = {\n            passed: true,\n            output: [],\n            data: {\n                testsRun: 0,\n                testsPassed: 0,\n                testsFailed: 0,\n                coverage: {\n                    lines: 0,\n                    branches: 0,\n                    functions: 0,\n                    statements: 0\n                }\n            }\n        };\n\n        try {\n            // Run unit tests with coverage\n            const testResult = await this.runCommand('npm run test:coverage', { \n                cwd: '/workspaces/ruv-FANN/ruv-swarm/npm',\n                timeout: 120000 \n            });\n\n            // Parse test results\n            const testOutput = testResult.output;\n            unitTestResult.data.testsRun = this.extractTestCount(testOutput, 'total');\n            unitTestResult.data.testsPassed = this.extractTestCount(testOutput, 'passed');\n            unitTestResult.data.testsFailed = this.extractTestCount(testOutput, 'failed');\n\n            // Parse coverage results\n            const coverageData = await this.parseCoverageResults();\n            unitTestResult.data.coverage = coverageData;\n\n            unitTestResult.passed = testResult.success && unitTestResult.data.testsFailed === 0;\n            unitTestResult.output.push(`Tests: ${unitTestResult.data.testsPassed}/${unitTestResult.data.testsRun} passed`);\n            unitTestResult.output.push(`Coverage: ${coverageData.lines}% lines, ${coverageData.branches}% branches`);\n\n        } catch (error) {\n            unitTestResult.passed = false;\n            unitTestResult.output.push(`Unit test error: ${error.message}`);\n        }\n\n        return unitTestResult;\n    }\n\n    async runIntegrationTests() {\n        const integrationResult = {\n            passed: true,\n            output: [],\n            data: {\n                scenarios: [],\n                totalTime: 0,\n                errorRate: 0\n            }\n        };\n\n        try {\n            // Run integration test suite\n            const testResult = await this.runCommand('node test/integration/run-integration-tests.js', {\n                cwd: '/workspaces/ruv-FANN/ruv-swarm/npm',\n                timeout: 300000 // 5 minutes\n            });\n\n            integrationResult.passed = testResult.success;\n            integrationResult.output.push(`Integration tests: ${testResult.success ? 'PASSED' : 'FAILED'}`);\n\n            // Parse integration test results if available\n            try {\n                const resultsFile = '/workspaces/ruv-FANN/ruv-swarm/npm/test-results/integration-results.json';\n                const results = JSON.parse(await fs.readFile(resultsFile, 'utf8'));\n                \n                integrationResult.data.scenarios = results.suites || [];\n                integrationResult.data.totalTime = results.duration || 0;\n                integrationResult.data.errorRate = this.calculateErrorRate(results);\n                \n            } catch (error) {\n                // Results file not found, use basic data\n                integrationResult.output.push('Integration results file not found, using basic metrics');\n            }\n\n        } catch (error) {\n            integrationResult.passed = false;\n            integrationResult.output.push(`Integration test error: ${error.message}`);\n        }\n\n        return integrationResult;\n    }\n\n    async runPerformanceBenchmarks() {\n        const perfResult = {\n            passed: true,\n            output: [],\n            data: {\n                simdPerformance: null,\n                speedOptimization: null,\n                memoryUsage: null,\n                throughput: null\n            }\n        };\n\n        try {\n            // Run performance validation\n            const perfTestResult = await this.runCommand('node test/comprehensive-performance-validation.test.js', {\n                cwd: '/workspaces/ruv-FANN/ruv-swarm/npm',\n                timeout: 600000 // 10 minutes\n            });\n\n            perfResult.passed = perfTestResult.success;\n\n            // Load performance results\n            try {\n                const resultsFile = '/workspaces/ruv-FANN/ruv-swarm/npm/test/validation-report.json';\n                const results = JSON.parse(await fs.readFile(resultsFile, 'utf8'));\n                \n                perfResult.data = {\n                    simdPerformance: results.performance?.simd?.actual,\n                    speedOptimization: results.performance?.speed?.actual,\n                    memoryUsage: results.performance?.memoryEfficiency?.actual,\n                    throughput: this.calculateThroughput(results)\n                };\n\n                perfResult.output.push(`SIMD Performance: ${perfResult.data.simdPerformance || 'N/A'}`);\n                perfResult.output.push(`Speed Optimization: ${perfResult.data.speedOptimization || 'N/A'}`);\n                perfResult.output.push(`Memory Usage: ${perfResult.data.memoryUsage || 'N/A'}`);\n\n            } catch (error) {\n                perfResult.output.push('Performance results file not found');\n            }\n\n        } catch (error) {\n            perfResult.passed = false;\n            perfResult.output.push(`Performance benchmark error: ${error.message}`);\n        }\n\n        return perfResult;\n    }\n\n    async runLoadTests() {\n        const loadResult = {\n            passed: true,\n            output: [],\n            data: {\n                maxAgents: 0,\n                avgResponseTime: 0,\n                memoryPeak: 0,\n                errorRate: 0\n            }\n        };\n\n        try {\n            // Run load testing suite\n            const loadTestResult = await this.runCommand('node test/load-testing-suite.test.js', {\n                cwd: '/workspaces/ruv-FANN/ruv-swarm/npm',\n                timeout: 1800000 // 30 minutes\n            });\n\n            loadResult.passed = loadTestResult.success;\n\n            // Load test results\n            try {\n                const resultsFile = '/workspaces/ruv-FANN/ruv-swarm/npm/test/load-test-report.json';\n                const results = JSON.parse(await fs.readFile(resultsFile, 'utf8'));\n                \n                loadResult.data = {\n                    maxAgents: results.performance?.maxConcurrentAgents || 0,\n                    avgResponseTime: results.performance?.avgResponseTime || 0,\n                    memoryPeak: results.performance?.memoryPeak || 0,\n                    errorRate: parseFloat(results.performance?.errorRate) || 0\n                };\n\n                loadResult.output.push(`Max Agents: ${loadResult.data.maxAgents}`);\n                loadResult.output.push(`Avg Response: ${loadResult.data.avgResponseTime}ms`);\n                loadResult.output.push(`Memory Peak: ${loadResult.data.memoryPeak}MB`);\n                loadResult.output.push(`Error Rate: ${loadResult.data.errorRate}%`);\n\n            } catch (error) {\n                loadResult.output.push('Load test results file not found');\n            }\n\n        } catch (error) {\n            loadResult.passed = false;\n            loadResult.output.push(`Load test error: ${error.message}`);\n        }\n\n        return loadResult;\n    }\n\n    async runSecurityScans() {\n        const securityResult = {\n            passed: true,\n            output: [],\n            data: {\n                securityScore: 0,\n                vulnerabilities: 0,\n                memoryLeaks: 0,\n                securityLevel: 'UNKNOWN'\n            }\n        };\n\n        try {\n            // Run security audit\n            const secTestResult = await this.runCommand('node test/security-audit.test.js', {\n                cwd: '/workspaces/ruv-FANN/ruv-swarm/npm',\n                timeout: 600000 // 10 minutes\n            });\n\n            // Load security results\n            try {\n                const resultsFile = '/workspaces/ruv-FANN/ruv-swarm/npm/test/security-audit-report.json';\n                const results = JSON.parse(await fs.readFile(resultsFile, 'utf8'));\n                \n                securityResult.data = {\n                    securityScore: results.overallSecurity?.score || 0,\n                    vulnerabilities: results.vulnerabilities?.length || 0,\n                    memoryLeaks: results.memoryTests?.filter(t => !t.passed).length || 0,\n                    securityLevel: results.overallSecurity?.level || 'UNKNOWN'\n                };\n\n                securityResult.passed = securityResult.data.securityLevel !== 'CRITICAL' && \n                                      securityResult.data.securityScore >= 70;\n\n                securityResult.output.push(`Security Score: ${securityResult.data.securityScore}/100`);\n                securityResult.output.push(`Security Level: ${securityResult.data.securityLevel}`);\n                securityResult.output.push(`Vulnerabilities: ${securityResult.data.vulnerabilities}`);\n\n            } catch (error) {\n                securityResult.output.push('Security results file not found');\n                securityResult.passed = false;\n            }\n\n        } catch (error) {\n            securityResult.passed = false;\n            securityResult.output.push(`Security scan error: ${error.message}`);\n        }\n\n        return securityResult;\n    }\n\n    async runCrossPlatformTests() {\n        const platformResult = {\n            passed: true,\n            output: [],\n            data: {\n                platform: process.platform,\n                arch: process.arch,\n                nodeVersion: process.version,\n                wasmSupport: false,\n                sqliteSupport: false\n            }\n        };\n\n        try {\n            // Test WASM support\n            const ruvSwarm = await RuvSwarm.initialize();\n            platformResult.data.wasmSupport = await ruvSwarm.detectSIMDSupport() !== undefined;\n\n            // Test SQLite support\n            try {\n                const { PersistenceManager } = require('/workspaces/ruv-FANN/ruv-swarm/npm/src/persistence');\n                const pm = new PersistenceManager(':memory:');\n                await pm.initialize();\n                platformResult.data.sqliteSupport = true;\n            } catch (error) {\n                platformResult.data.sqliteSupport = false;\n            }\n\n            platformResult.passed = platformResult.data.wasmSupport && platformResult.data.sqliteSupport;\n\n            platformResult.output.push(`Platform: ${platformResult.data.platform} ${platformResult.data.arch}`);\n            platformResult.output.push(`WASM Support: ${platformResult.data.wasmSupport ? 'YES' : 'NO'}`);\n            platformResult.output.push(`SQLite Support: ${platformResult.data.sqliteSupport ? 'YES' : 'NO'}`);\n\n        } catch (error) {\n            platformResult.passed = false;\n            platformResult.output.push(`Cross-platform test error: ${error.message}`);\n        }\n\n        return platformResult;\n    }\n\n    async performRegressionAnalysis() {\n        const regressionResult = {\n            passed: true,\n            output: [],\n            data: {\n                baselineLoaded: false,\n                regressionCount: 0,\n                improvementCount: 0,\n                significantChanges: []\n            }\n        };\n\n        try {\n            // Load baseline performance data\n            this.pipelineResults.baseline = await this.loadBaseline();\n            regressionResult.data.baselineLoaded = this.pipelineResults.baseline !== null;\n\n            if (this.pipelineResults.baseline) {\n                // Collect current results\n                this.pipelineResults.currentResults = this.collectCurrentResults();\n\n                // Analyze for regressions\n                this.analyzeRegressions();\n\n                regressionResult.data.regressionCount = this.pipelineResults.regressions.length;\n                regressionResult.data.improvementCount = this.pipelineResults.improvements.length;\n                regressionResult.data.significantChanges = [\n                    ...this.pipelineResults.regressions,\n                    ...this.pipelineResults.improvements\n                ];\n\n                regressionResult.passed = this.pipelineResults.regressions.length === 0;\n\n                regressionResult.output.push(`Regressions detected: ${regressionResult.data.regressionCount}`);\n                regressionResult.output.push(`Improvements detected: ${regressionResult.data.improvementCount}`);\n\n                if (regressionResult.data.regressionCount > 0) {\n                    regressionResult.output.push('‚ùå Regression analysis FAILED - performance degradation detected');\n                } else {\n                    regressionResult.output.push('‚úÖ Regression analysis PASSED - no performance degradation');\n                }\n\n            } else {\n                regressionResult.output.push('No baseline found - saving current results as baseline');\n                await this.saveBaseline(this.collectCurrentResults());\n            }\n\n        } catch (error) {\n            regressionResult.passed = false;\n            regressionResult.output.push(`Regression analysis error: ${error.message}`);\n        }\n\n        return regressionResult;\n    }\n\n    async generateRegressionReport() {\n        const reportResult = {\n            passed: true,\n            output: [],\n            data: {}\n        };\n\n        try {\n            // Determine overall pipeline status\n            const passedStages = this.pipelineResults.stages.filter(s => s.passed).length;\n            const totalStages = this.pipelineResults.stages.length;\n            const successRate = (passedStages / totalStages) * 100;\n\n            this.pipelineResults.overallStatus = successRate >= 80 ? 'PASSED' : 'FAILED';\n\n            // Generate comprehensive report\n            const report = {\n                ...this.pipelineResults,\n                summary: {\n                    totalStages,\n                    passedStages,\n                    failedStages: totalStages - passedStages,\n                    successRate: successRate.toFixed(1) + '%',\n                    duration: this.pipelineResults.stages.reduce((sum, stage) => sum + stage.duration, 0)\n                },\n                cicdIntegration: {\n                    shouldDeploy: this.pipelineResults.overallStatus === 'PASSED' && \n                                 this.pipelineResults.regressions.length === 0,\n                    deploymentReady: this.checkDeploymentReadiness(),\n                    recommendations: this.generateCICDRecommendations()\n                }\n            };\n\n            // Save reports\n            const reportPath = '/workspaces/ruv-FANN/ruv-swarm/npm/test/regression-pipeline-report.json';\n            await fs.writeFile(reportPath, JSON.stringify(report, null, 2));\n\n            // Generate CI/CD compatible outputs\n            await this.generateCICDOutputs(report);\n\n            reportResult.output.push(`Overall Status: ${this.pipelineResults.overallStatus}`);\n            reportResult.output.push(`Success Rate: ${report.summary.successRate}`);\n            reportResult.output.push(`Duration: ${Math.round(report.summary.duration / 1000)}s`);\n            reportResult.output.push(`Report saved to: ${reportPath}`);\n\n        } catch (error) {\n            reportResult.passed = false;\n            reportResult.output.push(`Report generation error: ${error.message}`);\n        }\n\n        return reportResult;\n    }\n\n    // Helper methods\n    async runCommand(command, options = {}) {\n        return new Promise((resolve) => {\n            const [cmd, ...args] = command.split(' ');\n            const process = spawn(cmd, args, {\n                stdio: 'pipe',\n                cwd: options.cwd || '/workspaces/ruv-FANN/ruv-swarm/npm',\n                ...options\n            });\n\n            let output = '';\n            let error = '';\n\n            process.stdout.on('data', (data) => output += data.toString());\n            process.stderr.on('data', (data) => error += data.toString());\n\n            process.on('close', (code) => {\n                resolve({\n                    success: code === 0,\n                    output: output || error,\n                    exitCode: code\n                });\n            });\n\n            if (options.timeout) {\n                setTimeout(() => {\n                    process.kill();\n                    resolve({ success: false, output: 'Command timeout', exitCode: -1 });\n                }, options.timeout);\n            }\n        });\n    }\n\n    async findFiles(directory, extension) {\n        try {\n            const files = await fs.readdir(directory, { recursive: true });\n            return files.filter(file => file.endsWith(extension));\n        } catch {\n            return [];\n        }\n    }\n\n    countLintIssues(output) {\n        const matches = output.match(/\\d+ problems? \\(\\d+ errors?, \\d+ warnings?\\)/);\n        if (matches) {\n            const numbers = matches[0].match(/\\d+/g);\n            return parseInt(numbers[0]) || 0;\n        }\n        return 0;\n    }\n\n    extractTestCount(output, type) {\n        const patterns = {\n            total: /Tests completed:\\s*(\\d+)/,\n            passed: /(\\d+)\\s+passed/,\n            failed: /(\\d+)\\s+failed/\n        };\n        \n        const match = output.match(patterns[type]);\n        return match ? parseInt(match[1]) : 0;\n    }\n\n    async parseCoverageResults() {\n        try {\n            const coveragePath = '/workspaces/ruv-FANN/ruv-swarm/npm/coverage/coverage-summary.json';\n            const coverage = JSON.parse(await fs.readFile(coveragePath, 'utf8'));\n            \n            return {\n                lines: coverage.total?.lines?.pct || 0,\n                branches: coverage.total?.branches?.pct || 0,\n                functions: coverage.total?.functions?.pct || 0,\n                statements: coverage.total?.statements?.pct || 0\n            };\n        } catch {\n            return { lines: 0, branches: 0, functions: 0, statements: 0 };\n        }\n    }\n\n    calculateErrorRate(results) {\n        if (!results.suites) return 0;\n        \n        const total = results.suites.length;\n        const failed = results.suites.filter(s => s.status !== 'PASSED').length;\n        \n        return total > 0 ? (failed / total) * 100 : 0;\n    }\n\n    calculateThroughput(results) {\n        if (!results.tests) return 0;\n        \n        const totalDuration = results.tests.reduce((sum, test) => sum + (test.duration || 0), 0);\n        const totalTests = results.tests.length;\n        \n        return totalDuration > 0 ? Math.round((totalTests / totalDuration) * 1000) : 0; // tests per second\n    }\n\n    async loadBaseline() {\n        try {\n            const baseline = await fs.readFile(this.baselineFile, 'utf8');\n            return JSON.parse(baseline);\n        } catch {\n            return null;\n        }\n    }\n\n    collectCurrentResults() {\n        const perfStage = this.pipelineResults.stages.find(s => s.name === 'Performance Benchmarks');\n        const loadStage = this.pipelineResults.stages.find(s => s.name === 'Load Testing');\n        const unitStage = this.pipelineResults.stages.find(s => s.name === 'Unit Tests');\n\n        return {\n            timestamp: new Date().toISOString(),\n            commit: this.pipelineResults.buildInfo.commit,\n            performance: perfStage?.data || {},\n            loadTesting: loadStage?.data || {},\n            unitTests: unitStage?.data || {},\n            systemInfo: {\n                platform: process.platform,\n                arch: process.arch,\n                nodeVersion: process.version\n            }\n        };\n    }\n\n    analyzeRegressions() {\n        const baseline = this.pipelineResults.baseline;\n        const current = this.pipelineResults.currentResults;\n\n        // Performance regression checks\n        this.checkPerformanceRegression('SIMD Performance', \n            baseline.performance?.simdPerformance, \n            current.performance?.simdPerformance);\n\n        this.checkPerformanceRegression('Speed Optimization',\n            baseline.performance?.speedOptimization,\n            current.performance?.speedOptimization);\n\n        // Memory regression checks\n        this.checkNumericRegression('Memory Usage',\n            this.parseMemoryValue(baseline.loadTesting?.memoryPeak),\n            this.parseMemoryValue(current.loadTesting?.memoryPeak),\n            this.thresholds.memory);\n\n        // Response time regression checks\n        this.checkNumericRegression('Response Time',\n            baseline.loadTesting?.avgResponseTime,\n            current.loadTesting?.avgResponseTime,\n            this.thresholds.performance);\n\n        // Coverage regression checks\n        this.checkNumericRegression('Test Coverage',\n            baseline.unitTests?.coverage?.lines,\n            current.unitTests?.coverage?.lines,\n            this.thresholds.coverage,\n            true); // Lower is worse for coverage\n    }\n\n    checkPerformanceRegression(metric, baselineValue, currentValue) {\n        if (!baselineValue || !currentValue) return;\n\n        const baselineMultiplier = parseFloat(baselineValue.replace('x', ''));\n        const currentMultiplier = parseFloat(currentValue.replace('x', ''));\n\n        if (currentMultiplier < baselineMultiplier * (1 - this.thresholds.performance)) {\n            this.pipelineResults.regressions.push({\n                metric,\n                baseline: baselineValue,\n                current: currentValue,\n                change: `${((currentMultiplier / baselineMultiplier - 1) * 100).toFixed(1)}%`,\n                severity: 'HIGH'\n            });\n        } else if (currentMultiplier > baselineMultiplier * (1 + this.thresholds.performance)) {\n            this.pipelineResults.improvements.push({\n                metric,\n                baseline: baselineValue,\n                current: currentValue,\n                change: `+${((currentMultiplier / baselineMultiplier - 1) * 100).toFixed(1)}%`\n            });\n        }\n    }\n\n    checkNumericRegression(metric, baselineValue, currentValue, threshold, lowerIsBetter = false) {\n        if (baselineValue === undefined || currentValue === undefined) return;\n\n        const change = (currentValue - baselineValue) / baselineValue;\n        const isRegression = lowerIsBetter ? change < -threshold : change > threshold;\n        const isImprovement = lowerIsBetter ? change > threshold : change < -threshold;\n\n        if (isRegression) {\n            this.pipelineResults.regressions.push({\n                metric,\n                baseline: baselineValue,\n                current: currentValue,\n                change: `${(change * 100).toFixed(1)}%`,\n                severity: Math.abs(change) > threshold * 2 ? 'HIGH' : 'MEDIUM'\n            });\n        } else if (isImprovement) {\n            this.pipelineResults.improvements.push({\n                metric,\n                baseline: baselineValue,\n                current: currentValue,\n                change: `${(change * 100).toFixed(1)}%`\n            });\n        }\n    }\n\n    parseMemoryValue(memoryString) {\n        if (!memoryString) return 0;\n        return parseFloat(memoryString.replace('MB', ''));\n    }\n\n    async saveBaseline(results) {\n        await fs.writeFile(this.baselineFile, JSON.stringify(results, null, 2));\n    }\n\n    checkDeploymentReadiness() {\n        const criticalStages = ['Unit Tests', 'Integration Tests', 'Security Scanning'];\n        const criticalPassed = criticalStages.every(stageName => \n            this.pipelineResults.stages.find(s => s.name === stageName)?.passed\n        );\n\n        return criticalPassed && this.pipelineResults.regressions.length === 0;\n    }\n\n    generateCICDRecommendations() {\n        const recommendations = [];\n\n        if (this.pipelineResults.regressions.length > 0) {\n            recommendations.push('Fix performance regressions before deployment');\n        }\n\n        const failedStages = this.pipelineResults.stages.filter(s => !s.passed);\n        if (failedStages.length > 0) {\n            recommendations.push(`Fix failing stages: ${failedStages.map(s => s.name).join(', ')}`);\n        }\n\n        if (this.pipelineResults.overallStatus === 'PASSED') {\n            recommendations.push('All checks passed - ready for deployment');\n        }\n\n        return recommendations;\n    }\n\n    async generateCICDOutputs(report) {\n        // Generate GitHub Actions outputs\n        const githubOutput = `\ndeployment_ready=${report.cicdIntegration.deploymentReady}\noverall_status=${report.overallStatus}\nregression_count=${report.regressions.length}\nsuccess_rate=${report.summary.successRate}\n`;\n\n        await fs.writeFile('/workspaces/ruv-FANN/ruv-swarm/npm/test/github-outputs.txt', githubOutput);\n\n        // Generate JUnit XML for test reporting\n        const junitXml = this.generateJUnitXML(report);\n        await fs.writeFile('/workspaces/ruv-FANN/ruv-swarm/npm/test/regression-results.xml', junitXml);\n    }\n\n    generateJUnitXML(report) {\n        const testcases = report.stages.map(stage => `\n    <testcase name=\"${stage.name}\" time=\"${stage.duration / 1000}\" classname=\"RegressionPipeline\">\n        ${stage.passed ? '' : `<failure message=\"${stage.errors.join('; ')}\">${stage.errors.join('\\n')}</failure>`}\n    </testcase>`).join('');\n\n        return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuite name=\"Regression Testing Pipeline\" tests=\"${report.stages.length}\" failures=\"${report.summary.failedStages}\" time=\"${report.summary.duration / 1000}\">\n${testcases}\n</testsuite>`;\n    }\n}\n\n// Main execution\nasync function runRegressionPipeline() {\n    try {\n        const pipeline = new RegressionTestingPipeline();\n        const results = await pipeline.runRegressionPipeline();\n        \n        console.log('\\nüéØ REGRESSION PIPELINE SUMMARY');\n        console.log('===============================');\n        console.log(`Overall Status: ${results.overallStatus}`);\n        console.log(`Stages: ${results.summary?.passedStages}/${results.summary?.totalStages} passed`);\n        console.log(`Regressions: ${results.regressions.length}`);\n        console.log(`Improvements: ${results.improvements.length}`);\n        console.log(`Deployment Ready: ${results.cicdIntegration?.deploymentReady ? 'YES' : 'NO'}`);\n\n        process.exit(results.overallStatus === 'PASSED' ? 0 : 1);\n    } catch (error) {\n        console.error('üí• Regression pipeline failed:', error);\n        process.exit(1);\n    }\n}\n\nif (require.main === module) {\n    runRegressionPipeline();\n}\n\nmodule.exports = { RegressionTestingPipeline };"],"mappings":"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","ignoreList":[]}