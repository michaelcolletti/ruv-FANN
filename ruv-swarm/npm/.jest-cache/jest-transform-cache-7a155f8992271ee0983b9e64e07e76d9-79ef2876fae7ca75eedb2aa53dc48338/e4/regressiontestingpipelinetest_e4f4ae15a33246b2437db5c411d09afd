b0fb94909ced82805719345c3b2a207f
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * Regression Testing Pipeline for ruv-swarm
 * Automated CI/CD integration with performance regression detection
 */

const {
  RuvSwarm
} = require('../src/index-enhanced');
const fs = require('fs').promises;
const path = require('path');
const {
  spawn
} = require('child_process');
class RegressionTestingPipeline {
  constructor() {
    this.pipelineResults = {
      timestamp: new Date().toISOString(),
      buildInfo: {
        commit: process.env.GITHUB_SHA || 'local',
        branch: process.env.GITHUB_REF_NAME || 'local',
        buildNumber: process.env.GITHUB_RUN_NUMBER || '0',
        environment: process.env.NODE_ENV || 'test'
      },
      baseline: null,
      currentResults: null,
      regressions: [],
      improvements: [],
      stages: [],
      overallStatus: 'UNKNOWN'
    };
    this.baselineFile = '/workspaces/ruv-FANN/ruv-swarm/npm/test/baseline-performance.json';
    this.thresholds = {
      performance: 0.05,
      // 5% degradation threshold
      memory: 0.10,
      // 10% memory increase threshold
      errorRate: 0.02,
      // 2% error rate increase threshold
      coverage: 0.01 // 1% coverage decrease threshold
    };
  }
  runRegressionPipeline() {
    var _this = this;
    return _asyncToGenerator(function* () {
      console.log('🔄 Starting Regression Testing Pipeline');
      console.log('=======================================\n');
      _this.logBuildInfo();
      try {
        // Stage 1: Environment Setup
        yield _this.runStage('Environment Setup', _this.setupEnvironment.bind(_this));

        // Stage 2: Code Quality Checks
        yield _this.runStage('Code Quality Checks', _this.runCodeQualityChecks.bind(_this));

        // Stage 3: Unit Tests with Coverage
        yield _this.runStage('Unit Tests', _this.runUnitTests.bind(_this));

        // Stage 4: Integration Tests
        yield _this.runStage('Integration Tests', _this.runIntegrationTests.bind(_this));

        // Stage 5: Performance Benchmarks
        yield _this.runStage('Performance Benchmarks', _this.runPerformanceBenchmarks.bind(_this));

        // Stage 6: Load Testing
        yield _this.runStage('Load Testing', _this.runLoadTests.bind(_this));

        // Stage 7: Security Scanning
        yield _this.runStage('Security Scanning', _this.runSecurityScans.bind(_this));

        // Stage 8: Cross-Platform Testing
        yield _this.runStage('Cross-Platform Testing', _this.runCrossPlatformTests.bind(_this));

        // Stage 9: Regression Analysis
        yield _this.runStage('Regression Analysis', _this.performRegressionAnalysis.bind(_this));

        // Stage 10: Report Generation
        yield _this.runStage('Report Generation', _this.generateRegressionReport.bind(_this));
      } catch (error) {
        console.error('❌ Pipeline failed:', error);
        _this.pipelineResults.overallStatus = 'FAILED';
        throw error;
      }
      return _this.pipelineResults;
    })();
  }
  logBuildInfo() {
    console.log('🏗️  Build Information:');
    console.log(`   Commit: ${this.pipelineResults.buildInfo.commit}`);
    console.log(`   Branch: ${this.pipelineResults.buildInfo.branch}`);
    console.log(`   Build: #${this.pipelineResults.buildInfo.buildNumber}`);
    console.log(`   Environment: ${this.pipelineResults.buildInfo.environment}\n`);
  }
  runStage(stageName, stageFunction) {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      console.log(`📋 Stage: ${stageName}`);
      const stage = {
        name: stageName,
        startTime: Date.now(),
        passed: false,
        duration: 0,
        output: [],
        errors: []
      };
      try {
        const result = yield stageFunction();
        stage.passed = result.passed !== false;
        stage.output = result.output || [];
        stage.data = result.data || {};
        console.log(`   ${stage.passed ? '✅' : '❌'} ${stageName} ${stage.passed ? 'passed' : 'failed'}`);
      } catch (error) {
        stage.passed = false;
        stage.errors.push(error.message);
        console.log(`   ❌ ${stageName} failed: ${error.message}`);
      }
      stage.duration = Date.now() - stage.startTime;
      _this2.pipelineResults.stages.push(stage);
      console.log('');
      return stage;
    })();
  }
  setupEnvironment() {
    return _asyncToGenerator(function* () {
      const setupResult = {
        passed: true,
        output: [],
        data: {}
      };
      try {
        // Check Node.js version
        const nodeVersion = process.version;
        setupResult.output.push(`Node.js version: ${nodeVersion}`);

        // Check dependencies
        const packageJson = JSON.parse(yield fs.readFile('/workspaces/ruv-FANN/ruv-swarm/npm/package.json', 'utf8'));
        setupResult.output.push(`Package version: ${packageJson.version}`);

        // Initialize test database
        const testDbPath = '/workspaces/ruv-FANN/ruv-swarm/npm/test/regression-test.db';
        try {
          yield fs.unlink(testDbPath);
        } catch (error) {
          // File doesn't exist, that's fine
        }

        // Set environment variables
        process.env.NODE_ENV = 'test';
        process.env.RUV_SWARM_TEST_MODE = 'regression';
        setupResult.data = {
          nodeVersion,
          packageVersion: packageJson.version,
          timestamp: new Date().toISOString()
        };
      } catch (error) {
        setupResult.passed = false;
        setupResult.errors = [error.message];
      }
      return setupResult;
    })();
  }
  runCodeQualityChecks() {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      const qualityResult = {
        passed: true,
        output: [],
        data: {
          linting: {
            passed: false,
            issues: 0
          },
          formatting: {
            passed: false,
            issues: 0
          },
          typeChecking: {
            passed: false,
            issues: 0
          }
        }
      };
      try {
        // Run ESLint
        const lintResult = yield _this3.runCommand('npm run lint:check', {
          cwd: '/workspaces/ruv-FANN/ruv-swarm/npm'
        });
        qualityResult.data.linting.passed = lintResult.success;
        qualityResult.data.linting.issues = _this3.countLintIssues(lintResult.output);
        qualityResult.output.push(`Linting: ${lintResult.success ? 'PASSED' : 'FAILED'} (${qualityResult.data.linting.issues} issues)`);

        // Check if TypeScript definitions exist
        const tsFiles = yield _this3.findFiles('/workspaces/ruv-FANN/ruv-swarm/npm/src', '.d.ts');
        qualityResult.data.typeChecking.passed = tsFiles.length > 0;
        qualityResult.output.push(`Type definitions: ${tsFiles.length} files found`);
        qualityResult.passed = qualityResult.data.linting.passed && qualityResult.data.linting.issues < 10; // Allow up to 10 linting issues
      } catch (error) {
        qualityResult.passed = false;
        qualityResult.output.push(`Quality check error: ${error.message}`);
      }
      return qualityResult;
    })();
  }
  runUnitTests() {
    var _this4 = this;
    return _asyncToGenerator(function* () {
      const unitTestResult = {
        passed: true,
        output: [],
        data: {
          testsRun: 0,
          testsPassed: 0,
          testsFailed: 0,
          coverage: {
            lines: 0,
            branches: 0,
            functions: 0,
            statements: 0
          }
        }
      };
      try {
        // Run unit tests with coverage
        const testResult = yield _this4.runCommand('npm run test:coverage', {
          cwd: '/workspaces/ruv-FANN/ruv-swarm/npm',
          timeout: 120000
        });

        // Parse test results
        const testOutput = testResult.output;
        unitTestResult.data.testsRun = _this4.extractTestCount(testOutput, 'total');
        unitTestResult.data.testsPassed = _this4.extractTestCount(testOutput, 'passed');
        unitTestResult.data.testsFailed = _this4.extractTestCount(testOutput, 'failed');

        // Parse coverage results
        const coverageData = yield _this4.parseCoverageResults();
        unitTestResult.data.coverage = coverageData;
        unitTestResult.passed = testResult.success && unitTestResult.data.testsFailed === 0;
        unitTestResult.output.push(`Tests: ${unitTestResult.data.testsPassed}/${unitTestResult.data.testsRun} passed`);
        unitTestResult.output.push(`Coverage: ${coverageData.lines}% lines, ${coverageData.branches}% branches`);
      } catch (error) {
        unitTestResult.passed = false;
        unitTestResult.output.push(`Unit test error: ${error.message}`);
      }
      return unitTestResult;
    })();
  }
  runIntegrationTests() {
    var _this5 = this;
    return _asyncToGenerator(function* () {
      const integrationResult = {
        passed: true,
        output: [],
        data: {
          scenarios: [],
          totalTime: 0,
          errorRate: 0
        }
      };
      try {
        // Run integration test suite
        const testResult = yield _this5.runCommand('node test/integration/run-integration-tests.js', {
          cwd: '/workspaces/ruv-FANN/ruv-swarm/npm',
          timeout: 300000 // 5 minutes
        });
        integrationResult.passed = testResult.success;
        integrationResult.output.push(`Integration tests: ${testResult.success ? 'PASSED' : 'FAILED'}`);

        // Parse integration test results if available
        try {
          const resultsFile = '/workspaces/ruv-FANN/ruv-swarm/npm/test-results/integration-results.json';
          const results = JSON.parse(yield fs.readFile(resultsFile, 'utf8'));
          integrationResult.data.scenarios = results.suites || [];
          integrationResult.data.totalTime = results.duration || 0;
          integrationResult.data.errorRate = _this5.calculateErrorRate(results);
        } catch (error) {
          // Results file not found, use basic data
          integrationResult.output.push('Integration results file not found, using basic metrics');
        }
      } catch (error) {
        integrationResult.passed = false;
        integrationResult.output.push(`Integration test error: ${error.message}`);
      }
      return integrationResult;
    })();
  }
  runPerformanceBenchmarks() {
    var _this6 = this;
    return _asyncToGenerator(function* () {
      const perfResult = {
        passed: true,
        output: [],
        data: {
          simdPerformance: null,
          speedOptimization: null,
          memoryUsage: null,
          throughput: null
        }
      };
      try {
        // Run performance validation
        const perfTestResult = yield _this6.runCommand('node test/comprehensive-performance-validation.test.js', {
          cwd: '/workspaces/ruv-FANN/ruv-swarm/npm',
          timeout: 600000 // 10 minutes
        });
        perfResult.passed = perfTestResult.success;

        // Load performance results
        try {
          var _results$performance, _results$performance2, _results$performance3;
          const resultsFile = '/workspaces/ruv-FANN/ruv-swarm/npm/test/validation-report.json';
          const results = JSON.parse(yield fs.readFile(resultsFile, 'utf8'));
          perfResult.data = {
            simdPerformance: (_results$performance = results.performance) === null || _results$performance === void 0 || (_results$performance = _results$performance.simd) === null || _results$performance === void 0 ? void 0 : _results$performance.actual,
            speedOptimization: (_results$performance2 = results.performance) === null || _results$performance2 === void 0 || (_results$performance2 = _results$performance2.speed) === null || _results$performance2 === void 0 ? void 0 : _results$performance2.actual,
            memoryUsage: (_results$performance3 = results.performance) === null || _results$performance3 === void 0 || (_results$performance3 = _results$performance3.memoryEfficiency) === null || _results$performance3 === void 0 ? void 0 : _results$performance3.actual,
            throughput: _this6.calculateThroughput(results)
          };
          perfResult.output.push(`SIMD Performance: ${perfResult.data.simdPerformance || 'N/A'}`);
          perfResult.output.push(`Speed Optimization: ${perfResult.data.speedOptimization || 'N/A'}`);
          perfResult.output.push(`Memory Usage: ${perfResult.data.memoryUsage || 'N/A'}`);
        } catch (error) {
          perfResult.output.push('Performance results file not found');
        }
      } catch (error) {
        perfResult.passed = false;
        perfResult.output.push(`Performance benchmark error: ${error.message}`);
      }
      return perfResult;
    })();
  }
  runLoadTests() {
    var _this7 = this;
    return _asyncToGenerator(function* () {
      const loadResult = {
        passed: true,
        output: [],
        data: {
          maxAgents: 0,
          avgResponseTime: 0,
          memoryPeak: 0,
          errorRate: 0
        }
      };
      try {
        // Run load testing suite
        const loadTestResult = yield _this7.runCommand('node test/load-testing-suite.test.js', {
          cwd: '/workspaces/ruv-FANN/ruv-swarm/npm',
          timeout: 1800000 // 30 minutes
        });
        loadResult.passed = loadTestResult.success;

        // Load test results
        try {
          var _results$performance4, _results$performance5, _results$performance6, _results$performance7;
          const resultsFile = '/workspaces/ruv-FANN/ruv-swarm/npm/test/load-test-report.json';
          const results = JSON.parse(yield fs.readFile(resultsFile, 'utf8'));
          loadResult.data = {
            maxAgents: ((_results$performance4 = results.performance) === null || _results$performance4 === void 0 ? void 0 : _results$performance4.maxConcurrentAgents) || 0,
            avgResponseTime: ((_results$performance5 = results.performance) === null || _results$performance5 === void 0 ? void 0 : _results$performance5.avgResponseTime) || 0,
            memoryPeak: ((_results$performance6 = results.performance) === null || _results$performance6 === void 0 ? void 0 : _results$performance6.memoryPeak) || 0,
            errorRate: parseFloat((_results$performance7 = results.performance) === null || _results$performance7 === void 0 ? void 0 : _results$performance7.errorRate) || 0
          };
          loadResult.output.push(`Max Agents: ${loadResult.data.maxAgents}`);
          loadResult.output.push(`Avg Response: ${loadResult.data.avgResponseTime}ms`);
          loadResult.output.push(`Memory Peak: ${loadResult.data.memoryPeak}MB`);
          loadResult.output.push(`Error Rate: ${loadResult.data.errorRate}%`);
        } catch (error) {
          loadResult.output.push('Load test results file not found');
        }
      } catch (error) {
        loadResult.passed = false;
        loadResult.output.push(`Load test error: ${error.message}`);
      }
      return loadResult;
    })();
  }
  runSecurityScans() {
    var _this8 = this;
    return _asyncToGenerator(function* () {
      const securityResult = {
        passed: true,
        output: [],
        data: {
          securityScore: 0,
          vulnerabilities: 0,
          memoryLeaks: 0,
          securityLevel: 'UNKNOWN'
        }
      };
      try {
        // Run security audit
        const secTestResult = yield _this8.runCommand('node test/security-audit.test.js', {
          cwd: '/workspaces/ruv-FANN/ruv-swarm/npm',
          timeout: 600000 // 10 minutes
        });

        // Load security results
        try {
          var _results$overallSecur, _results$vulnerabilit, _results$memoryTests, _results$overallSecur2;
          const resultsFile = '/workspaces/ruv-FANN/ruv-swarm/npm/test/security-audit-report.json';
          const results = JSON.parse(yield fs.readFile(resultsFile, 'utf8'));
          securityResult.data = {
            securityScore: ((_results$overallSecur = results.overallSecurity) === null || _results$overallSecur === void 0 ? void 0 : _results$overallSecur.score) || 0,
            vulnerabilities: ((_results$vulnerabilit = results.vulnerabilities) === null || _results$vulnerabilit === void 0 ? void 0 : _results$vulnerabilit.length) || 0,
            memoryLeaks: ((_results$memoryTests = results.memoryTests) === null || _results$memoryTests === void 0 ? void 0 : _results$memoryTests.filter(t => !t.passed).length) || 0,
            securityLevel: ((_results$overallSecur2 = results.overallSecurity) === null || _results$overallSecur2 === void 0 ? void 0 : _results$overallSecur2.level) || 'UNKNOWN'
          };
          securityResult.passed = securityResult.data.securityLevel !== 'CRITICAL' && securityResult.data.securityScore >= 70;
          securityResult.output.push(`Security Score: ${securityResult.data.securityScore}/100`);
          securityResult.output.push(`Security Level: ${securityResult.data.securityLevel}`);
          securityResult.output.push(`Vulnerabilities: ${securityResult.data.vulnerabilities}`);
        } catch (error) {
          securityResult.output.push('Security results file not found');
          securityResult.passed = false;
        }
      } catch (error) {
        securityResult.passed = false;
        securityResult.output.push(`Security scan error: ${error.message}`);
      }
      return securityResult;
    })();
  }
  runCrossPlatformTests() {
    return _asyncToGenerator(function* () {
      const platformResult = {
        passed: true,
        output: [],
        data: {
          platform: process.platform,
          arch: process.arch,
          nodeVersion: process.version,
          wasmSupport: false,
          sqliteSupport: false
        }
      };
      try {
        // Test WASM support
        const ruvSwarm = yield RuvSwarm.initialize();
        platformResult.data.wasmSupport = (yield ruvSwarm.detectSIMDSupport()) !== undefined;

        // Test SQLite support
        try {
          const {
            PersistenceManager
          } = require('/workspaces/ruv-FANN/ruv-swarm/npm/src/persistence');
          const pm = new PersistenceManager(':memory:');
          yield pm.initialize();
          platformResult.data.sqliteSupport = true;
        } catch (error) {
          platformResult.data.sqliteSupport = false;
        }
        platformResult.passed = platformResult.data.wasmSupport && platformResult.data.sqliteSupport;
        platformResult.output.push(`Platform: ${platformResult.data.platform} ${platformResult.data.arch}`);
        platformResult.output.push(`WASM Support: ${platformResult.data.wasmSupport ? 'YES' : 'NO'}`);
        platformResult.output.push(`SQLite Support: ${platformResult.data.sqliteSupport ? 'YES' : 'NO'}`);
      } catch (error) {
        platformResult.passed = false;
        platformResult.output.push(`Cross-platform test error: ${error.message}`);
      }
      return platformResult;
    })();
  }
  performRegressionAnalysis() {
    var _this9 = this;
    return _asyncToGenerator(function* () {
      const regressionResult = {
        passed: true,
        output: [],
        data: {
          baselineLoaded: false,
          regressionCount: 0,
          improvementCount: 0,
          significantChanges: []
        }
      };
      try {
        // Load baseline performance data
        _this9.pipelineResults.baseline = yield _this9.loadBaseline();
        regressionResult.data.baselineLoaded = _this9.pipelineResults.baseline !== null;
        if (_this9.pipelineResults.baseline) {
          // Collect current results
          _this9.pipelineResults.currentResults = _this9.collectCurrentResults();

          // Analyze for regressions
          _this9.analyzeRegressions();
          regressionResult.data.regressionCount = _this9.pipelineResults.regressions.length;
          regressionResult.data.improvementCount = _this9.pipelineResults.improvements.length;
          regressionResult.data.significantChanges = [..._this9.pipelineResults.regressions, ..._this9.pipelineResults.improvements];
          regressionResult.passed = _this9.pipelineResults.regressions.length === 0;
          regressionResult.output.push(`Regressions detected: ${regressionResult.data.regressionCount}`);
          regressionResult.output.push(`Improvements detected: ${regressionResult.data.improvementCount}`);
          if (regressionResult.data.regressionCount > 0) {
            regressionResult.output.push('❌ Regression analysis FAILED - performance degradation detected');
          } else {
            regressionResult.output.push('✅ Regression analysis PASSED - no performance degradation');
          }
        } else {
          regressionResult.output.push('No baseline found - saving current results as baseline');
          yield _this9.saveBaseline(_this9.collectCurrentResults());
        }
      } catch (error) {
        regressionResult.passed = false;
        regressionResult.output.push(`Regression analysis error: ${error.message}`);
      }
      return regressionResult;
    })();
  }
  generateRegressionReport() {
    var _this0 = this;
    return _asyncToGenerator(function* () {
      const reportResult = {
        passed: true,
        output: [],
        data: {}
      };
      try {
        // Determine overall pipeline status
        const passedStages = _this0.pipelineResults.stages.filter(s => s.passed).length;
        const totalStages = _this0.pipelineResults.stages.length;
        const successRate = passedStages / totalStages * 100;
        _this0.pipelineResults.overallStatus = successRate >= 80 ? 'PASSED' : 'FAILED';

        // Generate comprehensive report
        const report = _objectSpread(_objectSpread({}, _this0.pipelineResults), {}, {
          summary: {
            totalStages,
            passedStages,
            failedStages: totalStages - passedStages,
            successRate: successRate.toFixed(1) + '%',
            duration: _this0.pipelineResults.stages.reduce((sum, stage) => sum + stage.duration, 0)
          },
          cicdIntegration: {
            shouldDeploy: _this0.pipelineResults.overallStatus === 'PASSED' && _this0.pipelineResults.regressions.length === 0,
            deploymentReady: _this0.checkDeploymentReadiness(),
            recommendations: _this0.generateCICDRecommendations()
          }
        });

        // Save reports
        const reportPath = '/workspaces/ruv-FANN/ruv-swarm/npm/test/regression-pipeline-report.json';
        yield fs.writeFile(reportPath, JSON.stringify(report, null, 2));

        // Generate CI/CD compatible outputs
        yield _this0.generateCICDOutputs(report);
        reportResult.output.push(`Overall Status: ${_this0.pipelineResults.overallStatus}`);
        reportResult.output.push(`Success Rate: ${report.summary.successRate}`);
        reportResult.output.push(`Duration: ${Math.round(report.summary.duration / 1000)}s`);
        reportResult.output.push(`Report saved to: ${reportPath}`);
      } catch (error) {
        reportResult.passed = false;
        reportResult.output.push(`Report generation error: ${error.message}`);
      }
      return reportResult;
    })();
  }

  // Helper methods
  runCommand(_x) {
    return _asyncToGenerator(function* (command, options = {}) {
      return new Promise(resolve => {
        const [cmd, ...args] = command.split(' ');
        const process = spawn(cmd, args, _objectSpread({
          stdio: 'pipe',
          cwd: options.cwd || '/workspaces/ruv-FANN/ruv-swarm/npm'
        }, options));
        let output = '';
        let error = '';
        process.stdout.on('data', data => output += data.toString());
        process.stderr.on('data', data => error += data.toString());
        process.on('close', code => {
          resolve({
            success: code === 0,
            output: output || error,
            exitCode: code
          });
        });
        if (options.timeout) {
          setTimeout(() => {
            process.kill();
            resolve({
              success: false,
              output: 'Command timeout',
              exitCode: -1
            });
          }, options.timeout);
        }
      });
    }).apply(this, arguments);
  }
  findFiles(directory, extension) {
    return _asyncToGenerator(function* () {
      try {
        const files = yield fs.readdir(directory, {
          recursive: true
        });
        return files.filter(file => file.endsWith(extension));
      } catch {
        return [];
      }
    })();
  }
  countLintIssues(output) {
    const matches = output.match(/\d+ problems? \(\d+ errors?, \d+ warnings?\)/);
    if (matches) {
      const numbers = matches[0].match(/\d+/g);
      return parseInt(numbers[0]) || 0;
    }
    return 0;
  }
  extractTestCount(output, type) {
    const patterns = {
      total: /Tests completed:\s*(\d+)/,
      passed: /(\d+)\s+passed/,
      failed: /(\d+)\s+failed/
    };
    const match = output.match(patterns[type]);
    return match ? parseInt(match[1]) : 0;
  }
  parseCoverageResults() {
    return _asyncToGenerator(function* () {
      try {
        var _coverage$total, _coverage$total2, _coverage$total3, _coverage$total4;
        const coveragePath = '/workspaces/ruv-FANN/ruv-swarm/npm/coverage/coverage-summary.json';
        const coverage = JSON.parse(yield fs.readFile(coveragePath, 'utf8'));
        return {
          lines: ((_coverage$total = coverage.total) === null || _coverage$total === void 0 || (_coverage$total = _coverage$total.lines) === null || _coverage$total === void 0 ? void 0 : _coverage$total.pct) || 0,
          branches: ((_coverage$total2 = coverage.total) === null || _coverage$total2 === void 0 || (_coverage$total2 = _coverage$total2.branches) === null || _coverage$total2 === void 0 ? void 0 : _coverage$total2.pct) || 0,
          functions: ((_coverage$total3 = coverage.total) === null || _coverage$total3 === void 0 || (_coverage$total3 = _coverage$total3.functions) === null || _coverage$total3 === void 0 ? void 0 : _coverage$total3.pct) || 0,
          statements: ((_coverage$total4 = coverage.total) === null || _coverage$total4 === void 0 || (_coverage$total4 = _coverage$total4.statements) === null || _coverage$total4 === void 0 ? void 0 : _coverage$total4.pct) || 0
        };
      } catch {
        return {
          lines: 0,
          branches: 0,
          functions: 0,
          statements: 0
        };
      }
    })();
  }
  calculateErrorRate(results) {
    if (!results.suites) return 0;
    const total = results.suites.length;
    const failed = results.suites.filter(s => s.status !== 'PASSED').length;
    return total > 0 ? failed / total * 100 : 0;
  }
  calculateThroughput(results) {
    if (!results.tests) return 0;
    const totalDuration = results.tests.reduce((sum, test) => sum + (test.duration || 0), 0);
    const totalTests = results.tests.length;
    return totalDuration > 0 ? Math.round(totalTests / totalDuration * 1000) : 0; // tests per second
  }
  loadBaseline() {
    var _this1 = this;
    return _asyncToGenerator(function* () {
      try {
        const baseline = yield fs.readFile(_this1.baselineFile, 'utf8');
        return JSON.parse(baseline);
      } catch {
        return null;
      }
    })();
  }
  collectCurrentResults() {
    const perfStage = this.pipelineResults.stages.find(s => s.name === 'Performance Benchmarks');
    const loadStage = this.pipelineResults.stages.find(s => s.name === 'Load Testing');
    const unitStage = this.pipelineResults.stages.find(s => s.name === 'Unit Tests');
    return {
      timestamp: new Date().toISOString(),
      commit: this.pipelineResults.buildInfo.commit,
      performance: (perfStage === null || perfStage === void 0 ? void 0 : perfStage.data) || {},
      loadTesting: (loadStage === null || loadStage === void 0 ? void 0 : loadStage.data) || {},
      unitTests: (unitStage === null || unitStage === void 0 ? void 0 : unitStage.data) || {},
      systemInfo: {
        platform: process.platform,
        arch: process.arch,
        nodeVersion: process.version
      }
    };
  }
  analyzeRegressions() {
    var _baseline$performance, _current$performance, _baseline$performance2, _current$performance2, _baseline$loadTesting, _current$loadTesting, _baseline$loadTesting2, _current$loadTesting2, _baseline$unitTests, _current$unitTests;
    const baseline = this.pipelineResults.baseline;
    const current = this.pipelineResults.currentResults;

    // Performance regression checks
    this.checkPerformanceRegression('SIMD Performance', (_baseline$performance = baseline.performance) === null || _baseline$performance === void 0 ? void 0 : _baseline$performance.simdPerformance, (_current$performance = current.performance) === null || _current$performance === void 0 ? void 0 : _current$performance.simdPerformance);
    this.checkPerformanceRegression('Speed Optimization', (_baseline$performance2 = baseline.performance) === null || _baseline$performance2 === void 0 ? void 0 : _baseline$performance2.speedOptimization, (_current$performance2 = current.performance) === null || _current$performance2 === void 0 ? void 0 : _current$performance2.speedOptimization);

    // Memory regression checks
    this.checkNumericRegression('Memory Usage', this.parseMemoryValue((_baseline$loadTesting = baseline.loadTesting) === null || _baseline$loadTesting === void 0 ? void 0 : _baseline$loadTesting.memoryPeak), this.parseMemoryValue((_current$loadTesting = current.loadTesting) === null || _current$loadTesting === void 0 ? void 0 : _current$loadTesting.memoryPeak), this.thresholds.memory);

    // Response time regression checks
    this.checkNumericRegression('Response Time', (_baseline$loadTesting2 = baseline.loadTesting) === null || _baseline$loadTesting2 === void 0 ? void 0 : _baseline$loadTesting2.avgResponseTime, (_current$loadTesting2 = current.loadTesting) === null || _current$loadTesting2 === void 0 ? void 0 : _current$loadTesting2.avgResponseTime, this.thresholds.performance);

    // Coverage regression checks
    this.checkNumericRegression('Test Coverage', (_baseline$unitTests = baseline.unitTests) === null || _baseline$unitTests === void 0 || (_baseline$unitTests = _baseline$unitTests.coverage) === null || _baseline$unitTests === void 0 ? void 0 : _baseline$unitTests.lines, (_current$unitTests = current.unitTests) === null || _current$unitTests === void 0 || (_current$unitTests = _current$unitTests.coverage) === null || _current$unitTests === void 0 ? void 0 : _current$unitTests.lines, this.thresholds.coverage, true); // Lower is worse for coverage
  }
  checkPerformanceRegression(metric, baselineValue, currentValue) {
    if (!baselineValue || !currentValue) return;
    const baselineMultiplier = parseFloat(baselineValue.replace('x', ''));
    const currentMultiplier = parseFloat(currentValue.replace('x', ''));
    if (currentMultiplier < baselineMultiplier * (1 - this.thresholds.performance)) {
      this.pipelineResults.regressions.push({
        metric,
        baseline: baselineValue,
        current: currentValue,
        change: `${((currentMultiplier / baselineMultiplier - 1) * 100).toFixed(1)}%`,
        severity: 'HIGH'
      });
    } else if (currentMultiplier > baselineMultiplier * (1 + this.thresholds.performance)) {
      this.pipelineResults.improvements.push({
        metric,
        baseline: baselineValue,
        current: currentValue,
        change: `+${((currentMultiplier / baselineMultiplier - 1) * 100).toFixed(1)}%`
      });
    }
  }
  checkNumericRegression(metric, baselineValue, currentValue, threshold, lowerIsBetter = false) {
    if (baselineValue === undefined || currentValue === undefined) return;
    const change = (currentValue - baselineValue) / baselineValue;
    const isRegression = lowerIsBetter ? change < -threshold : change > threshold;
    const isImprovement = lowerIsBetter ? change > threshold : change < -threshold;
    if (isRegression) {
      this.pipelineResults.regressions.push({
        metric,
        baseline: baselineValue,
        current: currentValue,
        change: `${(change * 100).toFixed(1)}%`,
        severity: Math.abs(change) > threshold * 2 ? 'HIGH' : 'MEDIUM'
      });
    } else if (isImprovement) {
      this.pipelineResults.improvements.push({
        metric,
        baseline: baselineValue,
        current: currentValue,
        change: `${(change * 100).toFixed(1)}%`
      });
    }
  }
  parseMemoryValue(memoryString) {
    if (!memoryString) return 0;
    return parseFloat(memoryString.replace('MB', ''));
  }
  saveBaseline(results) {
    var _this10 = this;
    return _asyncToGenerator(function* () {
      yield fs.writeFile(_this10.baselineFile, JSON.stringify(results, null, 2));
    })();
  }
  checkDeploymentReadiness() {
    const criticalStages = ['Unit Tests', 'Integration Tests', 'Security Scanning'];
    const criticalPassed = criticalStages.every(stageName => {
      var _this$pipelineResults;
      return (_this$pipelineResults = this.pipelineResults.stages.find(s => s.name === stageName)) === null || _this$pipelineResults === void 0 ? void 0 : _this$pipelineResults.passed;
    });
    return criticalPassed && this.pipelineResults.regressions.length === 0;
  }
  generateCICDRecommendations() {
    const recommendations = [];
    if (this.pipelineResults.regressions.length > 0) {
      recommendations.push('Fix performance regressions before deployment');
    }
    const failedStages = this.pipelineResults.stages.filter(s => !s.passed);
    if (failedStages.length > 0) {
      recommendations.push(`Fix failing stages: ${failedStages.map(s => s.name).join(', ')}`);
    }
    if (this.pipelineResults.overallStatus === 'PASSED') {
      recommendations.push('All checks passed - ready for deployment');
    }
    return recommendations;
  }
  generateCICDOutputs(report) {
    var _this11 = this;
    return _asyncToGenerator(function* () {
      // Generate GitHub Actions outputs
      const githubOutput = `
deployment_ready=${report.cicdIntegration.deploymentReady}
overall_status=${report.overallStatus}
regression_count=${report.regressions.length}
success_rate=${report.summary.successRate}
`;
      yield fs.writeFile('/workspaces/ruv-FANN/ruv-swarm/npm/test/github-outputs.txt', githubOutput);

      // Generate JUnit XML for test reporting
      const junitXml = _this11.generateJUnitXML(report);
      yield fs.writeFile('/workspaces/ruv-FANN/ruv-swarm/npm/test/regression-results.xml', junitXml);
    })();
  }
  generateJUnitXML(report) {
    const testcases = report.stages.map(stage => `
    <testcase name="${stage.name}" time="${stage.duration / 1000}" classname="RegressionPipeline">
        ${stage.passed ? '' : `<failure message="${stage.errors.join('; ')}">${stage.errors.join('\n')}</failure>`}
    </testcase>`).join('');
    return `<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="Regression Testing Pipeline" tests="${report.stages.length}" failures="${report.summary.failedStages}" time="${report.summary.duration / 1000}">
${testcases}
</testsuite>`;
  }
}

// Main execution
function runRegressionPipeline() {
  return _runRegressionPipeline.apply(this, arguments);
}
function _runRegressionPipeline() {
  _runRegressionPipeline = _asyncToGenerator(function* () {
    try {
      var _results$summary, _results$summary2, _results$cicdIntegrat;
      const pipeline = new RegressionTestingPipeline();
      const results = yield pipeline.runRegressionPipeline();
      console.log('\n🎯 REGRESSION PIPELINE SUMMARY');
      console.log('===============================');
      console.log(`Overall Status: ${results.overallStatus}`);
      console.log(`Stages: ${(_results$summary = results.summary) === null || _results$summary === void 0 ? void 0 : _results$summary.passedStages}/${(_results$summary2 = results.summary) === null || _results$summary2 === void 0 ? void 0 : _results$summary2.totalStages} passed`);
      console.log(`Regressions: ${results.regressions.length}`);
      console.log(`Improvements: ${results.improvements.length}`);
      console.log(`Deployment Ready: ${(_results$cicdIntegrat = results.cicdIntegration) !== null && _results$cicdIntegrat !== void 0 && _results$cicdIntegrat.deploymentReady ? 'YES' : 'NO'}`);
      process.exit(results.overallStatus === 'PASSED' ? 0 : 1);
    } catch (error) {
      console.error('💥 Regression pipeline failed:', error);
      process.exit(1);
    }
  });
  return _runRegressionPipeline.apply(this, arguments);
}
if (require.main === module) {
  runRegressionPipeline();
}
module.exports = {
  RegressionTestingPipeline
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,