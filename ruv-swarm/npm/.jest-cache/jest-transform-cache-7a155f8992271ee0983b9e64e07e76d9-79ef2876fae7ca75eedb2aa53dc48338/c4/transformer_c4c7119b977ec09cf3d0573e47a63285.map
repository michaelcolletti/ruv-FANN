{"version":3,"names":["cov_1hneau4xw4","actualCoverage","asyncGeneratorStep","n","t","e","r","o","a","c","i","u","value","done","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","ownKeys","Object","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","push","_objectSpread","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","configurable","writable","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","NeuralModel","TransformerModel","constructor","config","b","f","s","dimensions","heads","layers","ffDimensions","maxSequenceLength","vocabularySize","dropoutRate","headDimension","Math","floor","positionalEncoding","createPositionalEncoding","attentionWeights","Map","layerNorms","feedForwardWeights","initializeWeights","layer","set","query","createWeight","key","output","gamma","Float32Array","fill","beta","w1","b1","w2","b2","outputWeights","projection","bias","shape","size","reduce","weight","scale","sqrt","random","encoding","pos","angle","pow","sin","cos","forward","_x","_this","input","training","batchSize","sequenceLength","x","tokenEmbedding","addPositionalEncoding","dropout","attentionOutput","multiHeadAttention","layerNorm","add","ffOutput","feedForward","outputProjection","_x2","_x3","_this2","layerIndex","weights","get","Q","matmul","K","V","QHeads","reshapeForHeads","KHeads","VHeads","attentionScores","h","j","score","d","qIdx","kIdx","scoreIdx","softmax","attendedValues","applyAttentionWeights","concatenated","concatenateHeads","hidden","addBias","relu","normParams","lastDim","normalized","mean","variance","diff","std","idx","train","_x4","_this3","trainingData","options","epochs","learningRate","warmupSteps","validationSplit","trainingHistory","splitIndex","trainData","slice","valData","globalStep","epoch","epochLoss","batchCount","shuffled","shuffle","batch","min","currentLR","getAdaptiveLearningRate","predictions","inputs","loss","crossEntropyLoss","targets","backward","valLoss","validate","avgTrainLoss","trainLoss","console","log","toFixed","history","finalLoss","modelType","baseLR","step","arg1","arg2","lr","tokenIndices","embedded","embeddings","result","embIdx","posIdx","tensor","reshaped","srcIdx","dstIdx","scores","softmaxScores","stride","maxScore","Infinity","max","sumExp","exp","values","sum","weightIdx","valueIdx","outIdx","getConfig","type","parameters","countParameters","count"],"sources":["transformer.js"],"sourcesContent":["/**\n * Transformer Neural Network Model\n * Implements multi-head attention mechanism with positional encoding\n */\n\nimport { NeuralModel } from './base.js';\n\nclass TransformerModel extends NeuralModel {\n  constructor(config = {}) {\n    super('transformer');\n    \n    // Transformer configuration\n    this.config = {\n      dimensions: config.dimensions || 512,\n      heads: config.heads || 8,\n      layers: config.layers || 6,\n      ffDimensions: config.ffDimensions || 2048,\n      maxSequenceLength: config.maxSequenceLength || 1024,\n      vocabularySize: config.vocabularySize || 50000,\n      dropoutRate: config.dropoutRate || 0.1,\n      ...config\n    };\n\n    // Initialize components\n    this.headDimension = Math.floor(this.config.dimensions / this.config.heads);\n    this.positionalEncoding = this.createPositionalEncoding();\n    this.attentionWeights = new Map();\n    this.layerNorms = [];\n    this.feedForwardWeights = [];\n    \n    this.initializeWeights();\n  }\n\n  initializeWeights() {\n    // Initialize multi-head attention weights for each layer\n    for (let layer = 0; layer < this.config.layers; layer++) {\n      this.attentionWeights.set(`layer_${layer}`, {\n        query: this.createWeight([this.config.dimensions, this.config.dimensions]),\n        key: this.createWeight([this.config.dimensions, this.config.dimensions]),\n        value: this.createWeight([this.config.dimensions, this.config.dimensions]),\n        output: this.createWeight([this.config.dimensions, this.config.dimensions])\n      });\n\n      // Layer normalization parameters\n      this.layerNorms.push({\n        gamma: new Float32Array(this.config.dimensions).fill(1.0),\n        beta: new Float32Array(this.config.dimensions).fill(0.0)\n      });\n\n      // Feed-forward network weights\n      this.feedForwardWeights.push({\n        w1: this.createWeight([this.config.dimensions, this.config.ffDimensions]),\n        b1: new Float32Array(this.config.ffDimensions).fill(0.0),\n        w2: this.createWeight([this.config.ffDimensions, this.config.dimensions]),\n        b2: new Float32Array(this.config.dimensions).fill(0.0)\n      });\n    }\n\n    // Output layer weights\n    this.outputWeights = {\n      projection: this.createWeight([this.config.dimensions, this.config.vocabularySize]),\n      bias: new Float32Array(this.config.vocabularySize).fill(0.0)\n    };\n  }\n\n  createWeight(shape) {\n    const size = shape.reduce((a, b) => a * b, 1);\n    const weight = new Float32Array(size);\n    \n    // Xavier/Glorot initialization\n    const scale = Math.sqrt(2.0 / (shape[0] + shape[1]));\n    for (let i = 0; i < size; i++) {\n      weight[i] = (Math.random() * 2 - 1) * scale;\n    }\n    \n    return weight;\n  }\n\n  createPositionalEncoding() {\n    const encoding = new Float32Array(this.config.maxSequenceLength * this.config.dimensions);\n    \n    for (let pos = 0; pos < this.config.maxSequenceLength; pos++) {\n      for (let i = 0; i < this.config.dimensions; i++) {\n        const angle = pos / Math.pow(10000, (2 * Math.floor(i / 2)) / this.config.dimensions);\n        \n        if (i % 2 === 0) {\n          encoding[pos * this.config.dimensions + i] = Math.sin(angle);\n        } else {\n          encoding[pos * this.config.dimensions + i] = Math.cos(angle);\n        }\n      }\n    }\n    \n    return encoding;\n  }\n\n  async forward(input, training = false) {\n    // Input should be token indices [batch_size, sequence_length]\n    const batchSize = input.shape[0];\n    const sequenceLength = input.shape[1];\n    \n    // Token embedding (simplified - in practice would use embedding layer)\n    let x = this.tokenEmbedding(input);\n    \n    // Add positional encoding\n    x = this.addPositionalEncoding(x, sequenceLength);\n    \n    // Apply dropout if training\n    if (training && this.config.dropoutRate > 0) {\n      x = this.dropout(x, this.config.dropoutRate);\n    }\n    \n    // Process through transformer layers\n    for (let layer = 0; layer < this.config.layers; layer++) {\n      // Multi-head self-attention\n      const attentionOutput = await this.multiHeadAttention(x, layer, training);\n      \n      // Add & Norm\n      x = this.layerNorm(this.add(x, attentionOutput), this.layerNorms[layer]);\n      \n      // Feed-forward network\n      const ffOutput = this.feedForward(x, layer);\n      \n      // Add & Norm\n      x = this.layerNorm(this.add(x, ffOutput), this.layerNorms[layer]);\n    }\n    \n    // Final output projection\n    const output = this.outputProjection(x);\n    \n    return output;\n  }\n\n  async multiHeadAttention(input, layerIndex, training = false) {\n    const weights = this.attentionWeights.get(`layer_${layerIndex}`);\n    const batchSize = input.shape[0];\n    const sequenceLength = input.shape[1];\n    \n    // Linear projections for Q, K, V\n    const Q = this.matmul(input, weights.query);\n    const K = this.matmul(input, weights.key);\n    const V = this.matmul(input, weights.value);\n    \n    // Reshape for multi-head attention\n    const QHeads = this.reshapeForHeads(Q, batchSize, sequenceLength);\n    const KHeads = this.reshapeForHeads(K, batchSize, sequenceLength);\n    const VHeads = this.reshapeForHeads(V, batchSize, sequenceLength);\n    \n    // Scaled dot-product attention for each head\n    const attentionScores = new Float32Array(batchSize * this.config.heads * sequenceLength * sequenceLength);\n    \n    for (let b = 0; b < batchSize; b++) {\n      for (let h = 0; h < this.config.heads; h++) {\n        for (let i = 0; i < sequenceLength; i++) {\n          for (let j = 0; j < sequenceLength; j++) {\n            let score = 0;\n            \n            // Compute dot product\n            for (let d = 0; d < this.headDimension; d++) {\n              const qIdx = b * this.config.heads * sequenceLength * this.headDimension +\n                          h * sequenceLength * this.headDimension +\n                          i * this.headDimension + d;\n              const kIdx = b * this.config.heads * sequenceLength * this.headDimension +\n                          h * sequenceLength * this.headDimension +\n                          j * this.headDimension + d;\n              \n              score += QHeads[qIdx] * KHeads[kIdx];\n            }\n            \n            // Scale by sqrt(d_k)\n            score /= Math.sqrt(this.headDimension);\n            \n            const scoreIdx = b * this.config.heads * sequenceLength * sequenceLength +\n                           h * sequenceLength * sequenceLength +\n                           i * sequenceLength + j;\n            attentionScores[scoreIdx] = score;\n          }\n        }\n      }\n    }\n    \n    // Apply softmax\n    const attentionWeights = this.softmax(attentionScores, sequenceLength);\n    \n    // Apply attention weights to values\n    const attendedValues = this.applyAttentionWeights(attentionWeights, VHeads, batchSize, sequenceLength);\n    \n    // Concatenate heads and project\n    const concatenated = this.concatenateHeads(attendedValues, batchSize, sequenceLength);\n    const output = this.matmul(concatenated, weights.output);\n    \n    // Apply dropout if training\n    if (training && this.config.dropoutRate > 0) {\n      return this.dropout(output, this.config.dropoutRate);\n    }\n    \n    return output;\n  }\n\n  feedForward(input, layerIndex) {\n    const weights = this.feedForwardWeights[layerIndex];\n    \n    // First linear transformation\n    let hidden = this.matmul(input, weights.w1);\n    hidden = this.addBias(hidden, weights.b1);\n    \n    // ReLU activation\n    hidden = this.relu(hidden);\n    \n    // Second linear transformation\n    let output = this.matmul(hidden, weights.w2);\n    output = this.addBias(output, weights.b2);\n    \n    return output;\n  }\n\n  layerNorm(input, normParams) {\n    const shape = input.shape;\n    const lastDim = shape[shape.length - 1];\n    const normalized = new Float32Array(input.length);\n    \n    // Compute mean and variance for each position\n    for (let i = 0; i < input.length / lastDim; i++) {\n      let mean = 0;\n      let variance = 0;\n      \n      // Calculate mean\n      for (let j = 0; j < lastDim; j++) {\n        mean += input[i * lastDim + j];\n      }\n      mean /= lastDim;\n      \n      // Calculate variance\n      for (let j = 0; j < lastDim; j++) {\n        const diff = input[i * lastDim + j] - mean;\n        variance += diff * diff;\n      }\n      variance /= lastDim;\n      \n      // Normalize and apply scale/shift\n      const std = Math.sqrt(variance + 1e-5);\n      for (let j = 0; j < lastDim; j++) {\n        const idx = i * lastDim + j;\n        normalized[idx] = normParams.gamma[j] * ((input[idx] - mean) / std) + normParams.beta[j];\n      }\n    }\n    \n    normalized.shape = shape;\n    return normalized;\n  }\n\n  async train(trainingData, options = {}) {\n    const {\n      epochs = 10,\n      batchSize = 32,\n      learningRate = 0.001,\n      warmupSteps = 4000,\n      validationSplit = 0.1\n    } = options;\n\n    const trainingHistory = [];\n    \n    // Split data into training and validation\n    const splitIndex = Math.floor(trainingData.length * (1 - validationSplit));\n    const trainData = trainingData.slice(0, splitIndex);\n    const valData = trainingData.slice(splitIndex);\n    \n    let globalStep = 0;\n    \n    for (let epoch = 0; epoch < epochs; epoch++) {\n      let epochLoss = 0;\n      let batchCount = 0;\n      \n      // Shuffle training data\n      const shuffled = this.shuffle(trainData);\n      \n      // Process batches\n      for (let i = 0; i < shuffled.length; i += batchSize) {\n        const batch = shuffled.slice(i, Math.min(i + batchSize, shuffled.length));\n        \n        // Adaptive learning rate with warmup\n        const currentLR = this.getAdaptiveLearningRate(learningRate, globalStep, warmupSteps);\n        \n        // Forward pass\n        const predictions = await this.forward(batch.inputs, true);\n        \n        // Calculate loss\n        const loss = this.crossEntropyLoss(predictions, batch.targets);\n        epochLoss += loss;\n        \n        // Backward pass (simplified)\n        await this.backward(loss, currentLR);\n        \n        globalStep++;\n        batchCount++;\n      }\n      \n      // Validation\n      const valLoss = await this.validate(valData);\n      \n      const avgTrainLoss = epochLoss / batchCount;\n      trainingHistory.push({\n        epoch: epoch + 1,\n        trainLoss: avgTrainLoss,\n        valLoss: valLoss,\n        learningRate: this.getAdaptiveLearningRate(learningRate, globalStep, warmupSteps)\n      });\n      \n      console.log(`Epoch ${epoch + 1}/${epochs} - Train Loss: ${avgTrainLoss.toFixed(4)}, Val Loss: ${valLoss.toFixed(4)}`);\n    }\n    \n    return {\n      history: trainingHistory,\n      finalLoss: trainingHistory[trainingHistory.length - 1].trainLoss,\n      modelType: 'transformer'\n    };\n  }\n\n  getAdaptiveLearningRate(baseLR, step, warmupSteps) {\n    // Learning rate schedule with warmup (as in original Transformer paper)\n    const arg1 = Math.sqrt(step);\n    const arg2 = step * Math.pow(warmupSteps, -1.5);\n    const lr = baseLR * Math.min(arg1, arg2) * Math.sqrt(this.config.dimensions);\n    return lr;\n  }\n\n  // Utility functions\n  tokenEmbedding(tokenIndices) {\n    // Simplified token embedding - in practice would use learned embeddings\n    const embedded = new Float32Array(tokenIndices.shape[0] * tokenIndices.shape[1] * this.config.dimensions);\n    \n    for (let b = 0; b < tokenIndices.shape[0]; b++) {\n      for (let s = 0; s < tokenIndices.shape[1]; s++) {\n        for (let d = 0; d < this.config.dimensions; d++) {\n          const idx = b * tokenIndices.shape[1] * this.config.dimensions +\n                     s * this.config.dimensions + d;\n          // Simple embedding based on token index\n          embedded[idx] = (tokenIndices[b * tokenIndices.shape[1] + s] % this.config.vocabularySize) / \n                         this.config.vocabularySize + (Math.random() - 0.5) * 0.1;\n        }\n      }\n    }\n    \n    embedded.shape = [tokenIndices.shape[0], tokenIndices.shape[1], this.config.dimensions];\n    return embedded;\n  }\n\n  addPositionalEncoding(embeddings, sequenceLength) {\n    const result = new Float32Array(embeddings.length);\n    \n    for (let b = 0; b < embeddings.shape[0]; b++) {\n      for (let s = 0; s < sequenceLength; s++) {\n        for (let d = 0; d < this.config.dimensions; d++) {\n          const embIdx = b * sequenceLength * this.config.dimensions +\n                        s * this.config.dimensions + d;\n          const posIdx = s * this.config.dimensions + d;\n          \n          result[embIdx] = embeddings[embIdx] + this.positionalEncoding[posIdx];\n        }\n      }\n    }\n    \n    result.shape = embeddings.shape;\n    return result;\n  }\n\n  reshapeForHeads(tensor, batchSize, sequenceLength) {\n    // Reshape to [batch, heads, sequence, head_dimension]\n    const reshaped = new Float32Array(tensor.length);\n    \n    for (let b = 0; b < batchSize; b++) {\n      for (let s = 0; s < sequenceLength; s++) {\n        for (let h = 0; h < this.config.heads; h++) {\n          for (let d = 0; d < this.headDimension; d++) {\n            const srcIdx = b * sequenceLength * this.config.dimensions +\n                          s * this.config.dimensions +\n                          h * this.headDimension + d;\n            const dstIdx = b * this.config.heads * sequenceLength * this.headDimension +\n                          h * sequenceLength * this.headDimension +\n                          s * this.headDimension + d;\n            \n            reshaped[dstIdx] = tensor[srcIdx];\n          }\n        }\n      }\n    }\n    \n    return reshaped;\n  }\n\n  concatenateHeads(tensor, batchSize, sequenceLength) {\n    // Reshape from [batch, heads, sequence, head_dimension] to [batch, sequence, dimensions]\n    const concatenated = new Float32Array(batchSize * sequenceLength * this.config.dimensions);\n    \n    for (let b = 0; b < batchSize; b++) {\n      for (let s = 0; s < sequenceLength; s++) {\n        for (let h = 0; h < this.config.heads; h++) {\n          for (let d = 0; d < this.headDimension; d++) {\n            const srcIdx = b * this.config.heads * sequenceLength * this.headDimension +\n                          h * sequenceLength * this.headDimension +\n                          s * this.headDimension + d;\n            const dstIdx = b * sequenceLength * this.config.dimensions +\n                          s * this.config.dimensions +\n                          h * this.headDimension + d;\n            \n            concatenated[dstIdx] = tensor[srcIdx];\n          }\n        }\n      }\n    }\n    \n    concatenated.shape = [batchSize, sequenceLength, this.config.dimensions];\n    return concatenated;\n  }\n\n  softmax(scores, sequenceLength) {\n    const softmaxScores = new Float32Array(scores.length);\n    \n    // Apply softmax per attention head and query position\n    const stride = sequenceLength;\n    \n    for (let i = 0; i < scores.length; i += stride) {\n      let maxScore = -Infinity;\n      \n      // Find max for numerical stability\n      for (let j = 0; j < stride; j++) {\n        maxScore = Math.max(maxScore, scores[i + j]);\n      }\n      \n      // Compute exp and sum\n      let sumExp = 0;\n      for (let j = 0; j < stride; j++) {\n        softmaxScores[i + j] = Math.exp(scores[i + j] - maxScore);\n        sumExp += softmaxScores[i + j];\n      }\n      \n      // Normalize\n      for (let j = 0; j < stride; j++) {\n        softmaxScores[i + j] /= sumExp;\n      }\n    }\n    \n    return softmaxScores;\n  }\n\n  applyAttentionWeights(weights, values, batchSize, sequenceLength) {\n    const output = new Float32Array(batchSize * this.config.heads * sequenceLength * this.headDimension);\n    \n    for (let b = 0; b < batchSize; b++) {\n      for (let h = 0; h < this.config.heads; h++) {\n        for (let i = 0; i < sequenceLength; i++) {\n          for (let d = 0; d < this.headDimension; d++) {\n            let sum = 0;\n            \n            for (let j = 0; j < sequenceLength; j++) {\n              const weightIdx = b * this.config.heads * sequenceLength * sequenceLength +\n                               h * sequenceLength * sequenceLength +\n                               i * sequenceLength + j;\n              const valueIdx = b * this.config.heads * sequenceLength * this.headDimension +\n                              h * sequenceLength * this.headDimension +\n                              j * this.headDimension + d;\n              \n              sum += weights[weightIdx] * values[valueIdx];\n            }\n            \n            const outIdx = b * this.config.heads * sequenceLength * this.headDimension +\n                          h * sequenceLength * this.headDimension +\n                          i * this.headDimension + d;\n            output[outIdx] = sum;\n          }\n        }\n      }\n    }\n    \n    return output;\n  }\n\n  outputProjection(input) {\n    // Project to vocabulary size\n    return this.matmul(input, this.outputWeights.projection);\n  }\n\n  getConfig() {\n    return {\n      type: 'transformer',\n      ...this.config,\n      parameters: this.countParameters()\n    };\n  }\n\n  countParameters() {\n    let count = 0;\n    \n    // Attention weights\n    for (let layer = 0; layer < this.config.layers; layer++) {\n      count += 4 * this.config.dimensions * this.config.dimensions; // Q, K, V, O projections\n    }\n    \n    // Feed-forward weights\n    count += this.config.layers * (\n      this.config.dimensions * this.config.ffDimensions * 2 + // W1, W2\n      this.config.ffDimensions + this.config.dimensions // biases\n    );\n    \n    // Layer norm parameters\n    count += this.config.layers * 2 * this.config.dimensions; // gamma, beta\n    \n    // Output projection\n    count += this.config.dimensions * this.config.vocabularySize + this.config.vocabularySize;\n    \n    return count;\n  }\n}\n\nexport { TransformerModel };"],"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","ignoreList":[]}