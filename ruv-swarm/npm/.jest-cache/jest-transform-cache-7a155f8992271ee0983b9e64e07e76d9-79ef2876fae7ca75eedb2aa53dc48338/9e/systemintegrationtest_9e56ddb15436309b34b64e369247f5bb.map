{"version":3,"names":["expect","require","sinon","RuvSwarm","NeuralAgentManager","MemoryManager","MCPIntegration","HookSystem","describe","sandbox","swarm","neuralManager","memoryManager","mcpIntegration","hookSystem","beforeEach","createSandbox","afterEach","_asyncToGenerator","shutdown","restore","it","init","topology","features","initialize","models","integration","standardAgents","Promise","all","spawnAgent","type","neuralAgents","model","coordination","shareWith","task","orchestrateTask","requiresBoth","agents","map","a","id","coordinationEvents","on","event","push","insight","_objectSpread","taskStatus","i","getTaskStatus","status","resolve","setTimeout","to","equal","neuralContributions","exist","have","lengthOf","filter","e","length","at","least","neuralMetrics","getSwarmLearningMetrics","collaborations","be","greaterThan","patternsSaved","accuracyImprovement","learningMode","patternTracking","learningEnabled","patternRecognition","coordinator","learningAgent","observeSwarmPatterns","patternTasks","taskResults","taskDesc","coordinatorId","observers","capturePatterns","learnedPatterns","getLearnedPatterns","architecturalPatterns","communicationPatterns","decisionPatterns","newTask","useLearnedPatterns","neuralAgent","newTaskStatus","appliedPatterns","confidence","adaptiveTopology","neuralOptimization","topologyOptimization","performanceAnalysis","topologyOptimizer","specialization","initialTopology","getTopologyMetrics","initialEfficiency","efficiency","cycle","workloadTasks","complexity","Math","random","performance","getPerformanceMetrics","optimization","optimizeTopology","currentTopology","getTopology","performanceData","workloadPattern","t","recommendations","applyTopologyOptimization","finalTopology","finalEfficiency","optimizationHistory","getOptimizationHistory","improvements","averageImprovement","memory","persistent","size","persistence","storage","path","agent1","enabled","agent2","storeMemories","storeSharedMemory","project","insights","patterns","sessionState","exportFullState","newSwarm","newMemoryManager","importFullState","restoredAgents","getAgents","restoredAgent1","find","restoredAgent2","memory1","getAgentMemory","memory2","episodes","include","semanticMemory","property","concepts","sharedMemory","getSharedMemory","coordinationMemory","coordinationTracking","conflictResolution","collaborativeTasks","useInsights","correlateWith","taskConfig","getCoordinationMemory","interactions","sharedKnowledge","futureTask","useCoordinationMemory","strategy","futureTaskStatus","memoryUtilization","pastInteractions","appliedKnowledge","mcp","protocol","swarmIntegration","agentManagement","mcpSpawn","call","capabilities","lifecycle","success","true","agentId","agent","getAgent","managedBy","mcpTask","priority","taskId","oneOf","mcpMetrics","resourceUsage","cleanup","removedAgent","null","stateSynchronization","syncInterval","swarmAgent","mcpAgent","swarmTask","swarmState","getFullState","mcpState","swarmAgentIds","sort","mcpAgentIds","deep","tasks","updateAgent","resolvedSwarmState","resolvedMcpAgent","hooks","eventTracking","hookEvents","register","_ref0","context","agentType","enhanced","_x","apply","arguments","_ref1","_x2","_ref10","timestamp","Date","now","_x3","_ref11","_x4","cascade","cascading","cascadeEvents","ctx","component","data","spawnCascade","completeCascade","errorHandling","continueOnFailure","errorRecovery","retryFailedHooks","hookResults","_ref14","Error","_x5","_ref15","_x6","chain","attempts","r","successes","hookErrors","getErrorLog","error","timeout","fullIntegration","allFeatures","ecosystem","neuralResearcher","standardCoder","analyst","workflow","phases","phase","integrationMetrics","neuralInsights","memoryStores","mcpCalls","hooksTriggered","workflowStatus","every","p","finalState","neuralLearnings","memorySnapshot","mcpSync","hookHistory","resilienceTest","executeResilienceTest","duration","scenarios","overallSuccess","recoveryTime","lessThan","dataIntegrity"],"sources":["system-integration.test.js"],"sourcesContent":["const { expect } = require('chai');\nconst sinon = require('sinon');\nconst RuvSwarm = require('../../../../src/core/ruv-swarm');\nconst NeuralAgentManager = require('../../../../src/neural-agent');\nconst MemoryManager = require('../../../../src/memory-manager');\nconst MCPIntegration = require('../../../../src/mcp-integration');\nconst HookSystem = require('../../../../src/hooks/hook-system');\n\ndescribe('Cross-Feature Integration Tests', () => {\n  let sandbox;\n  let swarm;\n  let neuralManager;\n  let memoryManager;\n  let mcpIntegration;\n  let hookSystem;\n\n  beforeEach(() => {\n    sandbox = sinon.createSandbox();\n  });\n\n  afterEach(async () => {\n    if (swarm) {\n      await swarm.shutdown();\n    }\n    sandbox.restore();\n  });\n\n  describe('Neural + Swarm Coordination', () => {\n    it('should coordinate neural agents with standard swarm operations', async () => {\n      // Initialize integrated system\n      swarm = new RuvSwarm();\n      neuralManager = new NeuralAgentManager();\n      \n      await swarm.init({ \n        topology: 'mesh',\n        features: ['neural', 'coordination', 'learning']\n      });\n      \n      await neuralManager.initialize({\n        models: ['adaptive', 'pattern-recognition', 'optimization'],\n        integration: { swarm: swarm }\n      });\n\n      // Create mixed agent ecosystem\n      const standardAgents = await Promise.all([\n        swarm.spawnAgent({ type: 'researcher' }),\n        swarm.spawnAgent({ type: 'coder' }),\n        swarm.spawnAgent({ type: 'analyst' })\n      ]);\n\n      const neuralAgents = await Promise.all([\n        swarm.spawnAgent({ \n          type: 'neural', \n          model: 'adaptive',\n          coordination: { shareWith: 'all' }\n        }),\n        swarm.spawnAgent({ \n          type: 'neural', \n          model: 'pattern-recognition',\n          coordination: { shareWith: ['researcher', 'analyst'] }\n        }),\n        swarm.spawnAgent({ \n          type: 'neural', \n          model: 'optimization',\n          coordination: { shareWith: ['coder'] }\n        })\n      ]);\n\n      // Execute coordinated task\n      const task = await swarm.orchestrateTask({\n        task: 'Analyze codebase and suggest neural-guided optimizations',\n        requiresBoth: ['traditional-analysis', 'neural-patterns'],\n        coordination: 'mixed-team',\n        agents: [...standardAgents.map(a => a.id), ...neuralAgents.map(a => a.id)]\n      });\n\n      // Monitor coordination\n      const coordinationEvents = [];\n      swarm.on('coordination', (event) => coordinationEvents.push(event));\n      neuralManager.on('insight', (insight) => coordinationEvents.push({ type: 'neural-insight', ...insight }));\n\n      // Wait for task completion\n      let taskStatus;\n      for (let i = 0; i < 30; i++) {\n        taskStatus = await swarm.getTaskStatus(task.id);\n        if (taskStatus.status === 'completed') break;\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n\n      // Verify neural-swarm coordination\n      expect(taskStatus.status).to.equal('completed');\n      expect(taskStatus.neuralContributions).to.exist;\n      expect(taskStatus.neuralContributions).to.have.lengthOf(3);\n\n      // Verify knowledge sharing\n      expect(coordinationEvents.filter(e => e.type === 'knowledge-share')).to.have.length.at.least(3);\n      expect(coordinationEvents.filter(e => e.type === 'neural-insight')).to.have.length.at.least(2);\n\n      // Check neural learning from swarm interactions\n      const neuralMetrics = await neuralManager.getSwarmLearningMetrics();\n      expect(neuralMetrics.collaborations).to.be.greaterThan(0);\n      expect(neuralMetrics.patternsSaved).to.be.greaterThan(0);\n      expect(neuralMetrics.accuracyImprovement).to.be.greaterThan(0);\n    });\n\n    it('should enable neural agents to learn from swarm patterns', async () => {\n      swarm = new RuvSwarm();\n      neuralManager = new NeuralAgentManager();\n      \n      await swarm.init({ \n        topology: 'hierarchical',\n        learningMode: true,\n        patternTracking: true\n      });\n      \n      await neuralManager.initialize({\n        learningEnabled: true,\n        patternRecognition: true\n      });\n\n      // Create learning environment\n      const coordinator = await swarm.spawnAgent({ type: 'coordinator' });\n      const learningAgent = await swarm.spawnAgent({ \n        type: 'neural',\n        model: 'learning',\n        observeSwarmPatterns: true\n      });\n\n      // Execute pattern-rich tasks\n      const patternTasks = [\n        'Implement authentication system',\n        'Create user management API',\n        'Build notification service',\n        'Develop caching layer',\n        'Add monitoring system'\n      ];\n\n      const taskResults = [];\n      for (const taskDesc of patternTasks) {\n        const task = await swarm.orchestrateTask({\n          task: taskDesc,\n          coordinatorId: coordinator.id,\n          observers: [learningAgent.id],\n          capturePatterns: true\n        });\n        taskResults.push(task);\n        \n        // Wait for completion\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      }\n\n      // Analyze learned patterns\n      const learnedPatterns = await neuralManager.getLearnedPatterns(learningAgent.id);\n      expect(learnedPatterns).to.exist;\n      expect(learnedPatterns.architecturalPatterns).to.have.length.at.least(3);\n      expect(learnedPatterns.communicationPatterns).to.have.length.at.least(2);\n      expect(learnedPatterns.decisionPatterns).to.have.length.at.least(2);\n\n      // Test pattern application\n      const newTask = await swarm.orchestrateTask({\n        task: 'Design real-time chat system',\n        useLearnedPatterns: true,\n        neuralAgent: learningAgent.id\n      });\n\n      const newTaskStatus = await swarm.getTaskStatus(newTask.id);\n      expect(newTaskStatus.appliedPatterns).to.have.length.at.least(2);\n      expect(newTaskStatus.confidence).to.be.greaterThan(0.8);\n    });\n\n    it('should optimize swarm topology using neural insights', async () => {\n      swarm = new RuvSwarm();\n      neuralManager = new NeuralAgentManager();\n      \n      await swarm.init({ \n        topology: 'mesh',\n        adaptiveTopology: true,\n        neuralOptimization: true\n      });\n      \n      await neuralManager.initialize({\n        topologyOptimization: true,\n        performanceAnalysis: true\n      });\n\n      // Create neural topology optimizer\n      const topologyOptimizer = await swarm.spawnAgent({ \n        type: 'neural',\n        model: 'optimization',\n        specialization: 'topology'\n      });\n\n      // Initial topology assessment\n      const initialTopology = await swarm.getTopologyMetrics();\n      const initialEfficiency = initialTopology.efficiency;\n\n      // Run optimization cycles\n      for (let cycle = 0; cycle < 3; cycle++) {\n        // Execute representative workload\n        const workloadTasks = [];\n        for (let i = 0; i < 20; i++) {\n          workloadTasks.push(swarm.orchestrateTask({\n            task: `Workload task ${cycle}-${i}`,\n            complexity: Math.random() > 0.5 ? 'high' : 'low'\n          }));\n        }\n        \n        await Promise.all(workloadTasks);\n\n        // Analyze performance\n        const performance = await swarm.getPerformanceMetrics();\n        \n        // Neural optimization\n        const optimization = await neuralManager.optimizeTopology(topologyOptimizer.id, {\n          currentTopology: await swarm.getTopology(),\n          performanceData: performance,\n          workloadPattern: workloadTasks.map(t => t.complexity)\n        });\n\n        if (optimization.recommendations.length > 0) {\n          await swarm.applyTopologyOptimization(optimization.recommendations);\n        }\n\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n\n      // Verify optimization effectiveness\n      const finalTopology = await swarm.getTopologyMetrics();\n      const finalEfficiency = finalTopology.efficiency;\n\n      expect(finalEfficiency).to.be.greaterThan(initialEfficiency);\n      \n      const optimizationHistory = await neuralManager.getOptimizationHistory(topologyOptimizer.id);\n      expect(optimizationHistory.improvements).to.have.length.at.least(1);\n      expect(optimizationHistory.averageImprovement).to.be.greaterThan(0.05); // 5% improvement\n    });\n  });\n\n  describe('Memory + Persistence Integration', () => {\n    it('should persist agent memories across sessions', async () => {\n      // First session\n      swarm = new RuvSwarm();\n      memoryManager = new MemoryManager();\n      \n      await swarm.init({ \n        topology: 'mesh',\n        memory: { persistent: true, size: 10000 }\n      });\n      \n      await memoryManager.initialize({\n        persistence: true,\n        storage: { type: 'sqlite', path: ':memory:' }\n      });\n\n      // Create agents with memories\n      const agent1 = await swarm.spawnAgent({ \n        type: 'researcher',\n        memory: { enabled: true, type: 'episodic' }\n      });\n      \n      const agent2 = await swarm.spawnAgent({ \n        type: 'coder',\n        memory: { enabled: true, type: 'semantic' }\n      });\n\n      // Execute tasks that create memories\n      await swarm.orchestrateTask({\n        task: 'Research React performance optimization',\n        agents: [agent1.id],\n        storeMemories: true\n      });\n\n      await swarm.orchestrateTask({\n        task: 'Implement lazy loading components',\n        agents: [agent2.id],\n        storeMemories: true\n      });\n\n      // Store cross-agent shared memory\n      await memoryManager.storeSharedMemory('project-context', {\n        project: 'React Performance',\n        insights: ['Virtual DOM optimization', 'Bundle splitting'],\n        patterns: ['Component memoization', 'Code splitting']\n      });\n\n      // Export session state\n      const sessionState = await swarm.exportFullState();\n      await swarm.shutdown();\n\n      // Second session - restore from persistence\n      const newSwarm = new RuvSwarm();\n      const newMemoryManager = new MemoryManager();\n      \n      await newSwarm.init({ \n        topology: 'mesh',\n        memory: { persistent: true, size: 10000 }\n      });\n      \n      await newMemoryManager.initialize({\n        persistence: true,\n        storage: { type: 'sqlite', path: ':memory:' }\n      });\n\n      await newSwarm.importFullState(sessionState);\n\n      // Verify memory restoration\n      const restoredAgents = await newSwarm.getAgents();\n      expect(restoredAgents).to.have.lengthOf(2);\n\n      const restoredAgent1 = restoredAgents.find(a => a.type === 'researcher');\n      const restoredAgent2 = restoredAgents.find(a => a.type === 'coder');\n\n      const memory1 = await memoryManager.getAgentMemory(restoredAgent1.id);\n      const memory2 = await memoryManager.getAgentMemory(restoredAgent2.id);\n\n      expect(memory1.episodes).to.have.length.at.least(1);\n      expect(memory1.episodes[0].task).to.include('React performance');\n      \n      expect(memory2.semanticMemory).to.have.property('concepts');\n      expect(memory2.semanticMemory.concepts).to.include('lazy loading');\n\n      // Verify shared memory\n      const sharedMemory = await memoryManager.getSharedMemory('project-context');\n      expect(sharedMemory.project).to.equal('React Performance');\n      expect(sharedMemory.insights).to.have.lengthOf(2);\n\n      await newSwarm.shutdown();\n    });\n\n    it('should enable memory-based agent coordination', async () => {\n      swarm = new RuvSwarm();\n      memoryManager = new MemoryManager();\n      \n      await swarm.init({ \n        topology: 'mesh',\n        coordinationMemory: true\n      });\n      \n      await memoryManager.initialize({\n        coordinationTracking: true,\n        conflictResolution: true\n      });\n\n      // Create agents with coordination memory\n      const agents = await Promise.all([\n        swarm.spawnAgent({ \n          type: 'researcher',\n          coordinationMemory: true\n        }),\n        swarm.spawnAgent({ \n          type: 'coder',\n          coordinationMemory: true\n        }),\n        swarm.spawnAgent({ \n          type: 'analyst',\n          coordinationMemory: true\n        })\n      ]);\n\n      // Execute collaborative tasks\n      const collaborativeTasks = [\n        {\n          task: 'Research API design patterns',\n          agents: [agents[0].id],\n          shareWith: [agents[1].id, agents[2].id]\n        },\n        {\n          task: 'Implement RESTful endpoints',\n          agents: [agents[1].id],\n          useInsights: [agents[0].id]\n        },\n        {\n          task: 'Analyze performance metrics',\n          agents: [agents[2].id],\n          correlateWith: [agents[0].id, agents[1].id]\n        }\n      ];\n\n      const taskResults = [];\n      for (const taskConfig of collaborativeTasks) {\n        const task = await swarm.orchestrateTask(taskConfig);\n        taskResults.push(task);\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n\n      // Verify coordination memory\n      const coordinationMemory = await memoryManager.getCoordinationMemory();\n      expect(coordinationMemory.interactions).to.have.length.at.least(3);\n      expect(coordinationMemory.sharedKnowledge).to.have.property('api-patterns');\n      expect(coordinationMemory.sharedKnowledge).to.have.property('implementation-details');\n\n      // Test memory-based future coordination\n      const futureTask = await swarm.orchestrateTask({\n        task: 'Design microservices architecture',\n        useCoordinationMemory: true,\n        strategy: 'memory-informed'\n      });\n\n      const futureTaskStatus = await swarm.getTaskStatus(futureTask.id);\n      expect(futureTaskStatus.memoryUtilization).to.exist;\n      expect(futureTaskStatus.memoryUtilization.pastInteractions).to.be.greaterThan(0);\n      expect(futureTaskStatus.memoryUtilization.appliedKnowledge).to.have.length.at.least(2);\n    });\n  });\n\n  describe('MCP + Agent Lifecycle Integration', () => {\n    it('should manage agent lifecycle through MCP protocol', async () => {\n      swarm = new RuvSwarm();\n      mcpIntegration = new MCPIntegration();\n      \n      await swarm.init({ \n        topology: 'mesh',\n        mcp: { enabled: true, protocol: 'jsonrpc' }\n      });\n      \n      await mcpIntegration.initialize({\n        swarmIntegration: true,\n        agentManagement: true\n      });\n\n      // MCP-controlled agent spawning\n      const mcpSpawn = await mcpIntegration.call('agent_spawn', {\n        type: 'researcher',\n        capabilities: ['web-search', 'analysis'],\n        lifecycle: 'mcp-managed'\n      });\n\n      expect(mcpSpawn.success).to.be.true;\n      expect(mcpSpawn.agentId).to.exist;\n\n      // Verify agent exists in swarm\n      const agent = await swarm.getAgent(mcpSpawn.agentId);\n      expect(agent).to.exist;\n      expect(agent.managedBy).to.equal('mcp');\n\n      // MCP task orchestration\n      const mcpTask = await mcpIntegration.call('task_orchestrate', {\n        task: 'Research latest JavaScript frameworks',\n        agentId: mcpSpawn.agentId,\n        priority: 'high'\n      });\n\n      expect(mcpTask.success).to.be.true;\n      expect(mcpTask.taskId).to.exist;\n\n      // Monitor through MCP\n      const taskStatus = await mcpIntegration.call('task_status', {\n        taskId: mcpTask.taskId\n      });\n\n      expect(taskStatus.id).to.equal(mcpTask.taskId);\n      expect(taskStatus.status).to.be.oneOf(['pending', 'running', 'completed']);\n\n      // MCP metrics collection\n      const mcpMetrics = await mcpIntegration.call('agent_metrics', {\n        agentId: mcpSpawn.agentId\n      });\n\n      expect(mcpMetrics.agentId).to.equal(mcpSpawn.agentId);\n      expect(mcpMetrics.performance).to.exist;\n      expect(mcpMetrics.resourceUsage).to.exist;\n\n      // MCP-managed cleanup\n      const cleanup = await mcpIntegration.call('agent_destroy', {\n        agentId: mcpSpawn.agentId\n      });\n\n      expect(cleanup.success).to.be.true;\n\n      // Verify agent removed from swarm\n      const removedAgent = await swarm.getAgent(mcpSpawn.agentId);\n      expect(removedAgent).to.be.null;\n    });\n\n    it('should synchronize MCP state with swarm state', async () => {\n      swarm = new RuvSwarm();\n      mcpIntegration = new MCPIntegration();\n      \n      await swarm.init({ \n        topology: 'mesh',\n        mcp: { \n          enabled: true,\n          stateSynchronization: true,\n          syncInterval: 1000\n        }\n      });\n      \n      await mcpIntegration.initialize({\n        stateSynchronization: true,\n        conflictResolution: 'swarm-priority'\n      });\n\n      // Create agents through both interfaces\n      const swarmAgent = await swarm.spawnAgent({ type: 'coder' });\n      const mcpAgent = await mcpIntegration.call('agent_spawn', { type: 'analyst' });\n\n      // Execute tasks through both interfaces\n      const swarmTask = await swarm.orchestrateTask({\n        task: 'Swarm-managed task',\n        agentId: swarmAgent.id\n      });\n\n      const mcpTask = await mcpIntegration.call('task_orchestrate', {\n        task: 'MCP-managed task',\n        agentId: mcpAgent.agentId\n      });\n\n      // Wait for synchronization\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Verify state synchronization\n      const swarmState = await swarm.getFullState();\n      const mcpState = await mcpIntegration.call('swarm_status');\n\n      expect(swarmState.agents).to.have.lengthOf(2);\n      expect(mcpState.agents).to.have.lengthOf(2);\n\n      // Agent IDs should match\n      const swarmAgentIds = swarmState.agents.map(a => a.id).sort();\n      const mcpAgentIds = mcpState.agents.map(a => a.id).sort();\n      expect(swarmAgentIds).to.deep.equal(mcpAgentIds);\n\n      // Tasks should be visible in both\n      expect(swarmState.tasks).to.have.lengthOf(2);\n      expect(mcpState.tasks).to.have.lengthOf(2);\n\n      // Introduce state conflict\n      await swarm.updateAgent(swarmAgent.id, { status: 'busy' });\n      \n      // Wait for conflict resolution\n      await new Promise(resolve => setTimeout(resolve, 1500));\n\n      // Verify conflict resolution\n      const resolvedSwarmState = await swarm.getAgent(swarmAgent.id);\n      const resolvedMcpAgent = await mcpIntegration.call('agent_status', { agentId: swarmAgent.id });\n\n      expect(resolvedSwarmState.status).to.equal(resolvedMcpAgent.status);\n    });\n  });\n\n  describe('Hooks + Event System Integration', () => {\n    it('should trigger hooks throughout agent lifecycle', async () => {\n      swarm = new RuvSwarm();\n      hookSystem = new HookSystem();\n      \n      await swarm.init({ \n        topology: 'mesh',\n        hooks: { enabled: true }\n      });\n      \n      await hookSystem.initialize({\n        swarmIntegration: true,\n        eventTracking: true\n      });\n\n      // Register lifecycle hooks\n      const hookEvents = [];\n      \n      hookSystem.register('pre-agent-spawn', async (context) => {\n        hookEvents.push({ type: 'pre-spawn', agentType: context.type });\n        return { enhanced: true };\n      });\n\n      hookSystem.register('post-agent-spawn', async (context) => {\n        hookEvents.push({ type: 'post-spawn', agentId: context.agentId });\n      });\n\n      hookSystem.register('pre-task-orchestrate', async (context) => {\n        hookEvents.push({ type: 'pre-task', task: context.task });\n        // Enhance task with hook data\n        context.enhanced = { timestamp: Date.now() };\n      });\n\n      hookSystem.register('post-task-complete', async (context) => {\n        hookEvents.push({ type: 'post-task', taskId: context.taskId, success: context.success });\n      });\n\n      // Execute operations that trigger hooks\n      const agent = await swarm.spawnAgent({ type: 'researcher' });\n      \n      const task = await swarm.orchestrateTask({\n        task: 'Hook-enhanced research task',\n        agentId: agent.id\n      });\n\n      // Wait for task completion\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Verify hooks were triggered\n      expect(hookEvents.filter(e => e.type === 'pre-spawn')).to.have.lengthOf(1);\n      expect(hookEvents.filter(e => e.type === 'post-spawn')).to.have.lengthOf(1);\n      expect(hookEvents.filter(e => e.type === 'pre-task')).to.have.lengthOf(1);\n      expect(hookEvents.filter(e => e.type === 'post-task')).to.have.lengthOf(1);\n\n      // Verify hook data was applied\n      const taskStatus = await swarm.getTaskStatus(task.id);\n      expect(taskStatus.enhanced).to.exist;\n      expect(taskStatus.enhanced.timestamp).to.be.a('number');\n    });\n\n    it('should cascade hooks across system components', async () => {\n      swarm = new RuvSwarm();\n      hookSystem = new HookSystem();\n      neuralManager = new NeuralAgentManager();\n      memoryManager = new MemoryManager();\n      \n      // Initialize all components with hooks\n      await swarm.init({ \n        topology: 'mesh',\n        hooks: { enabled: true, cascade: true }\n      });\n      \n      await hookSystem.initialize({ cascading: true });\n      await neuralManager.initialize({ hooks: true });\n      await memoryManager.initialize({ hooks: true });\n\n      // Register cascading hooks\n      const cascadeEvents = [];\n\n      // Swarm hooks\n      hookSystem.register('swarm:agent-spawn', (ctx) => {\n        cascadeEvents.push({ component: 'swarm', event: 'spawn', data: ctx });\n        return hookSystem.cascade('neural:agent-available', ctx);\n      });\n\n      // Neural hooks\n      hookSystem.register('neural:agent-available', (ctx) => {\n        cascadeEvents.push({ component: 'neural', event: 'available', data: ctx });\n        return hookSystem.cascade('memory:agent-initialize', ctx);\n      });\n\n      // Memory hooks\n      hookSystem.register('memory:agent-initialize', (ctx) => {\n        cascadeEvents.push({ component: 'memory', event: 'initialize', data: ctx });\n      });\n\n      // Task completion cascade\n      hookSystem.register('swarm:task-complete', (ctx) => {\n        cascadeEvents.push({ component: 'swarm', event: 'complete', data: ctx });\n        hookSystem.cascade('neural:learn-from-task', ctx);\n        hookSystem.cascade('memory:store-experience', ctx);\n      });\n\n      hookSystem.register('neural:learn-from-task', (ctx) => {\n        cascadeEvents.push({ component: 'neural', event: 'learn', data: ctx });\n      });\n\n      hookSystem.register('memory:store-experience', (ctx) => {\n        cascadeEvents.push({ component: 'memory', event: 'store', data: ctx });\n      });\n\n      // Trigger cascade\n      const agent = await swarm.spawnAgent({ type: 'neural' });\n      \n      const task = await swarm.orchestrateTask({\n        task: 'Cascade test task',\n        agentId: agent.id\n      });\n\n      // Wait for cascades\n      await new Promise(resolve => setTimeout(resolve, 3000));\n\n      // Verify cascade sequence\n      const spawnCascade = cascadeEvents.filter(e => e.event === 'spawn' || e.event === 'available' || e.event === 'initialize');\n      expect(spawnCascade).to.have.lengthOf(3);\n      expect(spawnCascade[0].component).to.equal('swarm');\n      expect(spawnCascade[1].component).to.equal('neural');\n      expect(spawnCascade[2].component).to.equal('memory');\n\n      const completeCascade = cascadeEvents.filter(e => e.event === 'complete' || e.event === 'learn' || e.event === 'store');\n      expect(completeCascade).to.have.lengthOf(3);\n      expect(completeCascade[0].component).to.equal('swarm');\n      expect(completeCascade[1].component).to.equal('neural');\n      expect(completeCascade[2].component).to.equal('memory');\n    });\n\n    it('should handle hook failures gracefully', async () => {\n      swarm = new RuvSwarm();\n      hookSystem = new HookSystem();\n      \n      await swarm.init({ \n        topology: 'mesh',\n        hooks: { \n          enabled: true,\n          errorHandling: 'graceful',\n          continueOnFailure: true\n        }\n      });\n      \n      await hookSystem.initialize({\n        errorRecovery: true,\n        retryFailedHooks: true\n      });\n\n      // Register failing hooks\n      const hookResults = [];\n\n      hookSystem.register('failing-hook', async (ctx) => {\n        hookResults.push({ type: 'attempt', timestamp: Date.now() });\n        throw new Error('Hook intentionally failed');\n      });\n\n      hookSystem.register('success-hook', async (ctx) => {\n        hookResults.push({ type: 'success', timestamp: Date.now() });\n      });\n\n      // Configure hook chain\n      hookSystem.chain('agent-spawn', ['failing-hook', 'success-hook']);\n\n      // Trigger hooks\n      const agent = await swarm.spawnAgent({ type: 'coder' });\n\n      // Wait for retries\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Verify agent still created despite hook failure\n      expect(agent).to.exist;\n      expect(agent.id).to.exist;\n\n      // Verify hook failure handling\n      const attempts = hookResults.filter(r => r.type === 'attempt');\n      const successes = hookResults.filter(r => r.type === 'success');\n\n      expect(attempts).to.have.length.at.least(1); // Failed hook attempted\n      expect(successes).to.have.lengthOf(1); // Success hook executed\n\n      // Check error logging\n      const hookErrors = await hookSystem.getErrorLog();\n      expect(hookErrors).to.have.length.at.least(1);\n      expect(hookErrors[0].error).to.include('Hook intentionally failed');\n    });\n  });\n\n  describe('Full System Integration', () => {\n    it('should demonstrate complete feature integration', async function() {\n      this.timeout(45000);\n\n      // Initialize complete system\n      swarm = new RuvSwarm();\n      neuralManager = new NeuralAgentManager();\n      memoryManager = new MemoryManager();\n      mcpIntegration = new MCPIntegration();\n      hookSystem = new HookSystem();\n\n      await swarm.init({ \n        topology: 'mesh',\n        features: ['neural', 'memory', 'mcp', 'hooks', 'persistence']\n      });\n\n      await neuralManager.initialize({ swarmIntegration: true });\n      await memoryManager.initialize({ persistence: true });\n      await mcpIntegration.initialize({ fullIntegration: true });\n      await hookSystem.initialize({ allFeatures: true });\n\n      // Create comprehensive agent ecosystem\n      const ecosystem = {\n        coordinator: await swarm.spawnAgent({ \n          type: 'coordinator',\n          features: ['memory', 'mcp-managed']\n        }),\n        neuralResearcher: await swarm.spawnAgent({ \n          type: 'neural',\n          model: 'research-optimized',\n          features: ['memory', 'hooks']\n        }),\n        standardCoder: await swarm.spawnAgent({ \n          type: 'coder',\n          features: ['memory', 'persistence']\n        }),\n        analyst: await swarm.spawnAgent({ \n          type: 'analyst',\n          features: ['neural-assisted', 'mcp-reporting']\n        })\n      };\n\n      // Execute complex multi-feature workflow\n      const workflow = await swarm.orchestrateTask({\n        task: 'Design, implement, and optimize a microservices platform',\n        coordinator: ecosystem.coordinator.id,\n        strategy: 'feature-integrated',\n        phases: [\n          {\n            phase: 'research',\n            agent: ecosystem.neuralResearcher.id,\n            features: ['neural-insights', 'memory-enhanced']\n          },\n          {\n            phase: 'implementation',\n            agent: ecosystem.standardCoder.id,\n            features: ['hook-driven', 'persistent-state']\n          },\n          {\n            phase: 'analysis',\n            agent: ecosystem.analyst.id,\n            features: ['neural-analysis', 'mcp-reporting']\n          }\n        ]\n      });\n\n      // Monitor integration\n      const integrationMetrics = {\n        neuralInsights: 0,\n        memoryStores: 0,\n        mcpCalls: 0,\n        hooksTriggered: 0\n      };\n\n      neuralManager.on('insight', () => integrationMetrics.neuralInsights++);\n      memoryManager.on('store', () => integrationMetrics.memoryStores++);\n      mcpIntegration.on('call', () => integrationMetrics.mcpCalls++);\n      hookSystem.on('trigger', () => integrationMetrics.hooksTriggered++);\n\n      // Wait for workflow completion\n      let workflowStatus;\n      for (let i = 0; i < 30; i++) {\n        workflowStatus = await swarm.getTaskStatus(workflow.id);\n        if (workflowStatus.status === 'completed') break;\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n\n      // Verify comprehensive integration\n      expect(workflowStatus.status).to.equal('completed');\n      expect(workflowStatus.phases).to.have.lengthOf(3);\n      expect(workflowStatus.phases.every(p => p.status === 'completed')).to.be.true;\n\n      // Verify feature utilization\n      expect(integrationMetrics.neuralInsights).to.be.greaterThan(0);\n      expect(integrationMetrics.memoryStores).to.be.greaterThan(0);\n      expect(integrationMetrics.mcpCalls).to.be.greaterThan(0);\n      expect(integrationMetrics.hooksTriggered).to.be.greaterThan(0);\n\n      // Verify cross-feature data flow\n      const finalState = await swarm.getFullState();\n      expect(finalState.neuralLearnings).to.exist;\n      expect(finalState.memorySnapshot).to.exist;\n      expect(finalState.mcpSync).to.exist;\n      expect(finalState.hookHistory).to.exist;\n\n      // Test system resilience\n      const resilienceTest = await swarm.executeResilienceTest({\n        duration: 10000,\n        scenarios: ['component-failure', 'memory-pressure', 'network-partition']\n      });\n\n      expect(resilienceTest.overallSuccess).to.be.true;\n      expect(resilienceTest.recoveryTime).to.be.lessThan(5000);\n      expect(resilienceTest.dataIntegrity).to.be.true;\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}