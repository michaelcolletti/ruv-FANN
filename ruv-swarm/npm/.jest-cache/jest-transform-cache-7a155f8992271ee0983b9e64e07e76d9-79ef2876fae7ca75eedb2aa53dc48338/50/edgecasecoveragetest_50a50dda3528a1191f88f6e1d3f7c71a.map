{"version":3,"names":["strict","assert","fs","path","fileURLToPath","__filename","import","meta","url","__dirname","dirname","ruvSwarm","error","console","warn","errorModule","mcpTools","EdgeCaseCoverageTestSuite","constructor","results","totalTests","passed","failed","errors","coverage","edgeCases","boundaries","errorPaths","nullChecks","typeValidation","runTest","name","testFn","_this","_asyncToGenerator","log","push","message","testMainModuleEdgeCases","_this2","instance","default","maxAgents","timeout","retries","Number","MAX_SAFE_INTEGER","testErrorModuleEdgeCases","_this3","RuvSwarmError","Error","e","undefined","longMessage","repeat","specialMessage","testTypeValidationEdgeCases","_this4","func","result","sym","Symbol","toString","bigInt","BigInt","obj","self","JSON","stringify","fail","includes","sparseArray","Array","filtered","filter","x","length","testBoundaryConditions","_this5","emptyArray","reduce","acc","val","singleArray","largeArray","fill","startTime","performance","now","Promise","resolve","setTimeout","endTime","negative","absolute","Math","abs","isClose","EPSILON","testErrorPathCoverage","_this6","Infinity","array","nullObj","property","parse","SyntaxError","recursiveFunction","RangeError","testNullUndefinedChecks","_this7","processValue","value","_ref27","_","_ref28","value1","value2","value3","value4","_obj$nested","_obj$nested$method","_obj$missing","_obj$missing$method","nested","method","result1","call","result2","missing","a","b","generateReport","passRate","toFixed","totalCoverage","Object","values","report","timestamp","Date","toISOString","summary","totalCoveragePoints","recommendations","generateRecommendations","run","_this8","entries","forEach","area","count","rec","reportPath","join","mkdirSync","recursive","writeFileSync","process","argv","testSuite","exit"],"sources":["edge-case-coverage.test.js"],"sourcesContent":["\n\n/**\n * Edge Case Coverage Test Suite\n * Tests boundary conditions and edge cases to improve coverage\n * \n * @author Test Coverage Champion\n * @version 1.0.0\n */\n\nimport { strict as assert } from 'assert';\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Import modules to test\nlet ruvSwarm;\ntry {\n  ruvSwarm = await import('../src/index.js');\n} catch (error) {\n  console.warn('Warning: RuvSwarm module not found');\n}\n\nlet errorModule;\ntry {\n  errorModule = await import('../src/errors.js');\n} catch (error) {\n  console.warn('Warning: Error module not found');\n}\n\nlet mcpTools;\ntry {\n  mcpTools = await import('../src/mcp-tools-enhanced.js');\n} catch (error) {\n  console.warn('Warning: MCP tools module not found');\n}\n\nclass EdgeCaseCoverageTestSuite {\n  constructor() {\n    this.results = {\n      totalTests: 0,\n      passed: 0,\n      failed: 0,\n      errors: [],\n      coverage: {\n        edgeCases: 0,\n        boundaries: 0,\n        errorPaths: 0,\n        nullChecks: 0,\n        typeValidation: 0\n      }\n    };\n  }\n\n  async runTest(name, testFn) {\n    this.results.totalTests++;\n    try {\n      await testFn();\n      this.results.passed++;\n      console.log(`✅ ${name}`);\n      return true;\n    } catch (error) {\n      this.results.failed++;\n      this.results.errors.push({ name, error: error.message });\n      console.log(`❌ ${name}: ${error.message}`);\n      return false;\n    }\n  }\n\n  // Test Edge Cases in Main Module\n  async testMainModuleEdgeCases() {\n    console.log('\\n🔍 Testing Main Module Edge Cases...');\n\n    if (ruvSwarm) {\n      await this.runTest('RuvSwarm - Null initialization options', async () => {\n        const instance = new ruvSwarm.default();\n        assert(instance !== null, 'Should handle null options');\n        this.results.coverage.edgeCases++;\n      });\n\n      await this.runTest('RuvSwarm - Empty object initialization', async () => {\n        const instance = new ruvSwarm.default({});\n        assert(instance !== null, 'Should handle empty options');\n        this.results.coverage.edgeCases++;\n      });\n\n      await this.runTest('RuvSwarm - Invalid configuration types', async () => {\n        try {\n          const instance = new ruvSwarm.default({\n            maxAgents: 'invalid',\n            timeout: null,\n            retries: -1\n          });\n          assert(instance !== null, 'Should handle invalid types gracefully');\n        } catch (error) {\n          // Expected behavior for invalid config\n        }\n        this.results.coverage.typeValidation++;\n      });\n\n      await this.runTest('RuvSwarm - Boundary values', async () => {\n        const instance = new ruvSwarm.default({\n          maxAgents: 0,\n          timeout: 0,\n          retries: 0\n        });\n        assert(instance !== null, 'Should handle boundary values');\n        this.results.coverage.boundaries++;\n      });\n\n      await this.runTest('RuvSwarm - Maximum values', async () => {\n        const instance = new ruvSwarm.default({\n          maxAgents: Number.MAX_SAFE_INTEGER,\n          timeout: Number.MAX_SAFE_INTEGER\n        });\n        assert(instance !== null, 'Should handle maximum values');\n        this.results.coverage.boundaries++;\n      });\n    }\n  }\n\n  // Test Error Module Edge Cases\n  async testErrorModuleEdgeCases() {\n    console.log('\\n🔍 Testing Error Module Edge Cases...');\n\n    if (errorModule) {\n      await this.runTest('Error - Null error message', async () => {\n        try {\n          const error = new errorModule.RuvSwarmError(null, 'NULL001');\n          assert(error instanceof Error, 'Should create error with null message');\n        } catch (e) {\n          // Expected behavior\n        }\n        this.results.coverage.nullChecks++;\n      });\n\n      await this.runTest('Error - Undefined error code', async () => {\n        try {\n          const error = new errorModule.RuvSwarmError('Test error', undefined);\n          assert(error instanceof Error, 'Should create error with undefined code');\n        } catch (e) {\n          // Expected behavior\n        }\n        this.results.coverage.nullChecks++;\n      });\n\n      await this.runTest('Error - Empty string message', async () => {\n        const error = new errorModule.RuvSwarmError('', 'EMPTY001');\n        assert(error instanceof Error, 'Should create error with empty message');\n        this.results.coverage.edgeCases++;\n      });\n\n      await this.runTest('Error - Very long message', async () => {\n        const longMessage = 'x'.repeat(10000);\n        const error = new errorModule.RuvSwarmError(longMessage, 'LONG001');\n        assert(error instanceof Error, 'Should handle very long error messages');\n        this.results.coverage.edgeCases++;\n      });\n\n      await this.runTest('Error - Special characters in message', async () => {\n        const specialMessage = '🚀\\n\\t\\r\\0🎉\\'\"<>';\n        const error = new errorModule.RuvSwarmError(specialMessage, 'SPECIAL001');\n        assert(error instanceof Error, 'Should handle special characters');\n        this.results.coverage.edgeCases++;\n      });\n    }\n  }\n\n  // Test Type Validation Edge Cases\n  async testTypeValidationEdgeCases() {\n    console.log('\\n🔍 Testing Type Validation Edge Cases...');\n\n    await this.runTest('Type Validation - Function as parameter', async () => {\n      const func = () => 'test';\n      try {\n        // Test function validation in various contexts\n        const result = typeof func === 'function' ? func() : null;\n        assert(result !== null, 'Should handle function parameters');\n      } catch (error) {\n        // Expected behavior\n      }\n      this.results.coverage.typeValidation++;\n    });\n\n    await this.runTest('Type Validation - Symbol as parameter', async () => {\n      const sym = Symbol('test');\n      try {\n        const result = typeof sym === 'symbol' ? sym.toString() : null;\n        assert(result !== null, 'Should handle symbol parameters');\n      } catch (error) {\n        // Expected behavior\n      }\n      this.results.coverage.typeValidation++;\n    });\n\n    await this.runTest('Type Validation - BigInt as parameter', async () => {\n      const bigInt = BigInt(123456789012345678901234567890n);\n      try {\n        const result = typeof bigInt === 'bigint' ? bigInt.toString() : null;\n        assert(result !== null, 'Should handle BigInt parameters');\n      } catch (error) {\n        // Expected behavior\n      }\n      this.results.coverage.typeValidation++;\n    });\n\n    await this.runTest('Type Validation - Circular reference object', async () => {\n      const obj = { name: 'test' };\n      obj.self = obj; // Create circular reference\n      \n      try {\n        // Test JSON serialization which should fail on circular refs\n        JSON.stringify(obj);\n        assert.fail('Should have thrown on circular reference');\n      } catch (error) {\n        assert(error.message.includes('circular'), 'Should detect circular reference');\n      }\n      this.results.coverage.edgeCases++;\n    });\n\n    await this.runTest('Type Validation - Array with holes', async () => {\n      const sparseArray = new Array(10);\n      sparseArray[0] = 'first';\n      sparseArray[9] = 'last';\n      \n      const filtered = sparseArray.filter(x => x !== undefined);\n      assert(filtered.length === 2, 'Should handle sparse arrays');\n      this.results.coverage.edgeCases++;\n    });\n  }\n\n  // Test Boundary Conditions\n  async testBoundaryConditions() {\n    console.log('\\n🔍 Testing Boundary Conditions...');\n\n    await this.runTest('Boundary - Empty array processing', async () => {\n      const emptyArray = [];\n      const result = emptyArray.reduce((acc, val) => acc + val, 0);\n      assert(result === 0, 'Should handle empty array reduction');\n      this.results.coverage.boundaries++;\n    });\n\n    await this.runTest('Boundary - Single element array', async () => {\n      const singleArray = [42];\n      const result = singleArray.reduce((acc, val) => acc + val, 0);\n      assert(result === 42, 'Should handle single element array');\n      this.results.coverage.boundaries++;\n    });\n\n    await this.runTest('Boundary - Very large array', async () => {\n      const largeArray = new Array(100000).fill(1);\n      const result = largeArray.length;\n      assert(result === 100000, 'Should handle large arrays');\n      this.results.coverage.boundaries++;\n    });\n\n    await this.runTest('Boundary - Zero timeout', async () => {\n      const startTime = performance.now();\n      await new Promise(resolve => setTimeout(resolve, 0));\n      const endTime = performance.now();\n      assert(endTime >= startTime, 'Should handle zero timeout');\n      this.results.coverage.boundaries++;\n    });\n\n    await this.runTest('Boundary - Negative numbers', async () => {\n      const negative = -42;\n      const absolute = Math.abs(negative);\n      assert(absolute === 42, 'Should handle negative numbers');\n      this.results.coverage.boundaries++;\n    });\n\n    await this.runTest('Boundary - Floating point precision', async () => {\n      const result = 0.1 + 0.2;\n      const isClose = Math.abs(result - 0.3) < Number.EPSILON;\n      assert(isClose, 'Should handle floating point precision issues');\n      this.results.coverage.boundaries++;\n    });\n  }\n\n  // Test Error Path Coverage\n  async testErrorPathCoverage() {\n    console.log('\\n🔍 Testing Error Path Coverage...');\n\n    await this.runTest('Error Path - Division by zero', async () => {\n      try {\n        const result = 42 / 0;\n        assert(result === Infinity, 'Should handle division by zero');\n      } catch (error) {\n        // Some contexts might throw\n      }\n      this.results.coverage.errorPaths++;\n    });\n\n    await this.runTest('Error Path - Array index out of bounds', async () => {\n      const array = [1, 2, 3];\n      const result = array[100];\n      assert(result === undefined, 'Should handle out of bounds access');\n      this.results.coverage.errorPaths++;\n    });\n\n    await this.runTest('Error Path - Property access on null', async () => {\n      try {\n        const nullObj = null;\n        const result = nullObj?.property;\n        assert(result === undefined, 'Should handle null property access');\n      } catch (error) {\n        // Expected in non-optional chaining contexts\n      }\n      this.results.coverage.errorPaths++;\n    });\n\n    await this.runTest('Error Path - Invalid JSON parsing', async () => {\n      try {\n        JSON.parse('{invalid json}');\n        assert.fail('Should have thrown on invalid JSON');\n      } catch (error) {\n        assert(error instanceof SyntaxError, 'Should throw SyntaxError for invalid JSON');\n      }\n      this.results.coverage.errorPaths++;\n    });\n\n    await this.runTest('Error Path - Stack overflow protection', async () => {\n      try {\n        const recursiveFunction = () => recursiveFunction();\n        recursiveFunction();\n        assert.fail('Should have thrown stack overflow');\n      } catch (error) {\n        assert(error instanceof RangeError, 'Should throw RangeError for stack overflow');\n      }\n      this.results.coverage.errorPaths++;\n    });\n  }\n\n  // Test Null and Undefined Checks\n  async testNullUndefinedChecks() {\n    console.log('\\n🔍 Testing Null and Undefined Checks...');\n\n    await this.runTest('Null Check - Null parameter handling', async () => {\n      const processValue = (value) => {\n        if (value === null) return 'null';\n        if (value === undefined) return 'undefined';\n        return value.toString();\n      };\n      \n      assert(processValue(null) === 'null', 'Should handle null values');\n      assert(processValue(undefined) === 'undefined', 'Should handle undefined values');\n      assert(processValue(42) === '42', 'Should handle normal values');\n      \n      this.results.coverage.nullChecks++;\n    });\n\n    await this.runTest('Null Check - Nullish coalescing', async () => {\n      const value1 = null ?? 'default';\n      const value2 = undefined ?? 'default';\n      const value3 = 0 ?? 'default';\n      const value4 = '' ?? 'default';\n      \n      assert(value1 === 'default', 'Should handle null with nullish coalescing');\n      assert(value2 === 'default', 'Should handle undefined with nullish coalescing');\n      assert(value3 === 0, 'Should not replace falsy values with nullish coalescing');\n      assert(value4 === '', 'Should not replace empty string with nullish coalescing');\n      \n      this.results.coverage.nullChecks++;\n    });\n\n    await this.runTest('Null Check - Optional chaining with methods', async () => {\n      const obj = {\n        nested: {\n          method: () => 'success'\n        }\n      };\n      \n      const result1 = obj?.nested?.method?.();\n      const result2 = obj?.missing?.method?.();\n      \n      assert(result1 === 'success', 'Should call method with optional chaining');\n      assert(result2 === undefined, 'Should handle missing method with optional chaining');\n      \n      this.results.coverage.nullChecks++;\n    });\n\n    await this.runTest('Null Check - Array destructuring with defaults', async () => {\n      const [a = 'default_a', b = 'default_b'] = [undefined, null];\n      \n      assert(a === 'default_a', 'Should use default for undefined in destructuring');\n      assert(b === null, 'Should not use default for null in destructuring');\n      \n      this.results.coverage.nullChecks++;\n    });\n  }\n\n  generateReport() {\n    const passRate = (this.results.passed / this.results.totalTests * 100).toFixed(1);\n    const totalCoverage = Object.values(this.results.coverage).reduce((a, b) => a + b, 0);\n    \n    const report = {\n      timestamp: new Date().toISOString(),\n      summary: {\n        totalTests: this.results.totalTests,\n        passed: this.results.passed,\n        failed: this.results.failed,\n        passRate: `${passRate}%`,\n        totalCoveragePoints: totalCoverage\n      },\n      coverage: this.results.coverage,\n      errors: this.results.errors,\n      recommendations: this.generateRecommendations()\n    };\n\n    return report;\n  }\n\n  generateRecommendations() {\n    const recommendations = [];\n    const coverage = this.results.coverage;\n\n    if (this.results.failed > 0) {\n      recommendations.push('Fix failing edge case tests to improve robustness');\n    }\n\n    if (coverage.edgeCases < 10) {\n      recommendations.push('Add more edge case tests for comprehensive coverage');\n    }\n\n    if (coverage.boundaries < 6) {\n      recommendations.push('Expand boundary condition testing');\n    }\n\n    if (coverage.errorPaths < 5) {\n      recommendations.push('Add more error path tests for better error handling');\n    }\n\n    if (coverage.nullChecks < 4) {\n      recommendations.push('Enhance null/undefined checking tests');\n    }\n\n    if (coverage.typeValidation < 5) {\n      recommendations.push('Add more type validation tests');\n    }\n\n    if (recommendations.length === 0) {\n      recommendations.push('Excellent edge case coverage! Consider adding performance edge cases.');\n    }\n\n    return recommendations;\n  }\n\n  async run() {\n    console.log('⚔️ Starting Edge Case Coverage Test Suite');\n    console.log('=' .repeat(60));\n\n    await this.testMainModuleEdgeCases();\n    await this.testErrorModuleEdgeCases();\n    await this.testTypeValidationEdgeCases();\n    await this.testBoundaryConditions();\n    await this.testErrorPathCoverage();\n    await this.testNullUndefinedChecks();\n\n    const report = this.generateReport();\n    \n    console.log('\\n📊 Edge Case Test Results Summary');\n    console.log('=' .repeat(60));\n    console.log(`Total Tests: ${report.summary.totalTests}`);\n    console.log(`Passed: ${report.summary.passed}`);\n    console.log(`Failed: ${report.summary.failed}`);\n    console.log(`Pass Rate: ${report.summary.passRate}`);\n    console.log(`Total Coverage Points: ${report.summary.totalCoveragePoints}`);\n    \n    console.log('\\n📊 Coverage Breakdown:');\n    Object.entries(report.coverage).forEach(([area, count]) => {\n      console.log(`  ${area}: ${count} tests`);\n    });\n    \n    if (report.errors.length > 0) {\n      console.log('\\n❌ Errors:');\n      report.errors.forEach(error => {\n        console.log(`  - ${error.name}: ${error.error}`);\n      });\n    }\n\n    console.log('\\n💡 Recommendations:');\n    report.recommendations.forEach(rec => {\n      console.log(`  - ${rec}`);\n    });\n\n    // Save report to file\n    const reportPath = path.join(__dirname, '../test-reports/edge-case-test-report.json');\n    fs.mkdirSync(path.dirname(reportPath), { recursive: true });\n    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));\n    \n    console.log(`\\n📄 Report saved to: ${reportPath}`);\n    console.log('\\n✅ Edge Case Coverage Test Suite Complete!');\n    \n    return report;\n  }\n}\n\n// Run the test suite if this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  const testSuite = new EdgeCaseCoverageTestSuite();\n  try {\n    await testSuite.run();\n    process.exit(0);\n  } catch (error) {\n    console.error('❌ Edge case test suite failed:', error);\n    process.exit(1);\n  }\n}\n\nexport { EdgeCaseCoverageTestSuite };\nexport default EdgeCaseCoverageTestSuite;\n"],"mappings":"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","ignoreList":[]}