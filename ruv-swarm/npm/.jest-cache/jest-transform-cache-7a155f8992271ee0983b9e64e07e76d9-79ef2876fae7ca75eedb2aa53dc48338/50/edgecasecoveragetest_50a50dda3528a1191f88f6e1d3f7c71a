d3d9a26c0bdd96674b0a5a981ac37f35
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * Edge Case Coverage Test Suite
 * Tests boundary conditions and edge cases to improve coverage
 * 
 * @author Test Coverage Champion
 * @version 1.0.0
 */

import { strict as assert } from 'assert';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Import modules to test
let ruvSwarm;
try {
  ruvSwarm = await import('../src/index.js');
} catch (error) {
  console.warn('Warning: RuvSwarm module not found');
}
let errorModule;
try {
  errorModule = await import('../src/errors.js');
} catch (error) {
  console.warn('Warning: Error module not found');
}
let mcpTools;
try {
  mcpTools = await import('../src/mcp-tools-enhanced.js');
} catch (error) {
  console.warn('Warning: MCP tools module not found');
}
class EdgeCaseCoverageTestSuite {
  constructor() {
    this.results = {
      totalTests: 0,
      passed: 0,
      failed: 0,
      errors: [],
      coverage: {
        edgeCases: 0,
        boundaries: 0,
        errorPaths: 0,
        nullChecks: 0,
        typeValidation: 0
      }
    };
  }
  runTest(name, testFn) {
    var _this = this;
    return _asyncToGenerator(function* () {
      _this.results.totalTests++;
      try {
        yield testFn();
        _this.results.passed++;
        console.log(`‚úÖ ${name}`);
        return true;
      } catch (error) {
        _this.results.failed++;
        _this.results.errors.push({
          name,
          error: error.message
        });
        console.log(`‚ùå ${name}: ${error.message}`);
        return false;
      }
    })();
  }

  // Test Edge Cases in Main Module
  testMainModuleEdgeCases() {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      console.log('\nüîç Testing Main Module Edge Cases...');
      if (ruvSwarm) {
        yield _this2.runTest('RuvSwarm - Null initialization options', /*#__PURE__*/_asyncToGenerator(function* () {
          const instance = new ruvSwarm.default();
          assert(instance !== null, 'Should handle null options');
          _this2.results.coverage.edgeCases++;
        }));
        yield _this2.runTest('RuvSwarm - Empty object initialization', /*#__PURE__*/_asyncToGenerator(function* () {
          const instance = new ruvSwarm.default({});
          assert(instance !== null, 'Should handle empty options');
          _this2.results.coverage.edgeCases++;
        }));
        yield _this2.runTest('RuvSwarm - Invalid configuration types', /*#__PURE__*/_asyncToGenerator(function* () {
          try {
            const instance = new ruvSwarm.default({
              maxAgents: 'invalid',
              timeout: null,
              retries: -1
            });
            assert(instance !== null, 'Should handle invalid types gracefully');
          } catch (error) {
            // Expected behavior for invalid config
          }
          _this2.results.coverage.typeValidation++;
        }));
        yield _this2.runTest('RuvSwarm - Boundary values', /*#__PURE__*/_asyncToGenerator(function* () {
          const instance = new ruvSwarm.default({
            maxAgents: 0,
            timeout: 0,
            retries: 0
          });
          assert(instance !== null, 'Should handle boundary values');
          _this2.results.coverage.boundaries++;
        }));
        yield _this2.runTest('RuvSwarm - Maximum values', /*#__PURE__*/_asyncToGenerator(function* () {
          const instance = new ruvSwarm.default({
            maxAgents: Number.MAX_SAFE_INTEGER,
            timeout: Number.MAX_SAFE_INTEGER
          });
          assert(instance !== null, 'Should handle maximum values');
          _this2.results.coverage.boundaries++;
        }));
      }
    })();
  }

  // Test Error Module Edge Cases
  testErrorModuleEdgeCases() {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      console.log('\nüîç Testing Error Module Edge Cases...');
      if (errorModule) {
        yield _this3.runTest('Error - Null error message', /*#__PURE__*/_asyncToGenerator(function* () {
          try {
            const error = new errorModule.RuvSwarmError(null, 'NULL001');
            assert(error instanceof Error, 'Should create error with null message');
          } catch (e) {
            // Expected behavior
          }
          _this3.results.coverage.nullChecks++;
        }));
        yield _this3.runTest('Error - Undefined error code', /*#__PURE__*/_asyncToGenerator(function* () {
          try {
            const error = new errorModule.RuvSwarmError('Test error', undefined);
            assert(error instanceof Error, 'Should create error with undefined code');
          } catch (e) {
            // Expected behavior
          }
          _this3.results.coverage.nullChecks++;
        }));
        yield _this3.runTest('Error - Empty string message', /*#__PURE__*/_asyncToGenerator(function* () {
          const error = new errorModule.RuvSwarmError('', 'EMPTY001');
          assert(error instanceof Error, 'Should create error with empty message');
          _this3.results.coverage.edgeCases++;
        }));
        yield _this3.runTest('Error - Very long message', /*#__PURE__*/_asyncToGenerator(function* () {
          const longMessage = 'x'.repeat(10000);
          const error = new errorModule.RuvSwarmError(longMessage, 'LONG001');
          assert(error instanceof Error, 'Should handle very long error messages');
          _this3.results.coverage.edgeCases++;
        }));
        yield _this3.runTest('Error - Special characters in message', /*#__PURE__*/_asyncToGenerator(function* () {
          const specialMessage = 'üöÄ\n\t\r\0üéâ\'"<>';
          const error = new errorModule.RuvSwarmError(specialMessage, 'SPECIAL001');
          assert(error instanceof Error, 'Should handle special characters');
          _this3.results.coverage.edgeCases++;
        }));
      }
    })();
  }

  // Test Type Validation Edge Cases
  testTypeValidationEdgeCases() {
    var _this4 = this;
    return _asyncToGenerator(function* () {
      console.log('\nüîç Testing Type Validation Edge Cases...');
      yield _this4.runTest('Type Validation - Function as parameter', /*#__PURE__*/_asyncToGenerator(function* () {
        const func = () => 'test';
        try {
          // Test function validation in various contexts
          const result = typeof func === 'function' ? func() : null;
          assert(result !== null, 'Should handle function parameters');
        } catch (error) {
          // Expected behavior
        }
        _this4.results.coverage.typeValidation++;
      }));
      yield _this4.runTest('Type Validation - Symbol as parameter', /*#__PURE__*/_asyncToGenerator(function* () {
        const sym = Symbol('test');
        try {
          const result = typeof sym === 'symbol' ? sym.toString() : null;
          assert(result !== null, 'Should handle symbol parameters');
        } catch (error) {
          // Expected behavior
        }
        _this4.results.coverage.typeValidation++;
      }));
      yield _this4.runTest('Type Validation - BigInt as parameter', /*#__PURE__*/_asyncToGenerator(function* () {
        const bigInt = BigInt(123456789012345678901234567890n);
        try {
          const result = typeof bigInt === 'bigint' ? bigInt.toString() : null;
          assert(result !== null, 'Should handle BigInt parameters');
        } catch (error) {
          // Expected behavior
        }
        _this4.results.coverage.typeValidation++;
      }));
      yield _this4.runTest('Type Validation - Circular reference object', /*#__PURE__*/_asyncToGenerator(function* () {
        const obj = {
          name: 'test'
        };
        obj.self = obj; // Create circular reference

        try {
          // Test JSON serialization which should fail on circular refs
          JSON.stringify(obj);
          assert.fail('Should have thrown on circular reference');
        } catch (error) {
          assert(error.message.includes('circular'), 'Should detect circular reference');
        }
        _this4.results.coverage.edgeCases++;
      }));
      yield _this4.runTest('Type Validation - Array with holes', /*#__PURE__*/_asyncToGenerator(function* () {
        const sparseArray = new Array(10);
        sparseArray[0] = 'first';
        sparseArray[9] = 'last';
        const filtered = sparseArray.filter(x => x !== undefined);
        assert(filtered.length === 2, 'Should handle sparse arrays');
        _this4.results.coverage.edgeCases++;
      }));
    })();
  }

  // Test Boundary Conditions
  testBoundaryConditions() {
    var _this5 = this;
    return _asyncToGenerator(function* () {
      console.log('\nüîç Testing Boundary Conditions...');
      yield _this5.runTest('Boundary - Empty array processing', /*#__PURE__*/_asyncToGenerator(function* () {
        const emptyArray = [];
        const result = emptyArray.reduce((acc, val) => acc + val, 0);
        assert(result === 0, 'Should handle empty array reduction');
        _this5.results.coverage.boundaries++;
      }));
      yield _this5.runTest('Boundary - Single element array', /*#__PURE__*/_asyncToGenerator(function* () {
        const singleArray = [42];
        const result = singleArray.reduce((acc, val) => acc + val, 0);
        assert(result === 42, 'Should handle single element array');
        _this5.results.coverage.boundaries++;
      }));
      yield _this5.runTest('Boundary - Very large array', /*#__PURE__*/_asyncToGenerator(function* () {
        const largeArray = new Array(100000).fill(1);
        const result = largeArray.length;
        assert(result === 100000, 'Should handle large arrays');
        _this5.results.coverage.boundaries++;
      }));
      yield _this5.runTest('Boundary - Zero timeout', /*#__PURE__*/_asyncToGenerator(function* () {
        const startTime = performance.now();
        yield new Promise(resolve => setTimeout(resolve, 0));
        const endTime = performance.now();
        assert(endTime >= startTime, 'Should handle zero timeout');
        _this5.results.coverage.boundaries++;
      }));
      yield _this5.runTest('Boundary - Negative numbers', /*#__PURE__*/_asyncToGenerator(function* () {
        const negative = -42;
        const absolute = Math.abs(negative);
        assert(absolute === 42, 'Should handle negative numbers');
        _this5.results.coverage.boundaries++;
      }));
      yield _this5.runTest('Boundary - Floating point precision', /*#__PURE__*/_asyncToGenerator(function* () {
        const result = 0.1 + 0.2;
        const isClose = Math.abs(result - 0.3) < Number.EPSILON;
        assert(isClose, 'Should handle floating point precision issues');
        _this5.results.coverage.boundaries++;
      }));
    })();
  }

  // Test Error Path Coverage
  testErrorPathCoverage() {
    var _this6 = this;
    return _asyncToGenerator(function* () {
      console.log('\nüîç Testing Error Path Coverage...');
      yield _this6.runTest('Error Path - Division by zero', /*#__PURE__*/_asyncToGenerator(function* () {
        try {
          const result = 42 / 0;
          assert(result === Infinity, 'Should handle division by zero');
        } catch (error) {
          // Some contexts might throw
        }
        _this6.results.coverage.errorPaths++;
      }));
      yield _this6.runTest('Error Path - Array index out of bounds', /*#__PURE__*/_asyncToGenerator(function* () {
        const array = [1, 2, 3];
        const result = array[100];
        assert(result === undefined, 'Should handle out of bounds access');
        _this6.results.coverage.errorPaths++;
      }));
      yield _this6.runTest('Error Path - Property access on null', /*#__PURE__*/_asyncToGenerator(function* () {
        try {
          const nullObj = null;
          const result = nullObj === null || nullObj === void 0 ? void 0 : nullObj.property;
          assert(result === undefined, 'Should handle null property access');
        } catch (error) {
          // Expected in non-optional chaining contexts
        }
        _this6.results.coverage.errorPaths++;
      }));
      yield _this6.runTest('Error Path - Invalid JSON parsing', /*#__PURE__*/_asyncToGenerator(function* () {
        try {
          JSON.parse('{invalid json}');
          assert.fail('Should have thrown on invalid JSON');
        } catch (error) {
          assert(error instanceof SyntaxError, 'Should throw SyntaxError for invalid JSON');
        }
        _this6.results.coverage.errorPaths++;
      }));
      yield _this6.runTest('Error Path - Stack overflow protection', /*#__PURE__*/_asyncToGenerator(function* () {
        try {
          const recursiveFunction = () => recursiveFunction();
          recursiveFunction();
          assert.fail('Should have thrown stack overflow');
        } catch (error) {
          assert(error instanceof RangeError, 'Should throw RangeError for stack overflow');
        }
        _this6.results.coverage.errorPaths++;
      }));
    })();
  }

  // Test Null and Undefined Checks
  testNullUndefinedChecks() {
    var _this7 = this;
    return _asyncToGenerator(function* () {
      console.log('\nüîç Testing Null and Undefined Checks...');
      yield _this7.runTest('Null Check - Null parameter handling', /*#__PURE__*/_asyncToGenerator(function* () {
        const processValue = value => {
          if (value === null) return 'null';
          if (value === undefined) return 'undefined';
          return value.toString();
        };
        assert(processValue(null) === 'null', 'Should handle null values');
        assert(processValue(undefined) === 'undefined', 'Should handle undefined values');
        assert(processValue(42) === '42', 'Should handle normal values');
        _this7.results.coverage.nullChecks++;
      }));
      yield _this7.runTest('Null Check - Nullish coalescing', /*#__PURE__*/_asyncToGenerator(function* () {
        var _ref27, _, _ref28;
        const value1 = (_ref27 = null) !== null && _ref27 !== void 0 ? _ref27 : 'default';
        const value2 = undefined !== null && undefined !== void 0 ? undefined : 'default';
        const value3 = (_ = 0) !== null && _ !== void 0 ? _ : 'default';
        const value4 = (_ref28 = '') !== null && _ref28 !== void 0 ? _ref28 : 'default';
        assert(value1 === 'default', 'Should handle null with nullish coalescing');
        assert(value2 === 'default', 'Should handle undefined with nullish coalescing');
        assert(value3 === 0, 'Should not replace falsy values with nullish coalescing');
        assert(value4 === '', 'Should not replace empty string with nullish coalescing');
        _this7.results.coverage.nullChecks++;
      }));
      yield _this7.runTest('Null Check - Optional chaining with methods', /*#__PURE__*/_asyncToGenerator(function* () {
        var _obj$nested, _obj$nested$method, _obj$missing, _obj$missing$method;
        const obj = {
          nested: {
            method: () => 'success'
          }
        };
        const result1 = obj === null || obj === void 0 || (_obj$nested = obj.nested) === null || _obj$nested === void 0 || (_obj$nested$method = _obj$nested.method) === null || _obj$nested$method === void 0 ? void 0 : _obj$nested$method.call(_obj$nested);
        const result2 = obj === null || obj === void 0 || (_obj$missing = obj.missing) === null || _obj$missing === void 0 || (_obj$missing$method = _obj$missing.method) === null || _obj$missing$method === void 0 ? void 0 : _obj$missing$method.call(_obj$missing);
        assert(result1 === 'success', 'Should call method with optional chaining');
        assert(result2 === undefined, 'Should handle missing method with optional chaining');
        _this7.results.coverage.nullChecks++;
      }));
      yield _this7.runTest('Null Check - Array destructuring with defaults', /*#__PURE__*/_asyncToGenerator(function* () {
        const [a = 'default_a', b = 'default_b'] = [undefined, null];
        assert(a === 'default_a', 'Should use default for undefined in destructuring');
        assert(b === null, 'Should not use default for null in destructuring');
        _this7.results.coverage.nullChecks++;
      }));
    })();
  }
  generateReport() {
    const passRate = (this.results.passed / this.results.totalTests * 100).toFixed(1);
    const totalCoverage = Object.values(this.results.coverage).reduce((a, b) => a + b, 0);
    const report = {
      timestamp: new Date().toISOString(),
      summary: {
        totalTests: this.results.totalTests,
        passed: this.results.passed,
        failed: this.results.failed,
        passRate: `${passRate}%`,
        totalCoveragePoints: totalCoverage
      },
      coverage: this.results.coverage,
      errors: this.results.errors,
      recommendations: this.generateRecommendations()
    };
    return report;
  }
  generateRecommendations() {
    const recommendations = [];
    const coverage = this.results.coverage;
    if (this.results.failed > 0) {
      recommendations.push('Fix failing edge case tests to improve robustness');
    }
    if (coverage.edgeCases < 10) {
      recommendations.push('Add more edge case tests for comprehensive coverage');
    }
    if (coverage.boundaries < 6) {
      recommendations.push('Expand boundary condition testing');
    }
    if (coverage.errorPaths < 5) {
      recommendations.push('Add more error path tests for better error handling');
    }
    if (coverage.nullChecks < 4) {
      recommendations.push('Enhance null/undefined checking tests');
    }
    if (coverage.typeValidation < 5) {
      recommendations.push('Add more type validation tests');
    }
    if (recommendations.length === 0) {
      recommendations.push('Excellent edge case coverage! Consider adding performance edge cases.');
    }
    return recommendations;
  }
  run() {
    var _this8 = this;
    return _asyncToGenerator(function* () {
      console.log('‚öîÔ∏è Starting Edge Case Coverage Test Suite');
      console.log('='.repeat(60));
      yield _this8.testMainModuleEdgeCases();
      yield _this8.testErrorModuleEdgeCases();
      yield _this8.testTypeValidationEdgeCases();
      yield _this8.testBoundaryConditions();
      yield _this8.testErrorPathCoverage();
      yield _this8.testNullUndefinedChecks();
      const report = _this8.generateReport();
      console.log('\nüìä Edge Case Test Results Summary');
      console.log('='.repeat(60));
      console.log(`Total Tests: ${report.summary.totalTests}`);
      console.log(`Passed: ${report.summary.passed}`);
      console.log(`Failed: ${report.summary.failed}`);
      console.log(`Pass Rate: ${report.summary.passRate}`);
      console.log(`Total Coverage Points: ${report.summary.totalCoveragePoints}`);
      console.log('\nüìä Coverage Breakdown:');
      Object.entries(report.coverage).forEach(([area, count]) => {
        console.log(`  ${area}: ${count} tests`);
      });
      if (report.errors.length > 0) {
        console.log('\n‚ùå Errors:');
        report.errors.forEach(error => {
          console.log(`  - ${error.name}: ${error.error}`);
        });
      }
      console.log('\nüí° Recommendations:');
      report.recommendations.forEach(rec => {
        console.log(`  - ${rec}`);
      });

      // Save report to file
      const reportPath = path.join(__dirname, '../test-reports/edge-case-test-report.json');
      fs.mkdirSync(path.dirname(reportPath), {
        recursive: true
      });
      fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
      console.log(`\nüìÑ Report saved to: ${reportPath}`);
      console.log('\n‚úÖ Edge Case Coverage Test Suite Complete!');
      return report;
    })();
  }
}

// Run the test suite if this file is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  const testSuite = new EdgeCaseCoverageTestSuite();
  try {
    await testSuite.run();
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Edge case test suite failed:', error);
    process.exit(1);
  }
}
export { EdgeCaseCoverageTestSuite };
export default EdgeCaseCoverageTestSuite;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,