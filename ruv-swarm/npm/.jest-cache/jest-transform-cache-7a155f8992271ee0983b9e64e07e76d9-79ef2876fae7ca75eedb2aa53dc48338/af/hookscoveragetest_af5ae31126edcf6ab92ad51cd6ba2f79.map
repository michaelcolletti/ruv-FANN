{"version":3,"names":["assert","HooksManager","CLIHooks","ClaudeIntegration","AdvancedCommands","RemoteIntegration","GitHubCoordinator","ClaudeHooks","describe","hooks","beforeEach","it","throws","register","_asyncToGenerator","Error","rejects","execute","data","Promise","resolve","setTimeout","_ref6","context","required","_x","apply","arguments","optional","results","push","step","_ref9","_objectSpread","_x2","executeChain","deepEqual","addMiddleware","_ref1","hookName","next","_x3","_x4","_x5","success","cliHooks","parseCommand","setInteractive","originalIsTTY","process","stdin","isTTY","prompt","claude","setApiKey","complete","setRateLimit","promises","i","allSettled","rejected","filter","r","status","length","_mockResponse","hugePrompt","repeat","commands","aliases","requiresAdmin","isAdmin","args","schema","name","type","age","min","remote","connect","setCredentials","token","authenticate","circularRef","self","send","setAutoReconnect","maxRetries","attempts","onReconnectAttempt","coordinator","createPR","title","body","branch","files","path","content","force","result","checkMergeability","base","head","mergeable","conflicts","payload","event","invalidSignature","validateWebhook","claudeHooks","_ref28","taskId","_x6","runPreTask","_ref30","file","endsWith","formatted","_x7","runPostEdit","_storage","saveSession","id","order","priority","import","meta","url","argv","console","log","run","__filename"],"sources":["hooks-coverage.test.js"],"sourcesContent":["/**\n * Hooks System Coverage Tests\n * Tests all hook implementations for 100% coverage\n */\n\nimport assert from 'assert';\nimport { HooksManager } from '../src/hooks/index.js';\nimport { CLIHooks } from '../src/hooks/cli.js';\nimport { \n  ClaudeIntegration,\n  AdvancedCommands,\n  RemoteIntegration \n} from '../src/claude-integration/index.js';\nimport {\n  GitHubCoordinator,\n  ClaudeHooks\n} from '../src/github-coordinator/index.js';\n\ndescribe('Hooks System 100% Coverage', () => {\n  let hooks;\n\n  beforeEach(() => {\n    hooks = new HooksManager();\n  });\n\n  describe('HooksManager Core', () => {\n    it('should handle hook registration edge cases', () => {\n      // Null hook\n      assert.throws(\n        () => hooks.register(null, () => {}),\n        /Invalid hook name/\n      );\n\n      // Non-function handler\n      assert.throws(\n        () => hooks.register('test-hook', 'not-a-function'),\n        /Handler must be a function/\n      );\n\n      // Duplicate registration\n      hooks.register('duplicate', () => {});\n      assert.throws(\n        () => hooks.register('duplicate', () => {}),\n        /Hook already registered/\n      );\n    });\n\n    it('should handle hook execution failures', async () => {\n      hooks.register('failing-hook', async () => {\n        throw new Error('Hook failed');\n      });\n\n      await assert.rejects(\n        hooks.execute('failing-hook', { data: 'test' }),\n        /Hook failed/\n      );\n    });\n\n    it('should handle hook timeout', async () => {\n      hooks.register('slow-hook', async () => {\n        await new Promise(resolve => setTimeout(resolve, 5000));\n      });\n\n      hooks.setTimeout(100);\n\n      await assert.rejects(\n        hooks.execute('slow-hook', {}),\n        /Hook timeout/\n      );\n    });\n\n    it('should handle hook context validation', async () => {\n      hooks.register('validated-hook', async (context) => {\n        if (!context.required) {\n          throw new Error('Missing required field');\n        }\n        return context.required;\n      });\n\n      await assert.rejects(\n        hooks.execute('validated-hook', { optional: 'value' }),\n        /Missing required field/\n      );\n    });\n\n    it('should handle hook chain execution', async () => {\n      const results = [];\n      \n      hooks.register('chain-1', async () => {\n        results.push(1);\n        return { step: 1 };\n      });\n\n      hooks.register('chain-2', async (context) => {\n        results.push(2);\n        return { ...context, step: 2 };\n      });\n\n      await hooks.executeChain(['chain-1', 'chain-2'], {});\n      assert.deepEqual(results, [1, 2]);\n    });\n\n    it('should handle hook middleware errors', async () => {\n      hooks.addMiddleware(async (hookName, context, next) => {\n        if (hookName === 'restricted') {\n          throw new Error('Access denied');\n        }\n        return next();\n      });\n\n      hooks.register('restricted', async () => ({ success: true }));\n\n      await assert.rejects(\n        hooks.execute('restricted', {}),\n        /Access denied/\n      );\n    });\n  });\n\n  describe('CLI Hooks', () => {\n    let cliHooks;\n\n    beforeEach(() => {\n      cliHooks = new CLIHooks();\n    });\n\n    it('should handle invalid command parsing', () => {\n      assert.throws(\n        () => cliHooks.parseCommand(null),\n        /Invalid command/\n      );\n\n      assert.throws(\n        () => cliHooks.parseCommand(''),\n        /Empty command/\n      );\n    });\n\n    it('should handle command execution with missing arguments', async () => {\n      await assert.rejects(\n        cliHooks.execute('swarm', []), // Missing required args\n        /Missing required arguments/\n      );\n    });\n\n    it('should handle command validation failures', async () => {\n      await assert.rejects(\n        cliHooks.execute('swarm', ['init', '--invalid-flag']),\n        /Unknown flag/\n      );\n    });\n\n    it('should handle interactive mode edge cases', async () => {\n      cliHooks.setInteractive(true);\n      \n      // Simulate no TTY\n      const originalIsTTY = process.stdin.isTTY;\n      process.stdin.isTTY = false;\n\n      await assert.rejects(\n        cliHooks.prompt('Enter value:'),\n        /Not in interactive terminal/\n      );\n\n      process.stdin.isTTY = originalIsTTY;\n    });\n  });\n\n  describe('Claude Integration', () => {\n    let claude;\n\n    beforeEach(() => {\n      claude = new ClaudeIntegration();\n    });\n\n    it('should handle API key validation', async () => {\n      claude.setApiKey(''); // Empty API key\n\n      await assert.rejects(\n        claude.complete({ prompt: 'test' }),\n        /Invalid API key/\n      );\n    });\n\n    it('should handle rate limiting', async () => {\n      claude.setRateLimit(1); // 1 request per second\n      \n      const promises = [];\n      for (let i = 0; i < 5; i++) {\n        promises.push(claude.complete({ prompt: `test ${i}` }));\n      }\n\n      const results = await Promise.allSettled(promises);\n      const rejected = results.filter(r => r.status === 'rejected');\n      \n      assert(rejected.length > 0, 'Some requests should be rate limited');\n    });\n\n    it('should handle response parsing errors', async () => {\n      claude._mockResponse = 'invalid-json';\n\n      await assert.rejects(\n        claude.complete({ prompt: 'test' }),\n        /Failed to parse response/\n      );\n    });\n\n    it('should handle context window overflow', async () => {\n      const hugePrompt = 'x'.repeat(200000); // Exceeds context window\n\n      await assert.rejects(\n        claude.complete({ prompt: hugePrompt }),\n        /Context window exceeded/\n      );\n    });\n  });\n\n  describe('Advanced Commands', () => {\n    let commands;\n\n    beforeEach(() => {\n      commands = new AdvancedCommands();\n    });\n\n    it('should handle command registration conflicts', () => {\n      commands.register('test', () => {});\n      \n      assert.throws(\n        () => commands.register('test', () => {}),\n        /Command already exists/\n      );\n    });\n\n    it('should handle command alias conflicts', () => {\n      commands.register('test', () => {}, { aliases: ['t'] });\n      \n      assert.throws(\n        () => commands.register('test2', () => {}, { aliases: ['t'] }),\n        /Alias already in use/\n      );\n    });\n\n    it('should handle command permission errors', async () => {\n      commands.register('admin', () => {}, { \n        requiresAdmin: true \n      });\n\n      await assert.rejects(\n        commands.execute('admin', {}, { isAdmin: false }),\n        /Insufficient permissions/\n      );\n    });\n\n    it('should handle command validation schemas', async () => {\n      commands.register('validated', (args) => args, {\n        schema: {\n          name: { type: 'string', required: true },\n          age: { type: 'number', min: 0 }\n        }\n      });\n\n      await assert.rejects(\n        commands.execute('validated', { age: -5 }),\n        /Validation failed/\n      );\n    });\n  });\n\n  describe('Remote Integration', () => {\n    let remote;\n\n    beforeEach(() => {\n      remote = new RemoteIntegration();\n    });\n\n    it('should handle connection failures', async () => {\n      await assert.rejects(\n        remote.connect('invalid://url'),\n        /Failed to connect/\n      );\n    });\n\n    it('should handle authentication failures', async () => {\n      remote.setCredentials({ token: 'invalid' });\n\n      await assert.rejects(\n        remote.authenticate(),\n        /Authentication failed/\n      );\n    });\n\n    it('should handle message serialization errors', async () => {\n      await remote.connect('ws://localhost:3000');\n      \n      const circularRef = {};\n      circularRef.self = circularRef;\n\n      await assert.rejects(\n        remote.send(circularRef),\n        /Failed to serialize message/\n      );\n    });\n\n    it('should handle reconnection logic', async () => {\n      remote.setAutoReconnect(true, { maxRetries: 3 });\n      \n      let attempts = 0;\n      remote.onReconnectAttempt = () => attempts++;\n\n      await remote.connect('ws://invalid-host');\n      \n      // Wait for reconnection attempts\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      assert(attempts >= 1, 'Should attempt reconnection');\n    });\n  });\n\n  describe('GitHub Coordinator', () => {\n    let coordinator;\n\n    beforeEach(() => {\n      coordinator = new GitHubCoordinator();\n    });\n\n    it('should handle PR creation failures', async () => {\n      await assert.rejects(\n        coordinator.createPR({\n          title: '', // Empty title\n          body: 'Test PR'\n        }),\n        /PR title required/\n      );\n    });\n\n    it('should handle branch protection violations', async () => {\n      await assert.rejects(\n        coordinator.push({\n          branch: 'main',\n          files: [{ path: 'test.js', content: 'test' }],\n          force: true\n        }),\n        /Branch protection/\n      );\n    });\n\n    it('should handle merge conflict detection', async () => {\n      const result = await coordinator.checkMergeability({\n        base: 'main',\n        head: 'feature-branch'\n      });\n\n      if (!result.mergeable) {\n        assert(result.conflicts.length > 0, 'Should detect conflicts');\n      }\n    });\n\n    it('should handle webhook signature validation', () => {\n      const payload = { event: 'push' };\n      const invalidSignature = 'invalid';\n\n      assert.throws(\n        () => coordinator.validateWebhook(payload, invalidSignature),\n        /Invalid webhook signature/\n      );\n    });\n  });\n\n  describe('Claude Hooks Integration', () => {\n    let claudeHooks;\n\n    beforeEach(() => {\n      claudeHooks = new ClaudeHooks();\n    });\n\n    it('should handle pre-task hook failures', async () => {\n      claudeHooks.register('pre-task', async (context) => {\n        if (!context.taskId) {\n          throw new Error('Task ID required');\n        }\n      });\n\n      await assert.rejects(\n        claudeHooks.runPreTask({}),\n        /Task ID required/\n      );\n    });\n\n    it('should handle post-edit hook validation', async () => {\n      claudeHooks.register('post-edit', async (context) => {\n        if (context.file.endsWith('.py') && !context.formatted) {\n          throw new Error('Python files must be formatted');\n        }\n      });\n\n      await assert.rejects(\n        claudeHooks.runPostEdit({\n          file: 'test.py',\n          formatted: false\n        }),\n        /Python files must be formatted/\n      );\n    });\n\n    it('should handle session persistence errors', async () => {\n      claudeHooks._storage = null; // Simulate storage failure\n\n      await assert.rejects(\n        claudeHooks.saveSession({ id: 'test', data: {} }),\n        /Failed to save session/\n      );\n    });\n\n    it('should handle hook execution order', async () => {\n      const order = [];\n\n      claudeHooks.register('ordered', async () => order.push(1), { priority: 10 });\n      claudeHooks.register('ordered', async () => order.push(2), { priority: 5 });\n      claudeHooks.register('ordered', async () => order.push(3), { priority: 15 });\n\n      await claudeHooks.execute('ordered', {});\n      \n      assert.deepEqual(order, [2, 1, 3], 'Hooks should execute by priority');\n    });\n  });\n});\n\n// Run tests when executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  console.log('Running hooks coverage tests...');\n  \n  // Run all tests\n  const { run } = await import('./test-runner.js');\n  await run(__filename);\n}"],"mappings":"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","ignoreList":[]}