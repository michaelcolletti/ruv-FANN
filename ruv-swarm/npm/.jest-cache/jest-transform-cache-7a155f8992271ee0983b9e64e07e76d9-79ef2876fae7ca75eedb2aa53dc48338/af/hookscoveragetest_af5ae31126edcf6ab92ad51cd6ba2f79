7c605edb80839c0b4de9f7dfa55316b3
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * Hooks System Coverage Tests
 * Tests all hook implementations for 100% coverage
 */

import assert from 'assert';
import { HooksManager } from '../src/hooks/index.js';
import { CLIHooks } from '../src/hooks/cli.js';
import { ClaudeIntegration, AdvancedCommands, RemoteIntegration } from '../src/claude-integration/index.js';
import { GitHubCoordinator, ClaudeHooks } from '../src/github-coordinator/index.js';
describe('Hooks System 100% Coverage', () => {
  let hooks;
  beforeEach(() => {
    hooks = new HooksManager();
  });
  describe('HooksManager Core', () => {
    it('should handle hook registration edge cases', () => {
      // Null hook
      assert.throws(() => hooks.register(null, () => {}), /Invalid hook name/);

      // Non-function handler
      assert.throws(() => hooks.register('test-hook', 'not-a-function'), /Handler must be a function/);

      // Duplicate registration
      hooks.register('duplicate', () => {});
      assert.throws(() => hooks.register('duplicate', () => {}), /Hook already registered/);
    });
    it('should handle hook execution failures', /*#__PURE__*/_asyncToGenerator(function* () {
      hooks.register('failing-hook', /*#__PURE__*/_asyncToGenerator(function* () {
        throw new Error('Hook failed');
      }));
      yield assert.rejects(hooks.execute('failing-hook', {
        data: 'test'
      }), /Hook failed/);
    }));
    it('should handle hook timeout', /*#__PURE__*/_asyncToGenerator(function* () {
      hooks.register('slow-hook', /*#__PURE__*/_asyncToGenerator(function* () {
        yield new Promise(resolve => setTimeout(resolve, 5000));
      }));
      hooks.setTimeout(100);
      yield assert.rejects(hooks.execute('slow-hook', {}), /Hook timeout/);
    }));
    it('should handle hook context validation', /*#__PURE__*/_asyncToGenerator(function* () {
      hooks.register('validated-hook', /*#__PURE__*/function () {
        var _ref6 = _asyncToGenerator(function* (context) {
          if (!context.required) {
            throw new Error('Missing required field');
          }
          return context.required;
        });
        return function (_x) {
          return _ref6.apply(this, arguments);
        };
      }());
      yield assert.rejects(hooks.execute('validated-hook', {
        optional: 'value'
      }), /Missing required field/);
    }));
    it('should handle hook chain execution', /*#__PURE__*/_asyncToGenerator(function* () {
      const results = [];
      hooks.register('chain-1', /*#__PURE__*/_asyncToGenerator(function* () {
        results.push(1);
        return {
          step: 1
        };
      }));
      hooks.register('chain-2', /*#__PURE__*/function () {
        var _ref9 = _asyncToGenerator(function* (context) {
          results.push(2);
          return _objectSpread(_objectSpread({}, context), {}, {
            step: 2
          });
        });
        return function (_x2) {
          return _ref9.apply(this, arguments);
        };
      }());
      yield hooks.executeChain(['chain-1', 'chain-2'], {});
      assert.deepEqual(results, [1, 2]);
    }));
    it('should handle hook middleware errors', /*#__PURE__*/_asyncToGenerator(function* () {
      hooks.addMiddleware(/*#__PURE__*/function () {
        var _ref1 = _asyncToGenerator(function* (hookName, context, next) {
          if (hookName === 'restricted') {
            throw new Error('Access denied');
          }
          return next();
        });
        return function (_x3, _x4, _x5) {
          return _ref1.apply(this, arguments);
        };
      }());
      hooks.register('restricted', /*#__PURE__*/_asyncToGenerator(function* () {
        return {
          success: true
        };
      }));
      yield assert.rejects(hooks.execute('restricted', {}), /Access denied/);
    }));
  });
  describe('CLI Hooks', () => {
    let cliHooks;
    beforeEach(() => {
      cliHooks = new CLIHooks();
    });
    it('should handle invalid command parsing', () => {
      assert.throws(() => cliHooks.parseCommand(null), /Invalid command/);
      assert.throws(() => cliHooks.parseCommand(''), /Empty command/);
    });
    it('should handle command execution with missing arguments', /*#__PURE__*/_asyncToGenerator(function* () {
      yield assert.rejects(cliHooks.execute('swarm', []),
      // Missing required args
      /Missing required arguments/);
    }));
    it('should handle command validation failures', /*#__PURE__*/_asyncToGenerator(function* () {
      yield assert.rejects(cliHooks.execute('swarm', ['init', '--invalid-flag']), /Unknown flag/);
    }));
    it('should handle interactive mode edge cases', /*#__PURE__*/_asyncToGenerator(function* () {
      cliHooks.setInteractive(true);

      // Simulate no TTY
      const originalIsTTY = process.stdin.isTTY;
      process.stdin.isTTY = false;
      yield assert.rejects(cliHooks.prompt('Enter value:'), /Not in interactive terminal/);
      process.stdin.isTTY = originalIsTTY;
    }));
  });
  describe('Claude Integration', () => {
    let claude;
    beforeEach(() => {
      claude = new ClaudeIntegration();
    });
    it('should handle API key validation', /*#__PURE__*/_asyncToGenerator(function* () {
      claude.setApiKey(''); // Empty API key

      yield assert.rejects(claude.complete({
        prompt: 'test'
      }), /Invalid API key/);
    }));
    it('should handle rate limiting', /*#__PURE__*/_asyncToGenerator(function* () {
      claude.setRateLimit(1); // 1 request per second

      const promises = [];
      for (let i = 0; i < 5; i++) {
        promises.push(claude.complete({
          prompt: `test ${i}`
        }));
      }
      const results = yield Promise.allSettled(promises);
      const rejected = results.filter(r => r.status === 'rejected');
      assert(rejected.length > 0, 'Some requests should be rate limited');
    }));
    it('should handle response parsing errors', /*#__PURE__*/_asyncToGenerator(function* () {
      claude._mockResponse = 'invalid-json';
      yield assert.rejects(claude.complete({
        prompt: 'test'
      }), /Failed to parse response/);
    }));
    it('should handle context window overflow', /*#__PURE__*/_asyncToGenerator(function* () {
      const hugePrompt = 'x'.repeat(200000); // Exceeds context window

      yield assert.rejects(claude.complete({
        prompt: hugePrompt
      }), /Context window exceeded/);
    }));
  });
  describe('Advanced Commands', () => {
    let commands;
    beforeEach(() => {
      commands = new AdvancedCommands();
    });
    it('should handle command registration conflicts', () => {
      commands.register('test', () => {});
      assert.throws(() => commands.register('test', () => {}), /Command already exists/);
    });
    it('should handle command alias conflicts', () => {
      commands.register('test', () => {}, {
        aliases: ['t']
      });
      assert.throws(() => commands.register('test2', () => {}, {
        aliases: ['t']
      }), /Alias already in use/);
    });
    it('should handle command permission errors', /*#__PURE__*/_asyncToGenerator(function* () {
      commands.register('admin', () => {}, {
        requiresAdmin: true
      });
      yield assert.rejects(commands.execute('admin', {}, {
        isAdmin: false
      }), /Insufficient permissions/);
    }));
    it('should handle command validation schemas', /*#__PURE__*/_asyncToGenerator(function* () {
      commands.register('validated', args => args, {
        schema: {
          name: {
            type: 'string',
            required: true
          },
          age: {
            type: 'number',
            min: 0
          }
        }
      });
      yield assert.rejects(commands.execute('validated', {
        age: -5
      }), /Validation failed/);
    }));
  });
  describe('Remote Integration', () => {
    let remote;
    beforeEach(() => {
      remote = new RemoteIntegration();
    });
    it('should handle connection failures', /*#__PURE__*/_asyncToGenerator(function* () {
      yield assert.rejects(remote.connect('invalid://url'), /Failed to connect/);
    }));
    it('should handle authentication failures', /*#__PURE__*/_asyncToGenerator(function* () {
      remote.setCredentials({
        token: 'invalid'
      });
      yield assert.rejects(remote.authenticate(), /Authentication failed/);
    }));
    it('should handle message serialization errors', /*#__PURE__*/_asyncToGenerator(function* () {
      yield remote.connect('ws://localhost:3000');
      const circularRef = {};
      circularRef.self = circularRef;
      yield assert.rejects(remote.send(circularRef), /Failed to serialize message/);
    }));
    it('should handle reconnection logic', /*#__PURE__*/_asyncToGenerator(function* () {
      remote.setAutoReconnect(true, {
        maxRetries: 3
      });
      let attempts = 0;
      remote.onReconnectAttempt = () => attempts++;
      yield remote.connect('ws://invalid-host');

      // Wait for reconnection attempts
      yield new Promise(resolve => setTimeout(resolve, 1000));
      assert(attempts >= 1, 'Should attempt reconnection');
    }));
  });
  describe('GitHub Coordinator', () => {
    let coordinator;
    beforeEach(() => {
      coordinator = new GitHubCoordinator();
    });
    it('should handle PR creation failures', /*#__PURE__*/_asyncToGenerator(function* () {
      yield assert.rejects(coordinator.createPR({
        title: '',
        // Empty title
        body: 'Test PR'
      }), /PR title required/);
    }));
    it('should handle branch protection violations', /*#__PURE__*/_asyncToGenerator(function* () {
      yield assert.rejects(coordinator.push({
        branch: 'main',
        files: [{
          path: 'test.js',
          content: 'test'
        }],
        force: true
      }), /Branch protection/);
    }));
    it('should handle merge conflict detection', /*#__PURE__*/_asyncToGenerator(function* () {
      const result = yield coordinator.checkMergeability({
        base: 'main',
        head: 'feature-branch'
      });
      if (!result.mergeable) {
        assert(result.conflicts.length > 0, 'Should detect conflicts');
      }
    }));
    it('should handle webhook signature validation', () => {
      const payload = {
        event: 'push'
      };
      const invalidSignature = 'invalid';
      assert.throws(() => coordinator.validateWebhook(payload, invalidSignature), /Invalid webhook signature/);
    });
  });
  describe('Claude Hooks Integration', () => {
    let claudeHooks;
    beforeEach(() => {
      claudeHooks = new ClaudeHooks();
    });
    it('should handle pre-task hook failures', /*#__PURE__*/_asyncToGenerator(function* () {
      claudeHooks.register('pre-task', /*#__PURE__*/function () {
        var _ref28 = _asyncToGenerator(function* (context) {
          if (!context.taskId) {
            throw new Error('Task ID required');
          }
        });
        return function (_x6) {
          return _ref28.apply(this, arguments);
        };
      }());
      yield assert.rejects(claudeHooks.runPreTask({}), /Task ID required/);
    }));
    it('should handle post-edit hook validation', /*#__PURE__*/_asyncToGenerator(function* () {
      claudeHooks.register('post-edit', /*#__PURE__*/function () {
        var _ref30 = _asyncToGenerator(function* (context) {
          if (context.file.endsWith('.py') && !context.formatted) {
            throw new Error('Python files must be formatted');
          }
        });
        return function (_x7) {
          return _ref30.apply(this, arguments);
        };
      }());
      yield assert.rejects(claudeHooks.runPostEdit({
        file: 'test.py',
        formatted: false
      }), /Python files must be formatted/);
    }));
    it('should handle session persistence errors', /*#__PURE__*/_asyncToGenerator(function* () {
      claudeHooks._storage = null; // Simulate storage failure

      yield assert.rejects(claudeHooks.saveSession({
        id: 'test',
        data: {}
      }), /Failed to save session/);
    }));
    it('should handle hook execution order', /*#__PURE__*/_asyncToGenerator(function* () {
      const order = [];
      claudeHooks.register('ordered', /*#__PURE__*/_asyncToGenerator(function* () {
        return order.push(1);
      }), {
        priority: 10
      });
      claudeHooks.register('ordered', /*#__PURE__*/_asyncToGenerator(function* () {
        return order.push(2);
      }), {
        priority: 5
      });
      claudeHooks.register('ordered', /*#__PURE__*/_asyncToGenerator(function* () {
        return order.push(3);
      }), {
        priority: 15
      });
      yield claudeHooks.execute('ordered', {});
      assert.deepEqual(order, [2, 1, 3], 'Hooks should execute by priority');
    }));
  });
});

// Run tests when executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  console.log('Running hooks coverage tests...');

  // Run all tests
  const {
    run
  } = await import('./test-runner.js');
  await run(__filename);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,