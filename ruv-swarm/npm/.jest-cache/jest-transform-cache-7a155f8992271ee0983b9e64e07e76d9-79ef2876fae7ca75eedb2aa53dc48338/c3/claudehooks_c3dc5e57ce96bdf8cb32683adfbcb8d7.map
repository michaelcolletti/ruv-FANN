{"version":3,"names":["cov_1b4rpi984y","actualCoverage","asyncGeneratorStep","n","t","e","r","o","a","c","i","u","value","done","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","GHCoordinator","s","require","path","ClaudeGitHubHooks","constructor","options","b","f","coordinator","swarmId","generateSwarmId","activeTask","process","env","CLAUDE_SWARM_ID","Date","now","toString","preTask","taskDescription","_this","console","log","tasks","getAvailableTasks","state","keywords","toLowerCase","split","matchedTask","find","task","taskText","title","body","some","keyword","includes","claimed","claimTask","number","issue","error","message","postEdit","filePath","changes","_this2","basename","summary","updateTaskProgress","postTask","taskId","result","_this3","completed","autoClose","releaseTask","detectConflicts","_this4","status","getCoordinationStatus","Object","keys","swarmStatus","length","hasConflicts","warningCount","getDashboardUrl","_this5","baseUrl","config","owner","repo","issues","labelPrefix","allSwarms","board","registerHooks","_registerHooks","hooks","GITHUB_OWNER","GITHUB_REPO","args","description","file","check-conflicts","get-dashboard","module","exports"],"sources":["claude-hooks.js"],"sourcesContent":["/**\n * Claude Code Hooks for GitHub Coordination\n * Automatically coordinates swarm activities with GitHub\n */\n\nconst GHCoordinator = require('./gh-cli-coordinator');\n// const fs = require('fs').promises; // Unused - will be used in future implementation\nconst path = require('path');\n\nclass ClaudeGitHubHooks {\n  constructor(options = {}) {\n    this.coordinator = new GHCoordinator(options);\n    this.swarmId = options.swarmId || this.generateSwarmId();\n    this.activeTask = null;\n  }\n\n  generateSwarmId() {\n    // Generate swarm ID from environment or random\n    return process.env.CLAUDE_SWARM_ID || `claude-${Date.now().toString(36)}`;\n  }\n\n  /**\n   * Pre-task hook: Claim a GitHub issue before starting work\n   */\n  async preTask(taskDescription) {\n    console.log(`🎯 Pre-task: Looking for GitHub issues related to: ${taskDescription}`);\n\n    try {\n      // Search for related issues\n      const tasks = await this.coordinator.getAvailableTasks({ state: 'open' });\n\n      // Find best matching task (simple keyword matching for now)\n      const keywords = taskDescription.toLowerCase().split(' ');\n      const matchedTask = tasks.find(task => {\n        const taskText = `${task.title} ${task.body || ''}`.toLowerCase();\n        return keywords.some(keyword => taskText.includes(keyword));\n      });\n\n      if (matchedTask) {\n        const claimed = await this.coordinator.claimTask(this.swarmId, matchedTask.number);\n        if (claimed) {\n          this.activeTask = matchedTask.number;\n          console.log(`✅ Claimed GitHub issue #${matchedTask.number}: ${matchedTask.title}`);\n          return { claimed: true, issue: matchedTask.number };\n        }\n      }\n\n      console.log('ℹ️ No matching GitHub issue found, proceeding without claim');\n      return { claimed: false };\n    } catch (error) {\n      console.error('❌ Pre-task hook error:', error.message);\n      return { error: error.message };\n    }\n  }\n\n  /**\n   * Post-edit hook: Update GitHub issue with progress\n   */\n  async postEdit(filePath, changes) {\n    if (!this.activeTask) {\n      return;\n    }\n\n    try {\n      const message = `Updated \\`${path.basename(filePath)}\\`\\n\\n${changes.summary || 'File modified'}`;\n      await this.coordinator.updateTaskProgress(this.swarmId, this.activeTask, message);\n      console.log(`📝 Updated GitHub issue #${this.activeTask} with edit progress`);\n    } catch (error) {\n      console.error('❌ Post-edit hook error:', error.message);\n    }\n  }\n\n  /**\n   * Post-task hook: Complete or release the GitHub issue\n   */\n  async postTask(taskId, result) {\n    if (!this.activeTask) {\n      return;\n    }\n\n    try {\n      if (result.completed) {\n        const message = `✅ **Task Completed**\\n\\n${result.summary || 'Task completed successfully'}`;\n        await this.coordinator.updateTaskProgress(this.swarmId, this.activeTask, message);\n\n        // Option to auto-close issue (disabled by default)\n        if (result.autoClose) {\n          console.log(`🏁 Closing GitHub issue #${this.activeTask}`);\n          // Use gh CLI to close issue\n        }\n      } else {\n        await this.coordinator.releaseTask(this.swarmId, this.activeTask);\n        console.log(`🔓 Released GitHub issue #${this.activeTask}`);\n      }\n\n      this.activeTask = null;\n    } catch (error) {\n      console.error('❌ Post-task hook error:', error.message);\n    }\n  }\n\n  /**\n   * Conflict detection hook\n   */\n  async detectConflicts() {\n    try {\n      const status = await this.coordinator.getCoordinationStatus();\n\n      // Check if multiple swarms are working on similar files\n      // const conflicts = []; // Unused - will be used in future implementation\n\n      // Simple conflict detection based on swarm count\n      if (Object.keys(status.swarmStatus).length > 1) {\n        console.log('⚠️ Multiple swarms detected, checking for conflicts...');\n\n        // More sophisticated conflict detection could be added here\n        // For now, just warn about multiple active swarms\n        return {\n          hasConflicts: false,\n          warningCount: Object.keys(status.swarmStatus).length - 1,\n          message: 'Multiple swarms active, coordinate through GitHub issues',\n        };\n      }\n\n      return { hasConflicts: false };\n    } catch (error) {\n      console.error('❌ Conflict detection error:', error.message);\n      return { error: error.message };\n    }\n  }\n\n  /**\n   * Get coordination dashboard URL\n   */\n  async getDashboardUrl() {\n    const baseUrl = `https://github.com/${this.coordinator.config.owner}/${this.coordinator.config.repo}`;\n    return {\n      issues: `${baseUrl}/issues?q=is:issue+is:open+label:${this.coordinator.config.labelPrefix}${this.swarmId}`,\n      allSwarms: `${baseUrl}/issues?q=is:issue+is:open+label:${this.coordinator.config.labelPrefix}`,\n      board: `${baseUrl}/projects`,\n    };\n  }\n}\n\n// Hook registration for Claude Code\nasync function registerHooks() {\n  const hooks = new ClaudeGitHubHooks({\n    owner: process.env.GITHUB_OWNER || 'ruvnet',\n    repo: process.env.GITHUB_REPO || 'ruv-FANN',\n  });\n\n  // Register with Claude Code's hook system\n  return {\n    'pre-task': (args) => hooks.preTask(args.description),\n    'post-edit': (args) => hooks.postEdit(args.file, args.changes),\n    'post-task': (args) => hooks.postTask(args.taskId, args.result),\n    'check-conflicts': () => hooks.detectConflicts(),\n    'get-dashboard': () => hooks.getDashboardUrl(),\n  };\n}\n\nmodule.exports = { ClaudeGitHubHooks, registerHooks };"],"mappingseY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAA,SAAAE,mBAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,cAAAC,CAAA,GAAAP,CAAA,CAAAK,CAAA,EAAAC,CAAA,GAAAE,CAAA,GAAAD,CAAA,CAAAE,KAAA,WAAAT,CAAA,gBAAAE,CAAA,CAAAF,CAAA,KAAAO,CAAA,CAAAG,IAAA,GAAAT,CAAA,CAAAO,CAAA,IAAAG,OAAA,CAAAC,OAAA,CAAAJ,CAAA,EAAAK,IAAA,CAAAV,CAAA,EAAAC,CAAA;AAAA,SAAAU,kBAAAd,CAAA,6BAAAC,CAAA,SAAAC,CAAA,GAAAa,SAAA,aAAAJ,OAAA,WAAAR,CAAA,EAAAC,CAAA,QAAAC,CAAA,GAAAL,CAAA,CAAAgB,KAAA,CAAAf,CAAA,EAAAC,CAAA,YAAAe,MAAAjB,CAAA,IAAAD,kBAAA,CAAAM,CAAA,EAAAF,CAAA,EAAAC,CAAA,EAAAa,KAAA,EAAAC,MAAA,UAAAlB,CAAA,cAAAkB,OAAAlB,CAAA,IAAAD,kBAAA,CAAAM,CAAA,EAAAF,CAAA,EAAAC,CAAA,EAAAa,KAAA,EAAAC,MAAA,WAAAlB,CAAA,KAAAiB,KAAA;AAfZ;AACA;AACA;AACA;;AAEA,MAAME,aAAa;AAAA;AAAA,CAAAtB,cAAA,GAAAuB,CAAA,OAAGC,OAAO,CAAC,sBAAsB,CAAC;AACrD;AACA,MAAMC,IAAI;AAAA;AAAA,CAAAzB,cAAA,GAAAuB,CAAA,OAAGC,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAME,iBAAiB,CAAC;EACtBC,WAAWA,CAACC,OAAO;EAAA;EAAA,CAAA5B,cAAA,GAAA6B,CAAA,UAAG,CAAC,CAAC,GAAE;IAAA;IAAA7B,cAAA,GAAA8B,CAAA;IAAA9B,cAAA,GAAAuB,CAAA;IACxB,IAAI,CAACQ,WAAW,GAAG,IAAIT,aAAa,CAACM,OAAO,CAAC;IAAC;IAAA5B,cAAA,GAAAuB,CAAA;IAC9C,IAAI,CAACS,OAAO;IAAG;IAAA,CAAAhC,cAAA,GAAA6B,CAAA,UAAAD,OAAO,CAACI,OAAO;IAAA;IAAA,CAAAhC,cAAA,GAAA6B,CAAA,UAAI,IAAI,CAACI,eAAe,CAAC,CAAC;IAAC;IAAAjC,cAAA,GAAAuB,CAAA;IACzD,IAAI,CAACW,UAAU,GAAG,IAAI;EACxB;EAEAD,eAAeA,CAAA,EAAG;IAAA;IAAAjC,cAAA,GAAA8B,CAAA;IAAA9B,cAAA,GAAAuB,CAAA;IAChB;IACA,OAAO,2BAAAvB,cAAA,GAAA6B,CAAA,UAAAM,OAAO,CAACC,GAAG,CAACC,eAAe;IAAA;IAAA,CAAArC,cAAA,GAAA6B,CAAA,UAAI,UAAUS,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,EAAE;EAC3E;;EAEA;AACF;AACA;EACQC,OAAOA,CAACC,eAAe,EAAE;IAAA;IAAA,IAAAC,KAAA;IAAA,OAAA1B,iBAAA;MAAAjB,cAAA,GAAA8B,CAAA;MAAA9B,cAAA,GAAAuB,CAAA;MAC7BqB,OAAO,CAACC,GAAG,CAAC,sDAAsDH,eAAe,EAAE,CAAC;MAAC1C,cAAA,GAAAuB,CAAA;MAErF,IAAI;QACF;QACA,MAAMuB,KAAK;QAAA;QAAA,CAAA9C,cAAA,GAAAuB,CAAA,aAASoB,KAAI,CAACZ,WAAW,CAACgB,iBAAiB,CAAC;UAAEC,KAAK,EAAE;QAAO,CAAC,CAAC;;QAEzE;QACA,MAAMC,QAAQ;QAAA;QAAA,CAAAjD,cAAA,GAAAuB,CAAA,OAAGmB,eAAe,CAACQ,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC;QACzD,MAAMC,WAAW;QAAA;QAAA,CAAApD,cAAA,GAAAuB,CAAA,QAAGuB,KAAK,CAACO,IAAI,CAACC,IAAI,IAAI;UAAA;UAAAtD,cAAA,GAAA8B,CAAA;UACrC,MAAMyB,QAAQ;UAAA;UAAA,CAAAvD,cAAA,GAAAuB,CAAA,QAAG,GAAG+B,IAAI,CAACE,KAAK;UAAI;UAAA,CAAAxD,cAAA,GAAA6B,CAAA,UAAAyB,IAAI,CAACG,IAAI;UAAA;UAAA,CAAAzD,cAAA,GAAA6B,CAAA,UAAI,EAAE,GAAE,CAACqB,WAAW,CAAC,CAAC;UAAC;UAAAlD,cAAA,GAAAuB,CAAA;UAClE,OAAO0B,QAAQ,CAACS,IAAI,CAACC,OAAO,IAAI;YAAA;YAAA3D,cAAA,GAAA8B,CAAA;YAAA9B,cAAA,GAAAuB,CAAA;YAAA,OAAAgC,QAAQ,CAACK,QAAQ,CAACD,OAAO,CAAC;UAAD,CAAC,CAAC;QAC7D,CAAC,CAAC;QAAC;QAAA3D,cAAA,GAAAuB,CAAA;QAEH,IAAI6B,WAAW,EAAE;UAAA;UAAApD,cAAA,GAAA6B,CAAA;UACf,MAAMgC,OAAO;UAAA;UAAA,CAAA7D,cAAA,GAAAuB,CAAA,cAASoB,KAAI,CAACZ,WAAW,CAAC+B,SAAS,CAACnB,KAAI,CAACX,OAAO,EAAEoB,WAAW,CAACW,MAAM,CAAC;UAAC;UAAA/D,cAAA,GAAAuB,CAAA;UACnF,IAAIsC,OAAO,EAAE;YAAA;YAAA7D,cAAA,GAAA6B,CAAA;YAAA7B,cAAA,GAAAuB,CAAA;YACXoB,KAAI,CAACT,UAAU,GAAGkB,WAAW,CAACW,MAAM;YAAC;YAAA/D,cAAA,GAAAuB,CAAA;YACrCqB,OAAO,CAACC,GAAG,CAAC,2BAA2BO,WAAW,CAACW,MAAM,KAAKX,WAAW,CAACI,KAAK,EAAE,CAAC;YAAC;YAAAxD,cAAA,GAAAuB,CAAA;YACnF,OAAO;cAAEsC,OAAO,EAAE,IAAI;cAAEG,KAAK,EAAEZ,WAAW,CAACW;YAAO,CAAC;UACrD,CAAC;UAAA;UAAA;YAAA/D,cAAA,GAAA6B,CAAA;UAAA;QACH,CAAC;QAAA;QAAA;UAAA7B,cAAA,GAAA6B,CAAA;QAAA;QAAA7B,cAAA,GAAAuB,CAAA;QAEDqB,OAAO,CAACC,GAAG,CAAC,6DAA6D,CAAC;QAAC;QAAA7C,cAAA,GAAAuB,CAAA;QAC3E,OAAO;UAAEsC,OAAO,EAAE;QAAM,CAAC;MAC3B,CAAC,CAAC,OAAOI,KAAK,EAAE;QAAA;QAAAjE,cAAA,GAAAuB,CAAA;QACdqB,OAAO,CAACqB,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACC,OAAO,CAAC;QAAC;QAAAlE,cAAA,GAAAuB,CAAA;QACvD,OAAO;UAAE0C,KAAK,EAAEA,KAAK,CAACC;QAAQ,CAAC;MACjC;IAAC;EACH;;EAEA;AACF;AACA;EACQC,QAAQA,CAACC,QAAQ,EAAEC,OAAO,EAAE;IAAA;IAAA,IAAAC,MAAA;IAAA,OAAArD,iBAAA;MAAAjB,cAAA,GAAA8B,CAAA;MAAA9B,cAAA,GAAAuB,CAAA;MAChC,IAAI,CAAC+C,MAAI,CAACpC,UAAU,EAAE;QAAA;QAAAlC,cAAA,GAAA6B,CAAA;QAAA7B,cAAA,GAAAuB,CAAA;QACpB;MACF,CAAC;MAAA;MAAA;QAAAvB,cAAA,GAAA6B,CAAA;MAAA;MAAA7B,cAAA,GAAAuB,CAAA;MAED,IAAI;QACF,MAAM2C,OAAO;QAAA;QAAA,CAAAlE,cAAA,GAAAuB,CAAA,QAAG,aAAaE,IAAI,CAAC8C,QAAQ,CAACH,QAAQ,CAAC;QAAS;QAAA,CAAApE,cAAA,GAAA6B,CAAA,UAAAwC,OAAO,CAACG,OAAO;QAAA;QAAA,CAAAxE,cAAA,GAAA6B,CAAA,UAAI,eAAe,GAAE;QAAC;QAAA7B,cAAA,GAAAuB,CAAA;QAClG;QAAA,MAAM+C,MAAI,CAACvC,WAAW,CAAC0C,kBAAkB,CAACH,MAAI,CAACtC,OAAO,EAAEsC,MAAI,CAACpC,UAAU,EAAEgC,OAAO,CAAC;QAAC;QAAAlE,cAAA,GAAAuB,CAAA;QAClFqB,OAAO,CAACC,GAAG,CAAC,4BAA4ByB,MAAI,CAACpC,UAAU,qBAAqB,CAAC;MAC/E,CAAC,CAAC,OAAO+B,KAAK,EAAE;QAAA;QAAAjE,cAAA,GAAAuB,CAAA;QACdqB,OAAO,CAACqB,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAACC,OAAO,CAAC;MACzD;IAAC;EACH;;EAEA;AACF;AACA;EACQQ,QAAQA,CAACC,MAAM,EAAEC,MAAM,EAAE;IAAA;IAAA,IAAAC,MAAA;IAAA,OAAA5D,iBAAA;MAAAjB,cAAA,GAAA8B,CAAA;MAAA9B,cAAA,GAAAuB,CAAA;MAC7B,IAAI,CAACsD,MAAI,CAAC3C,UAAU,EAAE;QAAA;QAAAlC,cAAA,GAAA6B,CAAA;QAAA7B,cAAA,GAAAuB,CAAA;QACpB;MACF,CAAC;MAAA;MAAA;QAAAvB,cAAA,GAAA6B,CAAA;MAAA;MAAA7B,cAAA,GAAAuB,CAAA;MAED,IAAI;QAAA;QAAAvB,cAAA,GAAAuB,CAAA;QACF,IAAIqD,MAAM,CAACE,SAAS,EAAE;UAAA;UAAA9E,cAAA,GAAA6B,CAAA;UACpB,MAAMqC,OAAO;UAAA;UAAA,CAAAlE,cAAA,GAAAuB,CAAA,QAAG;UAA2B;UAAA,CAAAvB,cAAA,GAAA6B,CAAA,WAAA+C,MAAM,CAACJ,OAAO;UAAA;UAAA,CAAAxE,cAAA,GAAA6B,CAAA,WAAI,6BAA6B,GAAE;UAAC;UAAA7B,cAAA,GAAAuB,CAAA;UAC7F;UAAA,MAAMsD,MAAI,CAAC9C,WAAW,CAAC0C,kBAAkB,CAACI,MAAI,CAAC7C,OAAO,EAAE6C,MAAI,CAAC3C,UAAU,EAAEgC,OAAO,CAAC;;UAEjF;UAAA;UAAAlE,cAAA,GAAAuB,CAAA;UACA,IAAIqD,MAAM,CAACG,SAAS,EAAE;YAAA;YAAA/E,cAAA,GAAA6B,CAAA;YAAA7B,cAAA,GAAAuB,CAAA;YACpBqB,OAAO,CAACC,GAAG,CAAC,4BAA4BgC,MAAI,CAAC3C,UAAU,EAAE,CAAC;YAC1D;UACF,CAAC;UAAA;UAAA;YAAAlC,cAAA,GAAA6B,CAAA;UAAA;QACH,CAAC,MAAM;UAAA;UAAA7B,cAAA,GAAA6B,CAAA;UAAA7B,cAAA,GAAAuB,CAAA;UACL;UAAA,MAAMsD,MAAI,CAAC9C,WAAW,CAACiD,WAAW,CAACH,MAAI,CAAC7C,OAAO,EAAE6C,MAAI,CAAC3C,UAAU,CAAC;UAAC;UAAAlC,cAAA,GAAAuB,CAAA;UAClEqB,OAAO,CAACC,GAAG,CAAC,6BAA6BgC,MAAI,CAAC3C,UAAU,EAAE,CAAC;QAC7D;QAAC;QAAAlC,cAAA,GAAAuB,CAAA;QAEDsD,MAAI,CAAC3C,UAAU,GAAG,IAAI;MACxB,CAAC,CAAC,OAAO+B,KAAK,EAAE;QAAA;QAAAjE,cAAA,GAAAuB,CAAA;QACdqB,OAAO,CAACqB,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAACC,OAAO,CAAC;MACzD;IAAC;EACH;;EAEA;AACF;AACA;EACQe,eAAeA,CAAA,EAAG;IAAA;IAAA,IAAAC,MAAA;IAAA,OAAAjE,iBAAA;MAAAjB,cAAA,GAAA8B,CAAA;MAAA9B,cAAA,GAAAuB,CAAA;MACtB,IAAI;QACF,MAAM4D,MAAM;QAAA;QAAA,CAAAnF,cAAA,GAAAuB,CAAA,cAAS2D,MAAI,CAACnD,WAAW,CAACqD,qBAAqB,CAAC,CAAC;;QAE7D;QACA;;QAEA;QAAA;QAAApF,cAAA,GAAAuB,CAAA;QACA,IAAI8D,MAAM,CAACC,IAAI,CAACH,MAAM,CAACI,WAAW,CAAC,CAACC,MAAM,GAAG,CAAC,EAAE;UAAA;UAAAxF,cAAA,GAAA6B,CAAA;UAAA7B,cAAA,GAAAuB,CAAA;UAC9CqB,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;;UAErE;UACA;UAAA;UAAA7C,cAAA,GAAAuB,CAAA;UACA,OAAO;YACLkE,YAAY,EAAE,KAAK;YACnBC,YAAY,EAAEL,MAAM,CAACC,IAAI,CAACH,MAAM,CAACI,WAAW,CAAC,CAACC,MAAM,GAAG,CAAC;YACxDtB,OAAO,EAAE;UACX,CAAC;QACH,CAAC;QAAA;QAAA;UAAAlE,cAAA,GAAA6B,CAAA;QAAA;QAAA7B,cAAA,GAAAuB,CAAA;QAED,OAAO;UAAEkE,YAAY,EAAE;QAAM,CAAC;MAChC,CAAC,CAAC,OAAOxB,KAAK,EAAE;QAAA;QAAAjE,cAAA,GAAAuB,CAAA;QACdqB,OAAO,CAACqB,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAACC,OAAO,CAAC;QAAC;QAAAlE,cAAA,GAAAuB,CAAA;QAC5D,OAAO;UAAE0C,KAAK,EAAEA,KAAK,CAACC;QAAQ,CAAC;MACjC;IAAC;EACH;;EAEA;AACF;AACA;EACQyB,eAAeA,CAAA,EAAG;IAAA;IAAA,IAAAC,MAAA;IAAA,OAAA3E,iBAAA;MAAAjB,cAAA,GAAA8B,CAAA;MACtB,MAAM+D,OAAO;MAAA;MAAA,CAAA7F,cAAA,GAAAuB,CAAA,QAAG,sBAAsBqE,MAAI,CAAC7D,WAAW,CAAC+D,MAAM,CAACC,KAAK,IAAIH,MAAI,CAAC7D,WAAW,CAAC+D,MAAM,CAACE,IAAI,EAAE;MAAChG,cAAA,GAAAuB,CAAA;MACtG,OAAO;QACL0E,MAAM,EAAE,GAAGJ,OAAO,oCAAoCD,MAAI,CAAC7D,WAAW,CAAC+D,MAAM,CAACI,WAAW,GAAGN,MAAI,CAAC5D,OAAO,EAAE;QAC1GmE,SAAS,EAAE,GAAGN,OAAO,oCAAoCD,MAAI,CAAC7D,WAAW,CAAC+D,MAAM,CAACI,WAAW,EAAE;QAC9FE,KAAK,EAAE,GAAGP,OAAO;MACnB,CAAC;IAAC;EACJ;AACF;;AAEA;AAAA;AAAA,SACeQ,aAAaA,CAAA;EAAA,OAAAC,cAAA,CAAAnF,KAAA,OAAAD,SAAA;AAAA;AAAA;AAAA,SAAAoF,eAAA;EAAAA,cAAA,GAAArF,iBAAA,CAA5B,aAA+B;IAAA;IAAAjB,cAAA,GAAA8B,CAAA;IAC7B,MAAMyE,KAAK;IAAA;IAAA,CAAAvG,cAAA,GAAAuB,CAAA,QAAG,IAAIG,iBAAiB,CAAC;MAClCqE,KAAK;MAAE;MAAA,CAAA/F,cAAA,GAAA6B,CAAA,WAAAM,OAAO,CAACC,GAAG,CAACoE,YAAY;MAAA;MAAA,CAAAxG,cAAA,GAAA6B,CAAA,WAAI,QAAQ;MAC3CmE,IAAI;MAAE;MAAA,CAAAhG,cAAA,GAAA6B,CAAA,WAAAM,OAAO,CAACC,GAAG,CAACqE,WAAW;MAAA;MAAA,CAAAzG,cAAA,GAAA6B,CAAA,WAAI,UAAU;IAC7C,CAAC,CAAC;;IAEF;IAAA;IAAA7B,cAAA,GAAAuB,CAAA;IACA,OAAO;MACL,UAAU,EAAGmF,IAAI,IAAK;QAAA;QAAA1G,cAAA,GAAA8B,CAAA;QAAA9B,cAAA,GAAAuB,CAAA;QAAA,OAAAgF,KAAK,CAAC9D,OAAO,CAACiE,IAAI,CAACC,WAAW,CAAC;MAAD,CAAC;MACrD,WAAW,EAAGD,IAAI,IAAK;QAAA;QAAA1G,cAAA,GAAA8B,CAAA;QAAA9B,cAAA,GAAAuB,CAAA;QAAA,OAAAgF,KAAK,CAACpC,QAAQ,CAACuC,IAAI,CAACE,IAAI,EAAEF,IAAI,CAACrC,OAAO,CAAC;MAAD,CAAC;MAC9D,WAAW,EAAGqC,IAAI,IAAK;QAAA;QAAA1G,cAAA,GAAA8B,CAAA;QAAA9B,cAAA,GAAAuB,CAAA;QAAA,OAAAgF,KAAK,CAAC7B,QAAQ,CAACgC,IAAI,CAAC/B,MAAM,EAAE+B,IAAI,CAAC9B,MAAM,CAAC;MAAD,CAAC;MAC/D,iBAAiB,EAAEiC,CAAA,KAAM;QAAA;QAAA7G,cAAA,GAAA8B,CAAA;QAAA9B,cAAA,GAAAuB,CAAA;QAAA,OAAAgF,KAAK,CAACtB,eAAe,CAAC,CAAC;MAAD,CAAC;MAChD,eAAe,EAAE6B,CAAA,KAAM;QAAA;QAAA9G,cAAA,GAAA8B,CAAA;QAAA9B,cAAA,GAAAuB,CAAA;QAAA,OAAAgF,KAAK,CAACZ,eAAe,CAAC,CAAC;MAAD;IAC/C,CAAC;EACH,CAAC;EAAA,OAAAW,cAAA,CAAAnF,KAAA,OAAAD,SAAA;AAAA;AAAA;AAAAlB,cAAA,GAAAuB,CAAA;AAEDwF,MAAM,CAACC,OAAO,GAAG;EAAEtF,iBAAiB;EAAE2E;AAAc,CAAC","ignoreList":[]}