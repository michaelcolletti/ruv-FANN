{"version":3,"names":["cov_16xefb6vda","actualCoverage","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","value","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","asyncGeneratorStep","n","a","c","u","done","Promise","resolve","then","_asyncToGenerator","_next","_throw","DAACognition","constructor","f","s","cognitiveAgents","Map","distributedMemory","consensusProtocol","autonomyLevels","emergentBehaviors","initializeDAAPatterns","daaPatterns","autonomous_decision","name","description","characteristics","autonomyLevel","consensusRequirement","decisionSpeed","riskTolerance","distributed_reasoning","collaborationLevel","informationSharing","consensusBuilding","knowledgeAggregation","emergent_intelligence","emergenceThreshold","collectiveIQ","adaptiveCapacity","selfOrganization","swarm_cognition","swarmCoherence","localInteractions","globalOptimization","scalability","decentralized_learning","peerLearning","knowledgePropagation","adaptationRate","robustness","initializeDAAAgent","agentId","config","_this","daaAgent","id","b","cognitivePattern","selectDAAPattern","localMemory","peerConnections","Set","consensusState","proposals","votes","decisions","emergentTraits","learningState","localKnowledge","sharedKnowledge","propagationQueue","set","initializeDistributedMemory","console","log","requiresAutonomy","requiresCollaboration","enableEmergence","swarmMode","localSegment","sharedSegments","replicationFactor","consistencyLevel","lastSync","Date","now","makeAutonomousDecision","decision","_this2","agent","get","localEvaluation","evaluateLocally","consensusThreshold","seekConsensus","autonomousDecision","recommendation","confidence","reasoning","timestamp","autonomous","propagateDecision","evaluation","relevantKnowledge","retrieveRelevantKnowledge","pattern","similarDecisions","findSimilarDecisions","avgOutcome","calculateAverageOutcome","toFixed","relevant","key","isRelevantToDecision","source","_decision$context","decisionKeywords","context","keywords","some","keyword","includes","pastDecision","type","successfulDecisions","d","outcome","_this3","proposal","Math","random","toString","substr","proposer","status","votePromises","peerId","requestVote","all","consensusResult","tallyVotes","approved","consensusLevel","consensusDecision","proposalId","_this4","peerAgent","vote","reason","peerEvaluation","approveCount","totalWeight","weight","totalVotes","_this5","content","sendToPeer","from","message","_this6","processDecisionUpdate","processKnowledgeShare","processEmergentBehavior","peerDecision","receivedFrom","receivedAt","performDistributedLearning","learningData","_this7","localLearning","performLocalLearning","sharedLearning","shareLearning","aggregatedLearning","aggregatePeerLearning","updateAgentKnowledge","knowledgeGrowth","calculateKnowledgeGrowth","_this8","learning","patterns","insights","samples","extractPatterns","generateInsights","idx","isSequential","every","sample","isSequentialWith","prev","current","abs","hasSequential","p","hasFrequency","actionable","_this9","sharingResults","shareResult","shareWithPeer","_this0","peer","shared","checkForEmergentPatterns","_this1","aggregated","knowledge","patternKey","has","sources","totalPeers","size","uniqueInsights","deduplicateInsights","insight","seen","add","localSize","sharedSize","totalKnowledge","knowledgeDensity","collectivePatterns","analyzeCollectivePatterns","occurrence","diversity","emergentBehavior","strength","notifyEmergentBehavior","patternCounts","patternAgents","startsWith","patternType","totalAgents","count","agentSet","discoveredBy","behavior","reportedBy","getStatistics","stats","distributedKnowledge","consensusDecisions","autonomousDecisions","level","floor","avgKnowledgePerAgent","autonomyRate","connectAgents","agentId1","agentId2","agent1","agent2","createMeshNetwork","agentIds","j"],"sources":["daa-cognition.js"],"sourcesContent":["/**\n * DAA Cognition Module\n * Decentralized Autonomous Agent Cognitive Integration\n */\n\nexport class DAACognition {\n  constructor() {\n    this.cognitiveAgents = new Map();\n    this.distributedMemory = new Map();\n    this.consensusProtocol = new Map();\n    this.autonomyLevels = new Map();\n    this.emergentBehaviors = new Map();\n    \n    // Initialize DAA-specific cognitive patterns\n    this.initializeDAAPatterns();\n  }\n\n  /**\n   * Initialize DAA-specific cognitive patterns\n   */\n  initializeDAAPatterns() {\n    this.daaPatterns = {\n      autonomous_decision: {\n        name: 'Autonomous Decision Making',\n        description: 'Independent decision-making without central control',\n        characteristics: {\n          autonomyLevel: 0.9,\n          consensusRequirement: 0.3,\n          decisionSpeed: 0.8,\n          riskTolerance: 0.6\n        }\n      },\n      distributed_reasoning: {\n        name: 'Distributed Reasoning',\n        description: 'Collective reasoning across multiple agents',\n        characteristics: {\n          collaborationLevel: 0.9,\n          informationSharing: 0.8,\n          consensusBuilding: 0.7,\n          knowledgeAggregation: 0.8\n        }\n      },\n      emergent_intelligence: {\n        name: 'Emergent Intelligence',\n        description: 'Intelligence emerging from agent interactions',\n        characteristics: {\n          emergenceThreshold: 0.7,\n          collectiveIQ: 0.8,\n          adaptiveCapacity: 0.9,\n          selfOrganization: 0.85\n        }\n      },\n      swarm_cognition: {\n        name: 'Swarm Cognition',\n        description: 'Collective cognitive processing as a swarm',\n        characteristics: {\n          swarmCoherence: 0.8,\n          localInteractions: 0.9,\n          globalOptimization: 0.7,\n          scalability: 0.95\n        }\n      },\n      decentralized_learning: {\n        name: 'Decentralized Learning',\n        description: 'Learning without centralized coordination',\n        characteristics: {\n          peerLearning: 0.85,\n          knowledgePropagation: 0.8,\n          adaptationRate: 0.75,\n          robustness: 0.9\n        }\n      }\n    };\n  }\n\n  /**\n   * Initialize DAA cognitive agent\n   * @param {string} agentId - Agent identifier\n   * @param {Object} config - Agent configuration\n   */\n  async initializeDAAAgent(agentId, config) {\n    const daaAgent = {\n      id: agentId,\n      autonomyLevel: config.autonomyLevel || 0.7,\n      cognitivePattern: this.selectDAAPattern(config),\n      localMemory: new Map(),\n      peerConnections: new Set(),\n      consensusState: {\n        proposals: new Map(),\n        votes: new Map(),\n        decisions: []\n      },\n      emergentTraits: new Set(),\n      learningState: {\n        localKnowledge: new Map(),\n        sharedKnowledge: new Map(),\n        propagationQueue: []\n      }\n    };\n    \n    this.cognitiveAgents.set(agentId, daaAgent);\n    \n    // Initialize in distributed memory\n    this.initializeDistributedMemory(agentId);\n    \n    console.log(`Initialized DAA cognitive agent ${agentId} with autonomy level ${daaAgent.autonomyLevel}`);\n    \n    return daaAgent;\n  }\n\n  /**\n   * Select appropriate DAA cognitive pattern\n   * @param {Object} config - Agent configuration\n   */\n  selectDAAPattern(config) {\n    // Select based on agent type and requirements\n    if (config.requiresAutonomy) {\n      return this.daaPatterns.autonomous_decision;\n    } else if (config.requiresCollaboration) {\n      return this.daaPatterns.distributed_reasoning;\n    } else if (config.enableEmergence) {\n      return this.daaPatterns.emergent_intelligence;\n    } else if (config.swarmMode) {\n      return this.daaPatterns.swarm_cognition;\n    } else {\n      return this.daaPatterns.decentralized_learning;\n    }\n  }\n\n  /**\n   * Initialize distributed memory for agent\n   * @param {string} agentId - Agent identifier\n   */\n  initializeDistributedMemory(agentId) {\n    this.distributedMemory.set(agentId, {\n      localSegment: new Map(),\n      sharedSegments: new Map(),\n      replicationFactor: 3,\n      consistencyLevel: 'eventual',\n      lastSync: Date.now()\n    });\n  }\n\n  /**\n   * Enable autonomous decision making\n   * @param {string} agentId - Agent identifier\n   * @param {Object} decision - Decision context\n   */\n  async makeAutonomousDecision(agentId, decision) {\n    const agent = this.cognitiveAgents.get(agentId);\n    if (!agent) return null;\n    \n    // Evaluate decision based on local knowledge\n    const localEvaluation = this.evaluateLocally(agent, decision);\n    \n    // Check if consensus is needed based on autonomy level\n    if (agent.autonomyLevel < decision.consensusThreshold) {\n      return this.seekConsensus(agentId, decision, localEvaluation);\n    }\n    \n    // Make autonomous decision\n    const autonomousDecision = {\n      agentId,\n      decision: localEvaluation.recommendation,\n      confidence: localEvaluation.confidence,\n      reasoning: localEvaluation.reasoning,\n      timestamp: Date.now(),\n      autonomous: true\n    };\n    \n    // Record decision\n    agent.consensusState.decisions.push(autonomousDecision);\n    \n    // Propagate decision to peers\n    await this.propagateDecision(agentId, autonomousDecision);\n    \n    return autonomousDecision;\n  }\n\n  /**\n   * Evaluate decision locally\n   * @param {Object} agent - DAA agent\n   * @param {Object} decision - Decision context\n   */\n  evaluateLocally(agent, decision) {\n    const evaluation = {\n      recommendation: null,\n      confidence: 0,\n      reasoning: []\n    };\n    \n    // Use local knowledge for evaluation\n    const relevantKnowledge = this.retrieveRelevantKnowledge(agent, decision);\n    \n    // Apply cognitive pattern\n    const pattern = agent.cognitivePattern;\n    if (pattern.characteristics.autonomyLevel > 0.5) {\n      evaluation.confidence += 0.3;\n      evaluation.reasoning.push('High autonomy pattern supports independent decision');\n    }\n    \n    // Analyze based on past decisions\n    const similarDecisions = this.findSimilarDecisions(agent, decision);\n    if (similarDecisions.length > 0) {\n      const avgOutcome = this.calculateAverageOutcome(similarDecisions);\n      evaluation.confidence += avgOutcome * 0.4;\n      evaluation.reasoning.push(`Historical success rate: ${(avgOutcome * 100).toFixed(1)}%`);\n    }\n    \n    // Make recommendation\n    evaluation.recommendation = evaluation.confidence > 0.6 ? 'approve' : 'reject';\n    \n    return evaluation;\n  }\n\n  /**\n   * Retrieve relevant knowledge for decision\n   * @param {Object} agent - DAA agent\n   * @param {Object} decision - Decision context\n   */\n  retrieveRelevantKnowledge(agent, decision) {\n    const relevant = [];\n    \n    // Check local memory\n    for (const [key, value] of agent.localMemory) {\n      if (this.isRelevantToDecision(key, value, decision)) {\n        relevant.push({ source: 'local', key, value });\n      }\n    }\n    \n    // Check shared knowledge\n    for (const [key, value] of agent.learningState.sharedKnowledge) {\n      if (this.isRelevantToDecision(key, value, decision)) {\n        relevant.push({ source: 'shared', key, value });\n      }\n    }\n    \n    return relevant;\n  }\n\n  /**\n   * Check if knowledge is relevant to decision\n   * @param {string} key - Knowledge key\n   * @param {*} value - Knowledge value\n   * @param {Object} decision - Decision context\n   */\n  isRelevantToDecision(key, value, decision) {\n    // Simple relevance check based on keywords\n    const decisionKeywords = decision.context?.keywords || [];\n    return decisionKeywords.some(keyword => \n      key.includes(keyword) || \n      (typeof value === 'string' && value.includes(keyword))\n    );\n  }\n\n  /**\n   * Find similar past decisions\n   * @param {Object} agent - DAA agent\n   * @param {Object} decision - Current decision\n   */\n  findSimilarDecisions(agent, decision) {\n    return agent.consensusState.decisions.filter(pastDecision => {\n      // Simple similarity based on decision type\n      return pastDecision.decision === decision.type;\n    });\n  }\n\n  /**\n   * Calculate average outcome of decisions\n   * @param {Array} decisions - Past decisions\n   */\n  calculateAverageOutcome(decisions) {\n    if (decisions.length === 0) return 0.5;\n    \n    const successfulDecisions = decisions.filter(d => d.outcome === 'success').length;\n    return successfulDecisions / decisions.length;\n  }\n\n  /**\n   * Seek consensus from peer agents\n   * @param {string} agentId - Agent identifier\n   * @param {Object} decision - Decision context\n   * @param {Object} localEvaluation - Local evaluation\n   */\n  async seekConsensus(agentId, decision, localEvaluation) {\n    const agent = this.cognitiveAgents.get(agentId);\n    if (!agent) return null;\n    \n    // Create consensus proposal\n    const proposal = {\n      id: `proposal_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      proposer: agentId,\n      decision,\n      localEvaluation,\n      timestamp: Date.now(),\n      votes: new Map(),\n      status: 'pending'\n    };\n    \n    agent.consensusState.proposals.set(proposal.id, proposal);\n    \n    // Request votes from peers\n    const votePromises = [];\n    for (const peerId of agent.peerConnections) {\n      votePromises.push(this.requestVote(peerId, proposal));\n    }\n    \n    // Collect votes\n    const votes = await Promise.all(votePromises);\n    \n    // Tally results\n    const consensusResult = this.tallyVotes(votes, proposal);\n    \n    // Update proposal status\n    proposal.status = consensusResult.approved ? 'approved' : 'rejected';\n    proposal.consensusLevel = consensusResult.consensusLevel;\n    \n    // Create consensus decision\n    const consensusDecision = {\n      agentId,\n      decision: consensusResult.approved ? 'approve' : 'reject',\n      confidence: consensusResult.consensusLevel,\n      reasoning: [...localEvaluation.reasoning, `Consensus level: ${(consensusResult.consensusLevel * 100).toFixed(1)}%`],\n      timestamp: Date.now(),\n      autonomous: false,\n      proposalId: proposal.id\n    };\n    \n    agent.consensusState.decisions.push(consensusDecision);\n    \n    return consensusDecision;\n  }\n\n  /**\n   * Request vote from peer agent\n   * @param {string} peerId - Peer agent ID\n   * @param {Object} proposal - Consensus proposal\n   */\n  async requestVote(peerId, proposal) {\n    const peerAgent = this.cognitiveAgents.get(peerId);\n    if (!peerAgent) {\n      return { agentId: peerId, vote: 'abstain', reason: 'Agent not found' };\n    }\n    \n    // Peer evaluates proposal\n    const peerEvaluation = this.evaluateLocally(peerAgent, proposal.decision);\n    \n    // Cast vote based on evaluation\n    const vote = {\n      agentId: peerId,\n      vote: peerEvaluation.confidence > 0.5 ? 'approve' : 'reject',\n      confidence: peerEvaluation.confidence,\n      reason: peerEvaluation.reasoning[0] || 'No specific reason'\n    };\n    \n    return vote;\n  }\n\n  /**\n   * Tally votes for consensus\n   * @param {Array} votes - Vote results\n   * @param {Object} proposal - Consensus proposal\n   */\n  tallyVotes(votes, proposal) {\n    let approveCount = 0;\n    let totalWeight = 0;\n    \n    for (const vote of votes) {\n      const weight = vote.confidence || 0.5;\n      totalWeight += weight;\n      \n      if (vote.vote === 'approve') {\n        approveCount += weight;\n      }\n      \n      // Store vote in proposal\n      proposal.votes.set(vote.agentId, vote);\n    }\n    \n    const consensusLevel = totalWeight > 0 ? approveCount / totalWeight : 0;\n    const approved = consensusLevel > 0.5;\n    \n    return { approved, consensusLevel, totalVotes: votes.length };\n  }\n\n  /**\n   * Propagate decision to peer agents\n   * @param {string} agentId - Agent identifier\n   * @param {Object} decision - Decision to propagate\n   */\n  async propagateDecision(agentId, decision) {\n    const agent = this.cognitiveAgents.get(agentId);\n    if (!agent) return;\n    \n    // Add to propagation queue\n    agent.learningState.propagationQueue.push({\n      type: 'decision',\n      content: decision,\n      timestamp: Date.now()\n    });\n    \n    // Propagate to connected peers\n    for (const peerId of agent.peerConnections) {\n      await this.sendToPeer(peerId, {\n        type: 'decision_update',\n        from: agentId,\n        decision\n      });\n    }\n  }\n\n  /**\n   * Send message to peer agent\n   * @param {string} peerId - Peer agent ID\n   * @param {Object} message - Message to send\n   */\n  async sendToPeer(peerId, message) {\n    const peerAgent = this.cognitiveAgents.get(peerId);\n    if (!peerAgent) return;\n    \n    // Process message based on type\n    switch (message.type) {\n      case 'decision_update':\n        this.processDecisionUpdate(peerId, message);\n        break;\n      case 'knowledge_share':\n        this.processKnowledgeShare(peerId, message);\n        break;\n      case 'emergent_behavior':\n        this.processEmergentBehavior(peerId, message);\n        break;\n    }\n  }\n\n  /**\n   * Process decision update from peer\n   * @param {string} agentId - Receiving agent ID\n   * @param {Object} message - Update message\n   */\n  processDecisionUpdate(agentId, message) {\n    const agent = this.cognitiveAgents.get(agentId);\n    if (!agent) return;\n    \n    // Store peer decision for learning\n    const peerDecision = {\n      ...message.decision,\n      receivedFrom: message.from,\n      receivedAt: Date.now()\n    };\n    \n    agent.learningState.sharedKnowledge.set(\n      `peer_decision_${message.decision.timestamp}`,\n      peerDecision\n    );\n  }\n\n  /**\n   * Enable distributed learning\n   * @param {string} agentId - Agent identifier\n   * @param {Object} learningData - Data to learn from\n   */\n  async performDistributedLearning(agentId, learningData) {\n    const agent = this.cognitiveAgents.get(agentId);\n    if (!agent) return null;\n    \n    // Local learning phase\n    const localLearning = await this.performLocalLearning(agent, learningData);\n    \n    // Share learning with peers\n    const sharedLearning = await this.shareLearning(agentId, localLearning);\n    \n    // Aggregate peer learning\n    const aggregatedLearning = await this.aggregatePeerLearning(agentId, sharedLearning);\n    \n    // Update agent's knowledge\n    this.updateAgentKnowledge(agent, aggregatedLearning);\n    \n    return {\n      localLearning,\n      sharedLearning,\n      aggregatedLearning,\n      knowledgeGrowth: this.calculateKnowledgeGrowth(agent)\n    };\n  }\n\n  /**\n   * Perform local learning\n   * @param {Object} agent - DAA agent\n   * @param {Object} learningData - Learning data\n   */\n  async performLocalLearning(agent, learningData) {\n    const learning = {\n      patterns: [],\n      insights: [],\n      confidence: 0\n    };\n    \n    // Extract patterns from data\n    if (learningData.samples) {\n      const patterns = this.extractPatterns(learningData.samples);\n      learning.patterns = patterns;\n      learning.confidence = patterns.length > 0 ? 0.7 : 0.3;\n    }\n    \n    // Generate insights\n    if (learning.patterns.length > 0) {\n      learning.insights = this.generateInsights(learning.patterns);\n    }\n    \n    // Store in local memory\n    learning.patterns.forEach((pattern, idx) => {\n      agent.localMemory.set(`pattern_${Date.now()}_${idx}`, pattern);\n    });\n    \n    return learning;\n  }\n\n  /**\n   * Extract patterns from data samples\n   * @param {Array} samples - Data samples\n   */\n  extractPatterns(samples) {\n    const patterns = [];\n    \n    // Simple pattern extraction (placeholder for more sophisticated methods)\n    if (samples.length > 10) {\n      patterns.push({\n        type: 'frequency',\n        description: 'High sample frequency detected',\n        confidence: 0.8\n      });\n    }\n    \n    // Look for sequences\n    const isSequential = samples.every((sample, idx) => \n      idx === 0 || this.isSequentialWith(samples[idx-1], sample)\n    );\n    \n    if (isSequential) {\n      patterns.push({\n        type: 'sequential',\n        description: 'Sequential pattern detected',\n        confidence: 0.9\n      });\n    }\n    \n    return patterns;\n  }\n\n  /**\n   * Check if samples are sequential\n   * @param {*} prev - Previous sample\n   * @param {*} current - Current sample\n   */\n  isSequentialWith(prev, current) {\n    // Simple check - can be made more sophisticated\n    if (typeof prev === 'number' && typeof current === 'number') {\n      return Math.abs(current - prev) < 10;\n    }\n    return false;\n  }\n\n  /**\n   * Generate insights from patterns\n   * @param {Array} patterns - Detected patterns\n   */\n  generateInsights(patterns) {\n    const insights = [];\n    \n    // Generate insights based on pattern combinations\n    const hasSequential = patterns.some(p => p.type === 'sequential');\n    const hasFrequency = patterns.some(p => p.type === 'frequency');\n    \n    if (hasSequential && hasFrequency) {\n      insights.push({\n        type: 'combined',\n        description: 'High-frequency sequential data detected',\n        actionable: 'Consider time-series optimization'\n      });\n    }\n    \n    return insights;\n  }\n\n  /**\n   * Share learning with peer agents\n   * @param {string} agentId - Agent identifier\n   * @param {Object} localLearning - Local learning results\n   */\n  async shareLearning(agentId, localLearning) {\n    const agent = this.cognitiveAgents.get(agentId);\n    if (!agent) return [];\n    \n    const sharingResults = [];\n    \n    // Share with each peer\n    for (const peerId of agent.peerConnections) {\n      const shareResult = await this.shareWithPeer(agentId, peerId, localLearning);\n      sharingResults.push(shareResult);\n    }\n    \n    return sharingResults;\n  }\n\n  /**\n   * Share learning with specific peer\n   * @param {string} agentId - Sharing agent ID\n   * @param {string} peerId - Peer agent ID\n   * @param {Object} learning - Learning to share\n   */\n  async shareWithPeer(agentId, peerId, learning) {\n    await this.sendToPeer(peerId, {\n      type: 'knowledge_share',\n      from: agentId,\n      learning: {\n        patterns: learning.patterns,\n        insights: learning.insights,\n        confidence: learning.confidence,\n        timestamp: Date.now()\n      }\n    });\n    \n    return {\n      peer: peerId,\n      shared: true,\n      timestamp: Date.now()\n    };\n  }\n\n  /**\n   * Process knowledge share from peer\n   * @param {string} agentId - Receiving agent ID\n   * @param {Object} message - Knowledge share message\n   */\n  processKnowledgeShare(agentId, message) {\n    const agent = this.cognitiveAgents.get(agentId);\n    if (!agent) return;\n    \n    // Store shared knowledge\n    const sharedKnowledge = {\n      ...message.learning,\n      source: message.from,\n      receivedAt: Date.now()\n    };\n    \n    agent.learningState.sharedKnowledge.set(\n      `shared_${message.from}_${message.learning.timestamp}`,\n      sharedKnowledge\n    );\n    \n    // Check for emergent patterns\n    this.checkForEmergentPatterns(agentId);\n  }\n\n  /**\n   * Aggregate learning from peers\n   * @param {string} agentId - Agent identifier\n   * @param {Array} sharingResults - Results of sharing\n   */\n  async aggregatePeerLearning(agentId, sharingResults) {\n    const agent = this.cognitiveAgents.get(agentId);\n    if (!agent) return null;\n    \n    const aggregated = {\n      patterns: new Map(),\n      insights: [],\n      consensusLevel: 0\n    };\n    \n    // Collect all shared knowledge\n    for (const [key, knowledge] of agent.learningState.sharedKnowledge) {\n      if (knowledge.patterns) {\n        knowledge.patterns.forEach(pattern => {\n          const patternKey = `${pattern.type}_${pattern.description}`;\n          if (!aggregated.patterns.has(patternKey)) {\n            aggregated.patterns.set(patternKey, {\n              ...pattern,\n              sources: []\n            });\n          }\n          aggregated.patterns.get(patternKey).sources.push(knowledge.source);\n        });\n      }\n      \n      if (knowledge.insights) {\n        aggregated.insights.push(...knowledge.insights);\n      }\n    }\n    \n    // Calculate consensus level\n    const totalPeers = agent.peerConnections.size;\n    if (totalPeers > 0) {\n      aggregated.patterns.forEach(pattern => {\n        pattern.consensusLevel = pattern.sources.length / totalPeers;\n      });\n    }\n    \n    return aggregated;\n  }\n\n  /**\n   * Update agent knowledge with aggregated learning\n   * @param {Object} agent - DAA agent\n   * @param {Object} aggregatedLearning - Aggregated learning\n   */\n  updateAgentKnowledge(agent, aggregatedLearning) {\n    if (!aggregatedLearning) return;\n    \n    // Update local knowledge with high-consensus patterns\n    aggregatedLearning.patterns.forEach((pattern, key) => {\n      if (pattern.consensusLevel > 0.6) {\n        agent.localMemory.set(`consensus_${key}`, pattern);\n      }\n    });\n    \n    // Store unique insights\n    const uniqueInsights = this.deduplicateInsights(aggregatedLearning.insights);\n    uniqueInsights.forEach((insight, idx) => {\n      agent.localMemory.set(`insight_${Date.now()}_${idx}`, insight);\n    });\n  }\n\n  /**\n   * Deduplicate insights\n   * @param {Array} insights - Array of insights\n   */\n  deduplicateInsights(insights) {\n    const seen = new Set();\n    return insights.filter(insight => {\n      const key = `${insight.type}_${insight.description}`;\n      if (seen.has(key)) return false;\n      seen.add(key);\n      return true;\n    });\n  }\n\n  /**\n   * Calculate knowledge growth for agent\n   * @param {Object} agent - DAA agent\n   */\n  calculateKnowledgeGrowth(agent) {\n    const localSize = agent.localMemory.size;\n    const sharedSize = agent.learningState.sharedKnowledge.size;\n    \n    return {\n      localKnowledge: localSize,\n      sharedKnowledge: sharedSize,\n      totalKnowledge: localSize + sharedSize,\n      knowledgeDensity: (localSize + sharedSize) / (agent.peerConnections.size + 1)\n    };\n  }\n\n  /**\n   * Check for emergent patterns across agents\n   * @param {string} agentId - Agent identifier\n   */\n  checkForEmergentPatterns(agentId) {\n    const agent = this.cognitiveAgents.get(agentId);\n    if (!agent) return;\n    \n    // Analyze collective patterns\n    const collectivePatterns = this.analyzeCollectivePatterns();\n    \n    // Check for emergence criteria\n    collectivePatterns.forEach(pattern => {\n      if (pattern.occurrence > 0.7 && pattern.diversity > 0.5) {\n        const emergentBehavior = {\n          type: 'pattern_emergence',\n          pattern: pattern.type,\n          strength: pattern.occurrence,\n          diversity: pattern.diversity,\n          timestamp: Date.now()\n        };\n        \n        agent.emergentTraits.add(emergentBehavior.type);\n        \n        // Notify peers of emergent behavior\n        this.notifyEmergentBehavior(agentId, emergentBehavior);\n      }\n    });\n  }\n\n  /**\n   * Analyze patterns across all agents\n   */\n  analyzeCollectivePatterns() {\n    const patternCounts = new Map();\n    const patternAgents = new Map();\n    \n    // Count patterns across all agents\n    for (const [agentId, agent] of this.cognitiveAgents) {\n      for (const [key, value] of agent.localMemory) {\n        if (key.startsWith('pattern_') || key.startsWith('consensus_')) {\n          const patternType = value.type || 'unknown';\n          \n          if (!patternCounts.has(patternType)) {\n            patternCounts.set(patternType, 0);\n            patternAgents.set(patternType, new Set());\n          }\n          \n          patternCounts.set(patternType, patternCounts.get(patternType) + 1);\n          patternAgents.get(patternType).add(agentId);\n        }\n      }\n    }\n    \n    // Calculate pattern statistics\n    const totalAgents = this.cognitiveAgents.size;\n    const patterns = [];\n    \n    for (const [patternType, count] of patternCounts) {\n      const agentSet = patternAgents.get(patternType);\n      patterns.push({\n        type: patternType,\n        count: count,\n        occurrence: agentSet.size / totalAgents,\n        diversity: agentSet.size / count // How spread out the pattern is\n      });\n    }\n    \n    return patterns;\n  }\n\n  /**\n   * Notify peers of emergent behavior\n   * @param {string} agentId - Agent identifier\n   * @param {Object} emergentBehavior - Emergent behavior detected\n   */\n  notifyEmergentBehavior(agentId, emergentBehavior) {\n    const agent = this.cognitiveAgents.get(agentId);\n    if (!agent) return;\n    \n    // Record in emergent behaviors\n    if (!this.emergentBehaviors.has(emergentBehavior.type)) {\n      this.emergentBehaviors.set(emergentBehavior.type, []);\n    }\n    this.emergentBehaviors.get(emergentBehavior.type).push({\n      ...emergentBehavior,\n      discoveredBy: agentId\n    });\n    \n    // Notify all peers\n    for (const peerId of agent.peerConnections) {\n      this.sendToPeer(peerId, {\n        type: 'emergent_behavior',\n        from: agentId,\n        behavior: emergentBehavior\n      });\n    }\n  }\n\n  /**\n   * Process emergent behavior notification\n   * @param {string} agentId - Receiving agent ID\n   * @param {Object} message - Emergent behavior message\n   */\n  processEmergentBehavior(agentId, message) {\n    const agent = this.cognitiveAgents.get(agentId);\n    if (!agent) return;\n    \n    // Add to agent's emergent traits\n    agent.emergentTraits.add(message.behavior.type);\n    \n    // Store in local memory for future reference\n    agent.localMemory.set(\n      `emergent_${message.behavior.type}_${Date.now()}`,\n      {\n        ...message.behavior,\n        reportedBy: message.from\n      }\n    );\n  }\n\n  /**\n   * Get DAA statistics\n   */\n  getStatistics() {\n    const stats = {\n      totalAgents: this.cognitiveAgents.size,\n      autonomyLevels: {},\n      emergentBehaviors: this.emergentBehaviors.size,\n      distributedKnowledge: 0,\n      consensusDecisions: 0,\n      autonomousDecisions: 0\n    };\n    \n    // Calculate detailed statistics\n    for (const [agentId, agent] of this.cognitiveAgents) {\n      // Autonomy distribution\n      const level = Math.floor(agent.autonomyLevel * 10) / 10;\n      stats.autonomyLevels[level] = (stats.autonomyLevels[level] || 0) + 1;\n      \n      // Knowledge statistics\n      stats.distributedKnowledge += agent.localMemory.size + agent.learningState.sharedKnowledge.size;\n      \n      // Decision statistics\n      agent.consensusState.decisions.forEach(decision => {\n        if (decision.autonomous) {\n          stats.autonomousDecisions++;\n        } else {\n          stats.consensusDecisions++;\n        }\n      });\n    }\n    \n    // Average metrics\n    stats.avgKnowledgePerAgent = stats.totalAgents > 0 ? \n      stats.distributedKnowledge / stats.totalAgents : 0;\n    \n    stats.autonomyRate = (stats.autonomousDecisions + stats.consensusDecisions) > 0 ?\n      stats.autonomousDecisions / (stats.autonomousDecisions + stats.consensusDecisions) : 0;\n    \n    return stats;\n  }\n\n  /**\n   * Connect two agents as peers\n   * @param {string} agentId1 - First agent\n   * @param {string} agentId2 - Second agent\n   */\n  connectAgents(agentId1, agentId2) {\n    const agent1 = this.cognitiveAgents.get(agentId1);\n    const agent2 = this.cognitiveAgents.get(agentId2);\n    \n    if (agent1 && agent2) {\n      agent1.peerConnections.add(agentId2);\n      agent2.peerConnections.add(agentId1);\n      \n      console.log(`Connected DAA agents ${agentId1} and ${agentId2}`);\n    }\n  }\n\n  /**\n   * Create mesh network of agents\n   * @param {Array} agentIds - List of agent IDs\n   */\n  createMeshNetwork(agentIds) {\n    // Connect every agent to every other agent\n    for (let i = 0; i < agentIds.length; i++) {\n      for (let j = i + 1; j < agentIds.length; j++) {\n        this.connectAgents(agentIds[i], agentIds[j]);\n      }\n    }\n    \n    console.log(`Created mesh network with ${agentIds.length} agents`);\n  }\n}"],"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","ignoreList":[]}