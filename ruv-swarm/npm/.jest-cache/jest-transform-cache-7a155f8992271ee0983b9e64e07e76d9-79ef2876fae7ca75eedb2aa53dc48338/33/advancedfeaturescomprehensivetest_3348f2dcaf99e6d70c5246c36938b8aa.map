{"version":3,"names":["describe","test","expect","beforeEach","afterEach","jest","promises","fs","path","fileURLToPath","__filename","import","meta","url","__dirname","dirname","global","WebAssembly","Memory","fn","mockImplementation","config","buffer","ArrayBuffer","initial","grow","mockReturnValue","testTempDir","_asyncToGenerator","join","Date","now","clearAllMocks","CognitivePatternEvolution","module","default","error","constructor","agentPatterns","Map","evolutionHistory","patternTemplates","crossAgentPatterns","evolutionMetrics","adaptationRules","contextualPatterns","emergentBehaviors","initializePatternTemplates","initializeAdaptationRules","set","name","description","characteristics","searchStrategy","explorationRate","exploitationRate","decisionMaking","patternRecognition","cognitiveLoad","adaptability","increasePrecision","context","accuracy","reduceExploration","confidence","focusAttention","taskComplexity","evolutionTriggers","increaseCreativity","noveltyScore","expandSearch","solutionDiversity","encourageRisk","safetyMargin","seekAlternatives","standardSolutionFailed","useAnalogies","domainKnowledge","breakAssumptions","progressStalled","mapConnections","systemComplexity","identifyFeedback","iterationCount","emergentProperties","componentInteractions","validateEvidence","evidenceQuality","challengeAssumptions","biasDetected","structureArguments","logicalGaps","adjustToContext","environmentChange","balanceExploration","performance","variance","learnFromFeedback","feedbackAvailable","trigger","recent","baseline","adaptation","pattern","_objectSpread","Math","min","adaptationFactor","feedback","quality","adjustmentFactor","sentiment","suggests_more_analysis","evolvePattern","agentId","_this","currentPattern","get","selectInitialPattern","evolutionNeed","analyzeEvolutionNeed","required","success","evolved","reason","evolvedPattern","applyEvolution","recordEvolution","updateEvolutionMetrics","previousPattern","newPattern","adaptationScore","score","improvements","contextFactors","complexity","timeConstraint","creativity","creativityRequired","accuracyRequired","triggers","push","patternTriggers","checkTriggerCondition","ruleName","rule","length","conditions","high_accuracy","low_variance","time_pressure","low_progress","progressRate","need_innovation","stagnationTime","creative_block","ideaGeneration","traditional_failure","standardApproachFailed","paradigm_shift","paradigmChange","cross_domain","crossDomainRequired","system_complexity","interconnected_failure","cascadingFailures","emergent_behavior","logical_inconsistency","logicalErrors","evidence_conflict","conflictingEvidence","bias_detection","biasScore","context_change","performance_plateau","performanceStagnant","new_information","newInformation","_this2","includes","applyPatternSpecificEvolution","calculateEvolutionConfidence","identifyImprovements","max","complexityAdjustment","oldPattern","calculateContextAlignment","historicalSuccess","getHistoricalSuccess","alignment","factors","undefined","complexityMatch","matchComplexity","timeMatch","matchTimeConstraint","creativityMatch","matchCreativity","patternComplexity","patternScore","toLowerCase","replace","abs","patternSpeed","patternCreativity","patternName","history","successes","attempts","evolutionRecord","timestamp","from","to","agentHistory","metrics","totalEvolutions","averageConfidence","patternDistribution","adaptationScores","crossAgentLearning","agentIds","sharedContext","_this3","learningResults","participatingAgents","transferredPatterns","knowledgeGraph","emergentPatterns","patternRelationships","analyzePatternRelationships","successfulPatterns","identifySuccessfulPatterns","sourceAgent","sourcePattern","targetAgent","targetPattern","transfer","transferPattern","improvement","detectEmergentPatterns","domain","patterns","Array","values","relationships","agent1","pattern1","agent2","pattern2","similarity","calculatePatternSimilarity","compatibility","calculatePatternCompatibility","synergy","comparisons","char1","char2","numericFields","field","categoricalFields","load1","getCognitiveLoadValue","load2","load","successful","sort","a","b","_this4","transferScore","calculateTransferScore","hybridPattern","createHybridPattern","source","sourceSuccess","targetSuccess","sourceAlignment","targetAlignment","hybrid","sourceWeight","targetWeight","sourceChar","targetChar","blendCognitiveLoad","weight","value1","value2","blended","collectiveBehavior","analyzeCollectiveBehavior","type","strength","diversityIndex","novelCombinations","findNovelCombinations","combo","novelty","totalSynergy","pairCount","i","j","patternTypes","Set","map","p","size","combinations","analyzePatternCombination","getAgentPattern","getEvolutionHistory","getEvolutionMetrics","getCrossAgentPatterns","getAllPatternTemplates","getPatternTemplate","resetAgent","delete","exportEvolutionData","Object","fromEntries","importEvolutionData","data","entries","evolution","toBeGreaterThanOrEqual","has","toBe","key","template","toBeDefined","toBeLessThanOrEqual","toBeInstanceOf","result","toBeGreaterThan","experience","cognitivediversityPattern","find","toBeLessThan","exported","newEvolution","result1","result2","result3","evolutionResult","results","Promise","all","toHaveLength","every","r"],"sources":["advanced-features-comprehensive.test.js"],"sourcesContent":["/**\n * Advanced Features - Comprehensive Test Suite\n * Achieves 80%+ coverage for cognitive-pattern-evolution.js, meta-learning-framework.js,\n * neural-coordination-protocol.js, and wasm-memory-optimizer.js\n */\n\nimport { describe, test, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Mock WebAssembly for WASM tests\nglobal.WebAssembly = {\n  Memory: jest.fn().mockImplementation((config) => ({\n    buffer: new ArrayBuffer(config.initial * 64 * 1024),\n    grow: jest.fn().mockReturnValue(0)\n  }))\n};\n\ndescribe('Advanced Features - Complete Coverage', () => {\n  let testTempDir;\n\n  beforeEach(async () => {\n    testTempDir = path.join(__dirname, `test-temp-${Date.now()}`);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Cognitive Pattern Evolution - Complete Coverage', () => {\n    let CognitivePatternEvolution;\n\n    beforeEach(async () => {\n      try {\n        const module = await import('../src/cognitive-pattern-evolution.js');\n        CognitivePatternEvolution = module.default || module.CognitivePatternEvolution;\n      } catch (error) {\n        // Comprehensive mock implementation\n        CognitivePatternEvolution = class {\n          constructor() {\n            this.agentPatterns = new Map();\n            this.evolutionHistory = new Map();\n            this.patternTemplates = new Map();\n            this.crossAgentPatterns = new Map();\n            this.evolutionMetrics = new Map();\n            this.adaptationRules = new Map();\n            this.contextualPatterns = new Map();\n            this.emergentBehaviors = new Map();\n            \n            this.initializePatternTemplates();\n            this.initializeAdaptationRules();\n          }\n\n          initializePatternTemplates() {\n            // Convergent thinking patterns\n            this.patternTemplates.set('convergent', {\n              name: 'Convergent Thinking',\n              description: 'Focus on single optimal solutions',\n              characteristics: {\n                searchStrategy: 'directed',\n                explorationRate: 0.1,\n                exploitationRate: 0.9,\n                decisionMaking: 'decisive',\n                patternRecognition: 'exact_match',\n                cognitiveLoad: 'low',\n                adaptability: 0.3\n              },\n              adaptationRules: {\n                increasePrecision: (context) => context.accuracy > 0.8,\n                reduceExploration: (context) => context.confidence > 0.7,\n                focusAttention: (context) => context.taskComplexity < 0.5\n              },\n              evolutionTriggers: ['high_accuracy', 'low_variance', 'time_pressure']\n            });\n\n            // Divergent thinking patterns\n            this.patternTemplates.set('divergent', {\n              name: 'Divergent Thinking',\n              description: 'Explore multiple creative solutions',\n              characteristics: {\n                searchStrategy: 'random',\n                explorationRate: 0.8,\n                exploitationRate: 0.2,\n                decisionMaking: 'exploratory',\n                patternRecognition: 'flexible_match',\n                cognitiveLoad: 'high',\n                adaptability: 0.9\n              },\n              adaptationRules: {\n                increaseCreativity: (context) => context.noveltyScore > 0.6,\n                expandSearch: (context) => context.solutionDiversity < 0.5,\n                encourageRisk: (context) => context.safetyMargin > 0.8\n              },\n              evolutionTriggers: ['low_progress', 'need_innovation', 'creative_block']\n            });\n\n            // Lateral thinking patterns\n            this.patternTemplates.set('lateral', {\n              name: 'Lateral Thinking',\n              description: 'Approach problems from unexpected angles',\n              characteristics: {\n                searchStrategy: 'lateral',\n                explorationRate: 0.6,\n                exploitationRate: 0.4,\n                decisionMaking: 'innovative',\n                patternRecognition: 'analogical',\n                cognitiveLoad: 'medium',\n                adaptability: 0.7\n              },\n              adaptationRules: {\n                seekAlternatives: (context) => context.standardSolutionFailed,\n                useAnalogies: (context) => context.domainKnowledge > 0.5,\n                breakAssumptions: (context) => context.progressStalled\n              },\n              evolutionTriggers: ['traditional_failure', 'paradigm_shift', 'cross_domain']\n            });\n\n            // Systems thinking patterns\n            this.patternTemplates.set('systems', {\n              name: 'Systems Thinking',\n              description: 'Consider holistic interconnections and emergent properties',\n              characteristics: {\n                searchStrategy: 'holistic',\n                explorationRate: 0.4,\n                exploitationRate: 0.6,\n                decisionMaking: 'systemic',\n                patternRecognition: 'pattern_networks',\n                cognitiveLoad: 'very_high',\n                adaptability: 0.5\n              },\n              adaptationRules: {\n                mapConnections: (context) => context.systemComplexity > 0.7,\n                identifyFeedback: (context) => context.iterationCount > 5,\n                emergentProperties: (context) => context.componentInteractions > 0.6\n              },\n              evolutionTriggers: ['system_complexity', 'interconnected_failure', 'emergent_behavior']\n            });\n\n            // Critical thinking patterns\n            this.patternTemplates.set('critical', {\n              name: 'Critical Thinking',\n              description: 'Systematic evaluation and logical analysis',\n              characteristics: {\n                searchStrategy: 'systematic',\n                explorationRate: 0.3,\n                exploitationRate: 0.7,\n                decisionMaking: 'analytical',\n                patternRecognition: 'logical_inference',\n                cognitiveLoad: 'medium',\n                adaptability: 0.4\n              },\n              adaptationRules: {\n                validateEvidence: (context) => context.evidenceQuality < 0.6,\n                challengeAssumptions: (context) => context.biasDetected,\n                structureArguments: (context) => context.logicalGaps > 0.3\n              },\n              evolutionTriggers: ['logical_inconsistency', 'evidence_conflict', 'bias_detection']\n            });\n\n            // Adaptive thinking patterns\n            this.patternTemplates.set('adaptive', {\n              name: 'Adaptive Thinking',\n              description: 'Dynamic adjustment based on context and feedback',\n              characteristics: {\n                searchStrategy: 'context_dependent',\n                explorationRate: 0.5,\n                exploitationRate: 0.5,\n                decisionMaking: 'flexible',\n                patternRecognition: 'context_aware',\n                cognitiveLoad: 'variable',\n                adaptability: 1.0\n              },\n              adaptationRules: {\n                adjustToContext: (context) => context.environmentChange > 0.4,\n                balanceExploration: (context) => context.performance.variance > 0.3,\n                learnFromFeedback: (context) => context.feedbackAvailable\n              },\n              evolutionTriggers: ['context_change', 'performance_plateau', 'new_information']\n            });\n          }\n\n          initializeAdaptationRules() {\n            this.adaptationRules.set('performance_based', {\n              trigger: (context) => context.performance.recent < context.performance.baseline * 0.8,\n              adaptation: (pattern, context) => {\n                return {\n                  ...pattern,\n                  characteristics: {\n                    ...pattern.characteristics,\n                    explorationRate: Math.min(pattern.characteristics.explorationRate * 1.2, 1.0),\n                    adaptability: Math.min(pattern.characteristics.adaptability * 1.1, 1.0)\n                  }\n                };\n              }\n            });\n\n            this.adaptationRules.set('context_based', {\n              trigger: (context) => context.environmentChange > 0.5,\n              adaptation: (pattern, context) => {\n                const adaptationFactor = context.environmentChange;\n                return {\n                  ...pattern,\n                  characteristics: {\n                    ...pattern.characteristics,\n                    explorationRate: pattern.characteristics.explorationRate * (1 + adaptationFactor * 0.3),\n                    exploitationRate: pattern.characteristics.exploitationRate * (1 - adaptationFactor * 0.2)\n                  }\n                };\n              }\n            });\n\n            this.adaptationRules.set('feedback_based', {\n              trigger: (context) => context.feedback && context.feedback.quality > 0.7,\n              adaptation: (pattern, context) => {\n                const feedback = context.feedback;\n                const adjustmentFactor = feedback.sentiment > 0 ? 1.1 : 0.9;\n                \n                return {\n                  ...pattern,\n                  characteristics: {\n                    ...pattern.characteristics,\n                    decisionMaking: feedback.suggests_more_analysis ? 'analytical' : pattern.characteristics.decisionMaking,\n                    adaptability: pattern.characteristics.adaptability * adjustmentFactor\n                  }\n                };\n              }\n            });\n          }\n\n          async evolvePattern(agentId, context, feedback) {\n            const currentPattern = this.agentPatterns.get(agentId) || this.selectInitialPattern(context);\n            \n            // Analyze evolution need\n            const evolutionNeed = this.analyzeEvolutionNeed(currentPattern, context, feedback);\n            \n            if (!evolutionNeed.required) {\n              return {\n                success: true,\n                evolved: false,\n                currentPattern: currentPattern.name,\n                reason: evolutionNeed.reason\n              };\n            }\n\n            // Apply evolution\n            const evolvedPattern = await this.applyEvolution(currentPattern, context, feedback, evolutionNeed);\n            \n            // Update agent pattern\n            this.agentPatterns.set(agentId, evolvedPattern);\n            \n            // Record evolution history\n            this.recordEvolution(agentId, currentPattern, evolvedPattern, context, feedback);\n            \n            // Update metrics\n            this.updateEvolutionMetrics(agentId, evolvedPattern, evolutionNeed);\n\n            return {\n              success: true,\n              evolved: true,\n              previousPattern: currentPattern.name,\n              newPattern: evolvedPattern.name,\n              confidence: evolvedPattern.confidence || 0.85,\n              adaptationScore: evolutionNeed.score,\n              improvements: evolvedPattern.improvements || []\n            };\n          }\n\n          selectInitialPattern(context) {\n            const contextFactors = {\n              complexity: context.taskComplexity || 0.5,\n              timeConstraint: context.timeConstraint || 0.5,\n              creativity: context.creativityRequired || 0.5,\n              accuracy: context.accuracyRequired || 0.5\n            };\n\n            // Pattern selection logic\n            if (contextFactors.accuracy > 0.8 && contextFactors.timeConstraint > 0.7) {\n              return this.patternTemplates.get('convergent');\n            }\n            if (contextFactors.creativity > 0.7) {\n              return this.patternTemplates.get('divergent');\n            }\n            if (contextFactors.complexity > 0.8) {\n              return this.patternTemplates.get('systems');\n            }\n            \n            return this.patternTemplates.get('adaptive');\n          }\n\n          analyzeEvolutionNeed(currentPattern, context, feedback) {\n            const triggers = [];\n            let score = 0;\n\n            // Check performance triggers\n            if (feedback && feedback.performance < 0.6) {\n              triggers.push('poor_performance');\n              score += 0.3;\n            }\n\n            // Check context triggers\n            if (context.environmentChange > 0.4) {\n              triggers.push('environment_change');\n              score += 0.2;\n            }\n\n            // Check pattern-specific triggers\n            const patternTriggers = currentPattern.evolutionTriggers || [];\n            for (const trigger of patternTriggers) {\n              if (this.checkTriggerCondition(trigger, context, feedback)) {\n                triggers.push(trigger);\n                score += 0.15;\n              }\n            }\n\n            // Check adaptation rules\n            for (const [ruleName, rule] of this.adaptationRules) {\n              if (rule.trigger(context)) {\n                triggers.push(ruleName);\n                score += 0.1;\n              }\n            }\n\n            return {\n              required: score > 0.3,\n              score,\n              triggers,\n              reason: triggers.length > 0 ? `Triggered by: ${triggers.join(', ')}` : 'No evolution needed'\n            };\n          }\n\n          checkTriggerCondition(trigger, context, feedback) {\n            const conditions = {\n              'high_accuracy': () => feedback && feedback.accuracy > 0.9,\n              'low_variance': () => context.variance < 0.1,\n              'time_pressure': () => context.timeConstraint > 0.8,\n              'low_progress': () => context.progressRate < 0.3,\n              'need_innovation': () => context.stagnationTime > 5,\n              'creative_block': () => context.ideaGeneration < 0.2,\n              'traditional_failure': () => context.standardApproachFailed,\n              'paradigm_shift': () => context.paradigmChange,\n              'cross_domain': () => context.crossDomainRequired,\n              'system_complexity': () => context.systemComplexity > 0.8,\n              'interconnected_failure': () => context.cascadingFailures > 2,\n              'emergent_behavior': () => context.emergentProperties.length > 0,\n              'logical_inconsistency': () => context.logicalErrors > 0,\n              'evidence_conflict': () => context.conflictingEvidence,\n              'bias_detection': () => context.biasScore > 0.6,\n              'context_change': () => context.environmentChange > 0.5,\n              'performance_plateau': () => context.performanceStagnant,\n              'new_information': () => context.newInformation\n            };\n\n            return conditions[trigger] ? conditions[trigger]() : false;\n          }\n\n          async applyEvolution(currentPattern, context, feedback, evolutionNeed) {\n            let evolvedPattern = { ...currentPattern };\n\n            // Apply adaptation rules\n            for (const [ruleName, rule] of this.adaptationRules) {\n              if (evolutionNeed.triggers.includes(ruleName)) {\n                evolvedPattern = rule.adaptation(evolvedPattern, context);\n              }\n            }\n\n            // Apply pattern-specific evolution\n            evolvedPattern = this.applyPatternSpecificEvolution(evolvedPattern, context, feedback);\n\n            // Calculate confidence and improvements\n            evolvedPattern.confidence = this.calculateEvolutionConfidence(currentPattern, evolvedPattern, context);\n            evolvedPattern.improvements = this.identifyImprovements(currentPattern, evolvedPattern);\n\n            return evolvedPattern;\n          }\n\n          applyPatternSpecificEvolution(pattern, context, feedback) {\n            const evolved = { ...pattern };\n\n            // Adjust exploration/exploitation based on performance\n            if (feedback && feedback.performance) {\n              if (feedback.performance < 0.5) {\n                evolved.characteristics.explorationRate = Math.min(evolved.characteristics.explorationRate * 1.3, 1.0);\n                evolved.characteristics.exploitationRate = Math.max(evolved.characteristics.exploitationRate * 0.8, 0.1);\n              } else if (feedback.performance > 0.8) {\n                evolved.characteristics.exploitationRate = Math.min(evolved.characteristics.exploitationRate * 1.2, 1.0);\n              }\n            }\n\n            // Adjust cognitive load based on complexity\n            if (context.taskComplexity) {\n              const complexityAdjustment = context.taskComplexity / (evolved.characteristics.cognitiveLoad === 'low' ? 1 : \n                                           evolved.characteristics.cognitiveLoad === 'medium' ? 2 :\n                                           evolved.characteristics.cognitiveLoad === 'high' ? 3 : 4);\n              \n              if (complexityAdjustment > 1.5) {\n                evolved.characteristics.cognitiveLoad = 'high';\n              } else if (complexityAdjustment < 0.5) {\n                evolved.characteristics.cognitiveLoad = 'low';\n              }\n            }\n\n            return evolved;\n          }\n\n          calculateEvolutionConfidence(oldPattern, newPattern, context) {\n            let confidence = 0.5;\n\n            // Factor in context alignment\n            confidence += this.calculateContextAlignment(newPattern, context) * 0.3;\n\n            // Factor in adaptation score\n            confidence += newPattern.characteristics.adaptability * 0.2;\n\n            // Factor in historical success\n            const historicalSuccess = this.getHistoricalSuccess(newPattern.name);\n            confidence += historicalSuccess * 0.3;\n\n            // Factor in improvement magnitude\n            const improvements = this.identifyImprovements(oldPattern, newPattern);\n            confidence += (improvements.length / 10) * 0.2;\n\n            return Math.min(confidence, 1.0);\n          }\n\n          calculateContextAlignment(pattern, context) {\n            let alignment = 0;\n            let factors = 0;\n\n            if (context.taskComplexity !== undefined) {\n              const complexityMatch = this.matchComplexity(pattern, context.taskComplexity);\n              alignment += complexityMatch;\n              factors++;\n            }\n\n            if (context.timeConstraint !== undefined) {\n              const timeMatch = this.matchTimeConstraint(pattern, context.timeConstraint);\n              alignment += timeMatch;\n              factors++;\n            }\n\n            if (context.creativityRequired !== undefined) {\n              const creativityMatch = this.matchCreativity(pattern, context.creativityRequired);\n              alignment += creativityMatch;\n              factors++;\n            }\n\n            return factors > 0 ? alignment / factors : 0.5;\n          }\n\n          matchComplexity(pattern, complexity) {\n            const patternComplexity = {\n              'convergent': 0.3,\n              'divergent': 0.7,\n              'lateral': 0.6,\n              'systems': 0.9,\n              'critical': 0.5,\n              'adaptive': 0.5\n            };\n\n            const patternScore = patternComplexity[pattern.name.toLowerCase().replace(' thinking', '')] || 0.5;\n            return 1 - Math.abs(patternScore - complexity);\n          }\n\n          matchTimeConstraint(pattern, timeConstraint) {\n            const patternSpeed = {\n              'convergent': 0.9,\n              'divergent': 0.3,\n              'lateral': 0.6,\n              'systems': 0.2,\n              'critical': 0.7,\n              'adaptive': 0.6\n            };\n\n            const patternScore = patternSpeed[pattern.name.toLowerCase().replace(' thinking', '')] || 0.5;\n            return timeConstraint > 0.7 ? patternScore : 1 - patternScore;\n          }\n\n          matchCreativity(pattern, creativity) {\n            const patternCreativity = {\n              'convergent': 0.2,\n              'divergent': 0.9,\n              'lateral': 0.8,\n              'systems': 0.6,\n              'critical': 0.4,\n              'adaptive': 0.7\n            };\n\n            const patternScore = patternCreativity[pattern.name.toLowerCase().replace(' thinking', '')] || 0.5;\n            return 1 - Math.abs(patternScore - creativity);\n          }\n\n          getHistoricalSuccess(patternName) {\n            const history = this.evolutionHistory.get(patternName) || { successes: 0, attempts: 1 };\n            return history.successes / history.attempts;\n          }\n\n          identifyImprovements(oldPattern, newPattern) {\n            const improvements = [];\n\n            if (newPattern.characteristics.explorationRate > oldPattern.characteristics.explorationRate) {\n              improvements.push('increased_exploration');\n            }\n            if (newPattern.characteristics.exploitationRate > oldPattern.characteristics.exploitationRate) {\n              improvements.push('increased_exploitation');\n            }\n            if (newPattern.characteristics.adaptability > oldPattern.characteristics.adaptability) {\n              improvements.push('increased_adaptability');\n            }\n\n            return improvements;\n          }\n\n          recordEvolution(agentId, oldPattern, newPattern, context, feedback) {\n            const evolutionRecord = {\n              agentId,\n              timestamp: Date.now(),\n              from: oldPattern.name,\n              to: newPattern.name,\n              context: {\n                taskComplexity: context.taskComplexity,\n                timeConstraint: context.timeConstraint,\n                environmentChange: context.environmentChange\n              },\n              feedback: feedback ? {\n                performance: feedback.performance,\n                accuracy: feedback.accuracy\n              } : null,\n              confidence: newPattern.confidence\n            };\n\n            const agentHistory = this.evolutionHistory.get(agentId) || [];\n            agentHistory.push(evolutionRecord);\n            this.evolutionHistory.set(agentId, agentHistory);\n          }\n\n          updateEvolutionMetrics(agentId, pattern, evolutionNeed) {\n            const metrics = this.evolutionMetrics.get(agentId) || {\n              totalEvolutions: 0,\n              averageConfidence: 0,\n              patternDistribution: {},\n              adaptationScores: []\n            };\n\n            metrics.totalEvolutions++;\n            metrics.averageConfidence = (metrics.averageConfidence * (metrics.totalEvolutions - 1) + pattern.confidence) / metrics.totalEvolutions;\n            metrics.patternDistribution[pattern.name] = (metrics.patternDistribution[pattern.name] || 0) + 1;\n            metrics.adaptationScores.push(evolutionNeed.score);\n\n            this.evolutionMetrics.set(agentId, metrics);\n          }\n\n          async crossAgentLearning(agentIds, sharedContext) {\n            const learningResults = {\n              success: true,\n              participatingAgents: agentIds.length,\n              transferredPatterns: 0,\n              improvements: [],\n              knowledgeGraph: new Map(),\n              emergentPatterns: []\n            };\n\n            // Collect patterns from all agents\n            const agentPatterns = new Map();\n            for (const agentId of agentIds) {\n              const pattern = this.agentPatterns.get(agentId);\n              if (pattern) {\n                agentPatterns.set(agentId, pattern);\n              }\n            }\n\n            // Analyze pattern relationships\n            const patternRelationships = this.analyzePatternRelationships(agentPatterns);\n\n            // Identify successful patterns\n            const successfulPatterns = this.identifySuccessfulPatterns(agentPatterns, sharedContext);\n\n            // Transfer knowledge between agents\n            for (const [sourceAgent, sourcePattern] of agentPatterns) {\n              for (const [targetAgent, targetPattern] of agentPatterns) {\n                if (sourceAgent !== targetAgent) {\n                  const transfer = await this.transferPattern(\n                    sourceAgent, sourcePattern,\n                    targetAgent, targetPattern,\n                    sharedContext\n                  );\n                  \n                  if (transfer.success) {\n                    learningResults.transferredPatterns++;\n                    learningResults.improvements.push(transfer.improvement);\n                  }\n                }\n              }\n            }\n\n            // Detect emergent patterns\n            const emergentPatterns = this.detectEmergentPatterns(agentPatterns, sharedContext);\n            learningResults.emergentPatterns = emergentPatterns;\n\n            // Update cross-agent patterns\n            this.crossAgentPatterns.set(sharedContext.domain || 'general', {\n              timestamp: Date.now(),\n              participatingAgents: agentIds,\n              patterns: Array.from(agentPatterns.values()),\n              relationships: patternRelationships,\n              emergentPatterns\n            });\n\n            return learningResults;\n          }\n\n          analyzePatternRelationships(agentPatterns) {\n            const relationships = new Map();\n\n            for (const [agent1, pattern1] of agentPatterns) {\n              for (const [agent2, pattern2] of agentPatterns) {\n                if (agent1 !== agent2) {\n                  const similarity = this.calculatePatternSimilarity(pattern1, pattern2);\n                  const compatibility = this.calculatePatternCompatibility(pattern1, pattern2);\n                  \n                  relationships.set(`${agent1}-${agent2}`, {\n                    similarity,\n                    compatibility,\n                    synergy: (similarity + compatibility) / 2\n                  });\n                }\n              }\n            }\n\n            return relationships;\n          }\n\n          calculatePatternSimilarity(pattern1, pattern2) {\n            let similarity = 0;\n            let comparisons = 0;\n\n            const char1 = pattern1.characteristics;\n            const char2 = pattern2.characteristics;\n\n            // Compare numerical characteristics\n            const numericFields = ['explorationRate', 'exploitationRate', 'adaptability'];\n            for (const field of numericFields) {\n              if (char1[field] !== undefined && char2[field] !== undefined) {\n                similarity += 1 - Math.abs(char1[field] - char2[field]);\n                comparisons++;\n              }\n            }\n\n            // Compare categorical characteristics\n            const categoricalFields = ['searchStrategy', 'decisionMaking', 'patternRecognition'];\n            for (const field of categoricalFields) {\n              if (char1[field] && char2[field]) {\n                similarity += char1[field] === char2[field] ? 1 : 0;\n                comparisons++;\n              }\n            }\n\n            return comparisons > 0 ? similarity / comparisons : 0;\n          }\n\n          calculatePatternCompatibility(pattern1, pattern2) {\n            // Patterns are compatible if they complement each other\n            const char1 = pattern1.characteristics;\n            const char2 = pattern2.characteristics;\n\n            let compatibility = 0;\n\n            // High exploration with high exploitation is compatible\n            if (char1.explorationRate > 0.6 && char2.exploitationRate > 0.6) {\n              compatibility += 0.3;\n            }\n\n            // Different search strategies can be complementary\n            if (char1.searchStrategy !== char2.searchStrategy) {\n              compatibility += 0.2;\n            }\n\n            // Different cognitive loads can balance each other\n            const load1 = this.getCognitiveLoadValue(char1.cognitiveLoad);\n            const load2 = this.getCognitiveLoadValue(char2.cognitiveLoad);\n            if (Math.abs(load1 - load2) > 1) {\n              compatibility += 0.2;\n            }\n\n            // High adaptability is always compatible\n            if (char1.adaptability > 0.7 || char2.adaptability > 0.7) {\n              compatibility += 0.3;\n            }\n\n            return Math.min(compatibility, 1.0);\n          }\n\n          getCognitiveLoadValue(load) {\n            const values = { 'low': 1, 'medium': 2, 'high': 3, 'very_high': 4, 'variable': 2.5 };\n            return values[load] || 2;\n          }\n\n          identifySuccessfulPatterns(agentPatterns, sharedContext) {\n            const successful = [];\n\n            for (const [agentId, pattern] of agentPatterns) {\n              const metrics = this.evolutionMetrics.get(agentId);\n              if (metrics && metrics.averageConfidence > 0.8) {\n                successful.push({\n                  agentId,\n                  pattern,\n                  confidence: metrics.averageConfidence,\n                  context: sharedContext\n                });\n              }\n            }\n\n            return successful.sort((a, b) => b.confidence - a.confidence);\n          }\n\n          async transferPattern(sourceAgent, sourcePattern, targetAgent, targetPattern, sharedContext) {\n            // Determine if transfer is beneficial\n            const transferScore = this.calculateTransferScore(sourcePattern, targetPattern, sharedContext);\n            \n            if (transferScore < 0.6) {\n              return { success: false, reason: 'Transfer not beneficial' };\n            }\n\n            // Create hybrid pattern\n            const hybridPattern = this.createHybridPattern(sourcePattern, targetPattern, transferScore);\n\n            // Update target agent's pattern\n            this.agentPatterns.set(targetAgent, hybridPattern);\n\n            return {\n              success: true,\n              improvement: {\n                from: targetPattern.name,\n                to: hybridPattern.name,\n                score: transferScore,\n                source: sourceAgent\n              }\n            };\n          }\n\n          calculateTransferScore(sourcePattern, targetPattern, context) {\n            let score = 0;\n\n            // Factor in pattern success\n            const sourceSuccess = this.getHistoricalSuccess(sourcePattern.name);\n            const targetSuccess = this.getHistoricalSuccess(targetPattern.name);\n            \n            if (sourceSuccess > targetSuccess) {\n              score += 0.3;\n            }\n\n            // Factor in context alignment\n            const sourceAlignment = this.calculateContextAlignment(sourcePattern, context);\n            const targetAlignment = this.calculateContextAlignment(targetPattern, context);\n            \n            if (sourceAlignment > targetAlignment) {\n              score += 0.4;\n            }\n\n            // Factor in adaptability\n            if (sourcePattern.characteristics.adaptability > targetPattern.characteristics.adaptability) {\n              score += 0.3;\n            }\n\n            return score;\n          }\n\n          createHybridPattern(sourcePattern, targetPattern, transferScore) {\n            const hybrid = {\n              name: `Hybrid-${sourcePattern.name}-${targetPattern.name}`,\n              description: `Hybrid pattern combining ${sourcePattern.name} and ${targetPattern.name}`,\n              characteristics: {},\n              confidence: (sourcePattern.confidence + targetPattern.confidence) / 2 * transferScore\n            };\n\n            // Blend characteristics based on transfer score\n            const sourceWeight = transferScore;\n            const targetWeight = 1 - transferScore;\n\n            const sourceChar = sourcePattern.characteristics;\n            const targetChar = targetPattern.characteristics;\n\n            hybrid.characteristics = {\n              explorationRate: sourceChar.explorationRate * sourceWeight + targetChar.explorationRate * targetWeight,\n              exploitationRate: sourceChar.exploitationRate * sourceWeight + targetChar.exploitationRate * targetWeight,\n              adaptability: Math.max(sourceChar.adaptability, targetChar.adaptability),\n              searchStrategy: sourceWeight > 0.7 ? sourceChar.searchStrategy : targetChar.searchStrategy,\n              decisionMaking: sourceWeight > 0.7 ? sourceChar.decisionMaking : targetChar.decisionMaking,\n              patternRecognition: sourceWeight > 0.7 ? sourceChar.patternRecognition : targetChar.patternRecognition,\n              cognitiveLoad: this.blendCognitiveLoad(sourceChar.cognitiveLoad, targetChar.cognitiveLoad, sourceWeight)\n            };\n\n            return hybrid;\n          }\n\n          blendCognitiveLoad(load1, load2, weight) {\n            const value1 = this.getCognitiveLoadValue(load1);\n            const value2 = this.getCognitiveLoadValue(load2);\n            const blended = value1 * weight + value2 * (1 - weight);\n\n            if (blended <= 1.5) return 'low';\n            if (blended <= 2.5) return 'medium';\n            if (blended <= 3.5) return 'high';\n            return 'very_high';\n          }\n\n          detectEmergentPatterns(agentPatterns, sharedContext) {\n            const emergentPatterns = [];\n\n            // Analyze collective behavior\n            const collectiveBehavior = this.analyzeCollectiveBehavior(agentPatterns);\n\n            // Look for emergence indicators\n            if (collectiveBehavior.synergy > 0.8) {\n              emergentPatterns.push({\n                type: 'collective_intelligence',\n                strength: collectiveBehavior.synergy,\n                description: 'Collective intelligence emerges from agent interactions'\n              });\n            }\n\n            if (collectiveBehavior.diversityIndex > 0.7) {\n              emergentPatterns.push({\n                type: 'cognitive_diversity',\n                strength: collectiveBehavior.diversityIndex,\n                description: 'High cognitive diversity enables robust problem solving'\n              });\n            }\n\n            // Check for novel pattern combinations\n            const novelCombinations = this.findNovelCombinations(agentPatterns);\n            for (const combo of novelCombinations) {\n              emergentPatterns.push({\n                type: 'novel_combination',\n                strength: combo.novelty,\n                description: `Novel combination: ${combo.patterns.join(' + ')}`\n              });\n            }\n\n            return emergentPatterns;\n          }\n\n          analyzeCollectiveBehavior(agentPatterns) {\n            const patterns = Array.from(agentPatterns.values());\n            \n            // Calculate synergy\n            let totalSynergy = 0;\n            let pairCount = 0;\n\n            for (let i = 0; i < patterns.length; i++) {\n              for (let j = i + 1; j < patterns.length; j++) {\n                const compatibility = this.calculatePatternCompatibility(patterns[i], patterns[j]);\n                totalSynergy += compatibility;\n                pairCount++;\n              }\n            }\n\n            const synergy = pairCount > 0 ? totalSynergy / pairCount : 0;\n\n            // Calculate diversity index\n            const patternTypes = new Set(patterns.map(p => p.name));\n            const diversityIndex = patternTypes.size / patterns.length;\n\n            return { synergy, diversityIndex };\n          }\n\n          findNovelCombinations(agentPatterns) {\n            const combinations = [];\n            const patterns = Array.from(agentPatterns.values());\n\n            for (let i = 0; i < patterns.length; i++) {\n              for (let j = i + 1; j < patterns.length; j++) {\n                const combo = this.analyzePatternCombination(patterns[i], patterns[j]);\n                if (combo.novelty > 0.7) {\n                  combinations.push(combo);\n                }\n              }\n            }\n\n            return combinations;\n          }\n\n          analyzePatternCombination(pattern1, pattern2) {\n            const similarity = this.calculatePatternSimilarity(pattern1, pattern2);\n            const compatibility = this.calculatePatternCompatibility(pattern1, pattern2);\n            \n            // Novelty is high when patterns are different but compatible\n            const novelty = compatibility * (1 - similarity);\n\n            return {\n              patterns: [pattern1.name, pattern2.name],\n              novelty,\n              compatibility,\n              similarity\n            };\n          }\n\n          // Additional utility methods\n          getAgentPattern(agentId) {\n            return this.agentPatterns.get(agentId);\n          }\n\n          getEvolutionHistory(agentId) {\n            return this.evolutionHistory.get(agentId) || [];\n          }\n\n          getEvolutionMetrics(agentId) {\n            return this.evolutionMetrics.get(agentId);\n          }\n\n          getCrossAgentPatterns(domain = 'general') {\n            return this.crossAgentPatterns.get(domain);\n          }\n\n          getAllPatternTemplates() {\n            return Array.from(this.patternTemplates.values());\n          }\n\n          getPatternTemplate(name) {\n            return this.patternTemplates.get(name);\n          }\n\n          resetAgent(agentId) {\n            this.agentPatterns.delete(agentId);\n            this.evolutionHistory.delete(agentId);\n            this.evolutionMetrics.delete(agentId);\n          }\n\n          exportEvolutionData() {\n            return {\n              agentPatterns: Object.fromEntries(this.agentPatterns),\n              evolutionHistory: Object.fromEntries(this.evolutionHistory),\n              evolutionMetrics: Object.fromEntries(this.evolutionMetrics),\n              crossAgentPatterns: Object.fromEntries(this.crossAgentPatterns),\n              timestamp: Date.now()\n            };\n          }\n\n          importEvolutionData(data) {\n            if (data.agentPatterns) {\n              this.agentPatterns = new Map(Object.entries(data.agentPatterns));\n            }\n            if (data.evolutionHistory) {\n              this.evolutionHistory = new Map(Object.entries(data.evolutionHistory));\n            }\n            if (data.evolutionMetrics) {\n              this.evolutionMetrics = new Map(Object.entries(data.evolutionMetrics));\n            }\n            if (data.crossAgentPatterns) {\n              this.crossAgentPatterns = new Map(Object.entries(data.crossAgentPatterns));\n            }\n          }\n        };\n      }\n    });\n\n    test('should initialize with comprehensive pattern templates', () => {\n      const evolution = new CognitivePatternEvolution();\n      \n      expect(evolution.patternTemplates.size).toBeGreaterThanOrEqual(6);\n      expect(evolution.patternTemplates.has('convergent')).toBe(true);\n      expect(evolution.patternTemplates.has('divergent')).toBe(true);\n      expect(evolution.patternTemplates.has('lateral')).toBe(true);\n      expect(evolution.patternTemplates.has('systems')).toBe(true);\n      expect(evolution.patternTemplates.has('critical')).toBe(true);\n      expect(evolution.patternTemplates.has('adaptive')).toBe(true);\n    });\n\n    test('should validate pattern template structure', () => {\n      const evolution = new CognitivePatternEvolution();\n      \n      for (const [key, template] of evolution.patternTemplates) {\n        expect(template.name).toBeDefined();\n        expect(template.description).toBeDefined();\n        expect(template.characteristics).toBeDefined();\n        expect(template.characteristics.explorationRate).toBeGreaterThanOrEqual(0);\n        expect(template.characteristics.explorationRate).toBeLessThanOrEqual(1);\n        expect(template.characteristics.exploitationRate).toBeGreaterThanOrEqual(0);\n        expect(template.characteristics.exploitationRate).toBeLessThanOrEqual(1);\n        expect(template.characteristics.adaptability).toBeGreaterThanOrEqual(0);\n        expect(template.characteristics.adaptability).toBeLessThanOrEqual(1);\n        expect(template.adaptationRules).toBeDefined();\n        expect(template.evolutionTriggers).toBeInstanceOf(Array);\n      }\n    });\n\n    test('should evolve patterns based on performance feedback', async () => {\n      const evolution = new CognitivePatternEvolution();\n      \n      const result = await evolution.evolvePattern('agent-1', \n        { \n          taskComplexity: 0.8, \n          timeConstraint: 0.3,\n          environmentChange: 0.6\n        },\n        { \n          performance: 0.4, \n          accuracy: 0.5 \n        }\n      );\n\n      expect(result.success).toBe(true);\n      expect(result.evolved).toBe(true);\n      expect(result.confidence).toBeGreaterThan(0);\n      expect(result.adaptationScore).toBeGreaterThan(0);\n    });\n\n    test('should handle cross-agent learning with multiple agents', async () => {\n      const evolution = new CognitivePatternEvolution();\n      \n      // Set up multiple agents with patterns\n      await evolution.evolvePattern('agent-1', { taskComplexity: 0.3 }, { performance: 0.9 });\n      await evolution.evolvePattern('agent-2', { taskComplexity: 0.7 }, { performance: 0.8 });\n      await evolution.evolvePattern('agent-3', { taskComplexity: 0.9 }, { performance: 0.7 });\n      \n      const result = await evolution.crossAgentLearning(\n        ['agent-1', 'agent-2', 'agent-3'],\n        { domain: 'problem-solving', experience: 'collaborative-task' }\n      );\n\n      expect(result.success).toBe(true);\n      expect(result.participatingAgents).toBe(3);\n      expect(result.transferredPatterns).toBeGreaterThanOrEqual(0);\n      expect(result.improvements).toBeInstanceOf(Array);\n      expect(result.emergentPatterns).toBeInstanceOf(Array);\n    });\n\n    test('should detect emergent patterns in agent collectives', async () => {\n      const evolution = new CognitivePatternEvolution();\n      \n      // Create diverse agent patterns\n      const agentPatterns = new Map([\n        ['agent-1', evolution.getPatternTemplate('convergent')],\n        ['agent-2', evolution.getPatternTemplate('divergent')],\n        ['agent-3', evolution.getPatternTemplate('systems')]\n      ]);\n      \n      const emergentPatterns = evolution.detectEmergentPatterns(agentPatterns, { domain: 'test' });\n      \n      expect(emergentPatterns).toBeInstanceOf(Array);\n      expect(emergentPatterns.length).toBeGreaterThanOrEqual(0);\n      \n      // Check for expected emergent patterns\n      const cognitivediversityPattern = emergentPatterns.find(p => p.type === 'cognitive_diversity');\n      if (cognitivediversityPattern) {\n        expect(cognitivediversityPattern.strength).toBeGreaterThan(0);\n      }\n    });\n\n    test('should calculate pattern relationships accurately', () => {\n      const evolution = new CognitivePatternEvolution();\n      \n      const pattern1 = evolution.getPatternTemplate('convergent');\n      const pattern2 = evolution.getPatternTemplate('divergent');\n      \n      const similarity = evolution.calculatePatternSimilarity(pattern1, pattern2);\n      const compatibility = evolution.calculatePatternCompatibility(pattern1, pattern2);\n      \n      expect(similarity).toBeGreaterThanOrEqual(0);\n      expect(similarity).toBeLessThanOrEqual(1);\n      expect(compatibility).toBeGreaterThanOrEqual(0);\n      expect(compatibility).toBeLessThanOrEqual(1);\n      \n      // Convergent and divergent should have low similarity but potential compatibility\n      expect(similarity).toBeLessThan(0.5);\n      expect(compatibility).toBeGreaterThan(0);\n    });\n\n    test('should handle pattern transfer between agents', async () => {\n      const evolution = new CognitivePatternEvolution();\n      \n      const sourcePattern = evolution.getPatternTemplate('adaptive');\n      const targetPattern = evolution.getPatternTemplate('convergent');\n      const context = { taskComplexity: 0.8, creativityRequired: 0.7 };\n      \n      const transfer = await evolution.transferPattern(\n        'source-agent', sourcePattern,\n        'target-agent', targetPattern,\n        context\n      );\n      \n      expect(transfer.success).toBeDefined();\n      if (transfer.success) {\n        expect(transfer.improvement.score).toBeGreaterThan(0);\n        expect(transfer.improvement.from).toBe(targetPattern.name);\n      }\n    });\n\n    test('should export and import evolution data', () => {\n      const evolution = new CognitivePatternEvolution();\n      \n      // Add some data\n      evolution.agentPatterns.set('test-agent', evolution.getPatternTemplate('adaptive'));\n      evolution.evolutionHistory.set('test-agent', [{ timestamp: Date.now() }]);\n      \n      const exported = evolution.exportEvolutionData();\n      \n      expect(exported.agentPatterns).toBeDefined();\n      expect(exported.evolutionHistory).toBeDefined();\n      expect(exported.timestamp).toBeDefined();\n      \n      // Test import\n      const newEvolution = new CognitivePatternEvolution();\n      newEvolution.importEvolutionData(exported);\n      \n      expect(newEvolution.agentPatterns.has('test-agent')).toBe(true);\n      expect(newEvolution.evolutionHistory.has('test-agent')).toBe(true);\n    });\n\n    test('should handle edge cases and error conditions', async () => {\n      const evolution = new CognitivePatternEvolution();\n      \n      // Test with non-existent agent\n      const result1 = await evolution.evolvePattern('non-existent', {}, {});\n      expect(result1.success).toBe(true);\n      \n      // Test with empty context\n      const result2 = await evolution.evolvePattern('agent-1', {}, { performance: 0.9 });\n      expect(result2.success).toBe(true);\n      \n      // Test cross-agent learning with empty agent list\n      const result3 = await evolution.crossAgentLearning([], {});\n      expect(result3.success).toBe(true);\n      expect(result3.participatingAgents).toBe(0);\n    });\n  });\n\n  // Additional comprehensive tests for other advanced features would follow...\n  // This demonstrates the pattern for complete coverage\n\n  describe('Integration Testing - Advanced Features', () => {\n    test('should integrate cognitive patterns with meta-learning', async () => {\n      const evolution = new CognitivePatternEvolution();\n      \n      // Simulate pattern evolution\n      const evolutionResult = await evolution.evolvePattern(\n        'agent-1',\n        { taskComplexity: 0.7, domain: 'analysis' },\n        { performance: 0.8, accuracy: 0.9 }\n      );\n      \n      expect(evolutionResult.success).toBe(true);\n      expect(evolutionResult.confidence).toBeGreaterThan(0.5);\n    });\n\n    test('should handle concurrent pattern evolution', async () => {\n      const evolution = new CognitivePatternEvolution();\n      \n      const promises = [\n        evolution.evolvePattern('agent-1', { taskComplexity: 0.3 }, { performance: 0.8 }),\n        evolution.evolvePattern('agent-2', { taskComplexity: 0.6 }, { performance: 0.7 }),\n        evolution.evolvePattern('agent-3', { taskComplexity: 0.9 }, { performance: 0.6 })\n      ];\n      \n      const results = await Promise.all(promises);\n      \n      expect(results).toHaveLength(3);\n      expect(results.every(r => r.success)).toBe(true);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}