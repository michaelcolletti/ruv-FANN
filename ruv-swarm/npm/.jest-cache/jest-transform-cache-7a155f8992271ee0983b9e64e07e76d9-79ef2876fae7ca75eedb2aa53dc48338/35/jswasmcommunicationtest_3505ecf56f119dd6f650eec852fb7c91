9880c813a539168d3be3c852538291c5
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * Integration tests for JavaScript-WASM communication
 * Tests bidirectional data flow, callbacks, and complex interactions
 */

import { describe, it, expect, beforeAll, afterAll } from 'vitest';
import { RuvSwarm } from '../../src/index-enhanced.js';
import { WasmModuleLoader } from '../../src/wasm-loader.js';
import { NeuralNetworkManager } from '../../src/neural-network-manager.js';
import { PersistenceManager } from '../../src/persistence.js';
describe('JS-WASM Communication Integration Tests', () => {
  let ruvSwarm;
  let wasmLoader;
  let neuralManager;
  let persistenceManager;
  beforeAll(/*#__PURE__*/_asyncToGenerator(function* () {
    // Initialize all components
    ruvSwarm = yield RuvSwarm.initialize({
      loadingStrategy: 'progressive',
      enablePersistence: true,
      enableNeuralNetworks: true,
      useSIMD: true,
      debug: false
    });
    wasmLoader = ruvSwarm.wasmLoader;
    neuralManager = ruvSwarm.neuralManager;
    persistenceManager = ruvSwarm.persistenceManager;
  }));
  afterAll(/*#__PURE__*/_asyncToGenerator(function* () {
    if (ruvSwarm) {
      yield ruvSwarm.cleanup();
    }
  }));
  describe('Data Type Marshalling', () => {
    it('should correctly marshal primitive types', /*#__PURE__*/_asyncToGenerator(function* () {
      const swarm = yield ruvSwarm.createSwarm({
        name: 'test-swarm',
        maxAgents: 5
      });

      // Test number marshalling
      const agent = yield swarm.spawn({
        type: 'researcher',
        priority: 0.75
      });
      expect(agent.priority).toBe(0.75);

      // Test string marshalling
      agent.updateMetadata({
        description: 'Test agent with special chars: æ—¥æœ¬èªž ðŸš€'
      });
      const metadata = yield agent.getMetadata();
      expect(metadata.description).toBe('Test agent with special chars: æ—¥æœ¬èªž ðŸš€');

      // Test boolean marshalling
      agent.setActive(true);
      expect(agent.isActive).toBe(true);
    }));
    it('should correctly marshal arrays', /*#__PURE__*/_asyncToGenerator(function* () {
      const data = {
        floatArray: new Float32Array([1.1, 2.2, 3.3, 4.4]),
        intArray: new Int32Array([10, 20, 30, 40]),
        uint8Array: new Uint8Array([255, 128, 64, 0])
      };

      // Test array passing to WASM
      const result = yield wasmLoader.processArrays(data);
      expect(result.floatSum).toBeCloseTo(11.0);
      expect(result.intSum).toBe(100);
      expect(result.uint8Sum).toBe(447);
    }));
    it('should correctly marshal complex objects', /*#__PURE__*/_asyncToGenerator(function* () {
      const config = {
        network: {
          type: 'lstm',
          layers: [{
            units: 128,
            activation: 'tanh'
          }, {
            units: 64,
            activation: 'relu'
          }, {
            units: 32,
            activation: 'sigmoid'
          }],
          optimizer: {
            type: 'adam',
            learningRate: 0.001,
            beta1: 0.9,
            beta2: 0.999
          }
        },
        training: {
          epochs: 100,
          batchSize: 32,
          validationSplit: 0.2
        }
      };
      const network = yield neuralManager.createNetwork(config.network);
      const networkConfig = yield network.getConfiguration();
      expect(networkConfig.layers).toHaveLength(3);
      expect(networkConfig.optimizer.learningRate).toBe(0.001);
    }));
  });
  describe('Callback Mechanisms', () => {
    it('should handle synchronous callbacks from WASM', /*#__PURE__*/_asyncToGenerator(function* () {
      let callbackExecuted = false;
      let callbackData = null;
      const swarm = yield ruvSwarm.createSwarm({
        name: 'callback-test',
        onAgentUpdate: (agentId, status) => {
          callbackExecuted = true;
          callbackData = {
            agentId,
            status
          };
        }
      });
      const agent = yield swarm.spawn({
        type: 'coder'
      });
      yield agent.execute({
        task: 'test-task'
      });
      expect(callbackExecuted).toBe(true);
      expect(callbackData).toBeDefined();
      expect(callbackData.agentId).toBe(agent.id);
    }));
    it('should handle asynchronous callbacks from WASM', /*#__PURE__*/_asyncToGenerator(function* () {
      const events = [];
      const swarm = yield ruvSwarm.createSwarm({
        name: 'async-callback-test',
        onTaskProgress: function () {
          var _ref8 = _asyncToGenerator(function* (taskId, progress) {
            events.push({
              taskId,
              progress,
              timestamp: Date.now()
            });
            yield new Promise(resolve => setTimeout(resolve, 10)); // Simulate async work
          });
          return function onTaskProgress(_x, _x2) {
            return _ref8.apply(this, arguments);
          };
        }()
      });
      const taskId = yield swarm.orchestrate({
        task: 'Complex multi-step task',
        steps: 5
      });

      // Wait for task completion
      yield swarm.waitForTask(taskId);
      expect(events.length).toBeGreaterThan(0);
      expect(events[events.length - 1].progress).toBe(100);
    }));
    it('should handle error callbacks from WASM', /*#__PURE__*/_asyncToGenerator(function* () {
      let errorCaught = false;
      let errorMessage = '';
      const swarm = yield ruvSwarm.createSwarm({
        name: 'error-callback-test',
        onError: error => {
          errorCaught = true;
          errorMessage = error.message;
        }
      });

      // Trigger an error by exceeding max agents
      try {
        for (let i = 0; i < 20; i++) {
          yield swarm.spawn({
            type: 'researcher'
          });
        }
      } catch (e) {
        // Expected
      }
      expect(errorCaught).toBe(true);
      expect(errorMessage).toContain('max agents');
    }));
  });
  describe('Memory Sharing', () => {
    it('should share memory efficiently between JS and WASM', /*#__PURE__*/_asyncToGenerator(function* () {
      const size = 1024 * 1024; // 1MB
      const sharedBuffer = new SharedArrayBuffer(size);
      const jsView = new Float32Array(sharedBuffer);

      // Fill from JS side
      for (let i = 0; i < jsView.length; i++) {
        jsView[i] = Math.random();
      }

      // Process in WASM
      const result = yield wasmLoader.processSharedMemory(sharedBuffer);
      expect(result.sum).toBeGreaterThan(0);
      expect(result.mean).toBeCloseTo(0.5, 1);
      expect(result.processed).toBe(jsView.length);
    }));
    it('should handle concurrent memory access safely', /*#__PURE__*/_asyncToGenerator(function* () {
      const buffer = new SharedArrayBuffer(1024);
      const view = new Int32Array(buffer);
      Atomics.store(view, 0, 0);
      const promises = [];
      const numWorkers = 4;
      const incrementsPerWorker = 1000;
      for (let i = 0; i < numWorkers; i++) {
        promises.push(wasmLoader.atomicIncrement(buffer, 0, incrementsPerWorker));
      }
      yield Promise.all(promises);
      const finalValue = Atomics.load(view, 0);
      expect(finalValue).toBe(numWorkers * incrementsPerWorker);
    }));
    it('should manage memory lifecycle correctly', /*#__PURE__*/_asyncToGenerator(function* () {
      const initialMemory = yield wasmLoader.getMemoryStats();

      // Allocate and process large data
      const allocations = [];
      for (let i = 0; i < 10; i++) {
        const data = new Float32Array(100000).fill(i);
        const ptr = yield wasmLoader.allocateAndProcess(data);
        allocations.push(ptr);
      }
      const afterAllocMemory = yield wasmLoader.getMemoryStats();
      expect(afterAllocMemory.used).toBeGreaterThan(initialMemory.used);

      // Clean up
      for (const ptr of allocations) {
        yield wasmLoader.deallocate(ptr);
      }
      const afterCleanupMemory = yield wasmLoader.getMemoryStats();
      expect(afterCleanupMemory.used).toBeLessThanOrEqual(afterAllocMemory.used);
    }));
  });
  describe('Stream Processing', () => {
    it('should handle streaming data from JS to WASM', /*#__PURE__*/_asyncToGenerator(function* () {
      const stream = wasmLoader.createDataStream();
      const chunks = [];
      for (let i = 0; i < 100; i++) {
        const chunk = new Float32Array(1000).fill(i);
        chunks.push(chunk);
        yield stream.write(chunk);
      }
      const result = yield stream.finalize();
      expect(result.chunksProcessed).toBe(100);
      expect(result.totalElements).toBe(100000);
    }));
    it('should handle streaming results from WASM to JS', /*#__PURE__*/_asyncToGenerator(function* () {
      const results = [];
      const resultStream = wasmLoader.createResultStream({
        onData: data => results.push(data),
        bufferSize: 1024
      });

      // Start computation that produces streaming results
      yield wasmLoader.computeStreamingResults(resultStream.id, {
        iterations: 50,
        dataPerIteration: 1000
      });
      yield resultStream.waitForCompletion();
      expect(results.length).toBe(50);
      expect(results[0].length).toBe(1000);
    }));
    it('should handle backpressure in streaming', /*#__PURE__*/_asyncToGenerator(function* () {
      let processingDelay = 50; // ms
      let bufferedCount = 0;
      const stream = wasmLoader.createDataStream({
        highWaterMark: 10,
        onBackpressure: () => {
          bufferedCount = stream.getBufferedCount();
          processingDelay = 10; // Speed up processing
        }
      });

      // Write data faster than it can be processed
      const writePromises = [];
      for (let i = 0; i < 20; i++) {
        writePromises.push(stream.write(new Float32Array(1000)));
        yield new Promise(resolve => setTimeout(resolve, 10));
      }
      yield Promise.all(writePromises);
      expect(bufferedCount).toBeGreaterThan(0);
      expect(bufferedCount).toBeLessThanOrEqual(10);
    }));
  });
  describe('Complex Workflow Integration', () => {
    it('should handle neural network training workflow', /*#__PURE__*/_asyncToGenerator(function* () {
      // Create network
      const network = yield neuralManager.createNetwork({
        type: 'mlp',
        layers: [{
          units: 10,
          activation: 'relu'
        }, {
          units: 5,
          activation: 'softmax'
        }]
      });

      // Generate training data
      const trainingData = {
        inputs: [],
        targets: []
      };
      for (let i = 0; i < 100; i++) {
        trainingData.inputs.push(new Float32Array(10).map(() => Math.random()));
        const target = new Float32Array(5).fill(0);
        target[Math.floor(Math.random() * 5)] = 1;
        trainingData.targets.push(target);
      }

      // Train with progress callbacks
      const progressHistory = [];
      const trainResult = yield network.train(trainingData, {
        epochs: 10,
        batchSize: 10,
        onProgress: (epoch, loss) => {
          progressHistory.push({
            epoch,
            loss
          });
        }
      });
      expect(progressHistory).toHaveLength(10);
      expect(progressHistory[9].loss).toBeLessThan(progressHistory[0].loss);
      expect(trainResult.finalLoss).toBeDefined();
    }));
    it('should handle swarm orchestration workflow', /*#__PURE__*/_asyncToGenerator(function* () {
      const swarm = yield ruvSwarm.createSwarm({
        name: 'orchestration-test',
        topology: 'hierarchical',
        maxAgents: 10
      });

      // Spawn different types of agents
      const agents = yield Promise.all([swarm.spawn({
        type: 'coordinator',
        role: 'lead'
      }), swarm.spawn({
        type: 'researcher',
        specialization: 'data'
      }), swarm.spawn({
        type: 'coder',
        language: 'javascript'
      }), swarm.spawn({
        type: 'tester',
        framework: 'jest'
      })]);

      // Create complex task
      const task = {
        id: 'complex-workflow',
        steps: [{
          type: 'research',
          description: 'Analyze requirements'
        }, {
          type: 'design',
          description: 'Create architecture'
        }, {
          type: 'implement',
          description: 'Write code'
        }, {
          type: 'test',
          description: 'Validate implementation'
        }],
        dependencies: {
          design: ['research'],
          implement: ['design'],
          test: ['implement']
        }
      };
      const orchestrationResult = yield swarm.orchestrate(task);
      expect(orchestrationResult.completed).toBe(true);
      expect(orchestrationResult.steps).toHaveLength(4);
      expect(orchestrationResult.agentsUsed).toHaveLength(4);
    }));
    it('should handle persistence workflow', /*#__PURE__*/_asyncToGenerator(function* () {
      // Create and train a network
      const network = yield neuralManager.createNetwork({
        type: 'lstm',
        inputSize: 20,
        hiddenSize: 50,
        outputSize: 10
      });
      yield network.train({
        inputs: Array(50).fill(null).map(() => new Float32Array(20).map(() => Math.random())),
        targets: Array(50).fill(null).map(() => new Float32Array(10).map(() => Math.random()))
      });

      // Save to persistence
      const saveResult = yield persistenceManager.saveNetwork(network.id, {
        metadata: {
          name: 'test-lstm',
          version: '1.0.0',
          trainedAt: new Date().toISOString()
        }
      });
      expect(saveResult.success).toBe(true);
      expect(saveResult.size).toBeGreaterThan(0);

      // Load from persistence
      const loadedNetwork = yield persistenceManager.loadNetwork(saveResult.id);
      expect(loadedNetwork.id).toBeDefined();

      // Verify loaded network works
      const testInput = new Float32Array(20).map(() => Math.random());
      const output = yield loadedNetwork.predict(testInput);
      expect(output).toHaveLength(10);
    }));
  });
  describe('Error Propagation', () => {
    it('should propagate WASM errors to JS with context', /*#__PURE__*/_asyncToGenerator(function* () {
      try {
        yield wasmLoader.executeInvalidOperation({
          operation: 'divide_by_zero',
          context: {
            value: 42
          }
        });
        expect.fail('Should have thrown an error');
      } catch (error) {
        expect(error.message).toContain('division by zero');
        expect(error.wasmStack).toBeDefined();
        expect(error.context.value).toBe(42);
      }
    }));
    it('should handle memory allocation errors gracefully', /*#__PURE__*/_asyncToGenerator(function* () {
      try {
        // Try to allocate impossibly large amount
        yield wasmLoader.allocate(Number.MAX_SAFE_INTEGER);
        expect.fail('Should have thrown an error');
      } catch (error) {
        expect(error.message).toContain('memory allocation failed');
        expect(error.code).toBe('ENOMEM');
      }
    }));
    it('should recover from WASM panics', /*#__PURE__*/_asyncToGenerator(function* () {
      const beforePanic = yield wasmLoader.getState();
      try {
        yield wasmLoader.triggerPanic('test panic');
      } catch (error) {
        expect(error.message).toContain('panic');
      }

      // Verify module can recover
      const afterPanic = yield wasmLoader.getState();
      expect(afterPanic.healthy).toBe(true);
      expect(afterPanic.lastError).toContain('panic');
    }));
  });
  describe('Performance Monitoring', () => {
    it('should track JS-WASM call overhead', /*#__PURE__*/_asyncToGenerator(function* () {
      const metrics = yield wasmLoader.enableMetrics();

      // Make various calls
      for (let i = 0; i < 100; i++) {
        yield wasmLoader.simpleOperation(i);
      }
      const stats = yield metrics.getStatistics();
      expect(stats.totalCalls).toBe(100);
      expect(stats.averageOverhead).toBeLessThan(1); // Less than 1ms overhead
      expect(stats.maxOverhead).toBeLessThan(5); // Max 5ms overhead
    }));
    it('should measure data transfer performance', /*#__PURE__*/_asyncToGenerator(function* () {
      const sizes = [1024, 10240, 102400, 1024000]; // 1KB to 1MB
      const results = [];
      for (const size of sizes) {
        const data = new Float32Array(size / 4).fill(1.0);
        const start = performance.now();
        const result = yield wasmLoader.processData(data);
        const time = performance.now() - start;
        const throughput = size / 1024 / (time / 1000); // KB/s

        results.push({
          size,
          time,
          throughput
        });
      }

      // Verify throughput scales reasonably
      expect(results[3].throughput).toBeGreaterThan(1000); // At least 1MB/s for large transfers
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZXNjcmliZSIsIml0IiwiZXhwZWN0IiwiYmVmb3JlQWxsIiwiYWZ0ZXJBbGwiLCJSdXZTd2FybSIsIldhc21Nb2R1bGVMb2FkZXIiLCJOZXVyYWxOZXR3b3JrTWFuYWdlciIsIlBlcnNpc3RlbmNlTWFuYWdlciIsInJ1dlN3YXJtIiwid2FzbUxvYWRlciIsIm5ldXJhbE1hbmFnZXIiLCJwZXJzaXN0ZW5jZU1hbmFnZXIiLCJfYXN5bmNUb0dlbmVyYXRvciIsImluaXRpYWxpemUiLCJsb2FkaW5nU3RyYXRlZ3kiLCJlbmFibGVQZXJzaXN0ZW5jZSIsImVuYWJsZU5ldXJhbE5ldHdvcmtzIiwidXNlU0lNRCIsImRlYnVnIiwiY2xlYW51cCIsInN3YXJtIiwiY3JlYXRlU3dhcm0iLCJuYW1lIiwibWF4QWdlbnRzIiwiYWdlbnQiLCJzcGF3biIsInR5cGUiLCJwcmlvcml0eSIsInRvQmUiLCJ1cGRhdGVNZXRhZGF0YSIsImRlc2NyaXB0aW9uIiwibWV0YWRhdGEiLCJnZXRNZXRhZGF0YSIsInNldEFjdGl2ZSIsImlzQWN0aXZlIiwiZGF0YSIsImZsb2F0QXJyYXkiLCJGbG9hdDMyQXJyYXkiLCJpbnRBcnJheSIsIkludDMyQXJyYXkiLCJ1aW50OEFycmF5IiwiVWludDhBcnJheSIsInJlc3VsdCIsInByb2Nlc3NBcnJheXMiLCJmbG9hdFN1bSIsInRvQmVDbG9zZVRvIiwiaW50U3VtIiwidWludDhTdW0iLCJjb25maWciLCJuZXR3b3JrIiwibGF5ZXJzIiwidW5pdHMiLCJhY3RpdmF0aW9uIiwib3B0aW1pemVyIiwibGVhcm5pbmdSYXRlIiwiYmV0YTEiLCJiZXRhMiIsInRyYWluaW5nIiwiZXBvY2hzIiwiYmF0Y2hTaXplIiwidmFsaWRhdGlvblNwbGl0IiwiY3JlYXRlTmV0d29yayIsIm5ldHdvcmtDb25maWciLCJnZXRDb25maWd1cmF0aW9uIiwidG9IYXZlTGVuZ3RoIiwiY2FsbGJhY2tFeGVjdXRlZCIsImNhbGxiYWNrRGF0YSIsIm9uQWdlbnRVcGRhdGUiLCJhZ2VudElkIiwic3RhdHVzIiwiZXhlY3V0ZSIsInRhc2siLCJ0b0JlRGVmaW5lZCIsImlkIiwiZXZlbnRzIiwib25UYXNrUHJvZ3Jlc3MiLCJfcmVmOCIsInRhc2tJZCIsInByb2dyZXNzIiwicHVzaCIsInRpbWVzdGFtcCIsIkRhdGUiLCJub3ciLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJfeCIsIl94MiIsImFwcGx5IiwiYXJndW1lbnRzIiwib3JjaGVzdHJhdGUiLCJzdGVwcyIsIndhaXRGb3JUYXNrIiwibGVuZ3RoIiwidG9CZUdyZWF0ZXJUaGFuIiwiZXJyb3JDYXVnaHQiLCJlcnJvck1lc3NhZ2UiLCJvbkVycm9yIiwiZXJyb3IiLCJtZXNzYWdlIiwiaSIsImUiLCJ0b0NvbnRhaW4iLCJzaXplIiwic2hhcmVkQnVmZmVyIiwiU2hhcmVkQXJyYXlCdWZmZXIiLCJqc1ZpZXciLCJNYXRoIiwicmFuZG9tIiwicHJvY2Vzc1NoYXJlZE1lbW9yeSIsInN1bSIsIm1lYW4iLCJwcm9jZXNzZWQiLCJidWZmZXIiLCJ2aWV3IiwiQXRvbWljcyIsInN0b3JlIiwicHJvbWlzZXMiLCJudW1Xb3JrZXJzIiwiaW5jcmVtZW50c1BlcldvcmtlciIsImF0b21pY0luY3JlbWVudCIsImFsbCIsImZpbmFsVmFsdWUiLCJsb2FkIiwiaW5pdGlhbE1lbW9yeSIsImdldE1lbW9yeVN0YXRzIiwiYWxsb2NhdGlvbnMiLCJmaWxsIiwicHRyIiwiYWxsb2NhdGVBbmRQcm9jZXNzIiwiYWZ0ZXJBbGxvY01lbW9yeSIsInVzZWQiLCJkZWFsbG9jYXRlIiwiYWZ0ZXJDbGVhbnVwTWVtb3J5IiwidG9CZUxlc3NUaGFuT3JFcXVhbCIsInN0cmVhbSIsImNyZWF0ZURhdGFTdHJlYW0iLCJjaHVua3MiLCJjaHVuayIsIndyaXRlIiwiZmluYWxpemUiLCJjaHVua3NQcm9jZXNzZWQiLCJ0b3RhbEVsZW1lbnRzIiwicmVzdWx0cyIsInJlc3VsdFN0cmVhbSIsImNyZWF0ZVJlc3VsdFN0cmVhbSIsIm9uRGF0YSIsImJ1ZmZlclNpemUiLCJjb21wdXRlU3RyZWFtaW5nUmVzdWx0cyIsIml0ZXJhdGlvbnMiLCJkYXRhUGVySXRlcmF0aW9uIiwid2FpdEZvckNvbXBsZXRpb24iLCJwcm9jZXNzaW5nRGVsYXkiLCJidWZmZXJlZENvdW50IiwiaGlnaFdhdGVyTWFyayIsIm9uQmFja3ByZXNzdXJlIiwiZ2V0QnVmZmVyZWRDb3VudCIsIndyaXRlUHJvbWlzZXMiLCJ0cmFpbmluZ0RhdGEiLCJpbnB1dHMiLCJ0YXJnZXRzIiwibWFwIiwidGFyZ2V0IiwiZmxvb3IiLCJwcm9ncmVzc0hpc3RvcnkiLCJ0cmFpblJlc3VsdCIsInRyYWluIiwib25Qcm9ncmVzcyIsImVwb2NoIiwibG9zcyIsInRvQmVMZXNzVGhhbiIsImZpbmFsTG9zcyIsInRvcG9sb2d5IiwiYWdlbnRzIiwicm9sZSIsInNwZWNpYWxpemF0aW9uIiwibGFuZ3VhZ2UiLCJmcmFtZXdvcmsiLCJkZXBlbmRlbmNpZXMiLCJkZXNpZ24iLCJpbXBsZW1lbnQiLCJ0ZXN0Iiwib3JjaGVzdHJhdGlvblJlc3VsdCIsImNvbXBsZXRlZCIsImFnZW50c1VzZWQiLCJpbnB1dFNpemUiLCJoaWRkZW5TaXplIiwib3V0cHV0U2l6ZSIsIkFycmF5Iiwic2F2ZVJlc3VsdCIsInNhdmVOZXR3b3JrIiwidmVyc2lvbiIsInRyYWluZWRBdCIsInRvSVNPU3RyaW5nIiwic3VjY2VzcyIsImxvYWRlZE5ldHdvcmsiLCJsb2FkTmV0d29yayIsInRlc3RJbnB1dCIsIm91dHB1dCIsInByZWRpY3QiLCJleGVjdXRlSW52YWxpZE9wZXJhdGlvbiIsIm9wZXJhdGlvbiIsImNvbnRleHQiLCJ2YWx1ZSIsImZhaWwiLCJ3YXNtU3RhY2siLCJhbGxvY2F0ZSIsIk51bWJlciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJjb2RlIiwiYmVmb3JlUGFuaWMiLCJnZXRTdGF0ZSIsInRyaWdnZXJQYW5pYyIsImFmdGVyUGFuaWMiLCJoZWFsdGh5IiwibGFzdEVycm9yIiwibWV0cmljcyIsImVuYWJsZU1ldHJpY3MiLCJzaW1wbGVPcGVyYXRpb24iLCJzdGF0cyIsImdldFN0YXRpc3RpY3MiLCJ0b3RhbENhbGxzIiwiYXZlcmFnZU92ZXJoZWFkIiwibWF4T3ZlcmhlYWQiLCJzaXplcyIsInN0YXJ0IiwicGVyZm9ybWFuY2UiLCJwcm9jZXNzRGF0YSIsInRpbWUiLCJ0aHJvdWdocHV0Il0sInNvdXJjZXMiOlsianMtd2FzbS1jb21tdW5pY2F0aW9uLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBJbnRlZ3JhdGlvbiB0ZXN0cyBmb3IgSmF2YVNjcmlwdC1XQVNNIGNvbW11bmljYXRpb25cbiAqIFRlc3RzIGJpZGlyZWN0aW9uYWwgZGF0YSBmbG93LCBjYWxsYmFja3MsIGFuZCBjb21wbGV4IGludGVyYWN0aW9uc1xuICovXG5cbmltcG9ydCB7IGRlc2NyaWJlLCBpdCwgZXhwZWN0LCBiZWZvcmVBbGwsIGFmdGVyQWxsIH0gZnJvbSAndml0ZXN0JztcbmltcG9ydCB7IFJ1dlN3YXJtIH0gZnJvbSAnLi4vLi4vc3JjL2luZGV4LWVuaGFuY2VkLmpzJztcbmltcG9ydCB7IFdhc21Nb2R1bGVMb2FkZXIgfSBmcm9tICcuLi8uLi9zcmMvd2FzbS1sb2FkZXIuanMnO1xuaW1wb3J0IHsgTmV1cmFsTmV0d29ya01hbmFnZXIgfSBmcm9tICcuLi8uLi9zcmMvbmV1cmFsLW5ldHdvcmstbWFuYWdlci5qcyc7XG5pbXBvcnQgeyBQZXJzaXN0ZW5jZU1hbmFnZXIgfSBmcm9tICcuLi8uLi9zcmMvcGVyc2lzdGVuY2UuanMnO1xuXG5kZXNjcmliZSgnSlMtV0FTTSBDb21tdW5pY2F0aW9uIEludGVncmF0aW9uIFRlc3RzJywgKCkgPT4ge1xuICBsZXQgcnV2U3dhcm07XG4gIGxldCB3YXNtTG9hZGVyO1xuICBsZXQgbmV1cmFsTWFuYWdlcjtcbiAgbGV0IHBlcnNpc3RlbmNlTWFuYWdlcjtcblxuICBiZWZvcmVBbGwoYXN5bmMgKCkgPT4ge1xuICAgIC8vIEluaXRpYWxpemUgYWxsIGNvbXBvbmVudHNcbiAgICBydXZTd2FybSA9IGF3YWl0IFJ1dlN3YXJtLmluaXRpYWxpemUoe1xuICAgICAgbG9hZGluZ1N0cmF0ZWd5OiAncHJvZ3Jlc3NpdmUnLFxuICAgICAgZW5hYmxlUGVyc2lzdGVuY2U6IHRydWUsXG4gICAgICBlbmFibGVOZXVyYWxOZXR3b3JrczogdHJ1ZSxcbiAgICAgIHVzZVNJTUQ6IHRydWUsXG4gICAgICBkZWJ1ZzogZmFsc2VcbiAgICB9KTtcblxuICAgIHdhc21Mb2FkZXIgPSBydXZTd2FybS53YXNtTG9hZGVyO1xuICAgIG5ldXJhbE1hbmFnZXIgPSBydXZTd2FybS5uZXVyYWxNYW5hZ2VyO1xuICAgIHBlcnNpc3RlbmNlTWFuYWdlciA9IHJ1dlN3YXJtLnBlcnNpc3RlbmNlTWFuYWdlcjtcbiAgfSk7XG5cbiAgYWZ0ZXJBbGwoYXN5bmMgKCkgPT4ge1xuICAgIGlmIChydXZTd2FybSkge1xuICAgICAgYXdhaXQgcnV2U3dhcm0uY2xlYW51cCgpO1xuICAgIH1cbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0RhdGEgVHlwZSBNYXJzaGFsbGluZycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGNvcnJlY3RseSBtYXJzaGFsIHByaW1pdGl2ZSB0eXBlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHN3YXJtID0gYXdhaXQgcnV2U3dhcm0uY3JlYXRlU3dhcm0oe1xuICAgICAgICBuYW1lOiAndGVzdC1zd2FybScsXG4gICAgICAgIG1heEFnZW50czogNVxuICAgICAgfSk7XG5cbiAgICAgIC8vIFRlc3QgbnVtYmVyIG1hcnNoYWxsaW5nXG4gICAgICBjb25zdCBhZ2VudCA9IGF3YWl0IHN3YXJtLnNwYXduKHtcbiAgICAgICAgdHlwZTogJ3Jlc2VhcmNoZXInLFxuICAgICAgICBwcmlvcml0eTogMC43NVxuICAgICAgfSk7XG4gICAgICBleHBlY3QoYWdlbnQucHJpb3JpdHkpLnRvQmUoMC43NSk7XG5cbiAgICAgIC8vIFRlc3Qgc3RyaW5nIG1hcnNoYWxsaW5nXG4gICAgICBhZ2VudC51cGRhdGVNZXRhZGF0YSh7IGRlc2NyaXB0aW9uOiAnVGVzdCBhZ2VudCB3aXRoIHNwZWNpYWwgY2hhcnM6IOaXpeacrOiqniDwn5qAJyB9KTtcbiAgICAgIGNvbnN0IG1ldGFkYXRhID0gYXdhaXQgYWdlbnQuZ2V0TWV0YWRhdGEoKTtcbiAgICAgIGV4cGVjdChtZXRhZGF0YS5kZXNjcmlwdGlvbikudG9CZSgnVGVzdCBhZ2VudCB3aXRoIHNwZWNpYWwgY2hhcnM6IOaXpeacrOiqniDwn5qAJyk7XG5cbiAgICAgIC8vIFRlc3QgYm9vbGVhbiBtYXJzaGFsbGluZ1xuICAgICAgYWdlbnQuc2V0QWN0aXZlKHRydWUpO1xuICAgICAgZXhwZWN0KGFnZW50LmlzQWN0aXZlKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBjb3JyZWN0bHkgbWFyc2hhbCBhcnJheXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICBmbG9hdEFycmF5OiBuZXcgRmxvYXQzMkFycmF5KFsxLjEsIDIuMiwgMy4zLCA0LjRdKSxcbiAgICAgICAgaW50QXJyYXk6IG5ldyBJbnQzMkFycmF5KFsxMCwgMjAsIDMwLCA0MF0pLFxuICAgICAgICB1aW50OEFycmF5OiBuZXcgVWludDhBcnJheShbMjU1LCAxMjgsIDY0LCAwXSlcbiAgICAgIH07XG5cbiAgICAgIC8vIFRlc3QgYXJyYXkgcGFzc2luZyB0byBXQVNNXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB3YXNtTG9hZGVyLnByb2Nlc3NBcnJheXMoZGF0YSk7XG4gICAgICBcbiAgICAgIGV4cGVjdChyZXN1bHQuZmxvYXRTdW0pLnRvQmVDbG9zZVRvKDExLjApO1xuICAgICAgZXhwZWN0KHJlc3VsdC5pbnRTdW0pLnRvQmUoMTAwKTtcbiAgICAgIGV4cGVjdChyZXN1bHQudWludDhTdW0pLnRvQmUoNDQ3KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY29ycmVjdGx5IG1hcnNoYWwgY29tcGxleCBvYmplY3RzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgICBuZXR3b3JrOiB7XG4gICAgICAgICAgdHlwZTogJ2xzdG0nLFxuICAgICAgICAgIGxheWVyczogW1xuICAgICAgICAgICAgeyB1bml0czogMTI4LCBhY3RpdmF0aW9uOiAndGFuaCcgfSxcbiAgICAgICAgICAgIHsgdW5pdHM6IDY0LCBhY3RpdmF0aW9uOiAncmVsdScgfSxcbiAgICAgICAgICAgIHsgdW5pdHM6IDMyLCBhY3RpdmF0aW9uOiAnc2lnbW9pZCcgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgb3B0aW1pemVyOiB7XG4gICAgICAgICAgICB0eXBlOiAnYWRhbScsXG4gICAgICAgICAgICBsZWFybmluZ1JhdGU6IDAuMDAxLFxuICAgICAgICAgICAgYmV0YTE6IDAuOSxcbiAgICAgICAgICAgIGJldGEyOiAwLjk5OVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdHJhaW5pbmc6IHtcbiAgICAgICAgICBlcG9jaHM6IDEwMCxcbiAgICAgICAgICBiYXRjaFNpemU6IDMyLFxuICAgICAgICAgIHZhbGlkYXRpb25TcGxpdDogMC4yXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IG5ldHdvcmsgPSBhd2FpdCBuZXVyYWxNYW5hZ2VyLmNyZWF0ZU5ldHdvcmsoY29uZmlnLm5ldHdvcmspO1xuICAgICAgY29uc3QgbmV0d29ya0NvbmZpZyA9IGF3YWl0IG5ldHdvcmsuZ2V0Q29uZmlndXJhdGlvbigpO1xuICAgICAgXG4gICAgICBleHBlY3QobmV0d29ya0NvbmZpZy5sYXllcnMpLnRvSGF2ZUxlbmd0aCgzKTtcbiAgICAgIGV4cGVjdChuZXR3b3JrQ29uZmlnLm9wdGltaXplci5sZWFybmluZ1JhdGUpLnRvQmUoMC4wMDEpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQ2FsbGJhY2sgTWVjaGFuaXNtcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBzeW5jaHJvbm91cyBjYWxsYmFja3MgZnJvbSBXQVNNJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IGNhbGxiYWNrRXhlY3V0ZWQgPSBmYWxzZTtcbiAgICAgIGxldCBjYWxsYmFja0RhdGEgPSBudWxsO1xuXG4gICAgICBjb25zdCBzd2FybSA9IGF3YWl0IHJ1dlN3YXJtLmNyZWF0ZVN3YXJtKHtcbiAgICAgICAgbmFtZTogJ2NhbGxiYWNrLXRlc3QnLFxuICAgICAgICBvbkFnZW50VXBkYXRlOiAoYWdlbnRJZCwgc3RhdHVzKSA9PiB7XG4gICAgICAgICAgY2FsbGJhY2tFeGVjdXRlZCA9IHRydWU7XG4gICAgICAgICAgY2FsbGJhY2tEYXRhID0geyBhZ2VudElkLCBzdGF0dXMgfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGFnZW50ID0gYXdhaXQgc3dhcm0uc3Bhd24oeyB0eXBlOiAnY29kZXInIH0pO1xuICAgICAgYXdhaXQgYWdlbnQuZXhlY3V0ZSh7IHRhc2s6ICd0ZXN0LXRhc2snIH0pO1xuXG4gICAgICBleHBlY3QoY2FsbGJhY2tFeGVjdXRlZCkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChjYWxsYmFja0RhdGEpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QoY2FsbGJhY2tEYXRhLmFnZW50SWQpLnRvQmUoYWdlbnQuaWQpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgYXN5bmNocm9ub3VzIGNhbGxiYWNrcyBmcm9tIFdBU00nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBldmVudHMgPSBbXTtcblxuICAgICAgY29uc3Qgc3dhcm0gPSBhd2FpdCBydXZTd2FybS5jcmVhdGVTd2FybSh7XG4gICAgICAgIG5hbWU6ICdhc3luYy1jYWxsYmFjay10ZXN0JyxcbiAgICAgICAgb25UYXNrUHJvZ3Jlc3M6IGFzeW5jICh0YXNrSWQsIHByb2dyZXNzKSA9PiB7XG4gICAgICAgICAgZXZlbnRzLnB1c2goeyB0YXNrSWQsIHByb2dyZXNzLCB0aW1lc3RhbXA6IERhdGUubm93KCkgfSk7XG4gICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwKSk7IC8vIFNpbXVsYXRlIGFzeW5jIHdvcmtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHRhc2tJZCA9IGF3YWl0IHN3YXJtLm9yY2hlc3RyYXRlKHtcbiAgICAgICAgdGFzazogJ0NvbXBsZXggbXVsdGktc3RlcCB0YXNrJyxcbiAgICAgICAgc3RlcHM6IDVcbiAgICAgIH0pO1xuXG4gICAgICAvLyBXYWl0IGZvciB0YXNrIGNvbXBsZXRpb25cbiAgICAgIGF3YWl0IHN3YXJtLndhaXRGb3JUYXNrKHRhc2tJZCk7XG5cbiAgICAgIGV4cGVjdChldmVudHMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgICBleHBlY3QoZXZlbnRzW2V2ZW50cy5sZW5ndGggLSAxXS5wcm9ncmVzcykudG9CZSgxMDApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZXJyb3IgY2FsbGJhY2tzIGZyb20gV0FTTScsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCBlcnJvckNhdWdodCA9IGZhbHNlO1xuICAgICAgbGV0IGVycm9yTWVzc2FnZSA9ICcnO1xuXG4gICAgICBjb25zdCBzd2FybSA9IGF3YWl0IHJ1dlN3YXJtLmNyZWF0ZVN3YXJtKHtcbiAgICAgICAgbmFtZTogJ2Vycm9yLWNhbGxiYWNrLXRlc3QnLFxuICAgICAgICBvbkVycm9yOiAoZXJyb3IpID0+IHtcbiAgICAgICAgICBlcnJvckNhdWdodCA9IHRydWU7XG4gICAgICAgICAgZXJyb3JNZXNzYWdlID0gZXJyb3IubWVzc2FnZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIFRyaWdnZXIgYW4gZXJyb3IgYnkgZXhjZWVkaW5nIG1heCBhZ2VudHNcbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjA7IGkrKykge1xuICAgICAgICAgIGF3YWl0IHN3YXJtLnNwYXduKHsgdHlwZTogJ3Jlc2VhcmNoZXInIH0pO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEV4cGVjdGVkXG4gICAgICB9XG5cbiAgICAgIGV4cGVjdChlcnJvckNhdWdodCkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChlcnJvck1lc3NhZ2UpLnRvQ29udGFpbignbWF4IGFnZW50cycpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnTWVtb3J5IFNoYXJpbmcnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBzaGFyZSBtZW1vcnkgZWZmaWNpZW50bHkgYmV0d2VlbiBKUyBhbmQgV0FTTScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHNpemUgPSAxMDI0ICogMTAyNDsgLy8gMU1CXG4gICAgICBjb25zdCBzaGFyZWRCdWZmZXIgPSBuZXcgU2hhcmVkQXJyYXlCdWZmZXIoc2l6ZSk7XG4gICAgICBjb25zdCBqc1ZpZXcgPSBuZXcgRmxvYXQzMkFycmF5KHNoYXJlZEJ1ZmZlcik7XG4gICAgICBcbiAgICAgIC8vIEZpbGwgZnJvbSBKUyBzaWRlXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGpzVmlldy5sZW5ndGg7IGkrKykge1xuICAgICAgICBqc1ZpZXdbaV0gPSBNYXRoLnJhbmRvbSgpO1xuICAgICAgfVxuXG4gICAgICAvLyBQcm9jZXNzIGluIFdBU01cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHdhc21Mb2FkZXIucHJvY2Vzc1NoYXJlZE1lbW9yeShzaGFyZWRCdWZmZXIpO1xuICAgICAgXG4gICAgICBleHBlY3QocmVzdWx0LnN1bSkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgICAgZXhwZWN0KHJlc3VsdC5tZWFuKS50b0JlQ2xvc2VUbygwLjUsIDEpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5wcm9jZXNzZWQpLnRvQmUoanNWaWV3Lmxlbmd0aCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBjb25jdXJyZW50IG1lbW9yeSBhY2Nlc3Mgc2FmZWx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgYnVmZmVyID0gbmV3IFNoYXJlZEFycmF5QnVmZmVyKDEwMjQpO1xuICAgICAgY29uc3QgdmlldyA9IG5ldyBJbnQzMkFycmF5KGJ1ZmZlcik7XG4gICAgICBBdG9taWNzLnN0b3JlKHZpZXcsIDAsIDApO1xuXG4gICAgICBjb25zdCBwcm9taXNlcyA9IFtdO1xuICAgICAgY29uc3QgbnVtV29ya2VycyA9IDQ7XG4gICAgICBjb25zdCBpbmNyZW1lbnRzUGVyV29ya2VyID0gMTAwMDtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1Xb3JrZXJzOyBpKyspIHtcbiAgICAgICAgcHJvbWlzZXMucHVzaCh3YXNtTG9hZGVyLmF0b21pY0luY3JlbWVudChidWZmZXIsIDAsIGluY3JlbWVudHNQZXJXb3JrZXIpKTtcbiAgICAgIH1cblxuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuXG4gICAgICBjb25zdCBmaW5hbFZhbHVlID0gQXRvbWljcy5sb2FkKHZpZXcsIDApO1xuICAgICAgZXhwZWN0KGZpbmFsVmFsdWUpLnRvQmUobnVtV29ya2VycyAqIGluY3JlbWVudHNQZXJXb3JrZXIpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBtYW5hZ2UgbWVtb3J5IGxpZmVjeWNsZSBjb3JyZWN0bHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBpbml0aWFsTWVtb3J5ID0gYXdhaXQgd2FzbUxvYWRlci5nZXRNZW1vcnlTdGF0cygpO1xuXG4gICAgICAvLyBBbGxvY2F0ZSBhbmQgcHJvY2VzcyBsYXJnZSBkYXRhXG4gICAgICBjb25zdCBhbGxvY2F0aW9ucyA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgRmxvYXQzMkFycmF5KDEwMDAwMCkuZmlsbChpKTtcbiAgICAgICAgY29uc3QgcHRyID0gYXdhaXQgd2FzbUxvYWRlci5hbGxvY2F0ZUFuZFByb2Nlc3MoZGF0YSk7XG4gICAgICAgIGFsbG9jYXRpb25zLnB1c2gocHRyKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgYWZ0ZXJBbGxvY01lbW9yeSA9IGF3YWl0IHdhc21Mb2FkZXIuZ2V0TWVtb3J5U3RhdHMoKTtcbiAgICAgIGV4cGVjdChhZnRlckFsbG9jTWVtb3J5LnVzZWQpLnRvQmVHcmVhdGVyVGhhbihpbml0aWFsTWVtb3J5LnVzZWQpO1xuXG4gICAgICAvLyBDbGVhbiB1cFxuICAgICAgZm9yIChjb25zdCBwdHIgb2YgYWxsb2NhdGlvbnMpIHtcbiAgICAgICAgYXdhaXQgd2FzbUxvYWRlci5kZWFsbG9jYXRlKHB0cik7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGFmdGVyQ2xlYW51cE1lbW9yeSA9IGF3YWl0IHdhc21Mb2FkZXIuZ2V0TWVtb3J5U3RhdHMoKTtcbiAgICAgIGV4cGVjdChhZnRlckNsZWFudXBNZW1vcnkudXNlZCkudG9CZUxlc3NUaGFuT3JFcXVhbChhZnRlckFsbG9jTWVtb3J5LnVzZWQpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnU3RyZWFtIFByb2Nlc3NpbmcnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgc3RyZWFtaW5nIGRhdGEgZnJvbSBKUyB0byBXQVNNJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgc3RyZWFtID0gd2FzbUxvYWRlci5jcmVhdGVEYXRhU3RyZWFtKCk7XG4gICAgICBjb25zdCBjaHVua3MgPSBbXTtcbiAgICAgIFxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDA7IGkrKykge1xuICAgICAgICBjb25zdCBjaHVuayA9IG5ldyBGbG9hdDMyQXJyYXkoMTAwMCkuZmlsbChpKTtcbiAgICAgICAgY2h1bmtzLnB1c2goY2h1bmspO1xuICAgICAgICBhd2FpdCBzdHJlYW0ud3JpdGUoY2h1bmspO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdHJlYW0uZmluYWxpemUoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuY2h1bmtzUHJvY2Vzc2VkKS50b0JlKDEwMCk7XG4gICAgICBleHBlY3QocmVzdWx0LnRvdGFsRWxlbWVudHMpLnRvQmUoMTAwMDAwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHN0cmVhbWluZyByZXN1bHRzIGZyb20gV0FTTSB0byBKUycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBbXTtcbiAgICAgIGNvbnN0IHJlc3VsdFN0cmVhbSA9IHdhc21Mb2FkZXIuY3JlYXRlUmVzdWx0U3RyZWFtKHtcbiAgICAgICAgb25EYXRhOiAoZGF0YSkgPT4gcmVzdWx0cy5wdXNoKGRhdGEpLFxuICAgICAgICBidWZmZXJTaXplOiAxMDI0XG4gICAgICB9KTtcblxuICAgICAgLy8gU3RhcnQgY29tcHV0YXRpb24gdGhhdCBwcm9kdWNlcyBzdHJlYW1pbmcgcmVzdWx0c1xuICAgICAgYXdhaXQgd2FzbUxvYWRlci5jb21wdXRlU3RyZWFtaW5nUmVzdWx0cyhyZXN1bHRTdHJlYW0uaWQsIHtcbiAgICAgICAgaXRlcmF0aW9uczogNTAsXG4gICAgICAgIGRhdGFQZXJJdGVyYXRpb246IDEwMDBcbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCByZXN1bHRTdHJlYW0ud2FpdEZvckNvbXBsZXRpb24oKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3VsdHMubGVuZ3RoKS50b0JlKDUwKTtcbiAgICAgIGV4cGVjdChyZXN1bHRzWzBdLmxlbmd0aCkudG9CZSgxMDAwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGJhY2twcmVzc3VyZSBpbiBzdHJlYW1pbmcnLCBhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgcHJvY2Vzc2luZ0RlbGF5ID0gNTA7IC8vIG1zXG4gICAgICBsZXQgYnVmZmVyZWRDb3VudCA9IDA7XG5cbiAgICAgIGNvbnN0IHN0cmVhbSA9IHdhc21Mb2FkZXIuY3JlYXRlRGF0YVN0cmVhbSh7XG4gICAgICAgIGhpZ2hXYXRlck1hcms6IDEwLFxuICAgICAgICBvbkJhY2twcmVzc3VyZTogKCkgPT4ge1xuICAgICAgICAgIGJ1ZmZlcmVkQ291bnQgPSBzdHJlYW0uZ2V0QnVmZmVyZWRDb3VudCgpO1xuICAgICAgICAgIHByb2Nlc3NpbmdEZWxheSA9IDEwOyAvLyBTcGVlZCB1cCBwcm9jZXNzaW5nXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBXcml0ZSBkYXRhIGZhc3RlciB0aGFuIGl0IGNhbiBiZSBwcm9jZXNzZWRcbiAgICAgIGNvbnN0IHdyaXRlUHJvbWlzZXMgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjA7IGkrKykge1xuICAgICAgICB3cml0ZVByb21pc2VzLnB1c2goc3RyZWFtLndyaXRlKG5ldyBGbG9hdDMyQXJyYXkoMTAwMCkpKTtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwKSk7XG4gICAgICB9XG5cbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKHdyaXRlUHJvbWlzZXMpO1xuICAgICAgZXhwZWN0KGJ1ZmZlcmVkQ291bnQpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICAgIGV4cGVjdChidWZmZXJlZENvdW50KS50b0JlTGVzc1RoYW5PckVxdWFsKDEwKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0NvbXBsZXggV29ya2Zsb3cgSW50ZWdyYXRpb24nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbmV1cmFsIG5ldHdvcmsgdHJhaW5pbmcgd29ya2Zsb3cnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBDcmVhdGUgbmV0d29ya1xuICAgICAgY29uc3QgbmV0d29yayA9IGF3YWl0IG5ldXJhbE1hbmFnZXIuY3JlYXRlTmV0d29yayh7XG4gICAgICAgIHR5cGU6ICdtbHAnLFxuICAgICAgICBsYXllcnM6IFtcbiAgICAgICAgICB7IHVuaXRzOiAxMCwgYWN0aXZhdGlvbjogJ3JlbHUnIH0sXG4gICAgICAgICAgeyB1bml0czogNSwgYWN0aXZhdGlvbjogJ3NvZnRtYXgnIH1cbiAgICAgICAgXVxuICAgICAgfSk7XG5cbiAgICAgIC8vIEdlbmVyYXRlIHRyYWluaW5nIGRhdGFcbiAgICAgIGNvbnN0IHRyYWluaW5nRGF0YSA9IHtcbiAgICAgICAgaW5wdXRzOiBbXSxcbiAgICAgICAgdGFyZ2V0czogW11cbiAgICAgIH07XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTAwOyBpKyspIHtcbiAgICAgICAgdHJhaW5pbmdEYXRhLmlucHV0cy5wdXNoKG5ldyBGbG9hdDMyQXJyYXkoMTApLm1hcCgoKSA9PiBNYXRoLnJhbmRvbSgpKSk7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IG5ldyBGbG9hdDMyQXJyYXkoNSkuZmlsbCgwKTtcbiAgICAgICAgdGFyZ2V0W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDUpXSA9IDE7XG4gICAgICAgIHRyYWluaW5nRGF0YS50YXJnZXRzLnB1c2godGFyZ2V0KTtcbiAgICAgIH1cblxuICAgICAgLy8gVHJhaW4gd2l0aCBwcm9ncmVzcyBjYWxsYmFja3NcbiAgICAgIGNvbnN0IHByb2dyZXNzSGlzdG9yeSA9IFtdO1xuICAgICAgY29uc3QgdHJhaW5SZXN1bHQgPSBhd2FpdCBuZXR3b3JrLnRyYWluKHRyYWluaW5nRGF0YSwge1xuICAgICAgICBlcG9jaHM6IDEwLFxuICAgICAgICBiYXRjaFNpemU6IDEwLFxuICAgICAgICBvblByb2dyZXNzOiAoZXBvY2gsIGxvc3MpID0+IHtcbiAgICAgICAgICBwcm9ncmVzc0hpc3RvcnkucHVzaCh7IGVwb2NoLCBsb3NzIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHByb2dyZXNzSGlzdG9yeSkudG9IYXZlTGVuZ3RoKDEwKTtcbiAgICAgIGV4cGVjdChwcm9ncmVzc0hpc3RvcnlbOV0ubG9zcykudG9CZUxlc3NUaGFuKHByb2dyZXNzSGlzdG9yeVswXS5sb3NzKTtcbiAgICAgIGV4cGVjdCh0cmFpblJlc3VsdC5maW5hbExvc3MpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBzd2FybSBvcmNoZXN0cmF0aW9uIHdvcmtmbG93JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgc3dhcm0gPSBhd2FpdCBydXZTd2FybS5jcmVhdGVTd2FybSh7XG4gICAgICAgIG5hbWU6ICdvcmNoZXN0cmF0aW9uLXRlc3QnLFxuICAgICAgICB0b3BvbG9neTogJ2hpZXJhcmNoaWNhbCcsXG4gICAgICAgIG1heEFnZW50czogMTBcbiAgICAgIH0pO1xuXG4gICAgICAvLyBTcGF3biBkaWZmZXJlbnQgdHlwZXMgb2YgYWdlbnRzXG4gICAgICBjb25zdCBhZ2VudHMgPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIHN3YXJtLnNwYXduKHsgdHlwZTogJ2Nvb3JkaW5hdG9yJywgcm9sZTogJ2xlYWQnIH0pLFxuICAgICAgICBzd2FybS5zcGF3bih7IHR5cGU6ICdyZXNlYXJjaGVyJywgc3BlY2lhbGl6YXRpb246ICdkYXRhJyB9KSxcbiAgICAgICAgc3dhcm0uc3Bhd24oeyB0eXBlOiAnY29kZXInLCBsYW5ndWFnZTogJ2phdmFzY3JpcHQnIH0pLFxuICAgICAgICBzd2FybS5zcGF3bih7IHR5cGU6ICd0ZXN0ZXInLCBmcmFtZXdvcms6ICdqZXN0JyB9KVxuICAgICAgXSk7XG5cbiAgICAgIC8vIENyZWF0ZSBjb21wbGV4IHRhc2tcbiAgICAgIGNvbnN0IHRhc2sgPSB7XG4gICAgICAgIGlkOiAnY29tcGxleC13b3JrZmxvdycsXG4gICAgICAgIHN0ZXBzOiBbXG4gICAgICAgICAgeyB0eXBlOiAncmVzZWFyY2gnLCBkZXNjcmlwdGlvbjogJ0FuYWx5emUgcmVxdWlyZW1lbnRzJyB9LFxuICAgICAgICAgIHsgdHlwZTogJ2Rlc2lnbicsIGRlc2NyaXB0aW9uOiAnQ3JlYXRlIGFyY2hpdGVjdHVyZScgfSxcbiAgICAgICAgICB7IHR5cGU6ICdpbXBsZW1lbnQnLCBkZXNjcmlwdGlvbjogJ1dyaXRlIGNvZGUnIH0sXG4gICAgICAgICAgeyB0eXBlOiAndGVzdCcsIGRlc2NyaXB0aW9uOiAnVmFsaWRhdGUgaW1wbGVtZW50YXRpb24nIH1cbiAgICAgICAgXSxcbiAgICAgICAgZGVwZW5kZW5jaWVzOiB7XG4gICAgICAgICAgZGVzaWduOiBbJ3Jlc2VhcmNoJ10sXG4gICAgICAgICAgaW1wbGVtZW50OiBbJ2Rlc2lnbiddLFxuICAgICAgICAgIHRlc3Q6IFsnaW1wbGVtZW50J11cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgY29uc3Qgb3JjaGVzdHJhdGlvblJlc3VsdCA9IGF3YWl0IHN3YXJtLm9yY2hlc3RyYXRlKHRhc2spO1xuICAgICAgXG4gICAgICBleHBlY3Qob3JjaGVzdHJhdGlvblJlc3VsdC5jb21wbGV0ZWQpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3Qob3JjaGVzdHJhdGlvblJlc3VsdC5zdGVwcykudG9IYXZlTGVuZ3RoKDQpO1xuICAgICAgZXhwZWN0KG9yY2hlc3RyYXRpb25SZXN1bHQuYWdlbnRzVXNlZCkudG9IYXZlTGVuZ3RoKDQpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgcGVyc2lzdGVuY2Ugd29ya2Zsb3cnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBDcmVhdGUgYW5kIHRyYWluIGEgbmV0d29ya1xuICAgICAgY29uc3QgbmV0d29yayA9IGF3YWl0IG5ldXJhbE1hbmFnZXIuY3JlYXRlTmV0d29yayh7XG4gICAgICAgIHR5cGU6ICdsc3RtJyxcbiAgICAgICAgaW5wdXRTaXplOiAyMCxcbiAgICAgICAgaGlkZGVuU2l6ZTogNTAsXG4gICAgICAgIG91dHB1dFNpemU6IDEwXG4gICAgICB9KTtcblxuICAgICAgYXdhaXQgbmV0d29yay50cmFpbih7XG4gICAgICAgIGlucHV0czogQXJyYXkoNTApLmZpbGwobnVsbCkubWFwKCgpID0+IG5ldyBGbG9hdDMyQXJyYXkoMjApLm1hcCgoKSA9PiBNYXRoLnJhbmRvbSgpKSksXG4gICAgICAgIHRhcmdldHM6IEFycmF5KDUwKS5maWxsKG51bGwpLm1hcCgoKSA9PiBuZXcgRmxvYXQzMkFycmF5KDEwKS5tYXAoKCkgPT4gTWF0aC5yYW5kb20oKSkpXG4gICAgICB9KTtcblxuICAgICAgLy8gU2F2ZSB0byBwZXJzaXN0ZW5jZVxuICAgICAgY29uc3Qgc2F2ZVJlc3VsdCA9IGF3YWl0IHBlcnNpc3RlbmNlTWFuYWdlci5zYXZlTmV0d29yayhuZXR3b3JrLmlkLCB7XG4gICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgbmFtZTogJ3Rlc3QtbHN0bScsXG4gICAgICAgICAgdmVyc2lvbjogJzEuMC4wJyxcbiAgICAgICAgICB0cmFpbmVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHNhdmVSZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChzYXZlUmVzdWx0LnNpemUpLnRvQmVHcmVhdGVyVGhhbigwKTtcblxuICAgICAgLy8gTG9hZCBmcm9tIHBlcnNpc3RlbmNlXG4gICAgICBjb25zdCBsb2FkZWROZXR3b3JrID0gYXdhaXQgcGVyc2lzdGVuY2VNYW5hZ2VyLmxvYWROZXR3b3JrKHNhdmVSZXN1bHQuaWQpO1xuICAgICAgZXhwZWN0KGxvYWRlZE5ldHdvcmsuaWQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBcbiAgICAgIC8vIFZlcmlmeSBsb2FkZWQgbmV0d29yayB3b3Jrc1xuICAgICAgY29uc3QgdGVzdElucHV0ID0gbmV3IEZsb2F0MzJBcnJheSgyMCkubWFwKCgpID0+IE1hdGgucmFuZG9tKCkpO1xuICAgICAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgbG9hZGVkTmV0d29yay5wcmVkaWN0KHRlc3RJbnB1dCk7XG4gICAgICBleHBlY3Qob3V0cHV0KS50b0hhdmVMZW5ndGgoMTApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRXJyb3IgUHJvcGFnYXRpb24nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBwcm9wYWdhdGUgV0FTTSBlcnJvcnMgdG8gSlMgd2l0aCBjb250ZXh0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgd2FzbUxvYWRlci5leGVjdXRlSW52YWxpZE9wZXJhdGlvbih7XG4gICAgICAgICAgb3BlcmF0aW9uOiAnZGl2aWRlX2J5X3plcm8nLFxuICAgICAgICAgIGNvbnRleHQ6IHsgdmFsdWU6IDQyIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGV4cGVjdC5mYWlsKCdTaG91bGQgaGF2ZSB0aHJvd24gYW4gZXJyb3InKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGV4cGVjdChlcnJvci5tZXNzYWdlKS50b0NvbnRhaW4oJ2RpdmlzaW9uIGJ5IHplcm8nKTtcbiAgICAgICAgZXhwZWN0KGVycm9yLndhc21TdGFjaykudG9CZURlZmluZWQoKTtcbiAgICAgICAgZXhwZWN0KGVycm9yLmNvbnRleHQudmFsdWUpLnRvQmUoNDIpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbWVtb3J5IGFsbG9jYXRpb24gZXJyb3JzIGdyYWNlZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUcnkgdG8gYWxsb2NhdGUgaW1wb3NzaWJseSBsYXJnZSBhbW91bnRcbiAgICAgICAgYXdhaXQgd2FzbUxvYWRlci5hbGxvY2F0ZShOdW1iZXIuTUFYX1NBRkVfSU5URUdFUik7XG4gICAgICAgIGV4cGVjdC5mYWlsKCdTaG91bGQgaGF2ZSB0aHJvd24gYW4gZXJyb3InKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGV4cGVjdChlcnJvci5tZXNzYWdlKS50b0NvbnRhaW4oJ21lbW9yeSBhbGxvY2F0aW9uIGZhaWxlZCcpO1xuICAgICAgICBleHBlY3QoZXJyb3IuY29kZSkudG9CZSgnRU5PTUVNJyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlY292ZXIgZnJvbSBXQVNNIHBhbmljcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGJlZm9yZVBhbmljID0gYXdhaXQgd2FzbUxvYWRlci5nZXRTdGF0ZSgpO1xuICAgICAgXG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCB3YXNtTG9hZGVyLnRyaWdnZXJQYW5pYygndGVzdCBwYW5pYycpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgZXhwZWN0KGVycm9yLm1lc3NhZ2UpLnRvQ29udGFpbigncGFuaWMnKTtcbiAgICAgIH1cblxuICAgICAgLy8gVmVyaWZ5IG1vZHVsZSBjYW4gcmVjb3ZlclxuICAgICAgY29uc3QgYWZ0ZXJQYW5pYyA9IGF3YWl0IHdhc21Mb2FkZXIuZ2V0U3RhdGUoKTtcbiAgICAgIGV4cGVjdChhZnRlclBhbmljLmhlYWx0aHkpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoYWZ0ZXJQYW5pYy5sYXN0RXJyb3IpLnRvQ29udGFpbigncGFuaWMnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1BlcmZvcm1hbmNlIE1vbml0b3JpbmcnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB0cmFjayBKUy1XQVNNIGNhbGwgb3ZlcmhlYWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtZXRyaWNzID0gYXdhaXQgd2FzbUxvYWRlci5lbmFibGVNZXRyaWNzKCk7XG4gICAgICBcbiAgICAgIC8vIE1ha2UgdmFyaW91cyBjYWxsc1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDA7IGkrKykge1xuICAgICAgICBhd2FpdCB3YXNtTG9hZGVyLnNpbXBsZU9wZXJhdGlvbihpKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc3RhdHMgPSBhd2FpdCBtZXRyaWNzLmdldFN0YXRpc3RpY3MoKTtcbiAgICAgIGV4cGVjdChzdGF0cy50b3RhbENhbGxzKS50b0JlKDEwMCk7XG4gICAgICBleHBlY3Qoc3RhdHMuYXZlcmFnZU92ZXJoZWFkKS50b0JlTGVzc1RoYW4oMSk7IC8vIExlc3MgdGhhbiAxbXMgb3ZlcmhlYWRcbiAgICAgIGV4cGVjdChzdGF0cy5tYXhPdmVyaGVhZCkudG9CZUxlc3NUaGFuKDUpOyAvLyBNYXggNW1zIG92ZXJoZWFkXG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIG1lYXN1cmUgZGF0YSB0cmFuc2ZlciBwZXJmb3JtYW5jZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHNpemVzID0gWzEwMjQsIDEwMjQwLCAxMDI0MDAsIDEwMjQwMDBdOyAvLyAxS0IgdG8gMU1CXG4gICAgICBjb25zdCByZXN1bHRzID0gW107XG5cbiAgICAgIGZvciAoY29uc3Qgc2l6ZSBvZiBzaXplcykge1xuICAgICAgICBjb25zdCBkYXRhID0gbmV3IEZsb2F0MzJBcnJheShzaXplIC8gNCkuZmlsbCgxLjApO1xuICAgICAgICBjb25zdCBzdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgd2FzbUxvYWRlci5wcm9jZXNzRGF0YShkYXRhKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0O1xuICAgICAgICBjb25zdCB0aHJvdWdocHV0ID0gKHNpemUgLyAxMDI0KSAvICh0aW1lIC8gMTAwMCk7IC8vIEtCL3NcbiAgICAgICAgXG4gICAgICAgIHJlc3VsdHMucHVzaCh7IHNpemUsIHRpbWUsIHRocm91Z2hwdXQgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFZlcmlmeSB0aHJvdWdocHV0IHNjYWxlcyByZWFzb25hYmx5XG4gICAgICBleHBlY3QocmVzdWx0c1szXS50aHJvdWdocHV0KS50b0JlR3JlYXRlclRoYW4oMTAwMCk7IC8vIEF0IGxl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