{"version":3,"names":["describe","it","expect","beforeAll","afterAll","RuvSwarm","WasmModuleLoader","NeuralNetworkManager","PersistenceManager","ruvSwarm","wasmLoader","neuralManager","persistenceManager","_asyncToGenerator","initialize","loadingStrategy","enablePersistence","enableNeuralNetworks","useSIMD","debug","cleanup","swarm","createSwarm","name","maxAgents","agent","spawn","type","priority","toBe","updateMetadata","description","metadata","getMetadata","setActive","isActive","data","floatArray","Float32Array","intArray","Int32Array","uint8Array","Uint8Array","result","processArrays","floatSum","toBeCloseTo","intSum","uint8Sum","config","network","layers","units","activation","optimizer","learningRate","beta1","beta2","training","epochs","batchSize","validationSplit","createNetwork","networkConfig","getConfiguration","toHaveLength","callbackExecuted","callbackData","onAgentUpdate","agentId","status","execute","task","toBeDefined","id","events","onTaskProgress","_ref8","taskId","progress","push","timestamp","Date","now","Promise","resolve","setTimeout","_x","_x2","apply","arguments","orchestrate","steps","waitForTask","length","toBeGreaterThan","errorCaught","errorMessage","onError","error","message","i","e","toContain","size","sharedBuffer","SharedArrayBuffer","jsView","Math","random","processSharedMemory","sum","mean","processed","buffer","view","Atomics","store","promises","numWorkers","incrementsPerWorker","atomicIncrement","all","finalValue","load","initialMemory","getMemoryStats","allocations","fill","ptr","allocateAndProcess","afterAllocMemory","used","deallocate","afterCleanupMemory","toBeLessThanOrEqual","stream","createDataStream","chunks","chunk","write","finalize","chunksProcessed","totalElements","results","resultStream","createResultStream","onData","bufferSize","computeStreamingResults","iterations","dataPerIteration","waitForCompletion","processingDelay","bufferedCount","highWaterMark","onBackpressure","getBufferedCount","writePromises","trainingData","inputs","targets","map","target","floor","progressHistory","trainResult","train","onProgress","epoch","loss","toBeLessThan","finalLoss","topology","agents","role","specialization","language","framework","dependencies","design","implement","test","orchestrationResult","completed","agentsUsed","inputSize","hiddenSize","outputSize","Array","saveResult","saveNetwork","version","trainedAt","toISOString","success","loadedNetwork","loadNetwork","testInput","output","predict","executeInvalidOperation","operation","context","value","fail","wasmStack","allocate","Number","MAX_SAFE_INTEGER","code","beforePanic","getState","triggerPanic","afterPanic","healthy","lastError","metrics","enableMetrics","simpleOperation","stats","getStatistics","totalCalls","averageOverhead","maxOverhead","sizes","start","performance","processData","time","throughput"],"sources":["js-wasm-communication.test.js"],"sourcesContent":["/**\n * Integration tests for JavaScript-WASM communication\n * Tests bidirectional data flow, callbacks, and complex interactions\n */\n\nimport { describe, it, expect, beforeAll, afterAll } from 'vitest';\nimport { RuvSwarm } from '../../src/index-enhanced.js';\nimport { WasmModuleLoader } from '../../src/wasm-loader.js';\nimport { NeuralNetworkManager } from '../../src/neural-network-manager.js';\nimport { PersistenceManager } from '../../src/persistence.js';\n\ndescribe('JS-WASM Communication Integration Tests', () => {\n  let ruvSwarm;\n  let wasmLoader;\n  let neuralManager;\n  let persistenceManager;\n\n  beforeAll(async () => {\n    // Initialize all components\n    ruvSwarm = await RuvSwarm.initialize({\n      loadingStrategy: 'progressive',\n      enablePersistence: true,\n      enableNeuralNetworks: true,\n      useSIMD: true,\n      debug: false\n    });\n\n    wasmLoader = ruvSwarm.wasmLoader;\n    neuralManager = ruvSwarm.neuralManager;\n    persistenceManager = ruvSwarm.persistenceManager;\n  });\n\n  afterAll(async () => {\n    if (ruvSwarm) {\n      await ruvSwarm.cleanup();\n    }\n  });\n\n  describe('Data Type Marshalling', () => {\n    it('should correctly marshal primitive types', async () => {\n      const swarm = await ruvSwarm.createSwarm({\n        name: 'test-swarm',\n        maxAgents: 5\n      });\n\n      // Test number marshalling\n      const agent = await swarm.spawn({\n        type: 'researcher',\n        priority: 0.75\n      });\n      expect(agent.priority).toBe(0.75);\n\n      // Test string marshalling\n      agent.updateMetadata({ description: 'Test agent with special chars: æ—¥æœ¬èªž ðŸš€' });\n      const metadata = await agent.getMetadata();\n      expect(metadata.description).toBe('Test agent with special chars: æ—¥æœ¬èªž ðŸš€');\n\n      // Test boolean marshalling\n      agent.setActive(true);\n      expect(agent.isActive).toBe(true);\n    });\n\n    it('should correctly marshal arrays', async () => {\n      const data = {\n        floatArray: new Float32Array([1.1, 2.2, 3.3, 4.4]),\n        intArray: new Int32Array([10, 20, 30, 40]),\n        uint8Array: new Uint8Array([255, 128, 64, 0])\n      };\n\n      // Test array passing to WASM\n      const result = await wasmLoader.processArrays(data);\n      \n      expect(result.floatSum).toBeCloseTo(11.0);\n      expect(result.intSum).toBe(100);\n      expect(result.uint8Sum).toBe(447);\n    });\n\n    it('should correctly marshal complex objects', async () => {\n      const config = {\n        network: {\n          type: 'lstm',\n          layers: [\n            { units: 128, activation: 'tanh' },\n            { units: 64, activation: 'relu' },\n            { units: 32, activation: 'sigmoid' }\n          ],\n          optimizer: {\n            type: 'adam',\n            learningRate: 0.001,\n            beta1: 0.9,\n            beta2: 0.999\n          }\n        },\n        training: {\n          epochs: 100,\n          batchSize: 32,\n          validationSplit: 0.2\n        }\n      };\n\n      const network = await neuralManager.createNetwork(config.network);\n      const networkConfig = await network.getConfiguration();\n      \n      expect(networkConfig.layers).toHaveLength(3);\n      expect(networkConfig.optimizer.learningRate).toBe(0.001);\n    });\n  });\n\n  describe('Callback Mechanisms', () => {\n    it('should handle synchronous callbacks from WASM', async () => {\n      let callbackExecuted = false;\n      let callbackData = null;\n\n      const swarm = await ruvSwarm.createSwarm({\n        name: 'callback-test',\n        onAgentUpdate: (agentId, status) => {\n          callbackExecuted = true;\n          callbackData = { agentId, status };\n        }\n      });\n\n      const agent = await swarm.spawn({ type: 'coder' });\n      await agent.execute({ task: 'test-task' });\n\n      expect(callbackExecuted).toBe(true);\n      expect(callbackData).toBeDefined();\n      expect(callbackData.agentId).toBe(agent.id);\n    });\n\n    it('should handle asynchronous callbacks from WASM', async () => {\n      const events = [];\n\n      const swarm = await ruvSwarm.createSwarm({\n        name: 'async-callback-test',\n        onTaskProgress: async (taskId, progress) => {\n          events.push({ taskId, progress, timestamp: Date.now() });\n          await new Promise(resolve => setTimeout(resolve, 10)); // Simulate async work\n        }\n      });\n\n      const taskId = await swarm.orchestrate({\n        task: 'Complex multi-step task',\n        steps: 5\n      });\n\n      // Wait for task completion\n      await swarm.waitForTask(taskId);\n\n      expect(events.length).toBeGreaterThan(0);\n      expect(events[events.length - 1].progress).toBe(100);\n    });\n\n    it('should handle error callbacks from WASM', async () => {\n      let errorCaught = false;\n      let errorMessage = '';\n\n      const swarm = await ruvSwarm.createSwarm({\n        name: 'error-callback-test',\n        onError: (error) => {\n          errorCaught = true;\n          errorMessage = error.message;\n        }\n      });\n\n      // Trigger an error by exceeding max agents\n      try {\n        for (let i = 0; i < 20; i++) {\n          await swarm.spawn({ type: 'researcher' });\n        }\n      } catch (e) {\n        // Expected\n      }\n\n      expect(errorCaught).toBe(true);\n      expect(errorMessage).toContain('max agents');\n    });\n  });\n\n  describe('Memory Sharing', () => {\n    it('should share memory efficiently between JS and WASM', async () => {\n      const size = 1024 * 1024; // 1MB\n      const sharedBuffer = new SharedArrayBuffer(size);\n      const jsView = new Float32Array(sharedBuffer);\n      \n      // Fill from JS side\n      for (let i = 0; i < jsView.length; i++) {\n        jsView[i] = Math.random();\n      }\n\n      // Process in WASM\n      const result = await wasmLoader.processSharedMemory(sharedBuffer);\n      \n      expect(result.sum).toBeGreaterThan(0);\n      expect(result.mean).toBeCloseTo(0.5, 1);\n      expect(result.processed).toBe(jsView.length);\n    });\n\n    it('should handle concurrent memory access safely', async () => {\n      const buffer = new SharedArrayBuffer(1024);\n      const view = new Int32Array(buffer);\n      Atomics.store(view, 0, 0);\n\n      const promises = [];\n      const numWorkers = 4;\n      const incrementsPerWorker = 1000;\n\n      for (let i = 0; i < numWorkers; i++) {\n        promises.push(wasmLoader.atomicIncrement(buffer, 0, incrementsPerWorker));\n      }\n\n      await Promise.all(promises);\n\n      const finalValue = Atomics.load(view, 0);\n      expect(finalValue).toBe(numWorkers * incrementsPerWorker);\n    });\n\n    it('should manage memory lifecycle correctly', async () => {\n      const initialMemory = await wasmLoader.getMemoryStats();\n\n      // Allocate and process large data\n      const allocations = [];\n      for (let i = 0; i < 10; i++) {\n        const data = new Float32Array(100000).fill(i);\n        const ptr = await wasmLoader.allocateAndProcess(data);\n        allocations.push(ptr);\n      }\n\n      const afterAllocMemory = await wasmLoader.getMemoryStats();\n      expect(afterAllocMemory.used).toBeGreaterThan(initialMemory.used);\n\n      // Clean up\n      for (const ptr of allocations) {\n        await wasmLoader.deallocate(ptr);\n      }\n\n      const afterCleanupMemory = await wasmLoader.getMemoryStats();\n      expect(afterCleanupMemory.used).toBeLessThanOrEqual(afterAllocMemory.used);\n    });\n  });\n\n  describe('Stream Processing', () => {\n    it('should handle streaming data from JS to WASM', async () => {\n      const stream = wasmLoader.createDataStream();\n      const chunks = [];\n      \n      for (let i = 0; i < 100; i++) {\n        const chunk = new Float32Array(1000).fill(i);\n        chunks.push(chunk);\n        await stream.write(chunk);\n      }\n\n      const result = await stream.finalize();\n      expect(result.chunksProcessed).toBe(100);\n      expect(result.totalElements).toBe(100000);\n    });\n\n    it('should handle streaming results from WASM to JS', async () => {\n      const results = [];\n      const resultStream = wasmLoader.createResultStream({\n        onData: (data) => results.push(data),\n        bufferSize: 1024\n      });\n\n      // Start computation that produces streaming results\n      await wasmLoader.computeStreamingResults(resultStream.id, {\n        iterations: 50,\n        dataPerIteration: 1000\n      });\n\n      await resultStream.waitForCompletion();\n      \n      expect(results.length).toBe(50);\n      expect(results[0].length).toBe(1000);\n    });\n\n    it('should handle backpressure in streaming', async () => {\n      let processingDelay = 50; // ms\n      let bufferedCount = 0;\n\n      const stream = wasmLoader.createDataStream({\n        highWaterMark: 10,\n        onBackpressure: () => {\n          bufferedCount = stream.getBufferedCount();\n          processingDelay = 10; // Speed up processing\n        }\n      });\n\n      // Write data faster than it can be processed\n      const writePromises = [];\n      for (let i = 0; i < 20; i++) {\n        writePromises.push(stream.write(new Float32Array(1000)));\n        await new Promise(resolve => setTimeout(resolve, 10));\n      }\n\n      await Promise.all(writePromises);\n      expect(bufferedCount).toBeGreaterThan(0);\n      expect(bufferedCount).toBeLessThanOrEqual(10);\n    });\n  });\n\n  describe('Complex Workflow Integration', () => {\n    it('should handle neural network training workflow', async () => {\n      // Create network\n      const network = await neuralManager.createNetwork({\n        type: 'mlp',\n        layers: [\n          { units: 10, activation: 'relu' },\n          { units: 5, activation: 'softmax' }\n        ]\n      });\n\n      // Generate training data\n      const trainingData = {\n        inputs: [],\n        targets: []\n      };\n\n      for (let i = 0; i < 100; i++) {\n        trainingData.inputs.push(new Float32Array(10).map(() => Math.random()));\n        const target = new Float32Array(5).fill(0);\n        target[Math.floor(Math.random() * 5)] = 1;\n        trainingData.targets.push(target);\n      }\n\n      // Train with progress callbacks\n      const progressHistory = [];\n      const trainResult = await network.train(trainingData, {\n        epochs: 10,\n        batchSize: 10,\n        onProgress: (epoch, loss) => {\n          progressHistory.push({ epoch, loss });\n        }\n      });\n\n      expect(progressHistory).toHaveLength(10);\n      expect(progressHistory[9].loss).toBeLessThan(progressHistory[0].loss);\n      expect(trainResult.finalLoss).toBeDefined();\n    });\n\n    it('should handle swarm orchestration workflow', async () => {\n      const swarm = await ruvSwarm.createSwarm({\n        name: 'orchestration-test',\n        topology: 'hierarchical',\n        maxAgents: 10\n      });\n\n      // Spawn different types of agents\n      const agents = await Promise.all([\n        swarm.spawn({ type: 'coordinator', role: 'lead' }),\n        swarm.spawn({ type: 'researcher', specialization: 'data' }),\n        swarm.spawn({ type: 'coder', language: 'javascript' }),\n        swarm.spawn({ type: 'tester', framework: 'jest' })\n      ]);\n\n      // Create complex task\n      const task = {\n        id: 'complex-workflow',\n        steps: [\n          { type: 'research', description: 'Analyze requirements' },\n          { type: 'design', description: 'Create architecture' },\n          { type: 'implement', description: 'Write code' },\n          { type: 'test', description: 'Validate implementation' }\n        ],\n        dependencies: {\n          design: ['research'],\n          implement: ['design'],\n          test: ['implement']\n        }\n      };\n\n      const orchestrationResult = await swarm.orchestrate(task);\n      \n      expect(orchestrationResult.completed).toBe(true);\n      expect(orchestrationResult.steps).toHaveLength(4);\n      expect(orchestrationResult.agentsUsed).toHaveLength(4);\n    });\n\n    it('should handle persistence workflow', async () => {\n      // Create and train a network\n      const network = await neuralManager.createNetwork({\n        type: 'lstm',\n        inputSize: 20,\n        hiddenSize: 50,\n        outputSize: 10\n      });\n\n      await network.train({\n        inputs: Array(50).fill(null).map(() => new Float32Array(20).map(() => Math.random())),\n        targets: Array(50).fill(null).map(() => new Float32Array(10).map(() => Math.random()))\n      });\n\n      // Save to persistence\n      const saveResult = await persistenceManager.saveNetwork(network.id, {\n        metadata: {\n          name: 'test-lstm',\n          version: '1.0.0',\n          trainedAt: new Date().toISOString()\n        }\n      });\n\n      expect(saveResult.success).toBe(true);\n      expect(saveResult.size).toBeGreaterThan(0);\n\n      // Load from persistence\n      const loadedNetwork = await persistenceManager.loadNetwork(saveResult.id);\n      expect(loadedNetwork.id).toBeDefined();\n      \n      // Verify loaded network works\n      const testInput = new Float32Array(20).map(() => Math.random());\n      const output = await loadedNetwork.predict(testInput);\n      expect(output).toHaveLength(10);\n    });\n  });\n\n  describe('Error Propagation', () => {\n    it('should propagate WASM errors to JS with context', async () => {\n      try {\n        await wasmLoader.executeInvalidOperation({\n          operation: 'divide_by_zero',\n          context: { value: 42 }\n        });\n        expect.fail('Should have thrown an error');\n      } catch (error) {\n        expect(error.message).toContain('division by zero');\n        expect(error.wasmStack).toBeDefined();\n        expect(error.context.value).toBe(42);\n      }\n    });\n\n    it('should handle memory allocation errors gracefully', async () => {\n      try {\n        // Try to allocate impossibly large amount\n        await wasmLoader.allocate(Number.MAX_SAFE_INTEGER);\n        expect.fail('Should have thrown an error');\n      } catch (error) {\n        expect(error.message).toContain('memory allocation failed');\n        expect(error.code).toBe('ENOMEM');\n      }\n    });\n\n    it('should recover from WASM panics', async () => {\n      const beforePanic = await wasmLoader.getState();\n      \n      try {\n        await wasmLoader.triggerPanic('test panic');\n      } catch (error) {\n        expect(error.message).toContain('panic');\n      }\n\n      // Verify module can recover\n      const afterPanic = await wasmLoader.getState();\n      expect(afterPanic.healthy).toBe(true);\n      expect(afterPanic.lastError).toContain('panic');\n    });\n  });\n\n  describe('Performance Monitoring', () => {\n    it('should track JS-WASM call overhead', async () => {\n      const metrics = await wasmLoader.enableMetrics();\n      \n      // Make various calls\n      for (let i = 0; i < 100; i++) {\n        await wasmLoader.simpleOperation(i);\n      }\n\n      const stats = await metrics.getStatistics();\n      expect(stats.totalCalls).toBe(100);\n      expect(stats.averageOverhead).toBeLessThan(1); // Less than 1ms overhead\n      expect(stats.maxOverhead).toBeLessThan(5); // Max 5ms overhead\n    });\n\n    it('should measure data transfer performance', async () => {\n      const sizes = [1024, 10240, 102400, 1024000]; // 1KB to 1MB\n      const results = [];\n\n      for (const size of sizes) {\n        const data = new Float32Array(size / 4).fill(1.0);\n        const start = performance.now();\n        \n        const result = await wasmLoader.processData(data);\n        \n        const time = performance.now() - start;\n        const throughput = (size / 1024) / (time / 1000); // KB/s\n        \n        results.push({ size, time, throughput });\n      }\n\n      // Verify throughput scales reasonably\n      expect(results[3].throughput).toBeGreaterThan(1000); // At least 1MB/s for large transfers\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}