0a6f45e4ff5fe12f6241e19e49e65630
/* istanbul ignore next */
function cov_2l979xubim() {
  var path = "/workspaces/ruv-FANN/ruv-swarm/npm/src/claude-integration/remote.js";
  var hash = "5d970156de861f95fb14a987827b0a3ed96ca428";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/ruv-FANN/ruv-swarm/npm/src/claude-integration/remote.js",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 58
        }
      },
      "1": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 58
        }
      },
      "2": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 62,
          column: 2
        }
      },
      "3": {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 112,
          column: 2
        }
      },
      "4": {
        start: {
          line: 119,
          column: 4
        },
        end: {
          line: 175,
          column: 2
        }
      },
      "5": {
        start: {
          line: 182,
          column: 23
        },
        end: {
          line: 250,
          column: 5
        }
      },
      "6": {
        start: {
          line: 252,
          column: 24
        },
        end: {
          line: 296,
          column: 2
        }
      },
      "7": {
        start: {
          line: 298,
          column: 4
        },
        end: {
          line: 298,
          column: 52
        }
      },
      "8": {
        start: {
          line: 305,
          column: 4
        },
        end: {
          line: 305,
          column: 57
        }
      },
      "9": {
        start: {
          line: 307,
          column: 4
        },
        end: {
          line: 340,
          column: 5
        }
      },
      "10": {
        start: {
          line: 308,
          column: 22
        },
        end: {
          line: 324,
          column: 7
        }
      },
      "11": {
        start: {
          line: 326,
          column: 27
        },
        end: {
          line: 326,
          column: 29
        }
      },
      "12": {
        start: {
          line: 328,
          column: 6
        },
        end: {
          line: 332,
          column: 7
        }
      },
      "13": {
        start: {
          line: 329,
          column: 25
        },
        end: {
          line: 329,
          column: 64
        }
      },
      "14": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 330,
          column: 76
        }
      },
      "15": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 331,
          column: 39
        }
      },
      "16": {
        start: {
          line: 334,
          column: 6
        },
        end: {
          line: 334,
          column: 76
        }
      },
      "17": {
        start: {
          line: 335,
          column: 6
        },
        end: {
          line: 335,
          column: 52
        }
      },
      "18": {
        start: {
          line: 338,
          column: 6
        },
        end: {
          line: 338,
          column: 74
        }
      },
      "19": {
        start: {
          line: 339,
          column: 6
        },
        end: {
          line: 339,
          column: 18
        }
      },
      "20": {
        start: {
          line: 347,
          column: 4
        },
        end: {
          line: 347,
          column: 56
        }
      },
      "21": {
        start: {
          line: 349,
          column: 4
        },
        end: {
          line: 379,
          column: 5
        }
      },
      "22": {
        start: {
          line: 350,
          column: 22
        },
        end: {
          line: 350,
          column: 50
        }
      },
      "23": {
        start: {
          line: 352,
          column: 22
        },
        end: {
          line: 363,
          column: 7
        }
      },
      "24": {
        start: {
          line: 365,
          column: 27
        },
        end: {
          line: 365,
          column: 29
        }
      },
      "25": {
        start: {
          line: 367,
          column: 6
        },
        end: {
          line: 371,
          column: 7
        }
      },
      "26": {
        start: {
          line: 368,
          column: 25
        },
        end: {
          line: 368,
          column: 64
        }
      },
      "27": {
        start: {
          line: 369,
          column: 8
        },
        end: {
          line: 369,
          column: 76
        }
      },
      "28": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 370,
          column: 39
        }
      },
      "29": {
        start: {
          line: 373,
          column: 6
        },
        end: {
          line: 373,
          column: 82
        }
      },
      "30": {
        start: {
          line: 374,
          column: 6
        },
        end: {
          line: 374,
          column: 52
        }
      },
      "31": {
        start: {
          line: 377,
          column: 6
        },
        end: {
          line: 377,
          column: 80
        }
      },
      "32": {
        start: {
          line: 378,
          column: 6
        },
        end: {
          line: 378,
          column: 18
        }
      },
      "33": {
        start: {
          line: 386,
          column: 4
        },
        end: {
          line: 386,
          column: 66
        }
      },
      "34": {
        start: {
          line: 388,
          column: 4
        },
        end: {
          line: 404,
          column: 5
        }
      },
      "35": {
        start: {
          line: 389,
          column: 22
        },
        end: {
          line: 393,
          column: 7
        }
      },
      "36": {
        start: {
          line: 395,
          column: 6
        },
        end: {
          line: 395,
          column: 55
        }
      },
      "37": {
        start: {
          line: 396,
          column: 6
        },
        end: {
          line: 396,
          column: 57
        }
      },
      "38": {
        start: {
          line: 397,
          column: 6
        },
        end: {
          line: 397,
          column: 53
        }
      },
      "39": {
        start: {
          line: 398,
          column: 6
        },
        end: {
          line: 398,
          column: 53
        }
      },
      "40": {
        start: {
          line: 400,
          column: 6
        },
        end: {
          line: 400,
          column: 21
        }
      },
      "41": {
        start: {
          line: 402,
          column: 6
        },
        end: {
          line: 402,
          column: 74
        }
      },
      "42": {
        start: {
          line: 403,
          column: 6
        },
        end: {
          line: 403,
          column: 18
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 2
          },
          end: {
            line: 10,
            column: 3
          }
        },
        loc: {
          start: {
            line: 10,
            column: 28
          },
          end: {
            line: 13,
            column: 3
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 2
          },
          end: {
            line: 18,
            column: 3
          }
        },
        loc: {
          start: {
            line: 18,
            column: 24
          },
          end: {
            line: 63,
            column: 3
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 68,
            column: 2
          },
          end: {
            line: 68,
            column: 3
          }
        },
        loc: {
          start: {
            line: 68,
            column: 25
          },
          end: {
            line: 113,
            column: 3
          }
        },
        line: 68
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 118,
            column: 2
          },
          end: {
            line: 118,
            column: 3
          }
        },
        loc: {
          start: {
            line: 118,
            column: 30
          },
          end: {
            line: 176,
            column: 3
          }
        },
        line: 118
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 181,
            column: 2
          },
          end: {
            line: 181,
            column: 3
          }
        },
        loc: {
          start: {
            line: 181,
            column: 26
          },
          end: {
            line: 299,
            column: 3
          }
        },
        line: 181
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 304,
            column: 2
          },
          end: {
            line: 304,
            column: 3
          }
        },
        loc: {
          start: {
            line: 304,
            column: 25
          },
          end: {
            line: 341,
            column: 3
          }
        },
        line: 304
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 346,
            column: 2
          },
          end: {
            line: 346,
            column: 3
          }
        },
        loc: {
          start: {
            line: 346,
            column: 30
          },
          end: {
            line: 380,
            column: 3
          }
        },
        line: 346
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 385,
            column: 2
          },
          end: {
            line: 385,
            column: 3
          }
        },
        loc: {
          start: {
            line: 385,
            column: 20
          },
          end: {
            line: 405,
            column: 3
          }
        },
        line: 385
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 14
          },
          end: {
            line: 10,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 10,
            column: 24
          },
          end: {
            line: 10,
            column: 26
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 11,
            column: 22
          },
          end: {
            line: 11,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 11,
            column: 22
          },
          end: {
            line: 11,
            column: 40
          }
        }, {
          start: {
            line: 11,
            column: 44
          },
          end: {
            line: 11,
            column: 57
          }
        }],
        line: 11
      },
      "2": {
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 12,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 12,
            column: 42
          }
        }, {
          start: {
            line: 12,
            column: 46
          },
          end: {
            line: 12,
            column: 57
          }
        }],
        line: 12
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5d970156de861f95fb14a987827b0a3ed96ca428"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2l979xubim = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2l979xubim();
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * Remote wrapper generation module
 * Creates cross-platform wrapper scripts for remote execution
 */

import { promises as fs } from 'fs';
import path from 'path';
class RemoteWrapperGenerator {
  constructor(options =
  /* istanbul ignore next */
  (cov_2l979xubim().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_2l979xubim().f[0]++;
    cov_2l979xubim().s[0]++;
    this.workingDir =
    /* istanbul ignore next */
    (cov_2l979xubim().b[1][0]++, options.workingDir) ||
    /* istanbul ignore next */
    (cov_2l979xubim().b[1][1]++, process.cwd());
    /* istanbul ignore next */
    cov_2l979xubim().s[1]++;
    this.packageName =
    /* istanbul ignore next */
    (cov_2l979xubim().b[2][0]++, options.packageName) ||
    /* istanbul ignore next */
    (cov_2l979xubim().b[2][1]++, 'ruv-swarm');
  }

  /**
     * Generate bash wrapper script for Unix-like systems
     */
  generateBashWrapper() {
    /* istanbul ignore next */
    cov_2l979xubim().f[1]++;
    cov_2l979xubim().s[2]++;
    return `#!/usr/bin/env bash
# ${this.packageName} local wrapper
# This script ensures ${this.packageName} runs from your project directory

# Save the current directory
PROJECT_DIR="\${PWD}"

# Set environment to ensure correct working directory
export PWD="\${PROJECT_DIR}"
export RUVSW_WORKING_DIR="\${PROJECT_DIR}"

# Function to find and execute ${this.packageName}
find_and_execute() {
    # 1. Try local npm/npx
    if command -v npx &> /dev/null; then
        cd "\${PROJECT_DIR}"
        exec npx ${this.packageName} "\$@"
        
    # 2. Try local node_modules
    elif [ -f "\${PROJECT_DIR}/node_modules/.bin/${this.packageName}" ]; then
        cd "\${PROJECT_DIR}"
        exec "\${PROJECT_DIR}/node_modules/.bin/${this.packageName}" "\$@"
        
    # 3. Try global installation
    elif command -v ${this.packageName} &> /dev/null; then
        cd "\${PROJECT_DIR}"
        exec ${this.packageName} "\$@"
        
    # 4. Fallback to latest version
    else
        cd "\${PROJECT_DIR}"
        exec npx ${this.packageName}@latest "\$@"
    fi
}

# Handle remote execution if SSH context detected
if [ -n "\$SSH_CLIENT" ] || [ -n "\$SSH_TTY" ] || [ "\$TERM" = "screen" ]; then
    echo "🌐 Remote execution detected"
    export RUVSW_REMOTE_MODE=1
fi

# Execute with error handling
find_and_execute "\$@"
`;
  }

  /**
     * Generate Windows batch wrapper script
     */
  generateBatchWrapper() {
    /* istanbul ignore next */
    cov_2l979xubim().f[2]++;
    cov_2l979xubim().s[3]++;
    return `@echo off
REM ${this.packageName} local wrapper (Windows)
REM This script ensures ${this.packageName} runs from your project directory

set PROJECT_DIR=%CD%
set RUVSW_WORKING_DIR=%PROJECT_DIR%

REM Check for remote execution (basic detection)
if defined SSH_CLIENT set RUVSW_REMOTE_MODE=1
if defined SSH_TTY set RUVSW_REMOTE_MODE=1

REM Function to find and execute ${this.packageName}
call :find_and_execute %*
goto :eof

:find_and_execute
    REM 1. Try npx
    where npx >nul 2>nul
    if %ERRORLEVEL% == 0 (
        cd /d "%PROJECT_DIR%"
        npx ${this.packageName} %*
        exit /b %ERRORLEVEL%
    )
    
    REM 2. Try local node_modules
    if exist "%PROJECT_DIR%\\node_modules\\.bin\\${this.packageName}.cmd" (
        cd /d "%PROJECT_DIR%"
        "%PROJECT_DIR%\\node_modules\\.bin\\${this.packageName}.cmd" %*
        exit /b %ERRORLEVEL%
    )
    
    REM 3. Try global installation
    where ${this.packageName} >nul 2>nul
    if %ERRORLEVEL% == 0 (
        cd /d "%PROJECT_DIR%"
        ${this.packageName} %*
        exit /b %ERRORLEVEL%
    )
    
    REM 4. Fallback to latest
    cd /d "%PROJECT_DIR%"
    npx ${this.packageName}@latest %*
    exit /b %ERRORLEVEL%
`;
  }

  /**
     * Generate PowerShell wrapper script
     */
  generatePowerShellWrapper() {
    /* istanbul ignore next */
    cov_2l979xubim().f[3]++;
    cov_2l979xubim().s[4]++;
    return `#!/usr/bin/env pwsh
# ${this.packageName} local wrapper (PowerShell)
# Cross-platform PowerShell script for ${this.packageName}

param([Parameter(ValueFromRemainingArguments)][string[]]$Arguments)

# Save the current directory
$ProjectDir = Get-Location
$env:PWD = $ProjectDir
$env:RUVSW_WORKING_DIR = $ProjectDir

# Detect remote execution
if ($env:SSH_CLIENT -or $env:SSH_TTY -or $env:TERM -eq "screen") {
    Write-Host "🌐 Remote execution detected"
    $env:RUVSW_REMOTE_MODE = "1"
}

# Function to find and execute ${this.packageName}
function Find-And-Execute {
    param([string[]]$Args)
    
    try {
        # 1. Try npx
        if (Get-Command npx -ErrorAction SilentlyContinue) {
            Set-Location $ProjectDir
            & npx ${this.packageName} @Args
            return
        }
        
        # 2. Try local node_modules
        $localBin = Join-Path $ProjectDir "node_modules" ".bin" "${this.packageName}"
        if (Test-Path $localBin) {
            Set-Location $ProjectDir
            & $localBin @Args
            return
        }
        
        # 3. Try global installation
        if (Get-Command ${this.packageName} -ErrorAction SilentlyContinue) {
            Set-Location $ProjectDir
            & ${this.packageName} @Args
            return
        }
        
        # 4. Fallback to latest
        Set-Location $ProjectDir
        & npx ${this.packageName}@latest @Args
        
    } catch {
        Write-Error "Failed to execute ${this.packageName}: $_"
        exit 1
    }
}

# Execute with arguments
Find-And-Execute $Arguments
`;
  }

  /**
     * Generate Claude helper scripts
     */
  generateClaudeHelpers() {
    /* istanbul ignore next */
    cov_2l979xubim().f[4]++;
    const bashHelper =
    /* istanbul ignore next */
    (cov_2l979xubim().s[5]++, `#!/usr/bin/env bash
# Claude Code Direct Swarm Invocation Helper
# Generated by ${this.packageName} --claude setup

# Colors for output
GREEN='\\033[0;32m'
YELLOW='\\033[1;33m'
RED='\\033[0;31m'
NC='\\033[0m'

echo -e "\${GREEN}🐝 ${this.packageName} Claude Code Direct Invocation\${NC}"
echo "============================================="
echo

# Function to invoke Claude with swarm commands
invoke_claude_swarm() {
    local prompt="\$1"
    local skip_permissions="\$2"
    
    echo -e "\${YELLOW}🚀 Invoking Claude Code with swarm integration...\${NC}"
    echo "Prompt: \$prompt"
    echo
    
    if [ "\$skip_permissions" = "true" ]; then
        echo -e "\${RED}⚠️  Using --dangerously-skip-permissions flag\${NC}"
        claude "\$prompt" --dangerously-skip-permissions
    else
        claude "\$prompt"
    fi
}

# Predefined swarm prompts with remote support
case "\$1" in
    "research")
        invoke_claude_swarm "Initialize a research swarm with 5 agents using ${this.packageName}. Create researcher, analyst, and coder agents. Then orchestrate the task: \$2" "\$3"
        ;;
    "development")
        invoke_claude_swarm "Initialize a development swarm with 8 agents using ${this.packageName} in hierarchical topology. Create architect, frontend coder, backend coder, and tester agents. Then orchestrate the task: \$2" "\$3"
        ;;
    "analysis")
        invoke_claude_swarm "Initialize an analysis swarm with 6 agents using ${this.packageName}. Create multiple analyst agents with different specializations. Then orchestrate the task: \$2" "\$3"
        ;;
    "optimization")
        invoke_claude_swarm "Initialize an optimization swarm with 4 agents using ${this.packageName}. Create optimizer and analyst agents. Then orchestrate the performance optimization task: \$2" "\$3"
        ;;
    "custom")
        invoke_claude_swarm "\$2" "\$3"
        ;;
    "help")
        echo -e "\${GREEN}Usage:\${NC}"
        echo "  ./claude-swarm.sh research \\"task description\\" [skip-permissions]"
        echo "  ./claude-swarm.sh development \\"task description\\" [skip-permissions]"
        echo "  ./claude-swarm.sh analysis \\"task description\\" [skip-permissions]"
        echo "  ./claude-swarm.sh optimization \\"task description\\" [skip-permissions]"
        echo "  ./claude-swarm.sh custom \\"full claude prompt\\" [skip-permissions]"
        echo
        echo -e "\${GREEN}Examples:\${NC}"
        echo '  ./claude-swarm.sh research "Analyze modern web frameworks" true'
        echo '  ./claude-swarm.sh development "Build user authentication API"'
        echo '  ./claude-swarm.sh custom "Initialize ${this.packageName} and create 3 agents for data processing"'
        echo
        echo -e "\${YELLOW}Note:\${NC} Add 'true' as the last parameter to use --dangerously-skip-permissions"
        ;;
    *)
        echo -e "\${RED}Unknown command: \$1\${NC}"
        echo "Run './claude-swarm.sh help' for usage information"
        exit 1
        ;;
esac`);
    const batchHelper =
    /* istanbul ignore next */
    (cov_2l979xubim().s[6]++, `@echo off
REM Claude Code Direct Swarm Invocation Helper (Windows)
REM Generated by ${this.packageName} --claude setup

echo 🐝 ${this.packageName} Claude Code Direct Invocation
echo ============================================
echo.

if "%1"=="research" (
    echo 🚀 Invoking Claude Code with research swarm...
    if "%3"=="true" (
        claude "Initialize a research swarm with 5 agents using ${this.packageName}. Create researcher, analyst, and coder agents. Then orchestrate the task: %2" --dangerously-skip-permissions
    ) else (
        claude "Initialize a research swarm with 5 agents using ${this.packageName}. Create researcher, analyst, and coder agents. Then orchestrate the task: %2"
    )
) else if "%1"=="development" (
    echo 🚀 Invoking Claude Code with development swarm...
    if "%3"=="true" (
        claude "Initialize a development swarm with 8 agents using ${this.packageName} in hierarchical topology. Create architect, frontend coder, backend coder, and tester agents. Then orchestrate the task: %2" --dangerously-skip-permissions
    ) else (
        claude "Initialize a development swarm with 8 agents using ${this.packageName} in hierarchical topology. Create architect, frontend coder, backend coder, and tester agents. Then orchestrate the task: %2"
    )
) else if "%1"=="custom" (
    echo 🚀 Invoking Claude Code with custom prompt...
    if "%3"=="true" (
        claude "%2" --dangerously-skip-permissions
    ) else (
        claude "%2"
    )
) else if "%1"=="help" (
    echo Usage:
    echo   claude-swarm.bat research "task description" [skip-permissions]
    echo   claude-swarm.bat development "task description" [skip-permissions]
    echo   claude-swarm.bat custom "full claude prompt" [skip-permissions]
    echo.
    echo Examples:
    echo   claude-swarm.bat research "Analyze modern web frameworks" true
    echo   claude-swarm.bat development "Build user authentication API"
    echo.
    echo Note: Add 'true' as the last parameter to use --dangerously-skip-permissions
) else (
    echo Unknown command: %1
    echo Run 'claude-swarm.bat help' for usage information
    exit /b 1
)`);
    /* istanbul ignore next */
    cov_2l979xubim().s[7]++;
    return {
      bash: bashHelper,
      batch: batchHelper
    };
  }

  /**
     * Create all wrapper scripts
     */
  createWrappers() {
    /* istanbul ignore next */
    var _this = this;
    return _asyncToGenerator(function* () {
      cov_2l979xubim().f[5]++;
      cov_2l979xubim().s[8]++;
      console.log('🔧 Creating remote wrapper scripts...');
      cov_2l979xubim().s[9]++;
      try {
        const scripts =
        /* istanbul ignore next */
        (cov_2l979xubim().s[10]++, [{
          name: _this.packageName,
          content: _this.generateBashWrapper(),
          mode: 0o755
        }, {
          name: `${_this.packageName}.bat`,
          content: _this.generateBatchWrapper(),
          mode: 0o644
        }, {
          name: `${_this.packageName}.ps1`,
          content: _this.generatePowerShellWrapper(),
          mode: 0o755
        }]);
        const createdFiles =
        /* istanbul ignore next */
        (cov_2l979xubim().s[11]++, []);
        /* istanbul ignore next */
        cov_2l979xubim().s[12]++;
        for (const script of scripts) {
          const filePath =
          /* istanbul ignore next */
          (cov_2l979xubim().s[13]++, path.join(_this.workingDir, script.name));
          /* istanbul ignore next */
          cov_2l979xubim().s[14]++;
          /* istanbul ignore next */
          yield fs.writeFile(filePath, script.content, {
            mode: script.mode
          });
          /* istanbul ignore next */
          cov_2l979xubim().s[15]++;
          createdFiles.push(script.name);
        }
        /* istanbul ignore next */
        cov_2l979xubim().s[16]++;
        console.log(`✅ Created wrapper scripts: ${createdFiles.join(', ')}`);
        /* istanbul ignore next */
        cov_2l979xubim().s[17]++;
        return {
          files: createdFiles,
          success: true
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_2l979xubim().s[18]++;
        console.error('❌ Failed to create wrapper scripts:', error.message);
        /* istanbul ignore next */
        cov_2l979xubim().s[19]++;
        throw error;
      }
    })();
  }

  /**
     * Create Claude helper scripts
     */
  createClaudeHelpers() {
    /* istanbul ignore next */
    var _this2 = this;
    return _asyncToGenerator(function* () {
      cov_2l979xubim().f[6]++;
      cov_2l979xubim().s[20]++;
      console.log('🤖 Creating Claude helper scripts...');
      cov_2l979xubim().s[21]++;
      try {
        const helpers =
        /* istanbul ignore next */
        (cov_2l979xubim().s[22]++, _this2.generateClaudeHelpers());
        const scripts =
        /* istanbul ignore next */
        (cov_2l979xubim().s[23]++, [{
          name: 'claude-swarm.sh',
          content: helpers.bash,
          mode: 0o755
        }, {
          name: 'claude-swarm.bat',
          content: helpers.batch,
          mode: 0o644
        }]);
        const createdFiles =
        /* istanbul ignore next */
        (cov_2l979xubim().s[24]++, []);
        /* istanbul ignore next */
        cov_2l979xubim().s[25]++;
        for (const script of scripts) {
          const filePath =
          /* istanbul ignore next */
          (cov_2l979xubim().s[26]++, path.join(_this2.workingDir, script.name));
          /* istanbul ignore next */
          cov_2l979xubim().s[27]++;
          /* istanbul ignore next */
          yield fs.writeFile(filePath, script.content, {
            mode: script.mode
          });
          /* istanbul ignore next */
          cov_2l979xubim().s[28]++;
          createdFiles.push(script.name);
        }
        /* istanbul ignore next */
        cov_2l979xubim().s[29]++;
        console.log(`✅ Created Claude helper scripts: ${createdFiles.join(', ')}`);
        /* istanbul ignore next */
        cov_2l979xubim().s[30]++;
        return {
          files: createdFiles,
          success: true
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_2l979xubim().s[31]++;
        console.error('❌ Failed to create Claude helper scripts:', error.message);
        /* istanbul ignore next */
        cov_2l979xubim().s[32]++;
        throw error;
      }
    })();
  }

  /**
     * Create all remote scripts
     */
  createAll() {
    /* istanbul ignore next */
    var _this3 = this;
    return _asyncToGenerator(function* () {
      cov_2l979xubim().f[7]++;
      cov_2l979xubim().s[33]++;
      console.log('🌐 Setting up remote execution capabilities...');
      cov_2l979xubim().s[34]++;
      try {
        const results =
        /* istanbul ignore next */
        (cov_2l979xubim().s[35]++, {
          wrappers:
          /* istanbul ignore next */
          yield _this3.createWrappers(),
          helpers:
          /* istanbul ignore next */
          yield _this3.createClaudeHelpers(),
          success: true
        });
        /* istanbul ignore next */
        cov_2l979xubim().s[36]++;
        console.log('✅ Remote execution setup complete');
        /* istanbul ignore next */
        cov_2l979xubim().s[37]++;
        console.log('   - Cross-platform wrapper scripts');
        /* istanbul ignore next */
        cov_2l979xubim().s[38]++;
        console.log('   - Claude integration helpers');
        /* istanbul ignore next */
        cov_2l979xubim().s[39]++;
        console.log('   - Remote execution detection');
        /* istanbul ignore next */
        cov_2l979xubim().s[40]++;
        return results;
      } catch (error) {
        /* istanbul ignore next */
        cov_2l979xubim().s[41]++;
        console.error('❌ Failed to setup remote execution:', error.message);
        /* istanbul ignore next */
        cov_2l979xubim().s[42]++;
        throw error;
      }
    })();
  }
}
export { RemoteWrapperGenerator };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,