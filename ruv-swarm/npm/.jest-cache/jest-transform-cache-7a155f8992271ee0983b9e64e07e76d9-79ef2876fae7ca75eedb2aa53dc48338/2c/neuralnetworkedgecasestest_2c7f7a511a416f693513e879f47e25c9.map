{"version":3,"names":["describe","it","expect","jest","beforeEach","afterEach","NeuralNetworkManager","NeuralAgent","manager","_asyncToGenerator","config","type","layers","activation","network","create","invalidInputs","NaN","input","result","forward","toBeDefined","Array","isArray","toBe","forEach","value","infinityInputs","Infinity","length","Math","abs","toBeLessThanOrEqual","smallNumbers","Number","MIN_VALUE","isFinite","toBeGreaterThanOrEqual","largeNumbers","MAX_VALUE","trainingData","i","push","random","target","initialWeights","getWeights","epoch","totalLoss","sample","output","loss","backward","avgLoss","finalWeights","weightsChanged","learningRate","weights","setWeights","maxGradient","gradientHistory","currentWeights","gradientMagnitude","sqrt","reduce","sum","w","max","error","message","toMatch","toBeGreaterThan","toHaveLength","toBeLessThan","skipConnections","fill","map","train","rejects","toThrow","inconsistentData","duplicateData","epochs","finalLoss","initialLoss","x","min","singleBatch","trainBatch","largeBatch","mixedBatch","initialMemory","process","memoryUsage","global","gc","finalMemory","memoryGrowth","heapUsed","import","meta","url","argv","console","log","run","__filename"],"sources":["neural-network-edge-cases.test.js"],"sourcesContent":["/**\n * Neural Network Edge Cases\n * Tests numerical stability, gradient issues, and model training edge cases\n */\n\nimport { describe, it, expect, jest, beforeEach, afterEach } from '@jest/globals';\nimport { NeuralNetworkManager } from '../../src/neural-network-manager.js';\nimport { NeuralAgent } from '../../src/neural-agent.js';\n\ndescribe('Neural Network Edge Cases', () => {\n  let manager;\n\n  beforeEach(() => {\n    manager = new NeuralNetworkManager();\n  });\n\n  describe('Numerical Stability Edge Cases', () => {\n    it('should handle NaN inputs gracefully', async () => {\n      const config = {\n        type: 'feedforward',\n        layers: [4, 8, 4],\n        activation: 'relu',\n      };\n\n      const network = await manager.create(config);\n      \n      const invalidInputs = [\n        [NaN, 1, 2, 3],\n        [1, NaN, 2, 3],\n        [1, 2, NaN, 3],\n        [1, 2, 3, NaN],\n        [NaN, NaN, NaN, NaN],\n      ];\n\n      for (const input of invalidInputs) {\n        const result = await network.forward(input);\n        \n        // Network should handle NaN inputs without crashing\n        expect(result).toBeDefined();\n        expect(Array.isArray(result)).toBe(true);\n        \n        // Output should either be valid numbers or NaN (consistent behavior)\n        result.forEach(value => {\n          expect(typeof value).toBe('number');\n        });\n      }\n    });\n\n    it('should handle Infinity inputs', async () => {\n      const config = {\n        type: 'feedforward',\n        layers: [2, 4, 2],\n        activation: 'tanh',\n      };\n\n      const network = await manager.create(config);\n      \n      const infinityInputs = [\n        [Infinity, 1],\n        [1, Infinity],\n        [-Infinity, 1],\n        [1, -Infinity],\n        [Infinity, -Infinity],\n        [Infinity, Infinity],\n        [-Infinity, -Infinity],\n      ];\n\n      for (const input of infinityInputs) {\n        const result = await network.forward(input);\n        \n        expect(result).toBeDefined();\n        expect(Array.isArray(result)).toBe(true);\n        expect(result.length).toBe(2);\n        \n        // tanh should clamp infinite values to -1 or 1\n        result.forEach(value => {\n          expect(Math.abs(value)).toBeLessThanOrEqual(1);\n        });\n      }\n    });\n\n    it('should handle very small numbers (underflow)', async () => {\n      const config = {\n        type: 'feedforward',\n        layers: [3, 5, 3],\n        activation: 'sigmoid',\n      };\n\n      const network = await manager.create(config);\n      \n      const smallNumbers = [\n        [Number.MIN_VALUE, 1e-100, 1e-308],\n        [1e-323, 1e-324, 0], // Near machine epsilon\n        [-Number.MIN_VALUE, -1e-100, -1e-308],\n      ];\n\n      for (const input of smallNumbers) {\n        const result = await network.forward(input);\n        \n        expect(result).toBeDefined();\n        expect(result.length).toBe(3);\n        \n        // Should handle underflow gracefully\n        result.forEach(value => {\n          expect(isFinite(value)).toBe(true);\n          expect(value).toBeGreaterThanOrEqual(0);\n          expect(value).toBeLessThanOrEqual(1);\n        });\n      }\n    });\n\n    it('should handle very large numbers (overflow)', async () => {\n      const config = {\n        type: 'feedforward',\n        layers: [2, 3, 2],\n        activation: 'relu',\n      };\n\n      const network = await manager.create(config);\n      \n      const largeNumbers = [\n        [Number.MAX_VALUE, 1e100],\n        [1e308, 1e307],\n        [-Number.MAX_VALUE, -1e100],\n      ];\n\n      for (const input of largeNumbers) {\n        const result = await network.forward(input);\n        \n        expect(result).toBeDefined();\n        expect(result.length).toBe(2);\n        \n        // ReLU should pass through positive values or zero\n        result.forEach(value => {\n          expect(value).toBeGreaterThanOrEqual(0);\n          expect(isFinite(value) || value === Infinity).toBe(true);\n        });\n      }\n    });\n  });\n\n  describe('Gradient Edge Cases', () => {\n    it('should handle vanishing gradients', async () => {\n      const config = {\n        type: 'feedforward',\n        layers: [2, 10, 10, 10, 10, 10, 2], // Deep network\n        activation: 'sigmoid', // Prone to vanishing gradients\n      };\n\n      const network = await manager.create(config);\n      \n      const trainingData = [];\n      for (let i = 0; i < 100; i++) {\n        trainingData.push({\n          input: [Math.random(), Math.random()],\n          target: [Math.random(), Math.random()],\n        });\n      }\n\n      const initialWeights = network.getWeights();\n      \n      // Train for a few epochs\n      for (let epoch = 0; epoch < 10; epoch++) {\n        let totalLoss = 0;\n        \n        for (const sample of trainingData) {\n          const output = await network.forward(sample.input);\n          const loss = await network.backward(sample.target);\n          totalLoss += loss;\n        }\n        \n        const avgLoss = totalLoss / trainingData.length;\n        expect(avgLoss).toBeGreaterThanOrEqual(0);\n        expect(isFinite(avgLoss)).toBe(true);\n      }\n\n      const finalWeights = network.getWeights();\n      \n      // Check that some learning occurred (weights changed)\n      let weightsChanged = false;\n      for (let i = 0; i < initialWeights.length; i++) {\n        if (Math.abs(initialWeights[i] - finalWeights[i]) > 1e-6) {\n          weightsChanged = true;\n          break;\n        }\n      }\n      \n      // Even with vanishing gradients, some change should occur\n      expect(weightsChanged).toBe(true);\n    });\n\n    it('should handle exploding gradients', async () => {\n      const config = {\n        type: 'feedforward',\n        layers: [2, 5, 2],\n        activation: 'linear',\n        learningRate: 10.0, // High learning rate\n      };\n\n      const network = await manager.create(config);\n      \n      // Initialize with large weights to cause exploding gradients\n      const weights = network.getWeights();\n      for (let i = 0; i < weights.length; i++) {\n        weights[i] = (Math.random() - 0.5) * 10; // Large initial weights\n      }\n      network.setWeights(weights);\n\n      const trainingData = {\n        input: [1, 1],\n        target: [0, 0],\n      };\n\n      let maxGradient = 0;\n      const gradientHistory = [];\n\n      for (let epoch = 0; epoch < 20; epoch++) {\n        try {\n          await network.forward(trainingData.input);\n          const loss = await network.backward(trainingData.target);\n          \n          // Track gradient magnitude\n          const currentWeights = network.getWeights();\n          const gradientMagnitude = Math.sqrt(\n            currentWeights.reduce((sum, w) => sum + w * w, 0)\n          );\n          \n          gradientHistory.push(gradientMagnitude);\n          maxGradient = Math.max(maxGradient, gradientMagnitude);\n          \n          // Network should handle large gradients without crashing\n          expect(isFinite(loss)).toBe(true);\n          expect(isFinite(gradientMagnitude)).toBe(true);\n          \n        } catch (error) {\n          // If training fails due to numerical issues, that's acceptable\n          expect(error.message).toMatch(/numerical|overflow|gradient/i);\n          break;\n        }\n      }\n\n      // Should have detected large gradients\n      expect(maxGradient).toBeGreaterThan(1);\n    });\n  });\n\n  describe('Model Architecture Edge Cases', () => {\n    it('should handle single neuron networks', async () => {\n      const config = {\n        type: 'feedforward',\n        layers: [1, 1],\n        activation: 'sigmoid',\n      };\n\n      const network = await manager.create(config);\n      \n      const result = await network.forward([0.5]);\n      expect(result).toHaveLength(1);\n      expect(result[0]).toBeGreaterThan(0);\n      expect(result[0]).toBeLessThan(1);\n    });\n\n    it('should handle networks with skip connections', async () => {\n      const config = {\n        type: 'residual',\n        layers: [4, 8, 8, 4],\n        activation: 'relu',\n        skipConnections: true,\n      };\n\n      const network = await manager.create(config);\n      \n      const input = [1, 2, 3, 4];\n      const result = await network.forward(input);\n      \n      expect(result).toHaveLength(4);\n      result.forEach(value => {\n        expect(isFinite(value)).toBe(true);\n      });\n    });\n\n    it('should handle extremely wide networks', async () => {\n      const config = {\n        type: 'feedforward',\n        layers: [10, 1000, 10], // Very wide hidden layer\n        activation: 'relu',\n      };\n\n      const network = await manager.create(config);\n      \n      const input = new Array(10).fill(0).map(() => Math.random());\n      const result = await network.forward(input);\n      \n      expect(result).toHaveLength(10);\n      result.forEach(value => {\n        expect(isFinite(value)).toBe(true);\n      });\n    });\n\n    it('should handle extremely deep networks', async () => {\n      const config = {\n        type: 'feedforward',\n        layers: [2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2], // Very deep\n        activation: 'relu',\n      };\n\n      const network = await manager.create(config);\n      \n      const input = [0.5, 0.5];\n      const result = await network.forward(input);\n      \n      expect(result).toHaveLength(2);\n      result.forEach(value => {\n        expect(isFinite(value)).toBe(true);\n      });\n    });\n  });\n\n  describe('Training Data Edge Cases', () => {\n    it('should handle empty training data', async () => {\n      const config = {\n        type: 'feedforward',\n        layers: [2, 3, 2],\n        activation: 'sigmoid',\n      };\n\n      const network = await manager.create(config);\n      \n      await expect(network.train([])).rejects.toThrow(/empty|no data/i);\n    });\n\n    it('should handle inconsistent input dimensions', async () => {\n      const config = {\n        type: 'feedforward',\n        layers: [2, 3, 2],\n        activation: 'sigmoid',\n      };\n\n      const network = await manager.create(config);\n      \n      const inconsistentData = [\n        { input: [1, 2], target: [0, 1] },\n        { input: [1, 2, 3], target: [0, 1] }, // Wrong input size\n        { input: [1], target: [0, 1] }, // Wrong input size\n      ];\n\n      await expect(network.train(inconsistentData)).rejects.toThrow(/dimension|size/i);\n    });\n\n    it('should handle inconsistent output dimensions', async () => {\n      const config = {\n        type: 'feedforward',\n        layers: [2, 3, 2],\n        activation: 'sigmoid',\n      };\n\n      const network = await manager.create(config);\n      \n      const inconsistentData = [\n        { input: [1, 2], target: [0, 1] },\n        { input: [1, 2], target: [0, 1, 2] }, // Wrong target size\n        { input: [1, 2], target: [0] }, // Wrong target size\n      ];\n\n      await expect(network.train(inconsistentData)).rejects.toThrow(/dimension|size/i);\n    });\n\n    it('should handle duplicate training samples', async () => {\n      const config = {\n        type: 'feedforward',\n        layers: [2, 3, 2],\n        activation: 'sigmoid',\n      };\n\n      const network = await manager.create(config);\n      \n      const duplicateData = [];\n      for (let i = 0; i < 100; i++) {\n        duplicateData.push({ input: [1, 2], target: [0, 1] });\n      }\n\n      const result = await network.train(duplicateData, { epochs: 10 });\n      \n      // Should converge quickly on duplicate data\n      expect(result.finalLoss).toBeLessThan(result.initialLoss);\n    });\n  });\n\n  describe('Activation Function Edge Cases', () => {\n    it('should handle unknown activation functions', async () => {\n      const config = {\n        type: 'feedforward',\n        layers: [2, 3, 2],\n        activation: 'unknown_activation',\n      };\n\n      await expect(manager.create(config)).rejects.toThrow(/activation|unknown/i);\n    });\n\n    it('should handle custom activation functions', async () => {\n      const config = {\n        type: 'feedforward',\n        layers: [2, 3, 2],\n        activation: (x) => Math.max(0, Math.min(1, x)), // Custom clamp function\n      };\n\n      const network = await manager.create(config);\n      \n      const result = await network.forward([0.5, -0.5]);\n      \n      expect(result).toHaveLength(2);\n      result.forEach(value => {\n        expect(value).toBeGreaterThanOrEqual(0);\n        expect(value).toBeLessThanOrEqual(1);\n      });\n    });\n\n    it('should handle activation functions with extreme outputs', async () => {\n      const config = {\n        type: 'feedforward',\n        layers: [2, 3, 2],\n        activation: (x) => x > 0 ? 1e10 : -1e10, // Extreme activation\n      };\n\n      const network = await manager.create(config);\n      \n      const result = await network.forward([1, -1]);\n      \n      expect(result).toHaveLength(2);\n      result.forEach(value => {\n        expect(Math.abs(value)).toBeGreaterThan(1000);\n      });\n    });\n  });\n\n  describe('Batch Processing Edge Cases', () => {\n    it('should handle single sample batches', async () => {\n      const config = {\n        type: 'feedforward',\n        layers: [2, 3, 2],\n        activation: 'relu',\n      };\n\n      const network = await manager.create(config);\n      \n      const singleBatch = [{ input: [1, 2], target: [0, 1] }];\n      const result = await network.trainBatch(singleBatch);\n      \n      expect(result.loss).toBeGreaterThanOrEqual(0);\n      expect(isFinite(result.loss)).toBe(true);\n    });\n\n    it('should handle very large batches', async () => {\n      const config = {\n        type: 'feedforward',\n        layers: [2, 3, 2],\n        activation: 'relu',\n      };\n\n      const network = await manager.create(config);\n      \n      const largeBatch = [];\n      for (let i = 0; i < 10000; i++) {\n        largeBatch.push({\n          input: [Math.random(), Math.random()],\n          target: [Math.random(), Math.random()],\n        });\n      }\n\n      const result = await network.trainBatch(largeBatch);\n      \n      expect(result.loss).toBeGreaterThanOrEqual(0);\n      expect(isFinite(result.loss)).toBe(true);\n    });\n\n    it('should handle batches with mixed sample qualities', async () => {\n      const config = {\n        type: 'feedforward',\n        layers: [2, 3, 2],\n        activation: 'sigmoid',\n      };\n\n      const network = await manager.create(config);\n      \n      const mixedBatch = [\n        { input: [1, 2], target: [0, 1] }, // Normal\n        { input: [0, 0], target: [0, 0] }, // Zero input\n        { input: [1000, -1000], target: [1, 0] }, // Extreme input\n        { input: [0.1, 0.1], target: [0.9, 0.9] }, // Small input, large target\n      ];\n\n      const result = await network.trainBatch(mixedBatch);\n      \n      expect(result.loss).toBeGreaterThanOrEqual(0);\n      expect(isFinite(result.loss)).toBe(true);\n    });\n  });\n\n  describe('Memory Management in Neural Networks', () => {\n    it('should handle memory cleanup during training', async () => {\n      const config = {\n        type: 'feedforward',\n        layers: [10, 100, 100, 10],\n        activation: 'relu',\n      };\n\n      const network = await manager.create(config);\n      \n      const trainingData = [];\n      for (let i = 0; i < 1000; i++) {\n        trainingData.push({\n          input: new Array(10).fill(0).map(() => Math.random()),\n          target: new Array(10).fill(0).map(() => Math.random()),\n        });\n      }\n\n      const initialMemory = process.memoryUsage();\n      \n      // Train for multiple epochs\n      for (let epoch = 0; epoch < 50; epoch++) {\n        await network.train(trainingData, { epochs: 1 });\n        \n        // Force garbage collection periodically\n        if (epoch % 10 === 0 && global.gc) {\n          global.gc();\n        }\n      }\n\n      const finalMemory = process.memoryUsage();\n      \n      // Memory usage should not grow unboundedly\n      const memoryGrowth = finalMemory.heapUsed - initialMemory.heapUsed;\n      expect(memoryGrowth).toBeLessThan(100 * 1024 * 1024); // Less than 100MB growth\n    });\n  });\n});\n\n// Run tests when executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  console.log('Running neural network edge case tests...');\n  \n  // Run all tests\n  const { run } = await import('../test-runner.js');\n  await run(__filename);\n}"],"mappings":"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","ignoreList":[]}