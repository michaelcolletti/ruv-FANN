{"version":3,"names":["jest","DAAService","describe","service","beforeEach","afterEach","_asyncToGenerator","cleanup","test","expect","initialize","resolves","not","toThrow","initialized","toBe","listener","fn","on","toHaveBeenCalled","agent","createAgent","toBeDefined","id","capabilities","has","status","toHaveBeenCalledWith","agentId","result","destroyAgent","agents","configs","results","batchCreateAgents","toHaveLength","every","r","success","size","agentStates","saveState","metrics","customData","newService","restoredAgent","state","loadFromStorage","testContext","environment_state","environment_type","conditions","stability","resource_availability","available_actions","action_type","cost","expected_reward","risk","prerequisites","goals","history","constraints","max_memory_mb","max_cpu_usage","max_network_mbps","max_execution_time","energy_budget","time_pressure","uncertainty","latencies","latency","push","i","makeDecision","avgLatency","reduce","a","b","length","console","log","toFixed","toBeLessThan","decisions","Array","fill","map","_","context","_objectSpread","start","performance","now","batchMakeDecisions","duration","perDecision","workflow","createWorkflow","task","_ref14","_x","apply","arguments","_ref15","_x2","result1","executeWorkflowStep","toContainEqual","result2","workflows","getWorkflowStatus","progress","completed","_ref17","_ref18","_ref19","rejects","_ref21","Promise","setTimeout","_ref22","_ref23","_ref24","r1","r2","r3","all","parallelDuration","decisionsMade","data","synced","synchronizeStates","get","objectContaining","agentIds","any","Number","optimizeResources","getStatus","wasm","memoryUsage","toBeGreaterThanOrEqual","getPerformanceMetrics","system","totalAgents","averageResponseTime","toBeGreaterThan","toMatchObject","count","ids","states","active","modules","Object","e","errors","beforeAll","afterAll","config","totalDuration","maxLatency","Math","max","sort","floor"],"sources":["daa-service.test.js"],"sourcesContent":["/**\n * DAA Service Test Suite\n * Tests for agent lifecycle, state persistence, workflow coordination,\n * and < 1ms cross-boundary call latency\n */\n\nimport { jest } from '@jest/globals';\nimport { DAAService } from '../src/daa-service.js';\n\ndescribe('DAA Service', () => {\n  let service;\n\n  beforeEach(() => {\n    service = new DAAService();\n  });\n\n  afterEach(async () => {\n    await service.cleanup();\n  });\n\n  describe('Initialization', () => {\n    test('should initialize successfully', async () => {\n      await expect(service.initialize()).resolves.not.toThrow();\n      expect(service.initialized).toBe(true);\n    });\n\n    test('should emit initialized event', async () => {\n      const listener = jest.fn();\n      service.on('initialized', listener);\n      \n      await service.initialize();\n      \n      expect(listener).toHaveBeenCalled();\n    });\n\n    test('should handle multiple initialization calls', async () => {\n      await service.initialize();\n      await service.initialize(); // Should not throw\n      \n      expect(service.initialized).toBe(true);\n    });\n  });\n\n  describe('Agent Lifecycle Management', () => {\n    beforeEach(async () => {\n      await service.initialize();\n    });\n\n    test('should create agent with capabilities', async () => {\n      const agent = await service.createAgent('test-agent', ['decision_making', 'learning']);\n      \n      expect(agent).toBeDefined();\n      expect(agent.id).toBe('test-agent');\n      expect(agent.capabilities.has('decision_making')).toBe(true);\n      expect(agent.capabilities.has('learning')).toBe(true);\n      expect(agent.status).toBe('active');\n    });\n\n    test('should emit agentCreated event', async () => {\n      const listener = jest.fn();\n      service.on('agentCreated', listener);\n      \n      await service.createAgent('test-agent', ['learning']);\n      \n      expect(listener).toHaveBeenCalledWith({\n        agentId: 'test-agent',\n        capabilities: ['learning']\n      });\n    });\n\n    test('should destroy agent', async () => {\n      await service.createAgent('test-agent');\n      \n      const result = await service.destroyAgent('test-agent');\n      \n      expect(result).toBe(true);\n      expect(service.agents.has('test-agent')).toBe(false);\n    });\n\n    test('should batch create agents', async () => {\n      const configs = [\n        { id: 'agent-1', capabilities: ['learning'] },\n        { id: 'agent-2', capabilities: ['decision_making'] },\n        { id: 'agent-3', capabilities: ['coordination'] }\n      ];\n      \n      const results = await service.batchCreateAgents(configs);\n      \n      expect(results).toHaveLength(3);\n      expect(results.every(r => r.success)).toBe(true);\n      expect(service.agents.size).toBe(3);\n    });\n\n    test('should persist and restore agent state', async () => {\n      const agent = await service.createAgent('persistent-agent', ['memory_management']);\n      \n      // Save state\n      service.agentStates.saveState('persistent-agent', {\n        status: 'active',\n        capabilities: ['memory_management'],\n        metrics: agent.metrics,\n        customData: 'test'\n      });\n      \n      // Simulate reload by creating new service\n      const newService = new DAAService();\n      await newService.initialize();\n      \n      // Create agent and check if state is restored\n      const restoredAgent = await newService.createAgent('persistent-agent');\n      const state = await newService.agentStates.loadFromStorage('persistent-agent');\n      \n      expect(state).toBeDefined();\n      expect(state.customData).toBe('test');\n      \n      await newService.cleanup();\n    });\n  });\n\n  describe('Cross-Boundary Communication Performance', () => {\n    let agent;\n    const testContext = {\n      environment_state: {\n        environment_type: 'Dynamic',\n        conditions: { test: 1.0 },\n        stability: 0.5,\n        resource_availability: 1.0\n      },\n      available_actions: [\n        {\n          id: 'test-action',\n          action_type: 'Compute',\n          cost: 0.1,\n          expected_reward: 0.5,\n          risk: 0.1,\n          prerequisites: []\n        }\n      ],\n      goals: [],\n      history: [],\n      constraints: {\n        max_memory_mb: 1024,\n        max_cpu_usage: 0.8,\n        max_network_mbps: 100,\n        max_execution_time: 300,\n        energy_budget: 1000\n      },\n      time_pressure: 0.0,\n      uncertainty: 0.0\n    };\n\n    beforeEach(async () => {\n      await service.initialize();\n      agent = await service.createAgent('perf-agent', ['decision_making']);\n    });\n\n    test('should make decision within 1ms latency threshold', async () => {\n      const latencies = [];\n      \n      // Capture latency from events\n      service.on('decisionMade', ({ latency }) => {\n        latencies.push(latency);\n      });\n      \n      // Make multiple decisions\n      for (let i = 0; i < 10; i++) {\n        await service.makeDecision('perf-agent', testContext);\n      }\n      \n      // Check that average latency is under 1ms\n      const avgLatency = latencies.reduce((a, b) => a + b, 0) / latencies.length;\n      console.log(`Average cross-boundary latency: ${avgLatency.toFixed(3)}ms`);\n      \n      // Allow some tolerance for test environment\n      expect(avgLatency).toBeLessThan(5.0); // Relaxed for test environment\n    });\n\n    test('should handle batch decisions efficiently', async () => {\n      const decisions = Array(20).fill(null).map((_, i) => ({\n        agentId: 'perf-agent',\n        context: { ...testContext, uncertainty: i * 0.05 }\n      }));\n      \n      const start = performance.now();\n      const results = await service.batchMakeDecisions(decisions);\n      const duration = performance.now() - start;\n      \n      expect(results).toHaveLength(20);\n      expect(results.every(r => r.success)).toBe(true);\n      \n      // Batch should be more efficient than sequential\n      const perDecision = duration / 20;\n      console.log(`Batch decision average: ${perDecision.toFixed(3)}ms per decision`);\n      expect(perDecision).toBeLessThan(10.0); // Should benefit from batching\n    });\n  });\n\n  describe('Multi-Agent Workflow Coordination', () => {\n    beforeEach(async () => {\n      await service.initialize();\n      \n      // Create agents for workflow\n      await service.batchCreateAgents([\n        { id: 'worker-1', capabilities: ['compute'] },\n        { id: 'worker-2', capabilities: ['compute'] },\n        { id: 'coordinator', capabilities: ['coordination'] }\n      ]);\n    });\n\n    test('should create and execute simple workflow', async () => {\n      const workflow = await service.createWorkflow(\n        'simple-workflow',\n        [\n          {\n            id: 'step1',\n            task: async (agent) => ({ agent: agent.id, result: 'step1-complete' })\n          },\n          {\n            id: 'step2',\n            task: async (agent) => ({ agent: agent.id, result: 'step2-complete' })\n          }\n        ],\n        { 'step2': ['step1'] }\n      );\n      \n      expect(workflow.id).toBe('simple-workflow');\n      expect(workflow.status).toBe('pending');\n      \n      // Execute steps in order\n      const result1 = await service.executeWorkflowStep('simple-workflow', 'step1', ['worker-1']);\n      expect(result1).toContainEqual({ agent: 'worker-1', result: 'step1-complete' });\n      \n      const result2 = await service.executeWorkflowStep('simple-workflow', 'step2', ['worker-2']);\n      expect(result2).toContainEqual({ agent: 'worker-2', result: 'step2-complete' });\n      \n      // Check workflow status\n      const status = service.workflows.getWorkflowStatus('simple-workflow');\n      expect(status.status).toBe('completed');\n      expect(status.progress.completed).toBe(2);\n    });\n\n    test('should enforce workflow dependencies', async () => {\n      await service.createWorkflow(\n        'dependent-workflow',\n        [\n          { id: 'A', task: async () => 'A' },\n          { id: 'B', task: async () => 'B' },\n          { id: 'C', task: async () => 'C' }\n        ],\n        {\n          'B': ['A'],\n          'C': ['A', 'B']\n        }\n      );\n      \n      // Try to execute C before dependencies\n      await expect(\n        service.executeWorkflowStep('dependent-workflow', 'C', ['worker-1'])\n      ).rejects.toThrow('Dependency A not completed');\n      \n      // Execute in correct order\n      await service.executeWorkflowStep('dependent-workflow', 'A', ['worker-1']);\n      await service.executeWorkflowStep('dependent-workflow', 'B', ['worker-2']);\n      await service.executeWorkflowStep('dependent-workflow', 'C', ['coordinator']);\n      \n      const status = service.workflows.getWorkflowStatus('dependent-workflow');\n      expect(status.status).toBe('completed');\n    });\n\n    test('should handle parallel workflow execution', async () => {\n      await service.createWorkflow(\n        'parallel-workflow',\n        [\n          { id: 'parallel-1', task: async () => new Promise(r => setTimeout(() => r('p1'), 50)) },\n          { id: 'parallel-2', task: async () => new Promise(r => setTimeout(() => r('p2'), 50)) },\n          { id: 'parallel-3', task: async () => new Promise(r => setTimeout(() => r('p3'), 50)) },\n          { id: 'final', task: async () => 'done' }\n        ],\n        {\n          'final': ['parallel-1', 'parallel-2', 'parallel-3']\n        }\n      );\n      \n      // Execute parallel steps concurrently\n      const start = performance.now();\n      const [r1, r2, r3] = await Promise.all([\n        service.executeWorkflowStep('parallel-workflow', 'parallel-1', ['worker-1']),\n        service.executeWorkflowStep('parallel-workflow', 'parallel-2', ['worker-2']),\n        service.executeWorkflowStep('parallel-workflow', 'parallel-3', ['coordinator'])\n      ]);\n      const parallelDuration = performance.now() - start;\n      \n      // Should complete in ~50ms, not 150ms (sequential)\n      expect(parallelDuration).toBeLessThan(100);\n      \n      // Execute final step\n      await service.executeWorkflowStep('parallel-workflow', 'final', ['coordinator']);\n      \n      const status = service.workflows.getWorkflowStatus('parallel-workflow');\n      expect(status.status).toBe('completed');\n    });\n  });\n\n  describe('State Synchronization', () => {\n    beforeEach(async () => {\n      await service.initialize();\n      \n      await service.batchCreateAgents([\n        { id: 'sync-agent-1', capabilities: ['memory_management'] },\n        { id: 'sync-agent-2', capabilities: ['memory_management'] },\n        { id: 'sync-agent-3', capabilities: ['memory_management'] }\n      ]);\n    });\n\n    test('should synchronize states across agents', async () => {\n      // Set different states\n      service.agentStates.saveState('sync-agent-1', {\n        status: 'active',\n        capabilities: ['memory_management'],\n        metrics: { decisionsMade: 5 },\n        data: 'agent1-data'\n      });\n      \n      service.agentStates.saveState('sync-agent-2', {\n        status: 'idle',\n        capabilities: ['memory_management'],\n        metrics: { decisionsMade: 3 },\n        data: 'agent2-data'\n      });\n      \n      // Synchronize\n      const synced = await service.synchronizeStates(['sync-agent-1', 'sync-agent-2', 'sync-agent-3']);\n      \n      expect(synced.size).toBe(2); // agent-3 has no saved state\n      expect(synced.get('sync-agent-1').data).toBe('agent1-data');\n      expect(synced.get('sync-agent-2').data).toBe('agent2-data');\n    });\n\n    test('should emit synchronization event', async () => {\n      const listener = jest.fn();\n      service.on('statesSynchronized', listener);\n      \n      await service.synchronizeStates(['sync-agent-1', 'sync-agent-2']);\n      \n      expect(listener).toHaveBeenCalledWith(\n        expect.objectContaining({\n          agentIds: ['sync-agent-1', 'sync-agent-2'],\n          duration: expect.any(Number)\n        })\n      );\n    });\n  });\n\n  describe('Resource Management', () => {\n    beforeEach(async () => {\n      await service.initialize();\n    });\n\n    test('should optimize resources', async () => {\n      const result = await service.optimizeResources();\n      \n      // Result format depends on WASM implementation\n      expect(result).toBeDefined();\n    });\n\n    test('should track memory usage', () => {\n      const status = service.getStatus();\n      \n      expect(status.wasm.memoryUsage).toBeGreaterThanOrEqual(0);\n    });\n\n    test('should clean up resources', async () => {\n      // Create some agents\n      await service.batchCreateAgents([\n        { id: 'cleanup-1' },\n        { id: 'cleanup-2' },\n        { id: 'cleanup-3' }\n      ]);\n      \n      expect(service.agents.size).toBe(3);\n      \n      // Cleanup\n      await service.cleanup();\n      \n      expect(service.agents.size).toBe(0);\n    });\n  });\n\n  describe('Performance Monitoring', () => {\n    beforeEach(async () => {\n      await service.initialize();\n      await service.createAgent('metrics-agent', ['decision_making']);\n    });\n\n    test('should track performance metrics', async () => {\n      // Make some decisions\n      const context = {\n        environment_state: {\n          environment_type: 'Stable',\n          conditions: {},\n          stability: 1.0,\n          resource_availability: 1.0\n        },\n        available_actions: [],\n        goals: [],\n        history: [],\n        constraints: {\n          max_memory_mb: 1024,\n          max_cpu_usage: 0.8,\n          max_network_mbps: 100,\n          max_execution_time: 300,\n          energy_budget: 1000\n        },\n        time_pressure: 0.0,\n        uncertainty: 0.0\n      };\n      \n      await service.makeDecision('metrics-agent', context);\n      await service.makeDecision('metrics-agent', context);\n      \n      const metrics = service.getPerformanceMetrics();\n      \n      expect(metrics.system.totalAgents).toBe(1);\n      expect(metrics.agents['metrics-agent'].decisionsMade).toBe(2);\n      expect(metrics.agents['metrics-agent'].averageResponseTime).toBeGreaterThan(0);\n    });\n\n    test('should provide comprehensive status', () => {\n      const status = service.getStatus();\n      \n      expect(status).toMatchObject({\n        initialized: true,\n        agents: {\n          count: 1,\n          ids: ['metrics-agent'],\n          states: expect.any(Number)\n        },\n        workflows: {\n          count: expect.any(Number),\n          active: expect.any(Number)\n        },\n        wasm: {\n          modules: expect.any(Object),\n          memoryUsage: expect.any(Number)\n        },\n        performance: expect.any(Object)\n      });\n    });\n  });\n\n  describe('Error Handling', () => {\n    beforeEach(async () => {\n      await service.initialize();\n    });\n\n    test('should handle agent not found errors', async () => {\n      await expect(\n        service.makeDecision('non-existent', {})\n      ).rejects.toThrow('Agent non-existent not found');\n    });\n\n    test('should handle workflow not found errors', async () => {\n      await expect(\n        service.executeWorkflowStep('non-existent-workflow', 'step1', ['agent1'])\n      ).rejects.toThrow('Workflow non-existent-workflow not found');\n    });\n\n    test('should track agent errors', async () => {\n      await service.createAgent('error-agent');\n      \n      // Force an error by passing invalid context\n      try {\n        await service.makeDecision('error-agent', null);\n      } catch (e) {\n        // Expected\n      }\n      \n      const metrics = service.getPerformanceMetrics();\n      expect(metrics.agents['error-agent'].errors).toBe(1);\n    });\n  });\n});\n\n// Performance benchmark tests\ndescribe('DAA Service Performance Benchmarks', () => {\n  let service;\n\n  beforeAll(async () => {\n    service = new DAAService();\n    await service.initialize();\n  });\n\n  afterAll(async () => {\n    await service.cleanup();\n  });\n\n  test('should handle 100 agents without degradation', async () => {\n    const configs = Array(100).fill(null).map((_, i) => ({\n      id: `bench-agent-${i}`,\n      capabilities: ['decision_making']\n    }));\n    \n    const start = performance.now();\n    const results = await service.batchCreateAgents(configs);\n    const duration = performance.now() - start;\n    \n    expect(results.every(r => r.success)).toBe(true);\n    console.log(`Created 100 agents in ${duration.toFixed(0)}ms (${(duration/100).toFixed(2)}ms per agent)`);\n    \n    // Cleanup bench agents\n    for (const config of configs) {\n      await service.destroyAgent(config.id);\n    }\n  });\n\n  test('should maintain sub-millisecond latency under load', async () => {\n    // Create test agents\n    const agents = await service.batchCreateAgents([\n      { id: 'load-test-1', capabilities: ['decision_making'] },\n      { id: 'load-test-2', capabilities: ['decision_making'] },\n      { id: 'load-test-3', capabilities: ['decision_making'] }\n    ]);\n    \n    const context = {\n      environment_state: {\n        environment_type: 'Dynamic',\n        conditions: {},\n        stability: 0.5,\n        resource_availability: 1.0\n      },\n      available_actions: [],\n      goals: [],\n      history: [],\n      constraints: {\n        max_memory_mb: 1024,\n        max_cpu_usage: 0.8,\n        max_network_mbps: 100,\n        max_execution_time: 300,\n        energy_budget: 1000\n      },\n      time_pressure: 0.5,\n      uncertainty: 0.5\n    };\n    \n    // Make 1000 decisions across agents\n    const latencies = [];\n    service.on('decisionMade', ({ latency }) => latencies.push(latency));\n    \n    const decisions = Array(1000).fill(null).map((_, i) => ({\n      agentId: `load-test-${(i % 3) + 1}`,\n      context\n    }));\n    \n    const start = performance.now();\n    await service.batchMakeDecisions(decisions);\n    const totalDuration = performance.now() - start;\n    \n    const avgLatency = latencies.reduce((a, b) => a + b, 0) / latencies.length;\n    const maxLatency = Math.max(...latencies);\n    \n    console.log(`1000 decisions in ${totalDuration.toFixed(0)}ms`);\n    console.log(`Average latency: ${avgLatency.toFixed(3)}ms`);\n    console.log(`Max latency: ${maxLatency.toFixed(3)}ms`);\n    console.log(`95th percentile: ${latencies.sort((a, b) => a - b)[Math.floor(latencies.length * 0.95)].toFixed(3)}ms`);\n    \n    // Cleanup\n    for (const agent of agents) {\n      if (agent.success) {\n        await service.destroyAgent(agent.agent.id);\n      }\n    }\n  });\n});"],"mappings":"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","ignoreList":[]}