{"version":3,"names":["RuvSwarm","SwarmPersistence","NeuralAgentFactory","assert","path","fs","fileURLToPath","dirname","__filename","import","meta","url","__dirname","describe","ruvSwarm","testDbPath","join","beforeEach","_asyncToGenerator","existsSync","unlinkSync","global","_ruvSwarmInstance","_ruvSwarmInitialized","initialize","enablePersistence","enableNeuralNetworks","enableForecasting","debug","persistence","close","afterEach","it","swarm","createSwarm","name","topology","strategy","maxAgents","enableCognitiveDiversity","enableNeuralAgents","id","persistedSwarms","getActiveSwarms","strictEqual","length","agents","type","agent","spawn","capabilities","enableNeuralNetwork","push","persistedAgents","getSwarmAgents","task","orchestrate","description","priority","dependencies","estimatedDuration","assignedAgents","persistedTasks","getSwarmTasks","Promise","resolve","setTimeout","taskResults","getResults","task_id","agent_results","status","getStatus","total","tasks","completed","metrics","getGlobalMetrics","totalSwarms","totalAgents","totalTasks","cognitivePattern","neuralAgent","createNeuralAgent","analysis","analyzeTask","memoryData","learned_patterns","performance_history","context","domain","version","storeAgentMemory","retrieved","getAgentMemory","deepStrictEqual","value","updated","swarms","i","j","all","map","allSwarms","getAllSwarms","events","data","agentType","taskId","duration","event","logEvent","retrievedEvents","getSwarmEvents","event_type","metricsToRecord","metric","recordMetric","allMetrics","getMetrics","memoryMetrics","metric_value","fail","error","message","includes","researcher","coder","analyst","researchTask","requiredCapabilities","implementationTask","analysisTask","features","wasm_modules","monitoringResult","monitor","interval","test","terminate","activeSwarms","has","require","main","module","console","log"],"sources":["api-integration.test.js"],"sourcesContent":["/**\n * Integration tests for ruv-swarm API\n */\n\nimport { RuvSwarm } from '../../src/index-enhanced.js';\nimport { SwarmPersistence } from '../../src/persistence.js';\nimport { NeuralAgentFactory } from '../../src/neural-agent.js';\nimport assert from 'assert';\nimport path from 'path';\nimport fs from 'fs';\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\ndescribe('API Integration Tests', () => {\n  let ruvSwarm;\n  const testDbPath = path.join(__dirname, 'test-integration.db');\n\n  beforeEach(async() => {\n    // Clean up test database if exists\n    if (fs.existsSync(testDbPath)) {\n      fs.unlinkSync(testDbPath);\n    }\n\n    // Reset global state\n    global._ruvSwarmInstance = null;\n    global._ruvSwarmInitialized = 0;\n\n    // Initialize with test database\n    ruvSwarm = await RuvSwarm.initialize({\n      enablePersistence: true,\n      enableNeuralNetworks: true,\n      enableForecasting: false,\n      debug: false,\n    });\n\n    // Override persistence path for testing\n    if (ruvSwarm.persistence) {\n      ruvSwarm.persistence.close();\n      ruvSwarm.persistence = new SwarmPersistence(testDbPath);\n    }\n  });\n\n  afterEach(() => {\n    if (ruvSwarm && ruvSwarm.persistence) {\n      ruvSwarm.persistence.close();\n    }\n    if (fs.existsSync(testDbPath)) {\n      fs.unlinkSync(testDbPath);\n    }\n  });\n\n  describe('End-to-End Swarm Workflow', () => {\n    it('should complete full swarm lifecycle with persistence', async() => {\n      // 1. Create swarm\n      const swarm = await ruvSwarm.createSwarm({\n        name: 'integration-test-swarm',\n        topology: 'mesh',\n        strategy: 'balanced',\n        maxAgents: 10,\n        enableCognitiveDiversity: true,\n        enableNeuralAgents: true,\n      });\n\n      assert(swarm);\n      assert(swarm.id);\n\n      // 2. Verify swarm was persisted\n      const persistedSwarms = ruvSwarm.persistence.getActiveSwarms();\n      assert.strictEqual(persistedSwarms.length, 1);\n      assert.strictEqual(persistedSwarms[0].name, 'integration-test-swarm');\n\n      // 3. Spawn multiple agents\n      const agents = [];\n      for (const type of ['researcher', 'coder', 'analyst']) {\n        const agent = await swarm.spawn({\n          type,\n          name: `${type}-agent`,\n          capabilities: [type, 'collaboration'],\n          enableNeuralNetwork: true,\n        });\n        agents.push(agent);\n      }\n\n      assert.strictEqual(agents.length, 3);\n\n      // 4. Verify agents were persisted\n      const persistedAgents = ruvSwarm.persistence.getSwarmAgents(swarm.id);\n      assert.strictEqual(persistedAgents.length, 3);\n\n      // 5. Orchestrate task\n      const task = await swarm.orchestrate({\n        description: 'Analyze codebase and implement optimization',\n        priority: 'high',\n        dependencies: [],\n        maxAgents: 2,\n        estimatedDuration: 5000,\n      });\n\n      assert(task);\n      assert(task.assignedAgents.length > 0);\n\n      // 6. Verify task was persisted\n      const persistedTasks = ruvSwarm.persistence.getSwarmTasks(swarm.id);\n      assert.strictEqual(persistedTasks.length, 1);\n      assert.strictEqual(persistedTasks[0].description, task.description);\n\n      // 7. Wait for task completion\n      await new Promise(resolve => setTimeout(resolve, 1500));\n\n      // 8. Verify task results\n      const taskResults = await task.getResults();\n      assert(taskResults);\n      assert.strictEqual(taskResults.task_id, task.id);\n      assert(taskResults.agent_results);\n\n      // 9. Get swarm status\n      const status = await swarm.getStatus();\n      assert(status);\n      assert.strictEqual(status.agents.total, 3);\n      assert.strictEqual(status.tasks.total, 1);\n      assert.strictEqual(status.tasks.completed, 1);\n\n      // 10. Get global metrics\n      const metrics = await ruvSwarm.getGlobalMetrics();\n      assert.strictEqual(metrics.totalSwarms, 1);\n      assert.strictEqual(metrics.totalAgents, 3);\n      assert.strictEqual(metrics.totalTasks, 1);\n    });\n  });\n\n  describe('Neural Agent Integration', () => {\n    it('should create and use neural agents', async() => {\n      const swarm = await ruvSwarm.createSwarm({\n        name: 'neural-test-swarm',\n        enableNeuralAgents: true,\n      });\n\n      // Create neural agent\n      const agent = await swarm.spawn({\n        type: 'researcher',\n        enableNeuralNetwork: true,\n      });\n\n      // Verify neural capabilities\n      assert(agent.cognitivePattern);\n      assert(agent.capabilities);\n\n      // Create neural agent wrapper\n      const neuralAgent = NeuralAgentFactory.createNeuralAgent(agent, 'researcher');\n      assert(neuralAgent);\n\n      // Test neural analysis\n      const analysis = await neuralAgent.analyzeTask({\n        description: 'Research neural network architectures',\n        priority: 'high',\n      });\n\n      assert(analysis);\n      assert('complexity' in analysis);\n      assert('creativity' in analysis);\n      assert('confidence' in analysis);\n    });\n  });\n\n  describe('Memory Persistence Integration', () => {\n    it('should persist agent memory across operations', async() => {\n      const swarm = await ruvSwarm.createSwarm({\n        name: 'memory-test-swarm',\n      });\n\n      const agent = await swarm.spawn({\n        type: 'analyst',\n        name: 'memory-test-agent',\n      });\n\n      // Store agent memory\n      const memoryData = {\n        learned_patterns: ['pattern1', 'pattern2'],\n        performance_history: [0.7, 0.8, 0.85],\n        context: { domain: 'testing', version: 1 },\n      };\n\n      ruvSwarm.persistence.storeAgentMemory(\n        agent.id,\n        'analysis_memory',\n        memoryData,\n      );\n\n      // Retrieve memory\n      const retrieved = ruvSwarm.persistence.getAgentMemory(\n        agent.id,\n        'analysis_memory',\n      );\n\n      assert(retrieved);\n      assert.deepStrictEqual(retrieved.value, memoryData);\n\n      // Update memory\n      memoryData.performance_history.push(0.9);\n      ruvSwarm.persistence.storeAgentMemory(\n        agent.id,\n        'analysis_memory',\n        memoryData,\n      );\n\n      const updated = ruvSwarm.persistence.getAgentMemory(\n        agent.id,\n        'analysis_memory',\n      );\n\n      assert.strictEqual(updated.value.performance_history.length, 4);\n    });\n  });\n\n  describe('Multi-Swarm Coordination', () => {\n    it('should coordinate multiple swarms', async() => {\n      // Create multiple swarms\n      const swarms = [];\n      for (let i = 0; i < 3; i++) {\n        const swarm = await ruvSwarm.createSwarm({\n          name: `swarm-${i}`,\n          topology: i === 0 ? 'mesh' : i === 1 ? 'star' : 'ring',\n          maxAgents: 5,\n        });\n\n        // Spawn agents in each swarm\n        for (let j = 0; j < 2; j++) {\n          await swarm.spawn({\n            type: j === 0 ? 'researcher' : 'coder',\n            name: `agent-${i}-${j}`,\n          });\n        }\n\n        swarms.push(swarm);\n      }\n\n      // Orchestrate tasks in parallel\n      const tasks = await Promise.all(\n        swarms.map(swarm =>\n          swarm.orchestrate({\n            description: `Task for ${swarm.id}`,\n            priority: 'medium',\n          }),\n        ),\n      );\n\n      assert.strictEqual(tasks.length, 3);\n\n      // Get all swarms status\n      const allSwarms = await ruvSwarm.getAllSwarms();\n      assert.strictEqual(allSwarms.length, 3);\n\n      // Verify global metrics\n      const metrics = await ruvSwarm.getGlobalMetrics();\n      assert.strictEqual(metrics.totalSwarms, 3);\n      assert.strictEqual(metrics.totalAgents, 6);\n      assert.strictEqual(metrics.totalTasks, 3);\n    });\n  });\n\n  describe('Event Logging Integration', () => {\n    it('should log and retrieve events', async() => {\n      const swarm = await ruvSwarm.createSwarm({\n        name: 'event-test-swarm',\n      });\n\n      // Log various events\n      const events = [\n        { type: 'swarm_initialized', data: { topology: 'mesh' } },\n        { type: 'agent_spawned', data: { agentType: 'researcher' } },\n        { type: 'task_started', data: { taskId: 'task-123' } },\n        { type: 'task_completed', data: { taskId: 'task-123', duration: 1000 } },\n      ];\n\n      for (const event of events) {\n        ruvSwarm.persistence.logEvent(swarm.id, event.type, event.data);\n      }\n\n      // Retrieve events\n      const retrievedEvents = ruvSwarm.persistence.getSwarmEvents(swarm.id);\n      assert.strictEqual(retrievedEvents.length, 4);\n\n      // Verify event order (should be DESC)\n      assert.strictEqual(retrievedEvents[0].event_type, 'task_completed');\n      assert.strictEqual(retrievedEvents[3].event_type, 'swarm_initialized');\n    });\n  });\n\n  describe('Performance Metrics Integration', () => {\n    it('should track and aggregate performance metrics', async() => {\n      const swarm = await ruvSwarm.createSwarm({\n        name: 'metrics-test-swarm',\n      });\n\n      const agent = await swarm.spawn({\n        type: 'optimizer',\n        name: 'metrics-agent',\n      });\n\n      // Record various metrics\n      const metricsToRecord = [\n        { name: 'task_completion_time', value: 1500 },\n        { name: 'memory_usage', value: 45.5 },\n        { name: 'cpu_usage', value: 32.1 },\n        { name: 'accuracy_score', value: 0.92 },\n      ];\n\n      for (const metric of metricsToRecord) {\n        ruvSwarm.persistence.recordMetric(\n          'agent',\n          agent.id,\n          metric.name,\n          metric.value,\n        );\n      }\n\n      // Retrieve all metrics\n      const allMetrics = ruvSwarm.persistence.getMetrics('agent', agent.id);\n      assert.strictEqual(allMetrics.length, 4);\n\n      // Retrieve specific metric\n      const memoryMetrics = ruvSwarm.persistence.getMetrics(\n        'agent',\n        agent.id,\n        'memory_usage',\n      );\n      assert.strictEqual(memoryMetrics.length, 1);\n      assert.strictEqual(memoryMetrics[0].metric_value, 45.5);\n    });\n  });\n\n  describe('Error Recovery Integration', () => {\n    it('should handle and recover from errors gracefully', async() => {\n      const swarm = await ruvSwarm.createSwarm({\n        name: 'error-test-swarm',\n      });\n\n      // Try to orchestrate without agents (should fail)\n      try {\n        await swarm.orchestrate({\n          description: 'This should fail',\n        });\n        assert.fail('Should have thrown error');\n      } catch (error) {\n        assert(error.message.includes('No agents available'));\n      }\n\n      // Spawn agent and retry\n      await swarm.spawn({ type: 'researcher' });\n      const task = await swarm.orchestrate({\n        description: 'This should succeed',\n      });\n\n      assert(task);\n      assert(task.assignedAgents.length > 0);\n    });\n  });\n\n  describe('Complex Task Orchestration', () => {\n    it('should handle complex task dependencies', async() => {\n      const swarm = await ruvSwarm.createSwarm({\n        name: 'complex-task-swarm',\n        topology: 'hierarchical',\n        strategy: 'specialized',\n      });\n\n      // Create specialized agents\n      const researcher = await swarm.spawn({\n        type: 'researcher',\n        capabilities: ['research', 'documentation'],\n      });\n\n      const coder = await swarm.spawn({\n        type: 'coder',\n        capabilities: ['javascript', 'python', 'testing'],\n      });\n\n      const analyst = await swarm.spawn({\n        type: 'analyst',\n        capabilities: ['analysis', 'reporting'],\n      });\n\n      // Create tasks with dependencies\n      const researchTask = await swarm.orchestrate({\n        description: 'Research best practices for optimization',\n        priority: 'high',\n        requiredCapabilities: ['research'],\n      });\n\n      const implementationTask = await swarm.orchestrate({\n        description: 'Implement optimization based on research',\n        priority: 'high',\n        dependencies: [researchTask.id],\n        requiredCapabilities: ['javascript'],\n      });\n\n      const analysisTask = await swarm.orchestrate({\n        description: 'Analyze performance improvements',\n        priority: 'medium',\n        dependencies: [implementationTask.id],\n        requiredCapabilities: ['analysis'],\n      });\n\n      // Wait for tasks to progress\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Verify task assignments\n      assert(researchTask.assignedAgents.includes(researcher.id));\n      assert(implementationTask.assignedAgents.includes(coder.id));\n      assert(analysisTask.assignedAgents.includes(analyst.id));\n    });\n  });\n\n  describe('WASM Module Loading Integration', () => {\n    it('should detect and report WASM module status', async() => {\n      const metrics = await ruvSwarm.getGlobalMetrics();\n\n      assert(metrics.features);\n      assert('neural_networks' in metrics.features);\n      assert('cognitive_diversity' in metrics.features);\n      assert('simd_support' in metrics.features);\n\n      assert(metrics.wasm_modules);\n      // Should have at least core module status\n      assert('core' in metrics.wasm_modules);\n    });\n  });\n\n  describe('Swarm Monitoring Integration', () => {\n    it('should monitor swarm activity', async() => {\n      const swarm = await ruvSwarm.createSwarm({\n        name: 'monitor-test-swarm',\n      });\n\n      await swarm.spawn({ type: 'researcher' });\n      await swarm.spawn({ type: 'coder' });\n\n      // Start monitoring\n      const monitoringResult = await swarm.monitor(2000, 500);\n\n      assert(monitoringResult);\n      assert.strictEqual(monitoringResult.duration, 2000);\n      assert.strictEqual(monitoringResult.interval, 500);\n\n      // Orchestrate task during monitoring\n      await swarm.orchestrate({\n        description: 'Task during monitoring',\n      });\n\n      // Get final status\n      const status = await swarm.getStatus(true);\n      assert(status.agents.total >= 2);\n      assert(status.tasks.total >= 1);\n    });\n  });\n\n  describe('Cleanup and Resource Management', () => {\n    it('should properly clean up resources', async() => {\n      const swarm = await ruvSwarm.createSwarm({\n        name: 'cleanup-test-swarm',\n      });\n\n      const agent = await swarm.spawn({ type: 'researcher' });\n\n      // Store some data\n      ruvSwarm.persistence.storeAgentMemory(agent.id, 'test-key', { data: 'test' });\n      ruvSwarm.persistence.logEvent(swarm.id, 'test_event', { test: true });\n\n      // Terminate swarm\n      await swarm.terminate();\n\n      // Verify swarm is removed from active swarms\n      assert(!ruvSwarm.activeSwarms.has(swarm.id));\n\n      // Data should still be in persistence (for historical analysis)\n      const events = ruvSwarm.persistence.getSwarmEvents(swarm.id);\n      assert(events.length > 0);\n    });\n  });\n});\n\n// Run tests\nif (require.main === module) {\n  console.log('Running API Integration Tests...');\n  require('../../node_modules/.bin/jest');\n}"],"mappings":"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","ignoreList":[]}