94108b9d37a0e4c8b4213cf44f19d517
/* istanbul ignore next */
function cov_17vns5mbbv() {
  var path = "/workspaces/ruv-FANN/ruv-swarm/npm/src/claude-integration/advanced-commands.js";
  var hash = "8c8ced26e4272140ec586976801aaf534c9abbcf";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/ruv-FANN/ruv-swarm/npm/src/claude-integration/advanced-commands.js",
    statementMap: {
      "0": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 58
        }
      },
      "1": {
        start: {
          line: 17,
          column: 24
        },
        end: {
          line: 17,
          column: 73
        }
      },
      "2": {
        start: {
          line: 20,
          column: 20
        },
        end: {
          line: 20,
          column: 74
        }
      },
      "3": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 23,
          column: 5
        }
      },
      "4": {
        start: {
          line: 22,
          column: 6
        },
        end: {
          line: 22,
          column: 74
        }
      },
      "5": {
        start: {
          line: 25,
          column: 21
        },
        end: {
          line: 531,
          column: 5
        }
      },
      "6": {
        start: {
          line: 533,
          column: 25
        },
        end: {
          line: 533,
          column: 27
        }
      },
      "7": {
        start: {
          line: 536,
          column: 4
        },
        end: {
          line: 541,
          column: 5
        }
      },
      "8": {
        start: {
          line: 537,
          column: 22
        },
        end: {
          line: 537,
          column: 75
        }
      },
      "9": {
        start: {
          line: 538,
          column: 23
        },
        end: {
          line: 538,
          column: 55
        }
      },
      "10": {
        start: {
          line: 539,
          column: 6
        },
        end: {
          line: 539,
          column: 44
        }
      },
      "11": {
        start: {
          line: 540,
          column: 6
        },
        end: {
          line: 540,
          column: 34
        }
      },
      "12": {
        start: {
          line: 543,
          column: 4
        },
        end: {
          line: 543,
          column: 50
        }
      },
      "13": {
        start: {
          line: 547,
          column: 4
        },
        end: {
          line: 557,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 2
          },
          end: {
            line: 9,
            column: 3
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 11,
            column: 3
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 2
          },
          end: {
            line: 16,
            column: 3
          }
        },
        loc: {
          start: {
            line: 16,
            column: 35
          },
          end: {
            line: 544,
            column: 3
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 546,
            column: 2
          },
          end: {
            line: 546,
            column: 3
          }
        },
        loc: {
          start: {
            line: 546,
            column: 33
          },
          end: {
            line: 558,
            column: 3
          }
        },
        line: 546
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 9,
            column: 14
          },
          end: {
            line: 9,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 9,
            column: 24
          },
          end: {
            line: 9,
            column: 26
          }
        }],
        line: 9
      },
      "1": {
        loc: {
          start: {
            line: 10,
            column: 22
          },
          end: {
            line: 10,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 10,
            column: 22
          },
          end: {
            line: 10,
            column: 40
          }
        }, {
          start: {
            line: 10,
            column: 44
          },
          end: {
            line: 10,
            column: 57
          }
        }],
        line: 10
      },
      "2": {
        loc: {
          start: {
            line: 537,
            column: 22
          },
          end: {
            line: 537,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 537,
            column: 22
          },
          end: {
            line: 537,
            column: 36
          }
        }, {
          start: {
            line: 537,
            column: 40
          },
          end: {
            line: 537,
            column: 75
          }
        }],
        line: 537
      },
      "3": {
        loc: {
          start: {
            line: 550,
            column: 2
          },
          end: {
            line: 550,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 550,
            column: 2
          },
          end: {
            line: 550,
            column: 20
          }
        }, {
          start: {
            line: 550,
            column: 24
          },
          end: {
            line: 550,
            column: 64
          }
        }],
        line: 550
      },
      "4": {
        loc: {
          start: {
            line: 553,
            column: 2
          },
          end: {
            line: 553,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 553,
            column: 2
          },
          end: {
            line: 553,
            column: 14
          }
        }, {
          start: {
            line: 553,
            column: 18
          },
          end: {
            line: 553,
            column: 54
          }
        }],
        line: 553
      },
      "5": {
        loc: {
          start: {
            line: 556,
            column: 2
          },
          end: {
            line: 556,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 556,
            column: 2
          },
          end: {
            line: 556,
            column: 17
          }
        }, {
          start: {
            line: 556,
            column: 21
          },
          end: {
            line: 556,
            column: 96
          }
        }],
        line: 556
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8c8ced26e4272140ec586976801aaf534c9abbcf"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_17vns5mbbv = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_17vns5mbbv();
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * Advanced command documentation for enhanced swarm optimization
 */

import fs from 'fs/promises';
import path from 'path';
class AdvancedCommandsGenerator {
  constructor(options =
  /* istanbul ignore next */
  (cov_17vns5mbbv().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_17vns5mbbv().f[0]++;
    cov_17vns5mbbv().s[0]++;
    this.workingDir =
    /* istanbul ignore next */
    (cov_17vns5mbbv().b[1][0]++, options.workingDir) ||
    /* istanbul ignore next */
    (cov_17vns5mbbv().b[1][1]++, process.cwd());
  }

  /**
     * Generate advanced optimization command documentation
     */
  generateAdvancedCommands() {
    /* istanbul ignore next */
    var _this = this;
    return _asyncToGenerator(function* () {
      cov_17vns5mbbv().f[1]++;
      const commandsDir =
      /* istanbul ignore next */
      (cov_17vns5mbbv().s[1]++, path.join(_this.workingDir, '.claude', 'commands'));

      // Create subdirectories
      const subdirs =
      /* istanbul ignore next */
      (cov_17vns5mbbv().s[2]++, ['optimization', 'analysis', 'training', 'automation']);
      cov_17vns5mbbv().s[3]++;
      for (const subdir of subdirs) {
        /* istanbul ignore next */
        cov_17vns5mbbv().s[4]++;
        /* istanbul ignore next */
        yield fs.mkdir(path.join(commandsDir, subdir), {
          recursive: true
        });
      }
      const commands =
      /* istanbul ignore next */
      (cov_17vns5mbbv().s[5]++, {
        // Optimization commands
        'optimization/auto-topology.md': {
          title: 'Automatic Topology Selection',
          content: `# Automatic Topology Selection

## Purpose
Automatically select the optimal swarm topology based on task complexity analysis.

## How It Works

### 1. Task Analysis
The system analyzes your task description to determine:
- Complexity level (simple/medium/complex)
- Required agent types
- Estimated duration
- Resource requirements

### 2. Topology Selection
Based on analysis, it selects:
- **Star**: For simple, centralized tasks
- **Mesh**: For medium complexity with flexibility needs
- **Hierarchical**: For complex tasks requiring structure
- **Ring**: For sequential processing workflows

### 3. Example Usage

**Simple Task:**
\`\`\`
Tool: mcp__ruv-swarm__task_orchestrate
Parameters: {"task": "Fix typo in README.md"}
Result: Automatically uses star topology with single agent
\`\`\`

**Complex Task:**
\`\`\`
Tool: mcp__ruv-swarm__task_orchestrate
Parameters: {"task": "Refactor authentication system with JWT, add tests, update documentation"}
Result: Automatically uses hierarchical topology with architect, coder, and tester agents
\`\`\`

## Benefits
- 🎯 Optimal performance for each task type
- 🤖 Automatic agent assignment
- ⚡ Reduced setup time
- 📊 Better resource utilization

## Hook Configuration
The pre-task hook automatically handles topology selection:
\`\`\`json
{
  "command": "npx ruv-swarm hook pre-task --auto-spawn-agents --optimize-topology"
}
\`\`\``
        },
        'optimization/parallel-execution.md': {
          title: 'Parallel Task Execution',
          content: `# Parallel Task Execution

## Purpose
Execute independent subtasks in parallel for maximum efficiency.

## Coordination Strategy

### 1. Task Decomposition
\`\`\`
Tool: mcp__ruv-swarm__task_orchestrate
Parameters: {
  "task": "Build complete REST API with auth, CRUD operations, and tests",
  "strategy": "parallel",
  "maxAgents": 8
}
\`\`\`

### 2. Parallel Workflows
The system automatically:
- Identifies independent components
- Assigns specialized agents
- Executes in parallel where possible
- Synchronizes at dependency points

### 3. Example Breakdown
For the REST API task:
- **Agent 1 (Architect)**: Design API structure
- **Agent 2-3 (Coders)**: Implement auth & CRUD in parallel
- **Agent 4 (Tester)**: Write tests as features complete
- **Agent 5 (Documenter)**: Update docs continuously

## Performance Gains
- 🚀 2.8-4.4x faster execution
- 💪 Optimal CPU utilization
- 🔄 Automatic load balancing
- 📈 Linear scalability with agents

## Monitoring
\`\`\`
Tool: mcp__ruv-swarm__swarm_monitor
Parameters: {"interval": 1, "duration": 10}
\`\`\`

Watch real-time parallel execution progress!`
        },
        // Analysis commands
        'analysis/performance-bottlenecks.md': {
          title: 'Performance Bottleneck Analysis',
          content: `# Performance Bottleneck Analysis

## Purpose
Identify and resolve performance bottlenecks in your development workflow.

## Automated Analysis

### 1. Real-time Detection
The post-task hook automatically analyzes:
- Execution time vs. complexity
- Agent utilization rates
- Resource constraints
- Operation patterns

### 2. Common Bottlenecks

**Time Bottlenecks:**
- Tasks taking > 5 minutes
- Sequential operations that could parallelize
- Redundant file operations

**Coordination Bottlenecks:**
- Single agent for complex tasks
- Unbalanced agent workloads
- Poor topology selection

**Resource Bottlenecks:**
- High operation count (> 100)
- Memory constraints
- I/O limitations

### 3. Improvement Suggestions

\`\`\`
Tool: mcp__ruv-swarm__task_results
Parameters: {"taskId": "task-123", "format": "detailed"}

Result includes:
{
  "bottlenecks": [
    {
      "type": "coordination",
      "severity": "high",
      "description": "Single agent used for complex task",
      "recommendation": "Spawn specialized agents for parallel work"
    }
  ],
  "improvements": [
    {
      "area": "execution_time",
      "suggestion": "Use parallel task execution",
      "expectedImprovement": "30-50% time reduction"
    }
  ]
}
\`\`\`

## Continuous Optimization
The system learns from each task to prevent future bottlenecks!`
        },
        'analysis/token-efficiency.md': {
          title: 'Token Usage Optimization',
          content: `# Token Usage Optimization

## Purpose
Reduce token consumption while maintaining quality through intelligent coordination.

## Optimization Strategies

### 1. Smart Caching
- Search results cached for 5 minutes
- File content cached during session
- Pattern recognition reduces redundant searches

### 2. Efficient Coordination
- Agents share context automatically
- Avoid duplicate file reads
- Batch related operations

### 3. Measurement & Tracking

\`\`\`bash
# Check token savings after session
npx ruv-swarm hook session-end --export-metrics

# Result shows:
{
  "metrics": {
    "tokensSaved": 15420,
    "operations": 45,
    "efficiency": "343 tokens/operation"
  }
}
\`\`\`

## Best Practices
1. **Use Task tool** for complex searches
2. **Enable caching** in pre-search hooks
3. **Batch operations** when possible
4. **Review session summaries** for insights

## Token Reduction Results
- 📉 32.3% average token reduction
- 🎯 More focused operations
- 🔄 Intelligent result reuse
- 📊 Cumulative improvements`
        },
        // Training commands
        'training/neural-patterns.md': {
          title: 'Neural Pattern Training',
          content: `# Neural Pattern Training

## Purpose
Continuously improve coordination through neural network learning.

## How Training Works

### 1. Automatic Learning
Every successful operation trains the neural networks:
- Edit patterns for different file types
- Search strategies that find results faster
- Task decomposition approaches
- Agent coordination patterns

### 2. Manual Training
\`\`\`
Tool: mcp__ruv-swarm__neural_train
Parameters: {"iterations": 20}
\`\`\`

### 3. Pattern Types

**Cognitive Patterns:**
- Convergent: Focused problem-solving
- Divergent: Creative exploration
- Lateral: Alternative approaches
- Systems: Holistic thinking
- Critical: Analytical evaluation
- Abstract: High-level design

### 4. Improvement Tracking
\`\`\`
Tool: mcp__ruv-swarm__neural_status
Result: {
  "patterns": {
    "convergent": 0.92,
    "divergent": 0.87,
    "lateral": 0.85
  },
  "improvement": "5.3% since last session",
  "confidence": 0.89
}
\`\`\`

## Benefits
- 🧠 Learns your coding style
- 📈 Improves with each use
- 🎯 Better task predictions
- ⚡ Faster coordination`
        },
        'training/specialization.md': {
          title: 'Agent Specialization Training',
          content: `# Agent Specialization Training

## Purpose
Train agents to become experts in specific domains for better performance.

## Specialization Areas

### 1. By File Type
Agents automatically specialize based on file extensions:
- **.js/.ts**: Modern JavaScript patterns
- **.py**: Pythonic idioms
- **.go**: Go best practices
- **.rs**: Rust safety patterns

### 2. By Task Type
\`\`\`
Tool: mcp__ruv-swarm__agent_spawn
Parameters: {
  "type": "coder",
  "capabilities": ["react", "typescript", "testing"]
}
\`\`\`

### 3. Training Process
The system trains through:
- Successful edit operations
- Code review patterns
- Error fix approaches
- Performance optimizations

### 4. Specialization Benefits
\`\`\`
# Check agent specializations
Tool: mcp__ruv-swarm__agent_list
Parameters: {"filter": "active"}

Result shows expertise levels:
{
  "agents": [
    {
      "id": "coder-123",
      "specializations": {
        "javascript": 0.95,
        "react": 0.88,
        "testing": 0.82
      }
    }
  ]
}
\`\`\`

## Continuous Improvement
Agents share learnings across sessions for cumulative expertise!`
        },
        // Automation commands
        'automation/smart-agents.md': {
          title: 'Smart Agent Auto-Spawning',
          content: `# Smart Agent Auto-Spawning

## Purpose
Automatically spawn the right agents at the right time without manual intervention.

## Auto-Spawning Triggers

### 1. File Type Detection
When editing files, agents auto-spawn:
- **JavaScript/TypeScript**: Coder agent
- **Markdown**: Researcher agent
- **JSON/YAML**: Analyst agent
- **Multiple files**: Coordinator agent

### 2. Task Complexity
\`\`\`
Simple task: "Fix typo"
→ Single coordinator agent

Complex task: "Implement OAuth with Google"
→ Architect + Coder + Tester + Researcher
\`\`\`

### 3. Dynamic Scaling
The system monitors workload and spawns additional agents when:
- Task queue grows
- Complexity increases
- Parallel opportunities exist

## Configuration
Already enabled in settings.json:
\`\`\`json
{
  "hooks": [{
    "matcher": "^Task$",
    "command": "npx ruv-swarm hook pre-task --auto-spawn-agents"
  }]
}
\`\`\`

## Benefits
- 🤖 Zero manual agent management
- 🎯 Perfect agent selection
- 📈 Dynamic scaling
- 💾 Resource efficiency`
        },
        'automation/self-healing.md': {
          title: 'Self-Healing Workflows',
          content: `# Self-Healing Workflows

## Purpose
Automatically detect and recover from errors without interrupting your flow.

## Self-Healing Features

### 1. Error Detection
Monitors for:
- Failed commands
- Syntax errors
- Missing dependencies
- Broken tests

### 2. Automatic Recovery

**Missing Dependencies:**
\`\`\`
Error: Cannot find module 'express'
→ Automatically runs: npm install express
→ Retries original command
\`\`\`

**Syntax Errors:**
\`\`\`
Error: Unexpected token
→ Analyzes error location
→ Suggests fix through analyzer agent
→ Applies fix with confirmation
\`\`\`

**Test Failures:**
\`\`\`
Test failed: "user authentication"
→ Spawns debugger agent
→ Analyzes failure cause
→ Implements fix
→ Re-runs tests
\`\`\`

### 3. Learning from Failures
Each recovery improves future prevention:
- Patterns saved to knowledge base
- Similar errors prevented proactively
- Recovery strategies optimized

## Hook Integration
\`\`\`json
{
  "PostToolUse": [{
    "matcher": "^Bash$",
    "command": "npx ruv-swarm hook post-bash --exit-code '\${tool.result.exitCode}' --auto-recover"
  }]
}
\`\`\`

## Benefits
- 🛡️ Resilient workflows
- 🔄 Automatic recovery
- 📚 Learns from errors
- ⏱️ Saves debugging time`
        },
        'automation/session-memory.md': {
          title: 'Cross-Session Memory',
          content: `# Cross-Session Memory

## Purpose
Maintain context and learnings across Claude Code sessions for continuous improvement.

## Memory Features

### 1. Automatic State Persistence
At session end, automatically saves:
- Active agents and specializations
- Task history and patterns
- Performance metrics
- Neural network weights
- Knowledge base updates

### 2. Session Restoration
\`\`\`bash
# New session automatically loads previous state
claude "Continue where we left off"

# Or manually restore specific session
npx ruv-swarm hook session-restore --session-id "sess-123"
\`\`\`

### 3. Memory Types

**Project Memory:**
- File relationships
- Common edit patterns
- Testing approaches
- Build configurations

**Agent Memory:**
- Specialization levels
- Task success rates
- Optimization strategies
- Error patterns

**Performance Memory:**
- Bottleneck history
- Optimization results
- Token usage patterns
- Efficiency trends

### 4. Privacy & Control
\`\`\`bash
# View stored memory
ls .ruv-swarm/

# Clear specific memory
rm .ruv-swarm/session-*.json

# Disable memory
export RUV_SWARM_MEMORY_PERSIST=false
\`\`\`

## Benefits
- 🧠 Contextual awareness
- 📈 Cumulative learning
- ⚡ Faster task completion
- 🎯 Personalized optimization`
        }
      });
      const createdFiles =
      /* istanbul ignore next */
      (cov_17vns5mbbv().s[6]++, []);

      // Generate command files
      cov_17vns5mbbv().s[7]++;
      for (const [filepath, config] of Object.entries(commands)) {
        const content =
        /* istanbul ignore next */
        (cov_17vns5mbbv().s[8]++,
        /* istanbul ignore next */
        (cov_17vns5mbbv().b[2][0]++, config.content) ||
        /* istanbul ignore next */
        (cov_17vns5mbbv().b[2][1]++, _this.generateCommandContent(config)));
        const filePath =
        /* istanbul ignore next */
        (cov_17vns5mbbv().s[9]++, path.join(commandsDir, filepath));
        /* istanbul ignore next */
        cov_17vns5mbbv().s[10]++;
        /* istanbul ignore next */
        yield fs.writeFile(filePath, content);
        /* istanbul ignore next */
        cov_17vns5mbbv().s[11]++;
        createdFiles.push(filepath);
      }
      cov_17vns5mbbv().s[12]++;
      return {
        files: createdFiles,
        success: true
      };
    })();
  }
  generateCommandContent(config) {
    /* istanbul ignore next */
    cov_17vns5mbbv().f[2]++;
    cov_17vns5mbbv().s[13]++;
    return `# ${config.title}

## 🎯 Key Features
${
    /* istanbul ignore next */
    (cov_17vns5mbbv().b[3][0]++, config.description) ||
    /* istanbul ignore next */
    (cov_17vns5mbbv().b[3][1]++, 'Advanced swarm optimization capability')}

## Usage
${
    /* istanbul ignore next */
    (cov_17vns5mbbv().b[4][0]++, config.usage) ||
    /* istanbul ignore next */
    (cov_17vns5mbbv().b[4][1]++, 'See main documentation for details')}

## Benefits
${
    /* istanbul ignore next */
    (cov_17vns5mbbv().b[5][0]++, config.benefits) ||
    /* istanbul ignore next */
    (cov_17vns5mbbv().b[5][1]++, '- Improved performance\n- Automated workflows\n- Intelligent coordination')}
`;
  }
}
export { AdvancedCommandsGenerator };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,