{"version":3,"names":["cov_13hvlacw57","actualCoverage","asyncGeneratorStep","n","t","e","r","o","a","c","i","u","value","done","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","fs","path","AdvancedCommandsGenerator","ClaudeDocsGenerator","constructor","options","b","f","s","workingDir","process","cwd","advancedGenerator","generateClaudeMd","_this","content","filePath","join","writeFile","file","success","generateCommandDocs","_this2","commandsDir","mkdir","recursive","subdirs","subdir","commands","title","tool","params","description","details","createdFiles","filepath","config","Object","entries","push","files","generateSettingsJson","_this3","settings","env","RUV_SWARM_AUTO_COMMIT","RUV_SWARM_AUTO_PUSH","RUV_SWARM_HOOKS_ENABLED","RUV_SWARM_TELEMETRY_ENABLED","RUV_SWARM_REMOTE_EXECUTION","permissions","allow","deny","hooks","mcpServers","command","args","RUV_SWARM_REMOTE_READY","includeCoAuthoredBy","dirname","JSON","stringify","generateAll","_this4","console","log","results","claudeMd","advancedCommands","generateAdvancedCommands","totalCommands","length","error","message"],"sources":["docs.js"],"sourcesContent":["/**\n * Documentation generation module for Claude Code integration\n * Generates claude.md and .claude/commands/ documentation\n */\n\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { AdvancedCommandsGenerator } from './advanced-commands.js';\n\nclass ClaudeDocsGenerator {\n  constructor(options = {}) {\n    this.workingDir = options.workingDir || process.cwd();\n    this.advancedGenerator = new AdvancedCommandsGenerator(options);\n  }\n\n  /**\n     * Generate main claude.md configuration file\n     */\n  async generateClaudeMd() {\n    const content = `# Claude Code Configuration for ruv-swarm\n\n## üéØ IMPORTANT: Separation of Responsibilities\n\n### Claude Code Handles:\n- ‚úÖ **ALL file operations** (Read, Write, Edit, MultiEdit)\n- ‚úÖ **ALL code generation** and development tasks\n- ‚úÖ **ALL bash commands** and system operations\n- ‚úÖ **ALL actual implementation** work\n- ‚úÖ **Project navigation** and code analysis\n\n### ruv-swarm MCP Tools Handle:\n- üß† **Coordination only** - Orchestrating Claude Code's actions\n- üíæ **Memory management** - Persistent state across sessions\n- ü§ñ **Neural features** - Cognitive patterns and learning\n- üìä **Performance tracking** - Monitoring and metrics\n- üêù **Swarm orchestration** - Multi-agent coordination\n\n### ‚ö†Ô∏è Key Principle:\n**MCP tools DO NOT create content or write code.** They coordinate and enhance Claude Code's native capabilities. Think of them as an orchestration layer that helps Claude Code work more efficiently.\n\n## üöÄ CRITICAL: Parallel Execution & Batch Operations\n\n### üö® MANDATORY RULE #1: BATCH EVERYTHING\n\n**When using swarms, you MUST use BatchTool for ALL operations:**\n\n1. **NEVER** send multiple messages for related operations\n2. **ALWAYS** combine multiple tool calls in ONE message\n3. **PARALLEL** execution is MANDATORY, not optional\n\n### ‚ö° THE GOLDEN RULE OF SWARMS\n\n\\`\\`\\`\nIf you need to do X operations, they should be in 1 message, not X messages\n\\`\\`\\`\n\n### üì¶ BATCH TOOL EXAMPLES\n\n**‚úÖ CORRECT - Everything in ONE Message:**\n\\`\\`\\`javascript\n[Single Message with BatchTool]:\n  mcp__ruv-swarm__swarm_init { topology: \"mesh\", maxAgents: 6 }\n  mcp__ruv-swarm__agent_spawn { type: \"researcher\" }\n  mcp__ruv-swarm__agent_spawn { type: \"coder\" }\n  mcp__ruv-swarm__agent_spawn { type: \"analyst\" }\n  mcp__ruv-swarm__agent_spawn { type: \"tester\" }\n  mcp__ruv-swarm__agent_spawn { type: \"coordinator\" }\n  TodoWrite { todos: [todo1, todo2, todo3, todo4, todo5] }\n  Bash \"mkdir -p app/{src,tests,docs}\"\n  Write \"app/package.json\" \n  Write \"app/README.md\"\n  Write \"app/src/index.js\"\n\\`\\`\\`\n\n**‚ùå WRONG - Multiple Messages (NEVER DO THIS):**\n\\`\\`\\`javascript\nMessage 1: mcp__ruv-swarm__swarm_init\nMessage 2: mcp__ruv-swarm__agent_spawn \nMessage 3: mcp__ruv-swarm__agent_spawn\nMessage 4: TodoWrite (one todo)\nMessage 5: Bash \"mkdir src\"\nMessage 6: Write \"package.json\"\n// This is 6x slower and breaks parallel coordination!\n\\`\\`\\`\n\n### üéØ BATCH OPERATIONS BY TYPE\n\n**File Operations (Single Message):**\n- Read 10 files? ‚Üí One message with 10 Read calls\n- Write 5 files? ‚Üí One message with 5 Write calls\n- Edit 1 file many times? ‚Üí One MultiEdit call\n\n**Swarm Operations (Single Message):**\n- Need 8 agents? ‚Üí One message with swarm_init + 8 agent_spawn calls\n- Multiple memories? ‚Üí One message with all memory_usage calls\n- Task + monitoring? ‚Üí One message with task_orchestrate + swarm_monitor\n\n**Command Operations (Single Message):**\n- Multiple directories? ‚Üí One message with all mkdir commands\n- Install + test + lint? ‚Üí One message with all npm commands\n- Git operations? ‚Üí One message with all git commands\n\n## üöÄ Quick Setup (Stdio MCP - Recommended)\n\n### 1. Add MCP Server (Stdio - No Port Needed)\n\\`\\`\\`bash\n# Add ruv-swarm MCP server to Claude Code using stdio\nclaude mcp add ruv-swarm npx ruv-swarm mcp start\n\\`\\`\\`\n\n### 2. Use MCP Tools for Coordination in Claude Code\nOnce configured, ruv-swarm MCP tools enhance Claude Code's coordination:\n\n**Initialize a swarm:**\n- Use the \\`mcp__ruv-swarm__swarm_init\\` tool to set up coordination topology\n- Choose: mesh, hierarchical, ring, or star\n- This creates a coordination framework for Claude Code's work\n\n**Spawn agents:**\n- Use \\`mcp__ruv-swarm__agent_spawn\\` tool to create specialized coordinators\n- Agent types represent different thinking patterns, not actual coders\n- They help Claude Code approach problems from different angles\n\n**Orchestrate tasks:**\n- Use \\`mcp__ruv-swarm__task_orchestrate\\` tool to coordinate complex workflows\n- This breaks down tasks for Claude Code to execute systematically\n- The agents don't write code - they coordinate Claude Code's actions\n\n## Available MCP Tools for Coordination\n\n### Coordination Tools:\n- \\`mcp__ruv-swarm__swarm_init\\` - Set up coordination topology for Claude Code\n- \\`mcp__ruv-swarm__agent_spawn\\` - Create cognitive patterns to guide Claude Code\n- \\`mcp__ruv-swarm__task_orchestrate\\` - Break down and coordinate complex tasks\n\n### Monitoring Tools:\n- \\`mcp__ruv-swarm__swarm_status\\` - Monitor coordination effectiveness\n- \\`mcp__ruv-swarm__agent_list\\` - View active cognitive patterns\n- \\`mcp__ruv-swarm__agent_metrics\\` - Track coordination performance\n- \\`mcp__ruv-swarm__task_status\\` - Check workflow progress\n- \\`mcp__ruv-swarm__task_results\\` - Review coordination outcomes\n\n### Memory & Neural Tools:\n- \\`mcp__ruv-swarm__memory_usage\\` - Persistent memory across sessions\n- \\`mcp__ruv-swarm__neural_status\\` - Neural pattern effectiveness\n- \\`mcp__ruv-swarm__neural_train\\` - Improve coordination patterns\n- \\`mcp__ruv-swarm__neural_patterns\\` - Analyze thinking approaches\n\n### System Tools:\n- \\`mcp__ruv-swarm__benchmark_run\\` - Measure coordination efficiency\n- \\`mcp__ruv-swarm__features_detect\\` - Available capabilities\n- \\`mcp__ruv-swarm__swarm_monitor\\` - Real-time coordination tracking\n\n## Workflow Examples (Coordination-Focused)\n\n### Research Coordination Example\n**Context:** Claude Code needs to research a complex topic systematically\n\n**Step 1:** Set up research coordination\n- Tool: \\`mcp__ruv-swarm__swarm_init\\`\n- Parameters: \\`{\"topology\": \"mesh\", \"maxAgents\": 5, \"strategy\": \"balanced\"}\\`\n- Result: Creates a mesh topology for comprehensive exploration\n\n**Step 2:** Define research perspectives\n- Tool: \\`mcp__ruv-swarm__agent_spawn\\`\n- Parameters: \\`{\"type\": \"researcher\", \"name\": \"Literature Review\"}\\`\n- Tool: \\`mcp__ruv-swarm__agent_spawn\\`\n- Parameters: \\`{\"type\": \"analyst\", \"name\": \"Data Analysis\"}\\`\n- Result: Different cognitive patterns for Claude Code to use\n\n**Step 3:** Coordinate research execution\n- Tool: \\`mcp__ruv-swarm__task_orchestrate\\`\n- Parameters: \\`{\"task\": \"Research neural architecture search papers\", \"strategy\": \"adaptive\"}\\`\n- Result: Claude Code systematically searches, reads, and analyzes papers\n\n**What Actually Happens:**\n1. The swarm sets up a coordination framework\n2. Each agent MUST use ruv-swarm hooks for coordination:\n   - \\`npx ruv-swarm hook pre-task\\` before starting\n   - \\`npx ruv-swarm hook post-edit\\` after each file operation\n   - \\`npx ruv-swarm hook notification\\` to share decisions\n3. Claude Code uses its native Read, WebSearch, and Task tools\n4. The swarm coordinates through shared memory and hooks\n5. Results are synthesized by Claude Code with full coordination history\n\n### Development Coordination Example\n**Context:** Claude Code needs to build a complex system with multiple components\n\n**Step 1:** Set up development coordination\n- Tool: \\`mcp__ruv-swarm__swarm_init\\`\n- Parameters: \\`{\"topology\": \"hierarchical\", \"maxAgents\": 8, \"strategy\": \"specialized\"}\\`\n- Result: Hierarchical structure for organized development\n\n**Step 2:** Define development perspectives\n- Tool: \\`mcp__ruv-swarm__agent_spawn\\`\n- Parameters: \\`{\"type\": \"architect\", \"name\": \"System Design\"}\\`\n- Result: Architectural thinking pattern for Claude Code\n\n**Step 3:** Coordinate implementation\n- Tool: \\`mcp__ruv-swarm__task_orchestrate\\`\n- Parameters: \\`{\"task\": \"Implement user authentication with JWT\", \"strategy\": \"parallel\"}\\`\n- Result: Claude Code implements features using its native tools\n\n**What Actually Happens:**\n1. The swarm creates a development coordination plan\n2. Each agent coordinates using mandatory hooks:\n   - Pre-task hooks for context loading\n   - Post-edit hooks for progress tracking\n   - Memory storage for cross-agent coordination\n3. Claude Code uses Write, Edit, Bash tools for implementation\n4. Agents share progress through ruv-swarm memory\n5. All code is written by Claude Code with full coordination\n\n## Best Practices for Coordination\n\n### ‚úÖ DO:\n- Use MCP tools to coordinate Claude Code's approach to complex tasks\n- Let the swarm break down problems into manageable pieces\n- Use memory tools to maintain context across sessions\n- Monitor coordination effectiveness with status tools\n- Train neural patterns for better coordination over time\n\n### ‚ùå DON'T:\n- Expect agents to write code (Claude Code does all implementation)\n- Use MCP tools for file operations (use Claude Code's native tools)\n- Try to make agents execute bash commands (Claude Code handles this)\n- Confuse coordination with execution (MCP coordinates, Claude executes)\n\n## Memory and Persistence\n\nThe swarm provides persistent memory that helps Claude Code:\n- Remember project context across sessions\n- Track decisions and rationale\n- Maintain consistency in large projects\n- Learn from previous coordination patterns\n\n## Performance Benefits\n\nWhen using ruv-swarm coordination with Claude Code:\n- **84.8% SWE-Bench solve rate** - Better problem-solving through coordination\n- **32.3% token reduction** - Efficient task breakdown reduces redundancy\n- **2.8-4.4x speed improvement** - Parallel coordination strategies\n- **27+ neural models** - Diverse cognitive approaches\n\n## Claude Code Hooks Integration\n\nruv-swarm includes powerful hooks that automate coordination:\n\n### Pre-Operation Hooks\n- **Auto-assign agents** before file edits based on file type\n- **Validate commands** before execution for safety\n- **Prepare resources** automatically for complex operations\n- **Optimize topology** based on task complexity analysis\n- **Cache searches** for improved performance\n\n### Post-Operation Hooks  \n- **Auto-format code** using language-specific formatters\n- **Train neural patterns** from successful operations\n- **Update memory** with operation context\n- **Analyze performance** and identify bottlenecks\n- **Track token usage** for efficiency metrics\n\n### Session Management\n- **Generate summaries** at session end\n- **Persist state** across Claude Code sessions\n- **Track metrics** for continuous improvement\n- **Restore previous** session context automatically\n\n### Advanced Features (New!)\n- **üöÄ Automatic Topology Selection** - Optimal swarm structure for each task\n- **‚ö° Parallel Execution** - 2.8-4.4x speed improvements  \n- **üß† Neural Training** - Continuous learning from operations\n- **üìä Bottleneck Analysis** - Real-time performance optimization\n- **ü§ñ Smart Auto-Spawning** - Zero manual agent management\n- **üõ°Ô∏è Self-Healing Workflows** - Automatic error recovery\n- **üíæ Cross-Session Memory** - Persistent learning & context\n\n### Configuration\nHooks are pre-configured in \\`.claude/settings.json\\`. Key features:\n- Automatic agent assignment for different file types\n- Code formatting on save\n- Neural pattern learning from edits\n- Session state persistence\n- Performance tracking and optimization\n- Intelligent caching and token reduction\n\nSee \\`.claude/commands/\\` for detailed documentation on all features.\n\n## Integration Tips\n\n1. **Start Simple**: Begin with basic swarm init and single agent\n2. **Scale Gradually**: Add more agents as task complexity increases\n3. **Use Memory**: Store important decisions and context\n4. **Monitor Progress**: Regular status checks ensure effective coordination\n5. **Train Patterns**: Let neural agents learn from successful coordinations\n6. **Enable Hooks**: Use the pre-configured hooks for automation\n\n## üß† SWARM ORCHESTRATION PATTERN\n\n### You are the SWARM ORCHESTRATOR. **IMMEDIATELY SPAWN AGENTS IN PARALLEL** to execute tasks\n\n### üö® CRITICAL INSTRUCTION: You are the SWARM ORCHESTRATOR\n\n**MANDATORY**: When using swarms, you MUST:\n1. **SPAWN ALL AGENTS IN ONE BATCH** - Use multiple tool calls in a SINGLE message\n2. **EXECUTE TASKS IN PARALLEL** - Never wait for one task before starting another\n3. **USE BATCHTOOL FOR EVERYTHING** - Multiple operations = Single message with multiple tools\n4. **ALL AGENTS MUST USE COORDINATION TOOLS** - Every spawned agent MUST use ruv-swarm hooks and memory\n\n## üìã MANDATORY AGENT COORDINATION PROTOCOL\n\n### üî¥ CRITICAL: Every Agent MUST Follow This Protocol\n\nWhen you spawn an agent using the Task tool, that agent MUST:\n\n**1Ô∏è‚É£ BEFORE Starting Work:**\n\\`\\`\\`bash\n# Check previous work and load context\nnpx ruv-swarm hook pre-task --description \"[agent task]\" --auto-spawn-agents false\nnpx ruv-swarm hook session-restore --session-id \"swarm-[id]\" --load-memory true\n\\`\\`\\`\n\n**2Ô∏è‚É£ DURING Work (After EVERY Major Step):**\n\\`\\`\\`bash\n# Store progress in memory after each file operation\nnpx ruv-swarm hook post-edit --file \"[filepath]\" --memory-key \"swarm/[agent]/[step]\"\n\n# Store decisions and findings\nnpx ruv-swarm hook notification --message \"[what was done]\" --telemetry true\n\n# Check coordination with other agents\nnpx ruv-swarm hook pre-search --query \"[what to check]\" --cache-results true\n\\`\\`\\`\n\n**3Ô∏è‚É£ AFTER Completing Work:**\n\\`\\`\\`bash\n# Save all results and learnings\nnpx ruv-swarm hook post-task --task-id \"[task]\" --analyze-performance true\nnpx ruv-swarm hook session-end --export-metrics true --generate-summary true\n\\`\\`\\`\n\n### üéØ AGENT PROMPT TEMPLATE\n\nWhen spawning agents, ALWAYS include these coordination instructions:\n\n\\`\\`\\`\nYou are the [Agent Type] agent in a coordinated swarm.\n\nMANDATORY COORDINATION:\n1. START: Run \\`npx ruv-swarm hook pre-task --description \"[your task]\"\\`\n2. DURING: After EVERY file operation, run \\`npx ruv-swarm hook post-edit --file \"[file]\" --memory-key \"agent/[step]\"\\`\n3. MEMORY: Store ALL decisions using \\`npx ruv-swarm hook notification --message \"[decision]\"\\`\n4. END: Run \\`npx ruv-swarm hook post-task --task-id \"[task]\" --analyze-performance true\\`\n\nYour specific task: [detailed task description]\n\nREMEMBER: Coordinate with other agents by checking memory BEFORE making decisions!\n\\`\\`\\`\n\n### ‚ö° PARALLEL EXECUTION IS MANDATORY\n\n**THIS IS WRONG ‚ùå (Sequential - NEVER DO THIS):**\n\\`\\`\\`\nMessage 1: Initialize swarm\nMessage 2: Spawn agent 1\nMessage 3: Spawn agent 2\nMessage 4: Create file 1\nMessage 5: Create file 2\n\\`\\`\\`\n\n**THIS IS CORRECT ‚úÖ (Parallel - ALWAYS DO THIS):**\n\\`\\`\\`\nMessage 1: [BatchTool]\n  - mcp__ruv-swarm__swarm_init\n  - mcp__ruv-swarm__agent_spawn (researcher)\n  - mcp__ruv-swarm__agent_spawn (coder)\n  - mcp__ruv-swarm__agent_spawn (analyst)\n  - mcp__ruv-swarm__agent_spawn (tester)\n  - mcp__ruv-swarm__agent_spawn (coordinator)\n\nMessage 2: [BatchTool]  \n  - Write file1.js\n  - Write file2.js\n  - Write file3.js\n  - Bash mkdir commands\n  - TodoWrite updates\n\\`\\`\\`\n\n### üéØ MANDATORY SWARM PATTERN\n\nWhen given ANY complex task with swarms:\n\n\\`\\`\\`\nSTEP 1: IMMEDIATE PARALLEL SPAWN (Single Message!)\n[BatchTool]:\n  - mcp__ruv-swarm__swarm_init { topology: \"hierarchical\", maxAgents: 8, strategy: \"parallel\" }\n  - mcp__ruv-swarm__agent_spawn { type: \"architect\", name: \"System Designer\" }\n  - mcp__ruv-swarm__agent_spawn { type: \"coder\", name: \"API Developer\" }\n  - mcp__ruv-swarm__agent_spawn { type: \"coder\", name: \"Frontend Dev\" }\n  - mcp__ruv-swarm__agent_spawn { type: \"analyst\", name: \"DB Designer\" }\n  - mcp__ruv-swarm__agent_spawn { type: \"tester\", name: \"QA Engineer\" }\n  - mcp__ruv-swarm__agent_spawn { type: \"researcher\", name: \"Tech Lead\" }\n  - mcp__ruv-swarm__agent_spawn { type: \"coordinator\", name: \"PM\" }\n  - TodoWrite { todos: [multiple todos at once] }\n\nSTEP 2: PARALLEL TASK EXECUTION (Single Message!)\n[BatchTool]:\n  - mcp__ruv-swarm__task_orchestrate { task: \"main task\", strategy: \"parallel\" }\n  - mcp__ruv-swarm__memory_usage { action: \"store\", key: \"init\", value: {...} }\n  - Multiple Read operations\n  - Multiple Write operations\n  - Multiple Bash commands\n\nSTEP 3: CONTINUE PARALLEL WORK (Never Sequential!)\n\\`\\`\\`\n\n### üìä VISUAL TASK TRACKING FORMAT\n\nUse this format when displaying task progress:\n\n\\`\\`\\`\nüìä Progress Overview\n   ‚îú‚îÄ‚îÄ Total Tasks: X\n   ‚îú‚îÄ‚îÄ ‚úÖ Completed: X (X%)\n   ‚îú‚îÄ‚îÄ üîÑ In Progress: X (X%)\n   ‚îú‚îÄ‚îÄ ‚≠ï Todo: X (X%)\n   ‚îî‚îÄ‚îÄ ‚ùå Blocked: X (X%)\n\nüìã Todo (X)\n   ‚îî‚îÄ‚îÄ üî¥ 001: [Task description] [PRIORITY] ‚ñ∂\n\nüîÑ In progress (X)\n   ‚îú‚îÄ‚îÄ üü° 002: [Task description] ‚Ü≥ X deps ‚ñ∂\n   ‚îî‚îÄ‚îÄ üî¥ 003: [Task description] [PRIORITY] ‚ñ∂\n\n‚úÖ Completed (X)\n   ‚îú‚îÄ‚îÄ ‚úÖ 004: [Task description]\n   ‚îî‚îÄ‚îÄ ... (more completed tasks)\n\nPriority indicators: üî¥ HIGH/CRITICAL, üü° MEDIUM, üü¢ LOW\nDependencies: ‚Ü≥ X deps | Actionable: ‚ñ∂\n\\`\\`\\`\n\n### üéØ REAL EXAMPLE: Full-Stack App Development\n\n**Task**: \"Build a complete REST API with authentication, database, and tests\"\n\n**üö® MANDATORY APPROACH - Everything in Parallel:**\n\n\\`\\`\\`javascript\n// ‚úÖ CORRECT: SINGLE MESSAGE with ALL operations\n[BatchTool - Message 1]:\n  // Initialize and spawn ALL agents at once\n  mcp__ruv-swarm__swarm_init { topology: \"hierarchical\", maxAgents: 8, strategy: \"parallel\" }\n  mcp__ruv-swarm__agent_spawn { type: \"architect\", name: \"System Designer\" }\n  mcp__ruv-swarm__agent_spawn { type: \"coder\", name: \"API Developer\" }\n  mcp__ruv-swarm__agent_spawn { type: \"coder\", name: \"Auth Expert\" }\n  mcp__ruv-swarm__agent_spawn { type: \"analyst\", name: \"DB Designer\" }\n  mcp__ruv-swarm__agent_spawn { type: \"tester\", name: \"Test Engineer\" }\n  mcp__ruv-swarm__agent_spawn { type: \"coordinator\", name: \"Lead\" }\n  \n  // Update ALL todos at once\n  TodoWrite { todos: [\n    { id: \"design\", content: \"Design API architecture\", status: \"in_progress\", priority: \"high\" },\n    { id: \"auth\", content: \"Implement authentication\", status: \"pending\", priority: \"high\" },\n    { id: \"db\", content: \"Design database schema\", status: \"pending\", priority: \"high\" },\n    { id: \"api\", content: \"Build REST endpoints\", status: \"pending\", priority: \"high\" },\n    { id: \"tests\", content: \"Write comprehensive tests\", status: \"pending\", priority: \"medium\" }\n  ]}\n  \n  // Start orchestration\n  mcp__ruv-swarm__task_orchestrate { task: \"Build REST API\", strategy: \"parallel\" }\n  \n  // Store initial memory\n  mcp__ruv-swarm__memory_usage { action: \"store\", key: \"project/init\", value: { started: Date.now() } }\n\n[BatchTool - Message 2]:\n  // Create ALL directories at once\n  Bash(\"mkdir -p test-app/{src,tests,docs,config}\")\n  Bash(\"mkdir -p test-app/src/{models,routes,middleware,services}\")\n  Bash(\"mkdir -p test-app/tests/{unit,integration}\")\n  \n  // Write ALL base files at once\n  Write(\"test-app/package.json\", packageJsonContent)\n  Write(\"test-app/.env.example\", envContent)\n  Write(\"test-app/README.md\", readmeContent)\n  Write(\"test-app/src/server.js\", serverContent)\n  Write(\"test-app/src/config/database.js\", dbConfigContent)\n\n[BatchTool - Message 3]:\n  // Read multiple files for context\n  Read(\"test-app/package.json\")\n  Read(\"test-app/src/server.js\")\n  Read(\"test-app/.env.example\")\n  \n  // Run multiple commands\n  Bash(\"cd test-app && npm install\")\n  Bash(\"cd test-app && npm run lint\")\n  Bash(\"cd test-app && npm test\")\n\\`\\`\\`\n\n### üö´ NEVER DO THIS (Sequential = WRONG):\n\\`\\`\\`javascript\n// ‚ùå WRONG: Multiple messages, one operation each\nMessage 1: mcp__ruv-swarm__swarm_init\nMessage 2: mcp__ruv-swarm__agent_spawn (just one agent)\nMessage 3: mcp__ruv-swarm__agent_spawn (another agent)\nMessage 4: TodoWrite (single todo)\nMessage 5: Write (single file)\n// This is 5x slower and wastes swarm coordination!\n\\`\\`\\`\n\n### üîÑ MEMORY COORDINATION PATTERN\n\nEvery agent coordination step MUST use memory:\n\n\\`\\`\\`\n// After each major decision or implementation\nmcp__ruv-swarm__memory_usage\n  action: \"store\"\n  key: \"swarm-{id}/agent-{name}/{step}\"\n  value: {\n    timestamp: Date.now(),\n    decision: \"what was decided\",\n    implementation: \"what was built\",\n    nextSteps: [\"step1\", \"step2\"],\n    dependencies: [\"dep1\", \"dep2\"]\n  }\n\n// To retrieve coordination data\nmcp__ruv-swarm__memory_usage\n  action: \"retrieve\"\n  key: \"swarm-{id}/agent-{name}/{step}\"\n\n// To check all swarm progress\nmcp__ruv-swarm__memory_usage\n  action: \"list\"\n  pattern: \"swarm-{id}/*\"\n\\`\\`\\`\n\n### ‚ö° PERFORMANCE TIPS\n\n1. **Batch Everything**: Never operate on single files when multiple are needed\n2. **Parallel First**: Always think \"what can run simultaneously?\"\n3. **Memory is Key**: Use memory for ALL cross-agent coordination\n4. **Monitor Progress**: Use mcp__ruv-swarm__swarm_monitor for real-time tracking\n5. **Auto-Optimize**: Let hooks handle topology and agent selection\n\n### üé® VISUAL SWARM STATUS\n\nWhen showing swarm status, use this format:\n\n\\`\\`\\`\nüêù Swarm Status: ACTIVE\n‚îú‚îÄ‚îÄ üèóÔ∏è Topology: hierarchical\n‚îú‚îÄ‚îÄ üë• Agents: 6/8 active\n‚îú‚îÄ‚îÄ ‚ö° Mode: parallel execution\n‚îú‚îÄ‚îÄ üìä Tasks: 12 total (4 complete, 6 in-progress, 2 pending)\n‚îî‚îÄ‚îÄ üß† Memory: 15 coordination points stored\n\nAgent Activity:\n‚îú‚îÄ‚îÄ üü¢ architect: Designing database schema...\n‚îú‚îÄ‚îÄ üü¢ coder-1: Implementing auth endpoints...\n‚îú‚îÄ‚îÄ üü¢ coder-2: Building user CRUD operations...\n‚îú‚îÄ‚îÄ üü¢ analyst: Optimizing query performance...\n‚îú‚îÄ‚îÄ üü° tester: Waiting for auth completion...\n‚îî‚îÄ‚îÄ üü¢ coordinator: Monitoring progress...\n\\`\\`\\`\n\n## Support\n\n- Documentation: https://github.com/ruvnet/ruv-FANN/tree/main/ruv-swarm\n- Issues: https://github.com/ruvnet/ruv-FANN/issues\n- Examples: https://github.com/ruvnet/ruv-FANN/tree/main/ruv-swarm/examples\n\n---\n\nRemember: **ruv-swarm coordinates, Claude Code creates!** Start with \\`mcp__ruv-swarm__swarm_init\\` to enhance your development workflow.\n`;\n\n    const filePath = path.join(this.workingDir, 'CLAUDE.md');\n    await fs.writeFile(filePath, content);\n    return { file: 'CLAUDE.md', success: true };\n  }\n\n  /**\n     * Generate command documentation files in organized subdirectories\n     */\n  async generateCommandDocs() {\n    const commandsDir = path.join(this.workingDir, '.claude', 'commands');\n    await fs.mkdir(commandsDir, { recursive: true });\n\n    // Create subdirectories\n    const subdirs = ['coordination', 'monitoring', 'memory', 'workflows', 'hooks',\n      'optimization', 'analysis', 'training', 'automation'];\n    for (const subdir of subdirs) {\n      await fs.mkdir(path.join(commandsDir, subdir), { recursive: true });\n    }\n\n    const commands = {\n      // Coordination commands\n      'coordination/init.md': {\n        title: 'Initialize Coordination Framework',\n        tool: 'mcp__ruv-swarm__swarm_init',\n        params: '{\"topology\": \"mesh\", \"maxAgents\": 5, \"strategy\": \"balanced\"}',\n        description: 'Set up a coordination topology to guide Claude Code\\'s approach to complex tasks',\n        details: `This tool creates a coordination framework that helps Claude Code:\n- Break down complex problems systematically\n- Approach tasks from multiple perspectives\n- Maintain consistency across large projects\n- Work more efficiently through structured coordination\n\nRemember: This does NOT create actual coding agents. It creates a coordination pattern for Claude Code to follow.`,\n      },\n      'coordination/spawn.md': {\n        title: 'Create Cognitive Patterns',\n        tool: 'mcp__ruv-swarm__agent_spawn',\n        params: '{\"type\": \"researcher\", \"name\": \"Literature Analysis\", \"capabilities\": [\"deep-analysis\"]}',\n        description: 'Define cognitive patterns that represent different approaches Claude Code can take',\n        details: `Agent types represent thinking patterns, not actual coders:\n- **researcher**: Systematic exploration approach\n- **coder**: Implementation-focused thinking\n- **analyst**: Data-driven decision making\n- **architect**: Big-picture system design\n- **reviewer**: Quality and consistency checking\n\nThese patterns guide how Claude Code approaches different aspects of your task.`,\n      },\n      'coordination/orchestrate.md': {\n        title: 'Coordinate Task Execution',\n        tool: 'mcp__ruv-swarm__task_orchestrate',\n        params: '{\"task\": \"Implement authentication system\", \"strategy\": \"parallel\", \"priority\": \"high\"}',\n        description: 'Break down and coordinate complex tasks for systematic execution by Claude Code',\n        details: `Orchestration strategies:\n- **parallel**: Claude Code works on independent components simultaneously\n- **sequential**: Step-by-step execution for dependent tasks\n- **adaptive**: Dynamically adjusts based on task complexity\n\nThe orchestrator creates a plan that Claude Code follows using its native tools.`,\n      },\n\n      // Monitoring commands\n      'monitoring/status.md': {\n        title: 'Check Coordination Status',\n        tool: 'mcp__ruv-swarm__swarm_status',\n        params: '{\"verbose\": true}',\n        description: 'Monitor the effectiveness of current coordination patterns',\n        details: `Shows:\n- Active coordination topologies\n- Current cognitive patterns in use\n- Task breakdown and progress\n- Resource utilization for coordination\n- Overall system health`,\n      },\n      'monitoring/agents.md': {\n        title: 'List Active Patterns',\n        tool: 'mcp__ruv-swarm__agent_list',\n        params: '{\"filter\": \"active\"}',\n        description: 'View all active cognitive patterns and their current focus areas',\n        details: `Filters:\n- **all**: Show all defined patterns\n- **active**: Currently engaged patterns\n- **idle**: Available but unused patterns\n- **busy**: Patterns actively coordinating tasks`,\n      },\n\n      // Memory commands\n      'memory/usage.md': {\n        title: 'Memory Management',\n        tool: 'mcp__ruv-swarm__memory_usage',\n        params: '{\"detail\": \"detailed\"}',\n        description: 'Track persistent memory usage across Claude Code sessions',\n        details: `Memory helps Claude Code:\n- Maintain context between sessions\n- Remember project decisions\n- Track implementation patterns\n- Store coordination strategies that worked well`,\n      },\n      'memory/neural.md': {\n        title: 'Neural Pattern Training',\n        tool: 'mcp__ruv-swarm__neural_train',\n        params: '{\"iterations\": 10}',\n        description: 'Improve coordination patterns through neural network training',\n        details: `Training improves:\n- Task breakdown effectiveness\n- Coordination pattern selection\n- Resource allocation strategies\n- Overall coordination efficiency`,\n      },\n\n      // Workflow examples\n      'workflows/research.md': {\n        title: 'Research Workflow Coordination',\n        content: `# Research Workflow Coordination\n\n## Purpose\nCoordinate Claude Code's research activities for comprehensive, systematic exploration.\n\n## Step-by-Step Coordination\n\n### 1. Initialize Research Framework\n\\`\\`\\`\nTool: mcp__ruv-swarm__swarm_init\nParameters: {\"topology\": \"mesh\", \"maxAgents\": 5, \"strategy\": \"balanced\"}\n\\`\\`\\`\nCreates a mesh topology for comprehensive exploration from multiple angles.\n\n### 2. Define Research Perspectives\n\\`\\`\\`\nTool: mcp__ruv-swarm__agent_spawn\nParameters: {\"type\": \"researcher\", \"name\": \"Literature Review\"}\n\\`\\`\\`\n\\`\\`\\`\nTool: mcp__ruv-swarm__agent_spawn  \nParameters: {\"type\": \"analyst\", \"name\": \"Data Analysis\"}\n\\`\\`\\`\nSets up different analytical approaches for Claude Code to use.\n\n### 3. Execute Coordinated Research\n\\`\\`\\`\nTool: mcp__ruv-swarm__task_orchestrate\nParameters: {\"task\": \"Research modern web frameworks performance\", \"strategy\": \"adaptive\"}\n\\`\\`\\`\n\n## What Claude Code Actually Does\n1. Uses **WebSearch** tool for finding resources\n2. Uses **Read** tool for analyzing documentation\n3. Uses **Task** tool for parallel exploration\n4. Synthesizes findings using coordination patterns\n5. Stores insights in memory for future reference\n\nRemember: The swarm coordinates HOW Claude Code researches, not WHAT it finds.`,\n      },\n      'workflows/development.md': {\n        title: 'Development Workflow Coordination',\n        content: `# Development Workflow Coordination\n\n## Purpose\nStructure Claude Code's approach to complex development tasks for maximum efficiency.\n\n## Step-by-Step Coordination\n\n### 1. Initialize Development Framework\n\\`\\`\\`\nTool: mcp__ruv-swarm__swarm_init\nParameters: {\"topology\": \"hierarchical\", \"maxAgents\": 8, \"strategy\": \"specialized\"}\n\\`\\`\\`\nCreates hierarchical structure for organized, top-down development.\n\n### 2. Define Development Perspectives\n\\`\\`\\`\nTool: mcp__ruv-swarm__agent_spawn\nParameters: {\"type\": \"architect\", \"name\": \"System Design\"}\n\\`\\`\\`\n\\`\\`\\`\nTool: mcp__ruv-swarm__agent_spawn\nParameters: {\"type\": \"coder\", \"name\": \"Implementation Focus\"}\n\\`\\`\\`\nSets up architectural and implementation thinking patterns.\n\n### 3. Coordinate Implementation\n\\`\\`\\`\nTool: mcp__ruv-swarm__task_orchestrate\nParameters: {\"task\": \"Build REST API with authentication\", \"strategy\": \"parallel\", \"priority\": \"high\"}\n\\`\\`\\`\n\n## What Claude Code Actually Does\n1. Uses **Write** tool to create new files\n2. Uses **Edit/MultiEdit** tools for code modifications\n3. Uses **Bash** tool for testing and building\n4. Uses **TodoWrite** tool for task tracking\n5. Follows coordination patterns for systematic implementation\n\nRemember: All code is written by Claude Code using its native tools!`,\n      },\n\n      // Hook commands\n      'hooks/overview.md': {\n        title: 'Claude Code Hooks Overview',\n        content: `# Claude Code Hooks for ruv-swarm\n\n## Purpose\nAutomatically coordinate, format, and learn from Claude Code operations using hooks.\n\n## Available Hooks\n\n### Pre-Operation Hooks\n- **pre-edit**: Validate and assign agents before file modifications\n- **pre-bash**: Check command safety and resource requirements\n- **pre-task**: Auto-spawn agents for complex tasks\n\n### Post-Operation Hooks\n- **post-edit**: Auto-format code and train neural patterns\n- **post-bash**: Log execution and update metrics\n- **post-search**: Cache results and improve search patterns\n\n### MCP Integration Hooks\n- **mcp-initialized**: Persist swarm configuration\n- **agent-spawned**: Update agent roster\n- **task-orchestrated**: Monitor task progress\n- **neural-trained**: Save pattern improvements\n\n### Session Hooks\n- **notify**: Custom notifications with swarm status\n- **session-end**: Generate summary and save state\n- **session-restore**: Load previous session state\n\n## Configuration\nHooks are configured in \\`.claude/settings.json\\`:\n\n\\`\\`\\`json\n{\n  \"hooks\": {\n    \"PreToolUse\": [\n      {\n        \"matcher\": \"^(Write|Edit|MultiEdit)$\",\n        \"hooks\": [{\n          \"type\": \"command\",\n          \"command\": \"npx ruv-swarm hook pre-edit --file '\\${tool.params.file_path}'\"\n        }]\n      }\n    ]\n  }\n}\n\\`\\`\\`\n\n## Benefits\n- ü§ñ Automatic agent assignment based on file type\n- üé® Consistent code formatting\n- üß† Continuous neural pattern improvement\n- üíæ Cross-session memory persistence\n- üìä Performance metrics tracking\n\n## See Also\n- [Pre-Edit Hook](./pre-edit.md)\n- [Post-Edit Hook](./post-edit.md)\n- [Session End Hook](./session-end.md)`,\n      },\n      'hooks/setup.md': {\n        title: 'Setting Up Hooks',\n        content: `# Setting Up ruv-swarm Hooks\n\n## Quick Start\n\n### 1. Initialize with Hooks\n\\`\\`\\`bash\nnpx ruv-swarm init --claude --force\n\\`\\`\\`\n\nThis automatically creates:\n- \\`.claude/settings.json\\` with hook configurations\n- Hook command documentation\n- Default hook handlers\n\n### 2. Test Hook Functionality\n\\`\\`\\`bash\n# Test pre-edit hook\nnpx ruv-swarm hook pre-edit --file test.js --ensure-coordination\n\n# Test session summary\nnpx ruv-swarm hook session-end --generate-summary\n\\`\\`\\`\n\n### 3. Customize Hooks\n\nEdit \\`.claude/settings.json\\` to customize:\n\n\\`\\`\\`json\n{\n  \"hooks\": {\n    \"PreToolUse\": [\n      {\n        \"matcher\": \"^Write$\",\n        \"hooks\": [{\n          \"type\": \"command\",\n          \"command\": \"npx ruv-swarm hook custom-pre-write --file '\\${tool.params.file_path}'\"\n        }]\n      }\n    ]\n  }\n}\n\\`\\`\\`\n\n## Hook Response Format\n\nHooks return JSON with:\n- \\`continue\\`: Whether to proceed (true/false)\n- \\`reason\\`: Explanation for decision\n- \\`metadata\\`: Additional context\n\nExample blocking response:\n\\`\\`\\`json\n{\n  \"continue\": false,\n  \"reason\": \"Protected file - manual review required\",\n  \"metadata\": {\n    \"file\": \".env.production\",\n    \"protection_level\": \"high\"\n  }\n}\n\\`\\`\\`\n\n## Performance Tips\n- Keep hooks lightweight (< 100ms)\n- Use caching for repeated operations\n- Batch related operations\n- Run non-critical hooks asynchronously\n\n## Debugging Hooks\n\\`\\`\\`bash\n# Enable debug output\nexport RUV_SWARM_HOOK_DEBUG=true\n\n# Test specific hook\nnpx ruv-swarm hook pre-edit --file app.js --debug\n\\`\\`\\`\n\n## Common Patterns\n\n### Auto-Format on Save\nAlready configured by default for common file types.\n\n### Protected File Detection\n\\`\\`\\`json\n{\n  \"matcher\": \"^(Write|Edit)$\",\n  \"hooks\": [{\n    \"type\": \"command\",\n    \"command\": \"npx ruv-swarm hook check-protected --file '\\${tool.params.file_path}'\"\n  }]\n}\n\\`\\`\\`\n\n### Automatic Testing\n\\`\\`\\`json\n{\n  \"matcher\": \"^Write$\",\n  \"hooks\": [{\n    \"type\": \"command\",\n    \"command\": \"test -f '\\${tool.params.file_path%.js}.test.js' && npm test '\\${tool.params.file_path%.js}.test.js'\"\n  }]\n}\n\\`\\`\\``,\n      },\n    };\n\n    const createdFiles = [];\n\n    // Generate command files\n    for (const [filepath, config] of Object.entries(commands)) {\n      let content;\n\n      if (config.content) {\n        // Use provided content for workflow files\n        ({ content } = config);\n      } else {\n        // Generate content for tool documentation\n        content = `# ${config.title}\n\n## üéØ Key Principle\n**This tool coordinates Claude Code's actions. It does NOT write code or create content.**\n\n## MCP Tool Usage in Claude Code\n\n**Tool:** \\`${config.tool}\\`\n\n## Parameters\n\\`\\`\\`json\n${config.params}\n\\`\\`\\`\n\n## Description\n${config.description}\n\n## Details\n${config.details}\n\n## Example Usage\n\n**In Claude Code:**\n1. Use the tool: \\`${config.tool}\\`\n2. With parameters: \\`${config.params}\\`\n3. Claude Code then executes the coordinated plan using its native tools\n\n## Important Reminders\n- ‚úÖ This tool provides coordination and structure\n- ‚úÖ Claude Code performs all actual implementation\n- ‚ùå The tool does NOT write code\n- ‚ùå The tool does NOT access files directly\n- ‚ùå The tool does NOT execute commands\n\n## See Also\n- Main documentation: /claude.md\n- Other commands in this category\n- Workflow examples in /workflows/\n`;\n      }\n\n      const filePath = path.join(commandsDir, filepath);\n      await fs.writeFile(filePath, content);\n      createdFiles.push(filepath);\n    }\n\n    return { files: createdFiles, success: true };\n  }\n\n  /**\n     * Generate settings.json with hook configurations\n     */\n  async generateSettingsJson() {\n    const settings = {\n      env: {\n        RUV_SWARM_AUTO_COMMIT: 'false',\n        RUV_SWARM_AUTO_PUSH: 'false',\n        RUV_SWARM_HOOKS_ENABLED: 'false',\n        RUV_SWARM_TELEMETRY_ENABLED: 'true',\n        RUV_SWARM_REMOTE_EXECUTION: 'true',\n      },\n      permissions: {\n        allow: [\n          'Bash(npx ruv-swarm *)',\n          'Bash(npm run lint)',\n          'Bash(npm run test:*)',\n          'Bash(npm test *)',\n          'Bash(git status)',\n          'Bash(git diff *)',\n          'Bash(git log *)',\n          'Bash(git add *)',\n          'Bash(git commit *)',\n          'Bash(git push)',\n          'Bash(git config *)',\n          'Bash(node *)',\n          'Bash(which *)',\n          'Bash(pwd)',\n          'Bash(ls *)',\n        ],\n        deny: [\n          'Bash(rm -rf /)',\n          'Bash(curl * | bash)',\n          'Bash(wget * | sh)',\n          'Bash(eval *)',\n        ],\n      },\n      hooks: {},\n      mcpServers: {\n        'ruv-swarm': {\n          command: 'npx',\n          args: ['ruv-swarm', 'mcp', 'start'],\n          env: {\n            RUV_SWARM_HOOKS_ENABLED: 'false',\n            RUV_SWARM_TELEMETRY_ENABLED: 'true',\n            RUV_SWARM_REMOTE_READY: 'true',\n          },\n        },\n      },\n      includeCoAuthoredBy: true,\n    };\n\n    const filePath = path.join(this.workingDir, '.claude', 'settings.json');\n    await fs.mkdir(path.dirname(filePath), { recursive: true });\n    await fs.writeFile(filePath, JSON.stringify(settings, null, 2));\n\n    return { file: '.claude/settings.json', success: true };\n  }\n\n  /**\n     * Generate all documentation files\n     */\n  async generateAll() {\n    console.log('üìö Generating Claude Code documentation...');\n\n    try {\n      const results = {\n        claudeMd: await this.generateClaudeMd(),\n        commands: await this.generateCommandDocs(),\n        advancedCommands: await this.advancedGenerator.generateAdvancedCommands(),\n        settings: await this.generateSettingsJson(),\n        success: true,\n      };\n\n      const totalCommands = results.commands.files.length + results.advancedCommands.files.length;\n\n      console.log('‚úÖ Documentation generated successfully');\n      console.log('   - CLAUDE.md');\n      console.log('   - .claude/settings.json (with enhanced hooks)');\n      console.log(`   - .claude/commands/ directory with ${ totalCommands } files`);\n      console.log(`     ‚Ä¢ Basic commands: ${ results.commands.files.length}`);\n      console.log(`     ‚Ä¢ Advanced optimization: ${ results.advancedCommands.files.length}`);\n\n      return results;\n    } catch (error) {\n      console.error('‚ùå Failed to generate documentation:', error.message);\n      throw error;\n    }\n  }\n}\n\nexport { ClaudeDocsGenerator };"],"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A;QACM,CAAC;QAED;QACA,uBAAuB,EAAE;UACvBJ,KAAK,EAAE,gCAAgC;UACvCd,OAAO,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACM,CAAC;QACD,0BAA0B,EAAE;UAC1Bc,KAAK,EAAE,mCAAmC;UAC1Cd,OAAO,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACM,CAAC;QAED;QACA,mBAAmB,EAAE;UACnBc,KAAK,EAAE,4BAA4B;UACnCd,OAAO,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACM,CAAC;QACD,gBAAgB,EAAE;UAChBc,KAAK,EAAE,kBAAkB;UACzBd,OAAO,EAAE;AACjmB,YAAY;MAAA;MAAA,CAAAxD,cAAA,GAAA8B,CAAA,QAAG,EAAE;;MAEvB;MAAA9B,cAAA,GAAA8B,CAAA;MACA,KAAK,MAAM,CAAC2B,QAAQ,EAAEC,MAAM,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACV,QAAQ,CAAC,EAAE;QACzD,IAAIb,OAAO;QAAC;QAAArC,cAAA,GAAA8B,CAAA;QAEZ,IAAI4B,MAAM,CAACrB,OAAO,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","ignoreList":[]}