f900e916797252f853b8cec46a1b9848
/* istanbul ignore next */
function cov_20k37f4kwb() {
  var path = "/workspaces/ruv-FANN/ruv-swarm/npm/src/github-coordinator/gh-cli-coordinator.js";
  var hash = "e650f0da8cd597057ee181cf269fae5e7df71f3f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/ruv-FANN/ruv-swarm/npm/src/github-coordinator/gh-cli-coordinator.js",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 21
        },
        end: {
          line: 6,
          column: 45
        }
      },
      "1": {
        start: {
          line: 7,
          column: 11
        },
        end: {
          line: 7,
          column: 33
        }
      },
      "2": {
        start: {
          line: 8,
          column: 13
        },
        end: {
          line: 8,
          column: 28
        }
      },
      "3": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 42
        }
      },
      "4": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 19,
          column: 6
        }
      },
      "5": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 21,
          column: 19
        }
      },
      "6": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 22,
          column: 22
        }
      },
      "7": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 31,
          column: 5
        }
      },
      "8": {
        start: {
          line: 28,
          column: 6
        },
        end: {
          line: 28,
          column: 52
        }
      },
      "9": {
        start: {
          line: 30,
          column: 6
        },
        end: {
          line: 30,
          column: 99
        }
      },
      "10": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 31
        }
      },
      "11": {
        start: {
          line: 38,
          column: 20
        },
        end: {
          line: 38,
          column: 52
        }
      },
      "12": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 49
        }
      },
      "13": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 41,
          column: 47
        }
      },
      "14": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 56,
          column: 7
        }
      },
      "15": {
        start: {
          line: 63,
          column: 14
        },
        end: {
          line: 63,
          column: 137
        }
      },
      "16": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 67,
          column: 5
        }
      },
      "17": {
        start: {
          line: 66,
          column: 6
        },
        end: {
          line: 66,
          column: 43
        }
      },
      "18": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 70,
          column: 5
        }
      },
      "19": {
        start: {
          line: 69,
          column: 6
        },
        end: {
          line: 69,
          column: 41
        }
      },
      "20": {
        start: {
          line: 72,
          column: 19
        },
        end: {
          line: 72,
          column: 54
        }
      },
      "21": {
        start: {
          line: 73,
          column: 19
        },
        end: {
          line: 73,
          column: 37
        }
      },
      "22": {
        start: {
          line: 76,
          column: 28
        },
        end: {
          line: 83,
          column: 6
        }
      },
      "23": {
        start: {
          line: 78,
          column: 28
        },
        end: {
          line: 78,
          column: 94
        }
      },
      "24": {
        start: {
          line: 78,
          column: 51
        },
        end: {
          line: 78,
          column: 93
        }
      },
      "25": {
        start: {
          line: 80,
          column: 25
        },
        end: {
          line: 80,
          column: 51
        }
      },
      "26": {
        start: {
          line: 82,
          column: 6
        },
        end: {
          line: 82,
          column: 43
        }
      },
      "27": {
        start: {
          line: 85,
          column: 4
        },
        end: {
          line: 85,
          column: 27
        }
      },
      "28": {
        start: {
          line: 92,
          column: 4
        },
        end: {
          line: 111,
          column: 5
        }
      },
      "29": {
        start: {
          line: 94,
          column: 20
        },
        end: {
          line: 94,
          column: 58
        }
      },
      "30": {
        start: {
          line: 95,
          column: 6
        },
        end: {
          line: 95,
          column: 139
        }
      },
      "31": {
        start: {
          line: 98,
          column: 22
        },
        end: {
          line: 98,
          column: 165
        }
      },
      "32": {
        start: {
          line: 99,
          column: 6
        },
        end: {
          line: 99,
          column: 139
        }
      },
      "33": {
        start: {
          line: 102,
          column: 6
        },
        end: {
          line: 105,
          column: 35
        }
      },
      "34": {
        start: {
          line: 107,
          column: 6
        },
        end: {
          line: 107,
          column: 18
        }
      },
      "35": {
        start: {
          line: 109,
          column: 6
        },
        end: {
          line: 109,
          column: 75
        }
      },
      "36": {
        start: {
          line: 110,
          column: 6
        },
        end: {
          line: 110,
          column: 19
        }
      },
      "37": {
        start: {
          line: 118,
          column: 4
        },
        end: {
          line: 127,
          column: 5
        }
      },
      "38": {
        start: {
          line: 119,
          column: 20
        },
        end: {
          line: 119,
          column: 58
        }
      },
      "39": {
        start: {
          line: 120,
          column: 6
        },
        end: {
          line: 120,
          column: 142
        }
      },
      "40": {
        start: {
          line: 122,
          column: 6
        },
        end: {
          line: 122,
          column: 89
        }
      },
      "41": {
        start: {
          line: 123,
          column: 6
        },
        end: {
          line: 123,
          column: 18
        }
      },
      "42": {
        start: {
          line: 125,
          column: 6
        },
        end: {
          line: 125,
          column: 77
        }
      },
      "43": {
        start: {
          line: 126,
          column: 6
        },
        end: {
          line: 126,
          column: 19
        }
      },
      "44": {
        start: {
          line: 134,
          column: 4
        },
        end: {
          line: 141,
          column: 5
        }
      },
      "45": {
        start: {
          line: 135,
          column: 22
        },
        end: {
          line: 135,
          column: 82
        }
      },
      "46": {
        start: {
          line: 136,
          column: 6
        },
        end: {
          line: 136,
          column: 139
        }
      },
      "47": {
        start: {
          line: 137,
          column: 6
        },
        end: {
          line: 137,
          column: 18
        }
      },
      "48": {
        start: {
          line: 139,
          column: 6
        },
        end: {
          line: 139,
          column: 76
        }
      },
      "49": {
        start: {
          line: 140,
          column: 6
        },
        end: {
          line: 140,
          column: 19
        }
      },
      "50": {
        start: {
          line: 148,
          column: 19
        },
        end: {
          line: 148,
          column: 51
        }
      },
      "51": {
        start: {
          line: 151,
          column: 30
        },
        end: {
          line: 154,
          column: 5
        }
      },
      "52": {
        start: {
          line: 156,
          column: 27
        },
        end: {
          line: 156,
          column: 59
        }
      },
      "53": {
        start: {
          line: 157,
          column: 4
        },
        end: {
          line: 157,
          column: 83
        }
      },
      "54": {
        start: {
          line: 160,
          column: 4
        },
        end: {
          line: 181,
          column: 5
        }
      },
      "55": {
        start: {
          line: 161,
          column: 6
        },
        end: {
          line: 161,
          column: 65
        }
      },
      "56": {
        start: {
          line: 162,
          column: 6
        },
        end: {
          line: 162,
          column: 65
        }
      },
      "57": {
        start: {
          line: 163,
          column: 6
        },
        end: {
          line: 163,
          column: 85
        }
      },
      "58": {
        start: {
          line: 164,
          column: 6
        },
        end: {
          line: 164,
          column: 65
        }
      },
      "59": {
        start: {
          line: 166,
          column: 21
        },
        end: {
          line: 173,
          column: 56
        }
      },
      "60": {
        start: {
          line: 171,
          column: 23
        },
        end: {
          line: 171,
          column: 77
        }
      },
      "61": {
        start: {
          line: 175,
          column: 21
        },
        end: {
          line: 175,
          column: 203
        }
      },
      "62": {
        start: {
          line: 177,
          column: 6
        },
        end: {
          line: 177,
          column: 27
        }
      },
      "63": {
        start: {
          line: 179,
          column: 6
        },
        end: {
          line: 179,
          column: 70
        }
      },
      "64": {
        start: {
          line: 180,
          column: 6
        },
        end: {
          line: 180,
          column: 18
        }
      },
      "65": {
        start: {
          line: 189,
          column: 16
        },
        end: {
          line: 189,
          column: 128
        }
      },
      "66": {
        start: {
          line: 190,
          column: 19
        },
        end: {
          line: 190,
          column: 54
        }
      },
      "67": {
        start: {
          line: 191,
          column: 19
        },
        end: {
          line: 191,
          column: 37
        }
      },
      "68": {
        start: {
          line: 193,
          column: 23
        },
        end: {
          line: 195,
          column: 5
        }
      },
      "69": {
        start: {
          line: 194,
          column: 6
        },
        end: {
          line: 194,
          column: 72
        }
      },
      "70": {
        start: {
          line: 194,
          column: 29
        },
        end: {
          line: 194,
          column: 71
        }
      },
      "71": {
        start: {
          line: 198,
          column: 24
        },
        end: {
          line: 198,
          column: 26
        }
      },
      "72": {
        start: {
          line: 199,
          column: 4
        },
        end: {
          line: 211,
          column: 7
        }
      },
      "73": {
        start: {
          line: 200,
          column: 25
        },
        end: {
          line: 200,
          column: 91
        }
      },
      "74": {
        start: {
          line: 200,
          column: 48
        },
        end: {
          line: 200,
          column: 90
        }
      },
      "75": {
        start: {
          line: 201,
          column: 6
        },
        end: {
          line: 210,
          column: 7
        }
      },
      "76": {
        start: {
          line: 202,
          column: 24
        },
        end: {
          line: 202,
          column: 76
        }
      },
      "77": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 205,
          column: 9
        }
      },
      "78": {
        start: {
          line: 204,
          column: 10
        },
        end: {
          line: 204,
          column: 36
        }
      },
      "79": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 209,
          column: 11
        }
      },
      "80": {
        start: {
          line: 213,
          column: 4
        },
        end: {
          line: 218,
          column: 6
        }
      },
      "81": {
        start: {
          line: 225,
          column: 23
        },
        end: {
          line: 228,
          column: 12
        }
      },
      "82": {
        start: {
          line: 230,
          column: 4
        },
        end: {
          line: 232,
          column: 5
        }
      },
      "83": {
        start: {
          line: 231,
          column: 6
        },
        end: {
          line: 231,
          column: 63
        }
      },
      "84": {
        start: {
          line: 234,
          column: 4
        },
        end: {
          line: 234,
          column: 29
        }
      },
      "85": {
        start: {
          line: 260,
          column: 0
        },
        end: {
          line: 260,
          column: 31
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 2
          },
          end: {
            line: 12,
            column: 3
          }
        },
        loc: {
          start: {
            line: 12,
            column: 28
          },
          end: {
            line: 23,
            column: 3
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 25,
            column: 2
          },
          end: {
            line: 25,
            column: 3
          }
        },
        loc: {
          start: {
            line: 25,
            column: 21
          },
          end: {
            line: 35,
            column: 3
          }
        },
        line: 25
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 37,
            column: 2
          },
          end: {
            line: 37,
            column: 3
          }
        },
        loc: {
          start: {
            line: 37,
            column: 24
          },
          end: {
            line: 57,
            column: 3
          }
        },
        line: 37
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 62,
            column: 2
          },
          end: {
            line: 62,
            column: 3
          }
        },
        loc: {
          start: {
            line: 62,
            column: 40
          },
          end: {
            line: 86,
            column: 3
          }
        },
        line: 62
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 76,
            column: 42
          },
          end: {
            line: 76,
            column: 43
          }
        },
        loc: {
          start: {
            line: 76,
            column: 51
          },
          end: {
            line: 83,
            column: 5
          }
        },
        line: 76
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 78,
            column: 46
          },
          end: {
            line: 78,
            column: 47
          }
        },
        loc: {
          start: {
            line: 78,
            column: 51
          },
          end: {
            line: 78,
            column: 93
          }
        },
        line: 78
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 91,
            column: 2
          },
          end: {
            line: 91,
            column: 3
          }
        },
        loc: {
          start: {
            line: 91,
            column: 40
          },
          end: {
            line: 112,
            column: 3
          }
        },
        line: 91
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 117,
            column: 2
          },
          end: {
            line: 117,
            column: 3
          }
        },
        loc: {
          start: {
            line: 117,
            column: 42
          },
          end: {
            line: 128,
            column: 3
          }
        },
        line: 117
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 133,
            column: 2
          },
          end: {
            line: 133,
            column: 3
          }
        },
        loc: {
          start: {
            line: 133,
            column: 58
          },
          end: {
            line: 142,
            column: 3
          }
        },
        line: 133
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 147,
            column: 2
          },
          end: {
            line: 147,
            column: 3
          }
        },
        loc: {
          start: {
            line: 147,
            column: 40
          },
          end: {
            line: 182,
            column: 3
          }
        },
        line: 147
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 171,
            column: 18
          },
          end: {
            line: 171,
            column: 19
          }
        },
        loc: {
          start: {
            line: 171,
            column: 23
          },
          end: {
            line: 171,
            column: 77
          }
        },
        line: 171
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 187,
            column: 2
          },
          end: {
            line: 187,
            column: 3
          }
        },
        loc: {
          start: {
            line: 187,
            column: 32
          },
          end: {
            line: 219,
            column: 3
          }
        },
        line: 187
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 193,
            column: 37
          },
          end: {
            line: 193,
            column: 38
          }
        },
        loc: {
          start: {
            line: 194,
            column: 6
          },
          end: {
            line: 194,
            column: 72
          }
        },
        line: 194
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 194,
            column: 24
          },
          end: {
            line: 194,
            column: 25
          }
        },
        loc: {
          start: {
            line: 194,
            column: 29
          },
          end: {
            line: 194,
            column: 71
          }
        },
        line: 194
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 199,
            column: 23
          },
          end: {
            line: 199,
            column: 24
          }
        },
        loc: {
          start: {
            line: 199,
            column: 32
          },
          end: {
            line: 211,
            column: 5
          }
        },
        line: 199
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 200,
            column: 43
          },
          end: {
            line: 200,
            column: 44
          }
        },
        loc: {
          start: {
            line: 200,
            column: 48
          },
          end: {
            line: 200,
            column: 90
          }
        },
        line: 200
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 224,
            column: 2
          },
          end: {
            line: 224,
            column: 3
          }
        },
        loc: {
          start: {
            line: 224,
            column: 28
          },
          end: {
            line: 235,
            column: 3
          }
        },
        line: 224
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 14
          },
          end: {
            line: 12,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 12,
            column: 24
          },
          end: {
            line: 12,
            column: 26
          }
        }],
        line: 12
      },
      "1": {
        loc: {
          start: {
            line: 14,
            column: 13
          },
          end: {
            line: 14,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 14,
            column: 13
          },
          end: {
            line: 14,
            column: 26
          }
        }, {
          start: {
            line: 14,
            column: 30
          },
          end: {
            line: 14,
            column: 54
          }
        }],
        line: 14
      },
      "2": {
        loc: {
          start: {
            line: 15,
            column: 12
          },
          end: {
            line: 15,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 12
          },
          end: {
            line: 15,
            column: 24
          }
        }, {
          start: {
            line: 15,
            column: 28
          },
          end: {
            line: 15,
            column: 51
          }
        }],
        line: 15
      },
      "3": {
        loc: {
          start: {
            line: 16,
            column: 14
          },
          end: {
            line: 16,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 14
          },
          end: {
            line: 16,
            column: 28
          }
        }, {
          start: {
            line: 16,
            column: 32
          },
          end: {
            line: 16,
            column: 93
          }
        }],
        line: 16
      },
      "4": {
        loc: {
          start: {
            line: 17,
            column: 19
          },
          end: {
            line: 17,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 19
          },
          end: {
            line: 17,
            column: 38
          }
        }, {
          start: {
            line: 17,
            column: 42
          },
          end: {
            line: 17,
            column: 50
          }
        }],
        line: 17
      },
      "5": {
        loc: {
          start: {
            line: 62,
            column: 26
          },
          end: {
            line: 62,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 62,
            column: 36
          },
          end: {
            line: 62,
            column: 38
          }
        }],
        line: 62
      },
      "6": {
        loc: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "7": {
        loc: {
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "8": {
        loc: {
          start: {
            line: 82,
            column: 13
          },
          end: {
            line: 82,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 13
          },
          end: {
            line: 82,
            column: 27
          }
        }, {
          start: {
            line: 82,
            column: 31
          },
          end: {
            line: 82,
            column: 42
          }
        }],
        line: 82
      },
      "9": {
        loc: {
          start: {
            line: 201,
            column: 6
          },
          end: {
            line: 210,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 6
          },
          end: {
            line: 210,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "10": {
        loc: {
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 205,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 205,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 203
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e650f0da8cd597057ee181cf269fae5e7df71f3f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_20k37f4kwb = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_20k37f4kwb();
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * GitHub CLI-based Coordinator for ruv-swarm
 * Uses gh CLI for all GitHub operations - simpler and more reliable
 */

const {
  execSync
} =
/* istanbul ignore next */
(cov_20k37f4kwb().s[0]++, require('child_process'));
const fs =
/* istanbul ignore next */
(cov_20k37f4kwb().s[1]++, require('fs').promises);
const path =
/* istanbul ignore next */
(cov_20k37f4kwb().s[2]++, require('path'));
const Database =
/* istanbul ignore next */
(cov_20k37f4kwb().s[3]++, require('better-sqlite3'));
class GHCoordinator {
  constructor(options =
  /* istanbul ignore next */
  (cov_20k37f4kwb().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_20k37f4kwb().f[0]++;
    cov_20k37f4kwb().s[4]++;
    this.config =
    /* istanbul ignore next */
    _objectSpread({
      owner:
      /* istanbul ignore next */
      (cov_20k37f4kwb().b[1][0]++, options.owner) ||
      /* istanbul ignore next */
      (cov_20k37f4kwb().b[1][1]++, process.env.GITHUB_OWNER),
      repo:
      /* istanbul ignore next */
      (cov_20k37f4kwb().b[2][0]++, options.repo) ||
      /* istanbul ignore next */
      (cov_20k37f4kwb().b[2][1]++, process.env.GITHUB_REPO),
      dbPath:
      /* istanbul ignore next */
      (cov_20k37f4kwb().b[3][0]++, options.dbPath) ||
      /* istanbul ignore next */
      (cov_20k37f4kwb().b[3][1]++, path.join(__dirname, '..', '..', 'data', 'gh-coordinator.db')),
      labelPrefix:
      /* istanbul ignore next */
      (cov_20k37f4kwb().b[4][0]++, options.labelPrefix) ||
      /* istanbul ignore next */
      (cov_20k37f4kwb().b[4][1]++, 'swarm-')
    }, options);
    /* istanbul ignore next */
    cov_20k37f4kwb().s[5]++;
    this.db = null;
    /* istanbul ignore next */
    cov_20k37f4kwb().s[6]++;
    this.initialize();
  }
  initialize() {
    /* istanbul ignore next */
    var _this = this;
    return _asyncToGenerator(function* () {
      cov_20k37f4kwb().f[1]++;
      cov_20k37f4kwb().s[7]++;
      // Check if gh CLI is available
      try {
        /* istanbul ignore next */
        cov_20k37f4kwb().s[8]++;
        execSync('gh --version', {
          stdio: 'ignore'
        });
      } catch {
        /* istanbul ignore next */
        cov_20k37f4kwb().s[9]++;
        throw new Error('GitHub CLI (gh) is not installed. Install it from https://cli.github.com/');
      }

      // Setup database for local coordination state
      cov_20k37f4kwb().s[10]++;
      /* istanbul ignore next */
      yield _this.setupDatabase();
    })();
  }
  setupDatabase() {
    /* istanbul ignore next */
    var _this2 = this;
    return _asyncToGenerator(function* () {
      cov_20k37f4kwb().f[2]++;
      const dataDir =
      /* istanbul ignore next */
      (cov_20k37f4kwb().s[11]++, path.dirname(_this2.config.dbPath));
      cov_20k37f4kwb().s[12]++;
      /* istanbul ignore next */
      yield fs.mkdir(dataDir, {
        recursive: true
      });
      cov_20k37f4kwb().s[13]++;
      _this2.db = new Database(_this2.config.dbPath);
      cov_20k37f4kwb().s[14]++;
      _this2.db.exec(`
      CREATE TABLE IF NOT EXISTS swarm_tasks (
        issue_number INTEGER PRIMARY KEY,
        swarm_id TEXT,
        locked_at INTEGER,
        lock_expires INTEGER
      );

      CREATE TABLE IF NOT EXISTS swarm_registry (
        swarm_id TEXT PRIMARY KEY,
        user TEXT,
        capabilities TEXT,
        last_seen INTEGER DEFAULT (strftime('%s', 'now'))
      );
    `);
    })();
  }

  /**
   * Get available tasks from GitHub issues
   */
  getAvailableTasks() {
    /* istanbul ignore next */
    var _this3 = this;
    return _asyncToGenerator(function* (filters =
    /* istanbul ignore next */
    (cov_20k37f4kwb().b[5][0]++, {})) {
      cov_20k37f4kwb().f[3]++;
      let cmd =
      /* istanbul ignore next */
      (cov_20k37f4kwb().s[15]++, `gh issue list --repo ${_this3.config.owner}/${_this3.config.repo} --json number,title,labels,assignees,state,body --limit 100`);
      cov_20k37f4kwb().s[16]++;
      if (filters.label) {
        /* istanbul ignore next */
        cov_20k37f4kwb().b[6][0]++;
        cov_20k37f4kwb().s[17]++;
        cmd += ` --label "${filters.label}"`;
      } else
      /* istanbul ignore next */
      {
        cov_20k37f4kwb().b[6][1]++;
      }
      cov_20k37f4kwb().s[18]++;
      if (filters.state) {
        /* istanbul ignore next */
        cov_20k37f4kwb().b[7][0]++;
        cov_20k37f4kwb().s[19]++;
        cmd += ` --state ${filters.state}`;
      } else
      /* istanbul ignore next */
      {
        cov_20k37f4kwb().b[7][1]++;
      }
      const output =
      /* istanbul ignore next */
      (cov_20k37f4kwb().s[20]++, execSync(cmd, {
        encoding: 'utf8'
      }));
      const issues =
      /* istanbul ignore next */
      (cov_20k37f4kwb().s[21]++, JSON.parse(output));

      // Filter out already assigned tasks
      const availableIssues =
      /* istanbul ignore next */
      (cov_20k37f4kwb().s[22]++, issues.filter(issue => {
        /* istanbul ignore next */
        cov_20k37f4kwb().f[4]++;
        // Check if issue has swarm assignment label
        const hasSwarmLabel =
        /* istanbul ignore next */
        (cov_20k37f4kwb().s[23]++, issue.labels.some(l => {
          /* istanbul ignore next */
          cov_20k37f4kwb().f[5]++;
          cov_20k37f4kwb().s[24]++;
          return l.name.startsWith(_this3.config.labelPrefix);
        }));
        // Check if issue is assigned
        const isAssigned =
        /* istanbul ignore next */
        (cov_20k37f4kwb().s[25]++, issue.assignees.length > 0);
        /* istanbul ignore next */
        cov_20k37f4kwb().s[26]++;
        return /* istanbul ignore next */(cov_20k37f4kwb().b[8][0]++, !hasSwarmLabel) &&
        /* istanbul ignore next */
        (cov_20k37f4kwb().b[8][1]++, !isAssigned);
      }));
      cov_20k37f4kwb().s[27]++;
      return availableIssues;
    }).apply(this, arguments);
  }

  /**
   * Claim a task for a swarm
   */
  claimTask(swarmId, issueNumber) {
    /* istanbul ignore next */
    var _this4 = this;
    return _asyncToGenerator(function* () {
      cov_20k37f4kwb().f[6]++;
      cov_20k37f4kwb().s[28]++;
      try {
        // Add swarm label to issue
        const label =
        /* istanbul ignore next */
        (cov_20k37f4kwb().s[29]++, `${_this4.config.labelPrefix}${swarmId}`);
        /* istanbul ignore next */
        cov_20k37f4kwb().s[30]++;
        execSync(`gh issue edit ${issueNumber} --repo ${_this4.config.owner}/${_this4.config.repo} --add-label "${label}"`, {
          stdio: 'ignore'
        });

        // Add comment to issue
        const comment =
        /* istanbul ignore next */
        (cov_20k37f4kwb().s[31]++, `🐝 Task claimed by swarm: ${swarmId}\n\nThis task is being worked on by an automated swarm agent. Updates will be posted as progress is made.`);
        /* istanbul ignore next */
        cov_20k37f4kwb().s[32]++;
        execSync(`gh issue comment ${issueNumber} --repo ${_this4.config.owner}/${_this4.config.repo} --body "${comment}"`, {
          stdio: 'ignore'
        });

        // Record in local database
        /* istanbul ignore next */
        cov_20k37f4kwb().s[33]++;
        _this4.db.prepare(`
        INSERT OR REPLACE INTO swarm_tasks (issue_number, swarm_id, locked_at, lock_expires)
        VALUES (?, ?, strftime('%s', 'now'), strftime('%s', 'now', '+1 hour'))
      `).run(issueNumber, swarmId);
        /* istanbul ignore next */
        cov_20k37f4kwb().s[34]++;
        return true;
      } catch (error) {
        /* istanbul ignore next */
        cov_20k37f4kwb().s[35]++;
        console.error(`Failed to claim task ${issueNumber}:`, error.message);
        /* istanbul ignore next */
        cov_20k37f4kwb().s[36]++;
        return false;
      }
    })();
  }

  /**
   * Release a task
   */
  releaseTask(swarmId, issueNumber) {
    /* istanbul ignore next */
    var _this5 = this;
    return _asyncToGenerator(function* () {
      cov_20k37f4kwb().f[7]++;
      cov_20k37f4kwb().s[37]++;
      try {
        const label =
        /* istanbul ignore next */
        (cov_20k37f4kwb().s[38]++, `${_this5.config.labelPrefix}${swarmId}`);
        /* istanbul ignore next */
        cov_20k37f4kwb().s[39]++;
        execSync(`gh issue edit ${issueNumber} --repo ${_this5.config.owner}/${_this5.config.repo} --remove-label "${label}"`, {
          stdio: 'ignore'
        });
        /* istanbul ignore next */
        cov_20k37f4kwb().s[40]++;
        _this5.db.prepare('DELETE FROM swarm_tasks WHERE issue_number = ?').run(issueNumber);
        /* istanbul ignore next */
        cov_20k37f4kwb().s[41]++;
        return true;
      } catch (error) {
        /* istanbul ignore next */
        cov_20k37f4kwb().s[42]++;
        console.error(`Failed to release task ${issueNumber}:`, error.message);
        /* istanbul ignore next */
        cov_20k37f4kwb().s[43]++;
        return false;
      }
    })();
  }

  /**
   * Update task progress
   */
  updateTaskProgress(swarmId, issueNumber, message) {
    /* istanbul ignore next */
    var _this6 = this;
    return _asyncToGenerator(function* () {
      cov_20k37f4kwb().f[8]++;
      cov_20k37f4kwb().s[44]++;
      try {
        const comment =
        /* istanbul ignore next */
        (cov_20k37f4kwb().s[45]++, `🔄 **Progress Update from swarm ${swarmId}**\n\n${message}`);
        /* istanbul ignore next */
        cov_20k37f4kwb().s[46]++;
        execSync(`gh issue comment ${issueNumber} --repo ${_this6.config.owner}/${_this6.config.repo} --body "${comment}"`, {
          stdio: 'ignore'
        });
        /* istanbul ignore next */
        cov_20k37f4kwb().s[47]++;
        return true;
      } catch (error) {
        /* istanbul ignore next */
        cov_20k37f4kwb().s[48]++;
        console.error(`Failed to update task ${issueNumber}:`, error.message);
        /* istanbul ignore next */
        cov_20k37f4kwb().s[49]++;
        return false;
      }
    })();
  }

  /**
   * Create a task allocation PR
   */
  createAllocationPR(allocations) {
    /* istanbul ignore next */
    var _this7 = this;
    return _asyncToGenerator(function* () {
      cov_20k37f4kwb().f[9]++;
      const branch =
      /* istanbul ignore next */
      (cov_20k37f4kwb().s[50]++, `swarm-allocation-${Date.now()}`);

      // Create allocation file
      const allocationContent =
      /* istanbul ignore next */
      (cov_20k37f4kwb().s[51]++, {
        timestamp: new Date().toISOString(),
        allocations
      });
      const allocationPath =
      /* istanbul ignore next */
      (cov_20k37f4kwb().s[52]++, '.github/swarm-allocations.json');
      cov_20k37f4kwb().s[53]++;
      /* istanbul ignore next */
      yield fs.writeFile(allocationPath, JSON.stringify(allocationContent, null, 2));

      // Create PR using gh CLI
      cov_20k37f4kwb().s[54]++;
      try {
        /* istanbul ignore next */
        cov_20k37f4kwb().s[55]++;
        execSync(`git checkout -b ${branch}`, {
          stdio: 'ignore'
        });
        /* istanbul ignore next */
        cov_20k37f4kwb().s[56]++;
        execSync(`git add ${allocationPath}`, {
          stdio: 'ignore'
        });
        /* istanbul ignore next */
        cov_20k37f4kwb().s[57]++;
        execSync('git commit -m "Update swarm task allocations"', {
          stdio: 'ignore'
        });
        /* istanbul ignore next */
        cov_20k37f4kwb().s[58]++;
        execSync(`git push origin ${branch}`, {
          stdio: 'ignore'
        });
        const prBody =
        /* istanbul ignore next */
        (cov_20k37f4kwb().s[59]++, `## Swarm Task Allocation Update

This PR updates the task allocation for active swarms.

### Allocations:
${allocations.map(a => {
          /* istanbul ignore next */
          cov_20k37f4kwb().f[10]++;
          cov_20k37f4kwb().s[60]++;
          return `- Issue #${a.issue}: Assigned to swarm ${a.swarm_id}`;
        }).join('\n')}

This is an automated update from the swarm coordinator.`);
        const output =
        /* istanbul ignore next */
        (cov_20k37f4kwb().s[61]++, execSync(`gh pr create --repo ${_this7.config.owner}/${_this7.config.repo} --title "Update swarm task allocations" --body "${prBody}" --base main --head ${branch}`, {
          encoding: 'utf8'
        }));
        /* istanbul ignore next */
        cov_20k37f4kwb().s[62]++;
        return output.trim();
      } catch (error) {
        /* istanbul ignore next */
        cov_20k37f4kwb().s[63]++;
        console.error('Failed to create allocation PR:', error.message);
        /* istanbul ignore next */
        cov_20k37f4kwb().s[64]++;
        return null;
      }
    })();
  }

  /**
   * Get swarm coordination status
   */
  getCoordinationStatus() {
    /* istanbul ignore next */
    var _this8 = this;
    return _asyncToGenerator(function* () {
      cov_20k37f4kwb().f[11]++;
      // Get issues with swarm labels
      const cmd =
      /* istanbul ignore next */
      (cov_20k37f4kwb().s[65]++, `gh issue list --repo ${_this8.config.owner}/${_this8.config.repo} --json number,title,labels,assignees --limit 100`);
      const output =
      /* istanbul ignore next */
      (cov_20k37f4kwb().s[66]++, execSync(cmd, {
        encoding: 'utf8'
      }));
      const issues =
      /* istanbul ignore next */
      (cov_20k37f4kwb().s[67]++, JSON.parse(output));
      const swarmTasks =
      /* istanbul ignore next */
      (cov_20k37f4kwb().s[68]++, issues.filter(issue => {
        /* istanbul ignore next */
        cov_20k37f4kwb().f[12]++;
        cov_20k37f4kwb().s[69]++;
        return issue.labels.some(l => {
          /* istanbul ignore next */
          cov_20k37f4kwb().f[13]++;
          cov_20k37f4kwb().s[70]++;
          return l.name.startsWith(_this8.config.labelPrefix);
        });
      }));

      // Group by swarm
      const swarmStatus =
      /* istanbul ignore next */
      (cov_20k37f4kwb().s[71]++, {});
      cov_20k37f4kwb().s[72]++;
      swarmTasks.forEach(issue => {
        /* istanbul ignore next */
        cov_20k37f4kwb().f[14]++;
        const swarmLabel =
        /* istanbul ignore next */
        (cov_20k37f4kwb().s[73]++, issue.labels.find(l => {
          /* istanbul ignore next */
          cov_20k37f4kwb().f[15]++;
          cov_20k37f4kwb().s[74]++;
          return l.name.startsWith(_this8.config.labelPrefix);
        }));
        /* istanbul ignore next */
        cov_20k37f4kwb().s[75]++;
        if (swarmLabel) {
          /* istanbul ignore next */
          cov_20k37f4kwb().b[9][0]++;
          const swarmId =
          /* istanbul ignore next */
          (cov_20k37f4kwb().s[76]++, swarmLabel.name.replace(_this8.config.labelPrefix, ''));
          /* istanbul ignore next */
          cov_20k37f4kwb().s[77]++;
          if (!swarmStatus[swarmId]) {
            /* istanbul ignore next */
            cov_20k37f4kwb().b[10][0]++;
            cov_20k37f4kwb().s[78]++;
            swarmStatus[swarmId] = [];
          } else
          /* istanbul ignore next */
          {
            cov_20k37f4kwb().b[10][1]++;
          }
          cov_20k37f4kwb().s[79]++;
          swarmStatus[swarmId].push({
            number: issue.number,
            title: issue.title
          });
        } else
        /* istanbul ignore next */
        {
          cov_20k37f4kwb().b[9][1]++;
        }
      });
      cov_20k37f4kwb().s[80]++;
      return {
        totalIssues: issues.length,
        swarmTasks: swarmTasks.length,
        availableTasks: issues.length - swarmTasks.length,
        swarmStatus
      };
    })();
  }

  /**
   * Clean up stale locks
   */
  cleanupStaleLocks() {
    /* istanbul ignore next */
    var _this9 = this;
    return _asyncToGenerator(function* () {
      cov_20k37f4kwb().f[16]++;
      const staleTasks =
      /* istanbul ignore next */
      (cov_20k37f4kwb().s[81]++, _this9.db.prepare(`
      SELECT issue_number, swarm_id FROM swarm_tasks 
      WHERE lock_expires < strftime('%s', 'now')
    `).all());
      cov_20k37f4kwb().s[82]++;
      for (const task of staleTasks) {
        /* istanbul ignore next */
        cov_20k37f4kwb().s[83]++;
        /* istanbul ignore next */
        yield _this9.releaseTask(task.swarm_id, task.issue_number);
      }
      cov_20k37f4kwb().s[84]++;
      return staleTasks.length;
    })();
  }
}

// Example usage with gh CLI - commented out to avoid no-unused-vars warning
// async function example() {
//   const coordinator = new GHCoordinator({
//     owner: 'ruvnet',
//     repo: 'ruv-FANN',
//   });
//
//   // Get available tasks
//   const tasks = await coordinator.getAvailableTasks({ state: 'open' });
//   console.log(`Found ${tasks.length} available tasks`);
//
//   // Claim a task for a swarm
//   if (tasks.length > 0) {
//     const claimed = await coordinator.claimTask('swarm-123', tasks[0].number);
//     console.log(`Claimed task #${tasks[0].number}: ${claimed}`);
//   }
//
//   // Get coordination status
//   const status = await coordinator.getCoordinationStatus();
//   console.log('Coordination status:', status);
// }
/* istanbul ignore next */
cov_20k37f4kwb().s[85]++;
module.exports = GHCoordinator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,