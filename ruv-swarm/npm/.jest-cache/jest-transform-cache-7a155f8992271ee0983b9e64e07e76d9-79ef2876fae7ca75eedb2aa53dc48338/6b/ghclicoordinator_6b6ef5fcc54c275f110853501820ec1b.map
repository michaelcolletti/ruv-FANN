{"version":3,"names":["cov_20k37f4kwb","actualCoverage","asyncGeneratorStep","n","t","e","r","o","a","c","i","u","value","done","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","ownKeys","Object","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","push","_objectSpread","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","configurable","writable","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","execSync","s","require","fs","promises","path","Database","GHCoordinator","constructor","options","b","f","config","owner","process","env","GITHUB_OWNER","repo","GITHUB_REPO","dbPath","join","__dirname","labelPrefix","db","initialize","_this","stdio","Error","setupDatabase","_this2","dataDir","dirname","mkdir","recursive","exec","getAvailableTasks","_this3","filters","cmd","label","state","output","encoding","issues","JSON","parse","availableIssues","issue","hasSwarmLabel","labels","some","l","name","startsWith","isAssigned","assignees","claimTask","swarmId","issueNumber","_this4","comment","prepare","run","error","console","message","releaseTask","_this5","updateTaskProgress","_this6","createAllocationPR","allocations","_this7","branch","Date","now","allocationContent","timestamp","toISOString","allocationPath","writeFile","stringify","prBody","map","swarm_id","trim","getCoordinationStatus","_this8","swarmTasks","swarmStatus","swarmLabel","find","replace","number","title","totalIssues","availableTasks","cleanupStaleLocks","_this9","staleTasks","all","task","issue_number","module","exports"],"sources":["gh-cli-coordinator.js"],"sourcesContent":["/**\n * GitHub CLI-based Coordinator for ruv-swarm\n * Uses gh CLI for all GitHub operations - simpler and more reliable\n */\n\nconst { execSync } = require('child_process');\nconst fs = require('fs').promises;\nconst path = require('path');\nconst Database = require('better-sqlite3');\n\nclass GHCoordinator {\n  constructor(options = {}) {\n    this.config = {\n      owner: options.owner || process.env.GITHUB_OWNER,\n      repo: options.repo || process.env.GITHUB_REPO,\n      dbPath: options.dbPath || path.join(__dirname, '..', '..', 'data', 'gh-coordinator.db'),\n      labelPrefix: options.labelPrefix || 'swarm-',\n      ...options,\n    };\n\n    this.db = null;\n    this.initialize();\n  }\n\n  async initialize() {\n    // Check if gh CLI is available\n    try {\n      execSync('gh --version', { stdio: 'ignore' });\n    } catch {\n      throw new Error('GitHub CLI (gh) is not installed. Install it from https://cli.github.com/');\n    }\n\n    // Setup database for local coordination state\n    await this.setupDatabase();\n  }\n\n  async setupDatabase() {\n    const dataDir = path.dirname(this.config.dbPath);\n    await fs.mkdir(dataDir, { recursive: true });\n\n    this.db = new Database(this.config.dbPath);\n    this.db.exec(`\n      CREATE TABLE IF NOT EXISTS swarm_tasks (\n        issue_number INTEGER PRIMARY KEY,\n        swarm_id TEXT,\n        locked_at INTEGER,\n        lock_expires INTEGER\n      );\n\n      CREATE TABLE IF NOT EXISTS swarm_registry (\n        swarm_id TEXT PRIMARY KEY,\n        user TEXT,\n        capabilities TEXT,\n        last_seen INTEGER DEFAULT (strftime('%s', 'now'))\n      );\n    `);\n  }\n\n  /**\n   * Get available tasks from GitHub issues\n   */\n  async getAvailableTasks(filters = {}) {\n    let cmd = `gh issue list --repo ${this.config.owner}/${this.config.repo} --json number,title,labels,assignees,state,body --limit 100`;\n\n    if (filters.label) {\n      cmd += ` --label \"${filters.label}\"`;\n    }\n    if (filters.state) {\n      cmd += ` --state ${filters.state}`;\n    }\n\n    const output = execSync(cmd, { encoding: 'utf8' });\n    const issues = JSON.parse(output);\n\n    // Filter out already assigned tasks\n    const availableIssues = issues.filter(issue => {\n      // Check if issue has swarm assignment label\n      const hasSwarmLabel = issue.labels.some(l => l.name.startsWith(this.config.labelPrefix));\n      // Check if issue is assigned\n      const isAssigned = issue.assignees.length > 0;\n\n      return !hasSwarmLabel && !isAssigned;\n    });\n\n    return availableIssues;\n  }\n\n  /**\n   * Claim a task for a swarm\n   */\n  async claimTask(swarmId, issueNumber) {\n    try {\n      // Add swarm label to issue\n      const label = `${this.config.labelPrefix}${swarmId}`;\n      execSync(`gh issue edit ${issueNumber} --repo ${this.config.owner}/${this.config.repo} --add-label \"${label}\"`, { stdio: 'ignore' });\n\n      // Add comment to issue\n      const comment = `🐝 Task claimed by swarm: ${swarmId}\\n\\nThis task is being worked on by an automated swarm agent. Updates will be posted as progress is made.`;\n      execSync(`gh issue comment ${issueNumber} --repo ${this.config.owner}/${this.config.repo} --body \"${comment}\"`, { stdio: 'ignore' });\n\n      // Record in local database\n      this.db.prepare(`\n        INSERT OR REPLACE INTO swarm_tasks (issue_number, swarm_id, locked_at, lock_expires)\n        VALUES (?, ?, strftime('%s', 'now'), strftime('%s', 'now', '+1 hour'))\n      `).run(issueNumber, swarmId);\n\n      return true;\n    } catch (error) {\n      console.error(`Failed to claim task ${issueNumber}:`, error.message);\n      return false;\n    }\n  }\n\n  /**\n   * Release a task\n   */\n  async releaseTask(swarmId, issueNumber) {\n    try {\n      const label = `${this.config.labelPrefix}${swarmId}`;\n      execSync(`gh issue edit ${issueNumber} --repo ${this.config.owner}/${this.config.repo} --remove-label \"${label}\"`, { stdio: 'ignore' });\n\n      this.db.prepare('DELETE FROM swarm_tasks WHERE issue_number = ?').run(issueNumber);\n      return true;\n    } catch (error) {\n      console.error(`Failed to release task ${issueNumber}:`, error.message);\n      return false;\n    }\n  }\n\n  /**\n   * Update task progress\n   */\n  async updateTaskProgress(swarmId, issueNumber, message) {\n    try {\n      const comment = `🔄 **Progress Update from swarm ${swarmId}**\\n\\n${message}`;\n      execSync(`gh issue comment ${issueNumber} --repo ${this.config.owner}/${this.config.repo} --body \"${comment}\"`, { stdio: 'ignore' });\n      return true;\n    } catch (error) {\n      console.error(`Failed to update task ${issueNumber}:`, error.message);\n      return false;\n    }\n  }\n\n  /**\n   * Create a task allocation PR\n   */\n  async createAllocationPR(allocations) {\n    const branch = `swarm-allocation-${Date.now()}`;\n\n    // Create allocation file\n    const allocationContent = {\n      timestamp: new Date().toISOString(),\n      allocations,\n    };\n\n    const allocationPath = '.github/swarm-allocations.json';\n    await fs.writeFile(allocationPath, JSON.stringify(allocationContent, null, 2));\n\n    // Create PR using gh CLI\n    try {\n      execSync(`git checkout -b ${branch}`, { stdio: 'ignore' });\n      execSync(`git add ${allocationPath}`, { stdio: 'ignore' });\n      execSync('git commit -m \"Update swarm task allocations\"', { stdio: 'ignore' });\n      execSync(`git push origin ${branch}`, { stdio: 'ignore' });\n\n      const prBody = `## Swarm Task Allocation Update\n\nThis PR updates the task allocation for active swarms.\n\n### Allocations:\n${allocations.map(a => `- Issue #${a.issue}: Assigned to swarm ${a.swarm_id}`).join('\\n')}\n\nThis is an automated update from the swarm coordinator.`;\n\n      const output = execSync(`gh pr create --repo ${this.config.owner}/${this.config.repo} --title \"Update swarm task allocations\" --body \"${prBody}\" --base main --head ${branch}`, { encoding: 'utf8' });\n\n      return output.trim();\n    } catch (error) {\n      console.error('Failed to create allocation PR:', error.message);\n      return null;\n    }\n  }\n\n  /**\n   * Get swarm coordination status\n   */\n  async getCoordinationStatus() {\n    // Get issues with swarm labels\n    const cmd = `gh issue list --repo ${this.config.owner}/${this.config.repo} --json number,title,labels,assignees --limit 100`;\n    const output = execSync(cmd, { encoding: 'utf8' });\n    const issues = JSON.parse(output);\n\n    const swarmTasks = issues.filter(issue =>\n      issue.labels.some(l => l.name.startsWith(this.config.labelPrefix)),\n    );\n\n    // Group by swarm\n    const swarmStatus = {};\n    swarmTasks.forEach(issue => {\n      const swarmLabel = issue.labels.find(l => l.name.startsWith(this.config.labelPrefix));\n      if (swarmLabel) {\n        const swarmId = swarmLabel.name.replace(this.config.labelPrefix, '');\n        if (!swarmStatus[swarmId]) {\n          swarmStatus[swarmId] = [];\n        }\n        swarmStatus[swarmId].push({\n          number: issue.number,\n          title: issue.title,\n        });\n      }\n    });\n\n    return {\n      totalIssues: issues.length,\n      swarmTasks: swarmTasks.length,\n      availableTasks: issues.length - swarmTasks.length,\n      swarmStatus,\n    };\n  }\n\n  /**\n   * Clean up stale locks\n   */\n  async cleanupStaleLocks() {\n    const staleTasks = this.db.prepare(`\n      SELECT issue_number, swarm_id FROM swarm_tasks \n      WHERE lock_expires < strftime('%s', 'now')\n    `).all();\n\n    for (const task of staleTasks) {\n      await this.releaseTask(task.swarm_id, task.issue_number);\n    }\n\n    return staleTasks.length;\n  }\n}\n\n// Example usage with gh CLI - commented out to avoid no-unused-vars warning\n// async function example() {\n//   const coordinator = new GHCoordinator({\n//     owner: 'ruvnet',\n//     repo: 'ruv-FANN',\n//   });\n//\n//   // Get available tasks\n//   const tasks = await coordinator.getAvailableTasks({ state: 'open' });\n//   console.log(`Found ${tasks.length} available tasks`);\n//\n//   // Claim a task for a swarm\n//   if (tasks.length > 0) {\n//     const claimed = await coordinator.claimTask('swarm-123', tasks[0].number);\n//     console.log(`Claimed task #${tasks[0].number}: ${claimed}`);\n//   }\n//\n//   // Get coordination status\n//   const status = await coordinator.getCoordinationStatus();\n//   console.log('Coordination status:', status);\n// }\n\nmodule.exports = GHCoordinator;"],"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","ignoreList":[]}