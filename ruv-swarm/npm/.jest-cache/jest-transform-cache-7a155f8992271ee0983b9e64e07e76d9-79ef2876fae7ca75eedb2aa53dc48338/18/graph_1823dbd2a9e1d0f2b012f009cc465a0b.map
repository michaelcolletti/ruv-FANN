{"version":3,"names":["cov_56fnbxp48","actualCoverage","graphPresets","s","social_network_influence","name","description","model","config","nodeDimensions","edgeDimensions","hiddenDimensions","outputDimensions","numLayers","aggregation","messagePassingType","readoutFunction","dropoutRate","useResidualConnections","training","batchSize","learningRate","epochs","optimizer","scheduler","graphSampling","samplingDepth","samplingWidth","performance","expectedAccuracy","inferenceTime","memoryUsage","trainingTime","useCase","fraud_detection_financial","attentionHeads","useEdgeFeatures","temporalAggregation","lossFunction","focalGamma","classWeights","graphAugmentation","nodeDropout","edgeDropout","recommendation_engine","embeddingDimensions","useUserItemBias","negativeSampling","regularizationWeight","evaluationMetrics","edgeSampling","knowledge_graph_qa","numRelationTypes","questionEncoder","questionEmbeddingSize","multiHopReasoning","gradientClipping","subgraphSampling","samplingHops","negativeAnswers","supply_chain_optimization","samplerType","useTemporalFeatures","constraintHandling","constraintPenalty","simulationBasedTraining","realTimeAdaptation","molecular_property_prediction","globalPooling","readoutLayers","molecularAugmentation","randomRotation","atomMasking","bondDropout","traffic_flow_prediction","temporalConvolution","spatialTemporalFusion","maskingRatio","timeSeriesSplit","augmentation","temporalJitter","gaussianNoise","citation_analysis","temporalEvolution","fieldSpecialization","marginRanking","metaPathSampling","communityAware","protein_interaction","proteinEncoder","structuralFeatures","classImbalance","crossValidation","sequenceNoise","structuralPerturbation","cybersecurity_threat","anomalyDetection","onlineLearning","adaptationRate","adversarialTraining","fewShotAdaptation","getGraphPreset","presetName","f","b","Error","Object","keys","join","availableGraphPresets"],"sources":["graph.js"],"sourcesContent":["/**\n * Graph Analysis Neural Network Presets  \n * Production-ready configurations for graph-based learning tasks\n */\n\nexport const graphPresets = {\n  // Social Network Influence\n  social_network_influence: {\n    name: 'Social Network Influence Predictor',\n    description: 'Predict influence propagation in social networks',\n    model: 'gnn',\n    config: {\n      nodeDimensions: 256,\n      edgeDimensions: 128,\n      hiddenDimensions: 512,\n      outputDimensions: 64,\n      numLayers: 4,\n      aggregation: 'attention',\n      messagePassingType: 'gcn',\n      readoutFunction: 'mean',\n      dropoutRate: 0.3,\n      useResidualConnections: true\n    },\n    training: {\n      batchSize: 16,\n      learningRate: 1e-3,\n      epochs: 150,\n      optimizer: 'adam',\n      scheduler: 'cosine',\n      graphSampling: 'fastgcn',\n      samplingDepth: 2,\n      samplingWidth: 20\n    },\n    performance: {\n      expectedAccuracy: '84-87% influence prediction',\n      inferenceTime: '25ms per graph',\n      memoryUsage: '800MB',\n      trainingTime: '12-16 hours on GPU'\n    },\n    useCase: 'Social media marketing, viral content prediction, community detection'\n  },\n\n  // Fraud Detection Financial\n  fraud_detection_financial: {\n    name: 'Financial Fraud Detector',\n    description: 'Detect fraudulent transactions in financial networks',\n    model: 'gnn',\n    config: {\n      nodeDimensions: 128,\n      edgeDimensions: 64,\n      hiddenDimensions: 256,\n      outputDimensions: 2, // Fraud/Not fraud\n      numLayers: 3,\n      aggregation: 'max',\n      messagePassingType: 'gat',\n      attentionHeads: 4,\n      dropoutRate: 0.4,\n      useEdgeFeatures: true,\n      temporalAggregation: true\n    },\n    training: {\n      batchSize: 32,\n      learningRate: 5e-4,\n      epochs: 200,\n      optimizer: 'adamw',\n      lossFunction: 'focal_loss',\n      focalGamma: 2.0,\n      classWeights: [1.0, 50.0], // Heavy penalty for missing fraud\n      graphAugmentation: {\n        nodeDropout: 0.1,\n        edgeDropout: 0.05\n      }\n    },\n    performance: {\n      expectedAccuracy: '96-98% precision on fraud class',\n      inferenceTime: '8ms per transaction',\n      memoryUsage: '400MB',\n      trainingTime: '24-36 hours on GPU'\n    },\n    useCase: 'Credit card fraud, money laundering detection, banking security'\n  },\n\n  // Recommendation Engine\n  recommendation_engine: {\n    name: 'Graph-based Recommender',\n    description: 'User-item recommendation using graph neural networks',\n    model: 'gnn',\n    config: {\n      nodeDimensions: 64,\n      edgeDimensions: 32,\n      hiddenDimensions: 128,\n      embeddingDimensions: 64,\n      numLayers: 3,\n      aggregation: 'mean',\n      messagePassingType: 'lightgcn',\n      useUserItemBias: true,\n      dropoutRate: 0.1,\n      negativeSampling: 5\n    },\n    training: {\n      batchSize: 1024,\n      learningRate: 2e-3,\n      epochs: 100,\n      optimizer: 'adam',\n      lossFunction: 'bpr_loss',\n      regularizationWeight: 1e-4,\n      evaluationMetrics: ['recall@10', 'ndcg@10'],\n      edgeSampling: 'random_walk'\n    },\n    performance: {\n      expectedAccuracy: '88-91% Recall@10',\n      inferenceTime: '2ms per user',\n      memoryUsage: '600MB',\n      trainingTime: '8-12 hours on GPU'\n    },\n    useCase: 'E-commerce, content streaming, social media feeds'\n  },\n\n  // Knowledge Graph QA\n  knowledge_graph_qa: {\n    name: 'Knowledge Graph Question Answering',\n    description: 'Answer questions using knowledge graph reasoning',\n    model: 'gnn',\n    config: {\n      nodeDimensions: 300, // Entity embeddings\n      edgeDimensions: 100, // Relation embeddings\n      hiddenDimensions: 400,\n      outputDimensions: 1, // Answer score\n      numLayers: 5,\n      aggregation: 'attention',\n      messagePassingType: 'rgcn',\n      numRelationTypes: 200,\n      questionEncoder: 'lstm',\n      questionEmbeddingSize: 256,\n      multiHopReasoning: true\n    },\n    training: {\n      batchSize: 8,\n      learningRate: 1e-4,\n      epochs: 80,\n      optimizer: 'adamw',\n      gradientClipping: 1.0,\n      subgraphSampling: 'khop',\n      samplingHops: 3,\n      negativeAnswers: 10\n    },\n    performance: {\n      expectedAccuracy: '78-82% answer accuracy',\n      inferenceTime: '150ms per question',\n      memoryUsage: '1.2GB',\n      trainingTime: '48-72 hours on GPU'\n    },\n    useCase: 'Intelligent search, virtual assistants, fact checking'\n  },\n\n  // Supply Chain Optimization\n  supply_chain_optimization: {\n    name: 'Supply Chain Network Optimizer',\n    description: 'Optimize supply chain operations using graph analysis',\n    model: 'gnn',\n    config: {\n      nodeDimensions: 200, // Supplier/warehouse features\n      edgeDimensions: 50, // Transportation features\n      hiddenDimensions: 300,\n      outputDimensions: 100, // Optimization decisions\n      numLayers: 4,\n      aggregation: 'sum',\n      messagePassingType: 'graphsage',\n      samplerType: 'neighbor',\n      useTemporalFeatures: true,\n      constraintHandling: true\n    },\n    training: {\n      batchSize: 12,\n      learningRate: 3e-4,\n      epochs: 120,\n      optimizer: 'adam',\n      lossFunction: 'custom_cost_minimization',\n      constraintPenalty: 100.0,\n      simulationBasedTraining: true,\n      realTimeAdaptation: true\n    },\n    performance: {\n      expectedAccuracy: '12-15% cost reduction',\n      inferenceTime: '50ms per decision',\n      memoryUsage: '700MB',\n      trainingTime: '24-36 hours on GPU'\n    },\n    useCase: 'Logistics optimization, inventory management, route planning'\n  },\n\n  // Molecular Property Prediction\n  molecular_property_prediction: {\n    name: 'Molecular Property Predictor',\n    description: 'Predict molecular properties for drug discovery',\n    model: 'gnn',\n    config: {\n      nodeDimensions: 74, // Atom features\n      edgeDimensions: 12, // Bond features\n      hiddenDimensions: 256,\n      outputDimensions: 1, // Property value\n      numLayers: 5,\n      aggregation: 'mean',\n      messagePassingType: 'mpnn',\n      globalPooling: 'set2set',\n      readoutLayers: [128, 64],\n      dropoutRate: 0.2\n    },\n    training: {\n      batchSize: 64,\n      learningRate: 1e-3,\n      epochs: 200,\n      optimizer: 'adam',\n      lossFunction: 'mae',\n      scheduler: 'plateau',\n      molecularAugmentation: {\n        randomRotation: true,\n        atomMasking: 0.1,\n        bondDropout: 0.05\n      }\n    },\n    performance: {\n      expectedAccuracy: '85-88% RÂ² for solubility',\n      inferenceTime: '5ms per molecule',\n      memoryUsage: '300MB',\n      trainingTime: '16-24 hours on GPU'\n    },\n    useCase: 'Drug discovery, material science, chemical engineering'\n  },\n\n  // Traffic Flow Prediction\n  traffic_flow_prediction: {\n    name: 'Urban Traffic Flow Predictor',\n    description: 'Predict traffic patterns in road networks',\n    model: 'gnn',\n    config: {\n      nodeDimensions: 20, // Road segment features\n      edgeDimensions: 10, // Connection features\n      hiddenDimensions: 128,\n      outputDimensions: 12, // 12 future time steps\n      numLayers: 3,\n      aggregation: 'attention',\n      messagePassingType: 'gcn',\n      temporalConvolution: true,\n      spatialTemporalFusion: 'gated',\n      dropoutRate: 0.25\n    },\n    training: {\n      batchSize: 24,\n      learningRate: 2e-3,\n      epochs: 100,\n      optimizer: 'adam',\n      lossFunction: 'masked_mae',\n      maskingRatio: 0.1,\n      timeSeriesSplit: true,\n      augmentation: {\n        temporalJitter: 0.1,\n        gaussianNoise: 0.05\n      }\n    },\n    performance: {\n      expectedAccuracy: '91-94% MAE < 15%',\n      inferenceTime: '15ms per prediction',\n      memoryUsage: '500MB',\n      trainingTime: '12-18 hours on GPU'\n    },\n    useCase: 'Smart city planning, traffic management, route optimization'\n  },\n\n  // Scientific Citation Analysis\n  citation_analysis: {\n    name: 'Scientific Citation Analyzer',\n    description: 'Analyze citation networks for research insights',\n    model: 'gnn',\n    config: {\n      nodeDimensions: 512, // Paper embeddings\n      edgeDimensions: 64, // Citation context\n      hiddenDimensions: 256,\n      outputDimensions: 128, // Paper influence score\n      numLayers: 4,\n      aggregation: 'attention',\n      messagePassingType: 'gat',\n      attentionHeads: 8,\n      temporalEvolution: true,\n      fieldSpecialization: true\n    },\n    training: {\n      batchSize: 16,\n      learningRate: 5e-4,\n      epochs: 150,\n      optimizer: 'adamw',\n      lossFunction: 'ranking_loss',\n      marginRanking: 1.0,\n      metaPathSampling: true,\n      communityAware: true\n    },\n    performance: {\n      expectedAccuracy: '86-89% citation prediction',\n      inferenceTime: '30ms per paper',\n      memoryUsage: '1GB',\n      trainingTime: '36-48 hours on GPU'\n    },\n    useCase: 'Research recommendation, impact prediction, academic analytics'\n  },\n\n  // Protein-Protein Interaction\n  protein_interaction: {\n    name: 'Protein Interaction Predictor',\n    description: 'Predict protein-protein interactions',\n    model: 'gnn',\n    config: {\n      nodeDimensions: 1280, // Protein sequence embeddings\n      edgeDimensions: 100, // Interaction features\n      hiddenDimensions: 512,\n      outputDimensions: 1, // Interaction probability\n      numLayers: 6,\n      aggregation: 'mean',\n      messagePassingType: 'gin',\n      proteinEncoder: 'esm',\n      structuralFeatures: true,\n      dropoutRate: 0.3\n    },\n    training: {\n      batchSize: 8,\n      learningRate: 1e-4,\n      epochs: 100,\n      optimizer: 'adamw',\n      lossFunction: 'weighted_bce',\n      classImbalance: 100, // Many more negative than positive examples\n      crossValidation: 'species_split',\n      augmentation: {\n        sequenceNoise: 0.02,\n        structuralPerturbation: 0.1\n      }\n    },\n    performance: {\n      expectedAccuracy: '92-94% AUC-ROC',\n      inferenceTime: '100ms per protein pair',\n      memoryUsage: '2GB',\n      trainingTime: '3-5 days on GPU'\n    },\n    useCase: 'Drug target identification, pathway analysis, systems biology'\n  },\n\n  // Cybersecurity Threat Detection\n  cybersecurity_threat: {\n    name: 'Network Threat Detector',\n    description: 'Detect cybersecurity threats in network graphs',\n    model: 'gnn',\n    config: {\n      nodeDimensions: 100, // Host/device features\n      edgeDimensions: 50, // Network connection features\n      hiddenDimensions: 200,\n      outputDimensions: 5, // Threat categories\n      numLayers: 3,\n      aggregation: 'max',\n      messagePassingType: 'graphsaint',\n      temporalAggregation: 'gru',\n      anomalyDetection: true,\n      dropoutRate: 0.35\n    },\n    training: {\n      batchSize: 32,\n      learningRate: 1e-3,\n      epochs: 80,\n      optimizer: 'adam',\n      lossFunction: 'focal_loss',\n      onlineLearning: true,\n      adaptationRate: 0.01,\n      adversarialTraining: true,\n      fewShotAdaptation: true\n    },\n    performance: {\n      expectedAccuracy: '94-96% threat detection',\n      inferenceTime: '10ms per network state',\n      memoryUsage: '400MB',\n      trainingTime: '16-24 hours on GPU'\n    },\n    useCase: 'Network security, intrusion detection, malware analysis'\n  }\n};\n\n// Export utility function to get preset by name\nexport const getGraphPreset = (presetName) => {\n  if (!graphPresets[presetName]) {\n    throw new Error(`Graph preset '${presetName}' not found. Available presets: ${Object.keys(graphPresets).join(', ')}`);\n  }\n  return graphPresets[presetName];\n};\n\n// Export list of available presets\nexport const availableGraphPresets = Object.keys(graphPresets);"],"mappings":"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","ignoreList":[]}