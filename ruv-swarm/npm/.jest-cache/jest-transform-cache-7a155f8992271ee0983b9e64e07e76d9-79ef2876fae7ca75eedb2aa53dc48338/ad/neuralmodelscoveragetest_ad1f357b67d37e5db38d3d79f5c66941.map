{"version":3,"names":["assert","AutoencoderModel","CNNModel","GNNModel","GRUModel","ResNetModel","TransformerModel","BaseNeuralModel","describe","it","base","throws","forward","backward","initializeParameters","dimensions","_state","weights","Float32Array","metadata","version","training","epochs","serialized","serialize","deserialized","deserialize","deepEqual","Array","from","autoencoder","beforeEach","inputDim","hiddenDim","latentDim","_asyncToGenerator","rejects","encode","decode","corruptedData","input","target","train","setRegularization","l1","l2","cnn","inputChannels","outputClasses","kernelSizes","image","fill","_poolingSize","enableBatchNorm","result","setDropout","eval","result1","result2","gnn","nodeDim","edgeDim","nodes","edges","_messagePassingEnabled","gru","inputSize","hiddenSize","numLayers","sequence","lengths","setBidirectional","setGradientClipping","gradOutput","resetHiddenState","resnet","numClasses","layers","_skipConnections","deepResnet","useBottleneck","transformer","dModel","nHeads","nLayers","vocabSize","mask","paddingMask","longSequence","_heads","disableLayerNorm","models","ensemble","vote","ensemblePredict","data","_x","_x2","_ensemblePredict","apply","arguments","predictions","Promise","all","map","model","every","p","length","Error","import","meta","url","process","argv","console","log","run","__filename"],"sources":["neural-models-coverage.test.js"],"sourcesContent":["/**\n * Neural Models Coverage Tests\n * Tests all neural model implementations for 100% coverage\n */\n\nimport assert from 'assert';\nimport { \n  AutoencoderModel,\n  CNNModel,\n  GNNModel,\n  GRUModel,\n  ResNetModel,\n  TransformerModel,\n  BaseNeuralModel\n} from '../src/neural-models/index.js';\n\ndescribe('Neural Models 100% Coverage', () => {\n  describe('BaseNeuralModel', () => {\n    it('should handle abstract method calls', () => {\n      const base = new BaseNeuralModel();\n      \n      assert.throws(\n        () => base.forward(),\n        /Not implemented/\n      );\n      \n      assert.throws(\n        () => base.backward(),\n        /Not implemented/\n      );\n    });\n\n    it('should handle parameter initialization edge cases', () => {\n      const base = new BaseNeuralModel();\n      \n      // Test with invalid dimensions\n      assert.throws(\n        () => base.initializeParameters({ dimensions: -1 }),\n        /Invalid dimensions/\n      );\n      \n      // Test with null config\n      assert.throws(\n        () => base.initializeParameters(null),\n        /Configuration required/\n      );\n    });\n\n    it('should handle serialization of complex states', () => {\n      const base = new BaseNeuralModel();\n      base._state = {\n        weights: new Float32Array([1, 2, 3]),\n        metadata: { version: 1 },\n        training: { epochs: 100 }\n      };\n      \n      const serialized = base.serialize();\n      const deserialized = BaseNeuralModel.deserialize(serialized);\n      \n      assert.deepEqual(\n        Array.from(deserialized._state.weights),\n        [1, 2, 3]\n      );\n    });\n  });\n\n  describe('AutoencoderModel', () => {\n    let autoencoder;\n\n    beforeEach(() => {\n      autoencoder = new AutoencoderModel({\n        inputDim: 784,\n        hiddenDim: 128,\n        latentDim: 32\n      });\n    });\n\n    it('should handle encoding with invalid inputs', async () => {\n      await assert.rejects(\n        autoencoder.encode(null),\n        /Invalid input/\n      );\n      \n      await assert.rejects(\n        autoencoder.encode([[1, 2]]), // Wrong dimension\n        /Dimension mismatch/\n      );\n    });\n\n    it('should handle decoding with invalid latent vectors', async () => {\n      await assert.rejects(\n        autoencoder.decode(null),\n        /Invalid latent vector/\n      );\n      \n      await assert.rejects(\n        autoencoder.decode([[1, 2]]), // Wrong latent dimension\n        /Latent dimension mismatch/\n      );\n    });\n\n    it('should handle training with corrupted data', async () => {\n      const corruptedData = [\n        { input: null, target: [1, 2, 3] },\n        { input: [1, 2, 3], target: null }\n      ];\n      \n      await assert.rejects(\n        autoencoder.train(corruptedData),\n        /Invalid training data/\n      );\n    });\n\n    it('should handle regularization edge cases', async () => {\n      autoencoder.setRegularization({\n        l1: -0.1, // Invalid negative regularization\n        l2: 0.01\n      });\n      \n      await assert.rejects(\n        autoencoder.train([]),\n        /Invalid regularization/\n      );\n    });\n  });\n\n  describe('CNNModel', () => {\n    let cnn;\n\n    beforeEach(() => {\n      cnn = new CNNModel({\n        inputChannels: 3,\n        outputClasses: 10,\n        kernelSizes: [3, 5, 7]\n      });\n    });\n\n    it('should handle invalid image dimensions', async () => {\n      await assert.rejects(\n        cnn.forward({ image: null }),\n        /Invalid image input/\n      );\n      \n      await assert.rejects(\n        cnn.forward({ \n          image: new Array(3).fill(new Array(32).fill(0)) // Missing dimension\n        }),\n        /Invalid image dimensions/\n      );\n    });\n\n    it('should handle pooling with invalid parameters', async () => {\n      cnn._poolingSize = -1;\n      \n      await assert.rejects(\n        cnn.forward({ image: new Array(3).fill(new Array(32).fill(new Array(32).fill(0))) }),\n        /Invalid pooling size/\n      );\n    });\n\n    it('should handle batch normalization edge cases', async () => {\n      cnn.enableBatchNorm(true);\n      \n      // Single sample (batch size 1) should handle differently\n      const result = await cnn.forward({\n        image: [new Array(3).fill(new Array(32).fill(new Array(32).fill(0)))]\n      });\n      \n      assert(result, 'Should handle batch size 1');\n    });\n\n    it('should handle dropout during inference', async () => {\n      cnn.setDropout(0.5);\n      cnn.eval(); // Set to evaluation mode\n      \n      const result1 = await cnn.forward({\n        image: new Array(3).fill(new Array(32).fill(new Array(32).fill(1)))\n      });\n      \n      const result2 = await cnn.forward({\n        image: new Array(3).fill(new Array(32).fill(new Array(32).fill(1)))\n      });\n      \n      // Results should be identical in eval mode\n      assert.deepEqual(result1, result2, 'Dropout should be disabled in eval mode');\n    });\n  });\n\n  describe('GNNModel', () => {\n    let gnn;\n\n    beforeEach(() => {\n      gnn = new GNNModel({\n        nodeDim: 64,\n        edgeDim: 32,\n        hiddenDim: 128\n      });\n    });\n\n    it('should handle invalid graph structures', async () => {\n      await assert.rejects(\n        gnn.forward({ nodes: null, edges: [[0, 1]] }),\n        /Invalid nodes/\n      );\n      \n      await assert.rejects(\n        gnn.forward({ \n          nodes: [[1, 2, 3]], \n          edges: null \n        }),\n        /Invalid edges/\n      );\n    });\n\n    it('should handle disconnected graphs', async () => {\n      const result = await gnn.forward({\n        nodes: [[1, 2], [3, 4], [5, 6]],\n        edges: [[0, 1]] // Node 2 is disconnected\n      });\n      \n      assert(result, 'Should handle disconnected nodes');\n    });\n\n    it('should handle self-loops in graphs', async () => {\n      const result = await gnn.forward({\n        nodes: [[1, 2], [3, 4]],\n        edges: [[0, 0], [0, 1], [1, 1]] // Self-loops\n      });\n      \n      assert(result, 'Should handle self-loops');\n    });\n\n    it('should handle message passing failures', async () => {\n      gnn._messagePassingEnabled = false;\n      \n      await assert.rejects(\n        gnn.forward({\n          nodes: [[1, 2], [3, 4]],\n          edges: [[0, 1]]\n        }),\n        /Message passing disabled/\n      );\n    });\n  });\n\n  describe('GRUModel', () => {\n    let gru;\n\n    beforeEach(() => {\n      gru = new GRUModel({\n        inputSize: 100,\n        hiddenSize: 256,\n        numLayers: 2\n      });\n    });\n\n    it('should handle sequence length mismatches', async () => {\n      await assert.rejects(\n        gru.forward({\n          sequence: [[1, 2, 3]], // Wrong input size\n          lengths: [10] // Mismatched length\n        }),\n        /Sequence length mismatch/\n      );\n    });\n\n    it('should handle bidirectional processing edge cases', async () => {\n      gru.setBidirectional(true);\n      \n      const result = await gru.forward({\n        sequence: [new Array(100).fill(0)],\n        lengths: [1] // Single timestep\n      });\n      \n      assert(result, 'Should handle single timestep in bidirectional mode');\n    });\n\n    it('should handle gradient clipping edge cases', async () => {\n      gru.setGradientClipping(-1); // Invalid negative clipping\n      \n      await assert.rejects(\n        gru.backward({ gradOutput: [[1, 2, 3]] }),\n        /Invalid gradient clipping/\n      );\n    });\n\n    it('should handle hidden state reset', async () => {\n      // Process a sequence\n      await gru.forward({\n        sequence: [new Array(100).fill(1)],\n        lengths: [1]\n      });\n      \n      // Reset hidden state\n      gru.resetHiddenState();\n      \n      // Process another sequence\n      const result = await gru.forward({\n        sequence: [new Array(100).fill(2)],\n        lengths: [1]\n      });\n      \n      assert(result, 'Should process after hidden state reset');\n    });\n  });\n\n  describe('ResNetModel', () => {\n    let resnet;\n\n    beforeEach(() => {\n      resnet = new ResNetModel({\n        numClasses: 1000,\n        layers: [3, 4, 6, 3], // ResNet-50 configuration\n        inputChannels: 3\n      });\n    });\n\n    it('should handle skip connection failures', async () => {\n      resnet._skipConnections = false;\n      \n      const result = await resnet.forward({\n        image: new Array(3).fill(new Array(224).fill(new Array(224).fill(0)))\n      });\n      \n      assert(result, 'Should work without skip connections (plain network)');\n    });\n\n    it('should handle identity mapping edge cases', async () => {\n      // Test with very deep network\n      const deepResnet = new ResNetModel({\n        numClasses: 10,\n        layers: [10, 10, 10, 10], // Very deep\n        inputChannels: 1\n      });\n      \n      const result = await deepResnet.forward({\n        image: new Array(1).fill(new Array(32).fill(new Array(32).fill(1)))\n      });\n      \n      assert(result, 'Should handle very deep architectures');\n    });\n\n    it('should handle bottleneck architecture edge cases', async () => {\n      resnet.useBottleneck(true);\n      \n      await assert.rejects(\n        resnet.forward({\n          image: new Array(2).fill(new Array(224).fill(new Array(224).fill(0))) // Wrong channels\n        }),\n        /Channel dimension mismatch/\n      );\n    });\n  });\n\n  describe('TransformerModel', () => {\n    let transformer;\n\n    beforeEach(() => {\n      transformer = new TransformerModel({\n        dModel: 512,\n        nHeads: 8,\n        nLayers: 6,\n        vocabSize: 10000\n      });\n    });\n\n    it('should handle attention mask edge cases', async () => {\n      const result = await transformer.forward({\n        input: [[1, 2, 3, 4]],\n        mask: null // No mask (full attention)\n      });\n      \n      assert(result, 'Should work without attention mask');\n    });\n\n    it('should handle padding mask edge cases', async () => {\n      await assert.rejects(\n        transformer.forward({\n          input: [[1, 2, 0, 0]], // Padded sequence\n          paddingMask: [[1, 1, 1, 1]] // Wrong mask (no padding indicated)\n        }),\n        /Padding mask mismatch/\n      );\n    });\n\n    it('should handle position encoding overflow', async () => {\n      // Very long sequence\n      const longSequence = new Array(5000).fill(1);\n      \n      await assert.rejects(\n        transformer.forward({\n          input: [longSequence]\n        }),\n        /Sequence too long/\n      );\n    });\n\n    it('should handle multi-head attention failures', async () => {\n      transformer._heads[0] = null; // Corrupt one attention head\n      \n      await assert.rejects(\n        transformer.forward({\n          input: [[1, 2, 3, 4]]\n        }),\n        /Attention head failure/\n      );\n    });\n\n    it('should handle layer normalization edge cases', async () => {\n      transformer.disableLayerNorm();\n      \n      const result = await transformer.forward({\n        input: [[1, 2, 3, 4]]\n      });\n      \n      assert(result, 'Should work without layer normalization');\n    });\n  });\n\n  describe('Model Ensemble Edge Cases', () => {\n    it('should handle ensemble with mixed model types', async () => {\n      const models = [\n        new CNNModel({ inputChannels: 3, outputClasses: 10 }),\n        new GRUModel({ inputSize: 100, hiddenSize: 128 }),\n        new TransformerModel({ dModel: 256, nHeads: 4, vocabSize: 1000 })\n      ];\n      \n      // Ensemble should handle incompatible models\n      const ensemble = { models, vote: 'majority' };\n      \n      await assert.rejects(\n        ensemblePredict(ensemble, { data: [1, 2, 3] }),\n        /Incompatible model types/\n      );\n    });\n  });\n});\n\n// Helper function for ensemble prediction\nasync function ensemblePredict(ensemble, input) {\n  const predictions = await Promise.all(\n    ensemble.models.map(model => model.forward(input))\n  );\n  \n  if (!predictions.every(p => p.length === predictions[0].length)) {\n    throw new Error('Incompatible model types in ensemble');\n  }\n  \n  return predictions;\n}\n\n// Run tests when executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  console.log('Running neural models coverage tests...');\n  \n  // Run all tests\n  const { run } = await import('./test-runner.js');\n  await run(__filename);\n}"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA,OAAOA,MAAM,MAAM,QAAQ;AAC3B,SACEC,gBAAgB,EAChBC,QAAQ,EACRC,QAAQ,EACRC,QAAQ,EACRC,WAAW,EACXC,gBAAgB,EAChBC,eAAe,QACV,+BAA+B;AAEtCC,QAAQ,CAAC,6BAA6B,EAAE,MAAM;EAC5CA,QAAQ,CAAC,iBAAiB,EAAE,MAAM;IAChCC,EAAE,CAAC,qCAAqC,EAAE,MAAM;MAC9C,MAAMC,IAAI,GAAG,IAAIH,eAAe,CAAC,CAAC;MAElCP,MAAM,CAACW,MAAM,CACX,MAAMD,IAAI,CAACE,OAAO,CAAC,CAAC,EACpB,iBACF,CAAC;MAEDZ,MAAM,CAACW,MAAM,CACX,MAAMD,IAAI,CAACG,QAAQ,CAAC,CAAC,EACrB,iBACF,CAAC;IACH,CAAC,CAAC;IAEFJ,EAAE,CAAC,mDAAmD,EAAE,MAAM;MAC5D,MAAMC,IAAI,GAAG,IAAIH,eAAe,CAAC,CAAC;;MAElC;MACAP,MAAM,CAACW,MAAM,CACX,MAAMD,IAAI,CAACI,oBAAoB,CAAC;QAAEC,UAAU,EAAE,CAAC;MAAE,CAAC,CAAC,EACnD,oBACF,CAAC;;MAED;MACAf,MAAM,CAACW,MAAM,CACX,MAAMD,IAAI,CAACI,oBAAoB,CAAC,IAAI,CAAC,EACrC,wBACF,CAAC;IACH,CAAC,CAAC;IAEFL,EAAE,CAAC,+CAA+C,EAAE,MAAM;MACxD,MAAMC,IAAI,GAAG,IAAIH,eAAe,CAAC,CAAC;MAClCG,IAAI,CAACM,MAAM,GAAG;QACZC,OAAO,EAAE,IAAIC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACpCC,QAAQ,EAAE;UAAEC,OAAO,EAAE;QAAE,CAAC;QACxBC,QAAQ,EAAE;UAAEC,MAAM,EAAE;QAAI;MAC1B,CAAC;MAED,MAAMC,UAAU,GAAGb,IAAI,CAACc,SAAS,CAAC,CAAC;MACnC,MAAMC,YAAY,GAAGlB,eAAe,CAACmB,WAAW,CAACH,UAAU,CAAC;MAE5DvB,MAAM,CAAC2B,SAAS,CACdC,KAAK,CAACC,IAAI,CAACJ,YAAY,CAACT,MAAM,CAACC,OAAO,CAAC,EACvC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CACV,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFT,QAAQ,CAAC,kBAAkB,EAAE,MAAM;IACjC,IAAIsB,WAAW;IAEfC,UAAU,CAAC,MAAM;MACfD,WAAW,GAAG,IAAI7B,gBAAgB,CAAC;QACjC+B,QAAQ,EAAE,GAAG;QACbC,SAAS,EAAE,GAAG;QACdC,SAAS,EAAE;MACb,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFzB,EAAE,CAAC,4CAA4C,eAAA0B,iBAAA,CAAE,aAAY;MAC3D,MAAMnC,MAAM,CAACoC,OAAO,CAClBN,WAAW,CAACO,MAAM,CAAC,IAAI,CAAC,EACxB,eACF,CAAC;MAED,MAAMrC,MAAM,CAACoC,OAAO,CAClBN,WAAW,CAACO,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MAAE;MAC9B,oBACF,CAAC;IACH,CAAC,EAAC;IAEF5B,EAAE,CAAC,oDAAoD,eAAA0B,iBAAA,CAAE,aAAY;MACnE,MAAMnC,MAAM,CAACoC,OAAO,CAClBN,WAAW,CAACQ,MAAM,CAAC,IAAI,CAAC,EACxB,uBACF,CAAC;MAED,MAAMtC,MAAM,CAACoC,OAAO,CAClBN,WAAW,CAACQ,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MAAE;MAC9B,2BACF,CAAC;IACH,CAAC,EAAC;IAEF7B,EAAE,CAAC,4CAA4C,eAAA0B,iBAAA,CAAE,aAAY;MAC3D,MAAMI,aAAa,GAAG,CACpB;QAAEC,KAAK,EAAE,IAAI;QAAEC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;MAAE,CAAC,EAClC;QAAED,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAAEC,MAAM,EAAE;MAAK,CAAC,CACnC;MAED,MAAMzC,MAAM,CAACoC,OAAO,CAClBN,WAAW,CAACY,KAAK,CAACH,aAAa,CAAC,EAChC,uBACF,CAAC;IACH,CAAC,EAAC;IAEF9B,EAAE,CAAC,yCAAyC,eAAA0B,iBAAA,CAAE,aAAY;MACxDL,WAAW,CAACa,iBAAiB,CAAC;QAC5BC,EAAE,EAAE,CAAC,GAAG;QAAE;QACVC,EAAE,EAAE;MACN,CAAC,CAAC;MAEF,MAAM7C,MAAM,CAACoC,OAAO,CAClBN,WAAW,CAACY,KAAK,CAAC,EAAE,CAAC,EACrB,wBACF,CAAC;IACH,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFlC,QAAQ,CAAC,UAAU,EAAE,MAAM;IACzB,IAAIsC,GAAG;IAEPf,UAAU,CAAC,MAAM;MACfe,GAAG,GAAG,IAAI5C,QAAQ,CAAC;QACjB6C,aAAa,EAAE,CAAC;QAChBC,aAAa,EAAE,EAAE;QACjBC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;MACvB,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFxC,EAAE,CAAC,wCAAwC,eAAA0B,iBAAA,CAAE,aAAY;MACvD,MAAMnC,MAAM,CAACoC,OAAO,CAClBU,GAAG,CAAClC,OAAO,CAAC;QAAEsC,KAAK,EAAE;MAAK,CAAC,CAAC,EAC5B,qBACF,CAAC;MAED,MAAMlD,MAAM,CAACoC,OAAO,CAClBU,GAAG,CAAClC,OAAO,CAAC;QACVsC,KAAK,EAAE,IAAItB,KAAK,CAAC,CAAC,CAAC,CAACuB,IAAI,CAAC,IAAIvB,KAAK,CAAC,EAAE,CAAC,CAACuB,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;MAClD,CAAC,CAAC,EACF,0BACF,CAAC;IACH,CAAC,EAAC;IAEF1C,EAAE,CAAC,+CAA+C,eAAA0B,iBAAA,CAAE,aAAY;MAC9DW,GAAG,CAACM,YAAY,GAAG,CAAC,CAAC;MAErB,MAAMpD,MAAM,CAACoC,OAAO,CAClBU,GAAG,CAAClC,OAAO,CAAC;QAAEsC,KAAK,EAAE,IAAItB,KAAK,CAAC,CAAC,CAAC,CAACuB,IAAI,CAAC,IAAIvB,KAAK,CAAC,EAAE,CAAC,CAACuB,IAAI,CAAC,IAAIvB,KAAK,CAAC,EAAE,CAAC,CAACuB,IAAI,CAAC,CAAC,CAAC,CAAC;MAAE,CAAC,CAAC,EACpF,sBACF,CAAC;IACH,CAAC,EAAC;IAEF1C,EAAE,CAAC,8CAA8C,eAAA0B,iBAAA,CAAE,aAAY;MAC7DW,GAAG,CAACO,eAAe,CAAC,IAAI,CAAC;;MAEzB;MACA,MAAMC,MAAM,SAASR,GAAG,CAAClC,OAAO,CAAC;QAC/BsC,KAAK,EAAE,CAAC,IAAItB,KAAK,CAAC,CAAC,CAAC,CAACuB,IAAI,CAAC,IAAIvB,KAAK,CAAC,EAAE,CAAC,CAACuB,IAAI,CAAC,IAAIvB,KAAK,CAAC,EAAE,CAAC,CAACuB,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;MACtE,CAAC,CAAC;MAEFnD,MAAM,CAACsD,MAAM,EAAE,4BAA4B,CAAC;IAC9C,CAAC,EAAC;IAEF7C,EAAE,CAAC,wCAAwC,eAAA0B,iBAAA,CAAE,aAAY;MACvDW,GAAG,CAACS,UAAU,CAAC,GAAG,CAAC;MACnBT,GAAG,CAACU,IAAI,CAAC,CAAC,CAAC,CAAC;;MAEZ,MAAMC,OAAO,SAASX,GAAG,CAAClC,OAAO,CAAC;QAChCsC,KAAK,EAAE,IAAItB,KAAK,CAAC,CAAC,CAAC,CAACuB,IAAI,CAAC,IAAIvB,KAAK,CAAC,EAAE,CAAC,CAACuB,IAAI,CAAC,IAAIvB,KAAK,CAAC,EAAE,CAAC,CAACuB,IAAI,CAAC,CAAC,CAAC,CAAC;MACpE,CAAC,CAAC;MAEF,MAAMO,OAAO,SAASZ,GAAG,CAAClC,OAAO,CAAC;QAChCsC,KAAK,EAAE,IAAItB,KAAK,CAAC,CAAC,CAAC,CAACuB,IAAI,CAAC,IAAIvB,KAAK,CAAC,EAAE,CAAC,CAACuB,IAAI,CAAC,IAAIvB,KAAK,CAAC,EAAE,CAAC,CAACuB,IAAI,CAAC,CAAC,CAAC,CAAC;MACpE,CAAC,CAAC;;MAEF;MACAnD,MAAM,CAAC2B,SAAS,CAAC8B,OAAO,EAAEC,OAAO,EAAE,yCAAyC,CAAC;IAC/E,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFlD,QAAQ,CAAC,UAAU,EAAE,MAAM;IACzB,IAAImD,GAAG;IAEP5B,UAAU,CAAC,MAAM;MACf4B,GAAG,GAAG,IAAIxD,QAAQ,CAAC;QACjByD,OAAO,EAAE,EAAE;QACXC,OAAO,EAAE,EAAE;QACX5B,SAAS,EAAE;MACb,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFxB,EAAE,CAAC,wCAAwC,eAAA0B,iBAAA,CAAE,aAAY;MACvD,MAAMnC,MAAM,CAACoC,OAAO,CAClBuB,GAAG,CAAC/C,OAAO,CAAC;QAAEkD,KAAK,EAAE,IAAI;QAAEC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;MAAE,CAAC,CAAC,EAC7C,eACF,CAAC;MAED,MAAM/D,MAAM,CAACoC,OAAO,CAClBuB,GAAG,CAAC/C,OAAO,CAAC;QACVkD,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAClBC,KAAK,EAAE;MACT,CAAC,CAAC,EACF,eACF,CAAC;IACH,CAAC,EAAC;IAEFtD,EAAE,CAAC,mCAAmC,eAAA0B,iBAAA,CAAE,aAAY;MAClD,MAAMmB,MAAM,SAASK,GAAG,CAAC/C,OAAO,CAAC;QAC/BkD,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC/BC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MAClB,CAAC,CAAC;MAEF/D,MAAM,CAACsD,MAAM,EAAE,kCAAkC,CAAC;IACpD,CAAC,EAAC;IAEF7C,EAAE,CAAC,oCAAoC,eAAA0B,iBAAA,CAAE,aAAY;MACnD,MAAMmB,MAAM,SAASK,GAAG,CAAC/C,OAAO,CAAC;QAC/BkD,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACvBC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MAClC,CAAC,CAAC;MAEF/D,MAAM,CAACsD,MAAM,EAAE,0BAA0B,CAAC;IAC5C,CAAC,EAAC;IAEF7C,EAAE,CAAC,wCAAwC,eAAA0B,iBAAA,CAAE,aAAY;MACvDwB,GAAG,CAACK,sBAAsB,GAAG,KAAK;MAElC,MAAMhE,MAAM,CAACoC,OAAO,CAClBuB,GAAG,CAAC/C,OAAO,CAAC;QACVkD,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACvBC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;MAChB,CAAC,CAAC,EACF,0BACF,CAAC;IACH,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFvD,QAAQ,CAAC,UAAU,EAAE,MAAM;IACzB,IAAIyD,GAAG;IAEPlC,UAAU,CAAC,MAAM;MACfkC,GAAG,GAAG,IAAI7D,QAAQ,CAAC;QACjB8D,SAAS,EAAE,GAAG;QACdC,UAAU,EAAE,GAAG;QACfC,SAAS,EAAE;MACb,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF3D,EAAE,CAAC,0CAA0C,eAAA0B,iBAAA,CAAE,aAAY;MACzD,MAAMnC,MAAM,CAACoC,OAAO,CAClB6B,GAAG,CAACrD,OAAO,CAAC;QACVyD,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAAE;QACvBC,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;MAChB,CAAC,CAAC,EACF,0BACF,CAAC;IACH,CAAC,EAAC;IAEF7D,EAAE,CAAC,mDAAmD,eAAA0B,iBAAA,CAAE,aAAY;MAClE8B,GAAG,CAACM,gBAAgB,CAAC,IAAI,CAAC;MAE1B,MAAMjB,MAAM,SAASW,GAAG,CAACrD,OAAO,CAAC;QAC/ByD,QAAQ,EAAE,CAAC,IAAIzC,KAAK,CAAC,GAAG,CAAC,CAACuB,IAAI,CAAC,CAAC,CAAC,CAAC;QAClCmB,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;MACf,CAAC,CAAC;MAEFtE,MAAM,CAACsD,MAAM,EAAE,qDAAqD,CAAC;IACvE,CAAC,EAAC;IAEF7C,EAAE,CAAC,4CAA4C,eAAA0B,iBAAA,CAAE,aAAY;MAC3D8B,GAAG,CAACO,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;MAE7B,MAAMxE,MAAM,CAACoC,OAAO,CAClB6B,GAAG,CAACpD,QAAQ,CAAC;QAAE4D,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAAE,CAAC,CAAC,EACzC,2BACF,CAAC;IACH,CAAC,EAAC;IAEFhE,EAAE,CAAC,kCAAkC,eAAA0B,iBAAA,CAAE,aAAY;MACjD;MACA,MAAM8B,GAAG,CAACrD,OAAO,CAAC;QAChByD,QAAQ,EAAE,CAAC,IAAIzC,KAAK,CAAC,GAAG,CAAC,CAACuB,IAAI,CAAC,CAAC,CAAC,CAAC;QAClCmB,OAAO,EAAE,CAAC,CAAC;MACb,CAAC,CAAC;;MAEF;MACAL,GAAG,CAACS,gBAAgB,CAAC,CAAC;;MAEtB;MACA,MAAMpB,MAAM,SAASW,GAAG,CAACrD,OAAO,CAAC;QAC/ByD,QAAQ,EAAE,CAAC,IAAIzC,KAAK,CAAC,GAAG,CAAC,CAACuB,IAAI,CAAC,CAAC,CAAC,CAAC;QAClCmB,OAAO,EAAE,CAAC,CAAC;MACb,CAAC,CAAC;MAEFtE,MAAM,CAACsD,MAAM,EAAE,yCAAyC,CAAC;IAC3D,CAAC,EAAC;EACJ,CAAC,CAAC;EAEF9C,QAAQ,CAAC,aAAa,EAAE,MAAM;IAC5B,IAAImE,MAAM;IAEV5C,UAAU,CAAC,MAAM;MACf4C,MAAM,GAAG,IAAItE,WAAW,CAAC;QACvBuE,UAAU,EAAE,IAAI;QAChBC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAAE;QACtB9B,aAAa,EAAE;MACjB,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFtC,EAAE,CAAC,wCAAwC,eAAA0B,iBAAA,CAAE,aAAY;MACvDwC,MAAM,CAACG,gBAAgB,GAAG,KAAK;MAE/B,MAAMxB,MAAM,SAASqB,MAAM,CAAC/D,OAAO,CAAC;QAClCsC,KAAK,EAAE,IAAItB,KAAK,CAAC,CAAC,CAAC,CAACuB,IAAI,CAAC,IAAIvB,KAAK,CAAC,GAAG,CAAC,CAACuB,IAAI,CAAC,IAAIvB,KAAK,CAAC,GAAG,CAAC,CAACuB,IAAI,CAAC,CAAC,CAAC,CAAC;MACtE,CAAC,CAAC;MAEFnD,MAAM,CAACsD,MAAM,EAAE,sDAAsD,CAAC;IACxE,CAAC,EAAC;IAEF7C,EAAE,CAAC,2CAA2C,eAAA0B,iBAAA,CAAE,aAAY;MAC1D;MACA,MAAM4C,UAAU,GAAG,IAAI1E,WAAW,CAAC;QACjCuE,UAAU,EAAE,EAAE;QACdC,MAAM,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAAE;QAC1B9B,aAAa,EAAE;MACjB,CAAC,CAAC;MAEF,MAAMO,MAAM,SAASyB,UAAU,CAACnE,OAAO,CAAC;QACtCsC,KAAK,EAAE,IAAItB,KAAK,CAAC,CAAC,CAAC,CAACuB,IAAI,CAAC,IAAIvB,KAAK,CAAC,EAAE,CAAC,CAACuB,IAAI,CAAC,IAAIvB,KAAK,CAAC,EAAE,CAAC,CAACuB,IAAI,CAAC,CAAC,CAAC,CAAC;MACpE,CAAC,CAAC;MAEFnD,MAAM,CAACsD,MAAM,EAAE,uCAAuC,CAAC;IACzD,CAAC,EAAC;IAEF7C,EAAE,CAAC,kDAAkD,eAAA0B,iBAAA,CAAE,aAAY;MACjEwC,MAAM,CAACK,aAAa,CAAC,IAAI,CAAC;MAE1B,MAAMhF,MAAM,CAACoC,OAAO,CAClBuC,MAAM,CAAC/D,OAAO,CAAC;QACbsC,KAAK,EAAE,IAAItB,KAAK,CAAC,CAAC,CAAC,CAACuB,IAAI,CAAC,IAAIvB,KAAK,CAAC,GAAG,CAAC,CAACuB,IAAI,CAAC,IAAIvB,KAAK,CAAC,GAAG,CAAC,CAACuB,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACxE,CAAC,CAAC,EACF,4BACF,CAAC;IACH,CAAC,EAAC;EACJ,CAAC,CAAC;EAEF3C,QAAQ,CAAC,kBAAkB,EAAE,MAAM;IACjC,IAAIyE,WAAW;IAEflD,UAAU,CAAC,MAAM;MACfkD,WAAW,GAAG,IAAI3E,gBAAgB,CAAC;QACjC4E,MAAM,EAAE,GAAG;QACXC,MAAM,EAAE,CAAC;QACTC,OAAO,EAAE,CAAC;QACVC,SAAS,EAAE;MACb,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF5E,EAAE,CAAC,yCAAyC,eAAA0B,iBAAA,CAAE,aAAY;MACxD,MAAMmB,MAAM,SAAS2B,WAAW,CAACrE,OAAO,CAAC;QACvC4B,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACrB8C,IAAI,EAAE,IAAI,CAAC;MACb,CAAC,CAAC;MAEFtF,MAAM,CAACsD,MAAM,EAAE,oCAAoC,CAAC;IACtD,CAAC,EAAC;IAEF7C,EAAE,CAAC,uCAAuC,eAAA0B,iBAAA,CAAE,aAAY;MACtD,MAAMnC,MAAM,CAACoC,OAAO,CAClB6C,WAAW,CAACrE,OAAO,CAAC;QAClB4B,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAAE;QACvB+C,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MAC9B,CAAC,CAAC,EACF,uBACF,CAAC;IACH,CAAC,EAAC;IAEF9E,EAAE,CAAC,0CAA0C,eAAA0B,iBAAA,CAAE,aAAY;MACzD;MACA,MAAMqD,YAAY,GAAG,IAAI5D,KAAK,CAAC,IAAI,CAAC,CAACuB,IAAI,CAAC,CAAC,CAAC;MAE5C,MAAMnD,MAAM,CAACoC,OAAO,CAClB6C,WAAW,CAACrE,OAAO,CAAC;QAClB4B,KAAK,EAAE,CAACgD,YAAY;MACtB,CAAC,CAAC,EACF,mBACF,CAAC;IACH,CAAC,EAAC;IAEF/E,EAAE,CAAC,6CAA6C,eAAA0B,iBAAA,CAAE,aAAY;MAC5D8C,WAAW,CAACQ,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;;MAE9B,MAAMzF,MAAM,CAACoC,OAAO,CAClB6C,WAAW,CAACrE,OAAO,CAAC;QAClB4B,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACtB,CAAC,CAAC,EACF,wBACF,CAAC;IACH,CAAC,EAAC;IAEF/B,EAAE,CAAC,8CAA8C,eAAA0B,iBAAA,CAAE,aAAY;MAC7D8C,WAAW,CAACS,gBAAgB,CAAC,CAAC;MAE9B,MAAMpC,MAAM,SAAS2B,WAAW,CAACrE,OAAO,CAAC;QACvC4B,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACtB,CAAC,CAAC;MAEFxC,MAAM,CAACsD,MAAM,EAAE,yCAAyC,CAAC;IAC3D,CAAC,EAAC;EACJ,CAAC,CAAC;EAEF9C,QAAQ,CAAC,2BAA2B,EAAE,MAAM;IAC1CC,EAAE,CAAC,+CAA+C,eAAA0B,iBAAA,CAAE,aAAY;MAC9D,MAAMwD,MAAM,GAAG,CACb,IAAIzF,QAAQ,CAAC;QAAE6C,aAAa,EAAE,CAAC;QAAEC,aAAa,EAAE;MAAG,CAAC,CAAC,EACrD,IAAI5C,QAAQ,CAAC;QAAE8D,SAAS,EAAE,GAAG;QAAEC,UAAU,EAAE;MAAI,CAAC,CAAC,EACjD,IAAI7D,gBAAgB,CAAC;QAAE4E,MAAM,EAAE,GAAG;QAAEC,MAAM,EAAE,CAAC;QAAEE,SAAS,EAAE;MAAK,CAAC,CAAC,CAClE;;MAED;MACA,MAAMO,QAAQ,GAAG;QAAED,MAAM;QAAEE,IAAI,EAAE;MAAW,CAAC;MAE7C,MAAM7F,MAAM,CAACoC,OAAO,CAClB0D,eAAe,CAACF,QAAQ,EAAE;QAAEG,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;MAAE,CAAC,CAAC,EAC9C,0BACF,CAAC;IACH,CAAC,EAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AAAA,SACeD,eAAeA,CAAAE,EAAA,EAAAC,GAAA;EAAA,OAAAC,gBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA,EAY9B;AAAA,SAAAF,iBAAA;EAAAA,gBAAA,GAAA/D,iBAAA,CAZA,WAA+ByD,QAAQ,EAAEpD,KAAK,EAAE;IAC9C,MAAM6D,WAAW,SAASC,OAAO,CAACC,GAAG,CACnCX,QAAQ,CAACD,MAAM,CAACa,GAAG,CAACC,KAAK,IAAIA,KAAK,CAAC7F,OAAO,CAAC4B,KAAK,CAAC,CACnD,CAAC;IAED,IAAI,CAAC6D,WAAW,CAACK,KAAK,CAACC,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAKP,WAAW,CAAC,CAAC,CAAC,CAACO,MAAM,CAAC,EAAE;MAC/D,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;IACzD;IAEA,OAAOR,WAAW;EACpB,CAAC;EAAA,OAAAH,gBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAGD,IAAIU,MAAM,CAACC,IAAI,CAACC,GAAG,KAAK,UAAUC,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;EACnDC,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;;EAEtD;EACA,MAAM;IAAEC;EAAI,CAAC,GAAG,MAAM,MAAM,CAAC,kBAAkB,CAAC;EAChD,MAAMA,GAAG,CAACC,UAAU,CAAC;AACvB","ignoreList":[]}