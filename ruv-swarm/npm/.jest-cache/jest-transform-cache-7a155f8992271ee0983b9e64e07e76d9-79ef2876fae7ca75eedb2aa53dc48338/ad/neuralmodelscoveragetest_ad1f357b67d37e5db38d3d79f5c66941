b805d97c8d84b8343365c9f7510477f8
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * Neural Models Coverage Tests
 * Tests all neural model implementations for 100% coverage
 */

import assert from 'assert';
import { AutoencoderModel, CNNModel, GNNModel, GRUModel, ResNetModel, TransformerModel, BaseNeuralModel } from '../src/neural-models/index.js';
describe('Neural Models 100% Coverage', () => {
  describe('BaseNeuralModel', () => {
    it('should handle abstract method calls', () => {
      const base = new BaseNeuralModel();
      assert.throws(() => base.forward(), /Not implemented/);
      assert.throws(() => base.backward(), /Not implemented/);
    });
    it('should handle parameter initialization edge cases', () => {
      const base = new BaseNeuralModel();

      // Test with invalid dimensions
      assert.throws(() => base.initializeParameters({
        dimensions: -1
      }), /Invalid dimensions/);

      // Test with null config
      assert.throws(() => base.initializeParameters(null), /Configuration required/);
    });
    it('should handle serialization of complex states', () => {
      const base = new BaseNeuralModel();
      base._state = {
        weights: new Float32Array([1, 2, 3]),
        metadata: {
          version: 1
        },
        training: {
          epochs: 100
        }
      };
      const serialized = base.serialize();
      const deserialized = BaseNeuralModel.deserialize(serialized);
      assert.deepEqual(Array.from(deserialized._state.weights), [1, 2, 3]);
    });
  });
  describe('AutoencoderModel', () => {
    let autoencoder;
    beforeEach(() => {
      autoencoder = new AutoencoderModel({
        inputDim: 784,
        hiddenDim: 128,
        latentDim: 32
      });
    });
    it('should handle encoding with invalid inputs', /*#__PURE__*/_asyncToGenerator(function* () {
      yield assert.rejects(autoencoder.encode(null), /Invalid input/);
      yield assert.rejects(autoencoder.encode([[1, 2]]),
      // Wrong dimension
      /Dimension mismatch/);
    }));
    it('should handle decoding with invalid latent vectors', /*#__PURE__*/_asyncToGenerator(function* () {
      yield assert.rejects(autoencoder.decode(null), /Invalid latent vector/);
      yield assert.rejects(autoencoder.decode([[1, 2]]),
      // Wrong latent dimension
      /Latent dimension mismatch/);
    }));
    it('should handle training with corrupted data', /*#__PURE__*/_asyncToGenerator(function* () {
      const corruptedData = [{
        input: null,
        target: [1, 2, 3]
      }, {
        input: [1, 2, 3],
        target: null
      }];
      yield assert.rejects(autoencoder.train(corruptedData), /Invalid training data/);
    }));
    it('should handle regularization edge cases', /*#__PURE__*/_asyncToGenerator(function* () {
      autoencoder.setRegularization({
        l1: -0.1,
        // Invalid negative regularization
        l2: 0.01
      });
      yield assert.rejects(autoencoder.train([]), /Invalid regularization/);
    }));
  });
  describe('CNNModel', () => {
    let cnn;
    beforeEach(() => {
      cnn = new CNNModel({
        inputChannels: 3,
        outputClasses: 10,
        kernelSizes: [3, 5, 7]
      });
    });
    it('should handle invalid image dimensions', /*#__PURE__*/_asyncToGenerator(function* () {
      yield assert.rejects(cnn.forward({
        image: null
      }), /Invalid image input/);
      yield assert.rejects(cnn.forward({
        image: new Array(3).fill(new Array(32).fill(0)) // Missing dimension
      }), /Invalid image dimensions/);
    }));
    it('should handle pooling with invalid parameters', /*#__PURE__*/_asyncToGenerator(function* () {
      cnn._poolingSize = -1;
      yield assert.rejects(cnn.forward({
        image: new Array(3).fill(new Array(32).fill(new Array(32).fill(0)))
      }), /Invalid pooling size/);
    }));
    it('should handle batch normalization edge cases', /*#__PURE__*/_asyncToGenerator(function* () {
      cnn.enableBatchNorm(true);

      // Single sample (batch size 1) should handle differently
      const result = yield cnn.forward({
        image: [new Array(3).fill(new Array(32).fill(new Array(32).fill(0)))]
      });
      assert(result, 'Should handle batch size 1');
    }));
    it('should handle dropout during inference', /*#__PURE__*/_asyncToGenerator(function* () {
      cnn.setDropout(0.5);
      cnn.eval(); // Set to evaluation mode

      const result1 = yield cnn.forward({
        image: new Array(3).fill(new Array(32).fill(new Array(32).fill(1)))
      });
      const result2 = yield cnn.forward({
        image: new Array(3).fill(new Array(32).fill(new Array(32).fill(1)))
      });

      // Results should be identical in eval mode
      assert.deepEqual(result1, result2, 'Dropout should be disabled in eval mode');
    }));
  });
  describe('GNNModel', () => {
    let gnn;
    beforeEach(() => {
      gnn = new GNNModel({
        nodeDim: 64,
        edgeDim: 32,
        hiddenDim: 128
      });
    });
    it('should handle invalid graph structures', /*#__PURE__*/_asyncToGenerator(function* () {
      yield assert.rejects(gnn.forward({
        nodes: null,
        edges: [[0, 1]]
      }), /Invalid nodes/);
      yield assert.rejects(gnn.forward({
        nodes: [[1, 2, 3]],
        edges: null
      }), /Invalid edges/);
    }));
    it('should handle disconnected graphs', /*#__PURE__*/_asyncToGenerator(function* () {
      const result = yield gnn.forward({
        nodes: [[1, 2], [3, 4], [5, 6]],
        edges: [[0, 1]] // Node 2 is disconnected
      });
      assert(result, 'Should handle disconnected nodes');
    }));
    it('should handle self-loops in graphs', /*#__PURE__*/_asyncToGenerator(function* () {
      const result = yield gnn.forward({
        nodes: [[1, 2], [3, 4]],
        edges: [[0, 0], [0, 1], [1, 1]] // Self-loops
      });
      assert(result, 'Should handle self-loops');
    }));
    it('should handle message passing failures', /*#__PURE__*/_asyncToGenerator(function* () {
      gnn._messagePassingEnabled = false;
      yield assert.rejects(gnn.forward({
        nodes: [[1, 2], [3, 4]],
        edges: [[0, 1]]
      }), /Message passing disabled/);
    }));
  });
  describe('GRUModel', () => {
    let gru;
    beforeEach(() => {
      gru = new GRUModel({
        inputSize: 100,
        hiddenSize: 256,
        numLayers: 2
      });
    });
    it('should handle sequence length mismatches', /*#__PURE__*/_asyncToGenerator(function* () {
      yield assert.rejects(gru.forward({
        sequence: [[1, 2, 3]],
        // Wrong input size
        lengths: [10] // Mismatched length
      }), /Sequence length mismatch/);
    }));
    it('should handle bidirectional processing edge cases', /*#__PURE__*/_asyncToGenerator(function* () {
      gru.setBidirectional(true);
      const result = yield gru.forward({
        sequence: [new Array(100).fill(0)],
        lengths: [1] // Single timestep
      });
      assert(result, 'Should handle single timestep in bidirectional mode');
    }));
    it('should handle gradient clipping edge cases', /*#__PURE__*/_asyncToGenerator(function* () {
      gru.setGradientClipping(-1); // Invalid negative clipping

      yield assert.rejects(gru.backward({
        gradOutput: [[1, 2, 3]]
      }), /Invalid gradient clipping/);
    }));
    it('should handle hidden state reset', /*#__PURE__*/_asyncToGenerator(function* () {
      // Process a sequence
      yield gru.forward({
        sequence: [new Array(100).fill(1)],
        lengths: [1]
      });

      // Reset hidden state
      gru.resetHiddenState();

      // Process another sequence
      const result = yield gru.forward({
        sequence: [new Array(100).fill(2)],
        lengths: [1]
      });
      assert(result, 'Should process after hidden state reset');
    }));
  });
  describe('ResNetModel', () => {
    let resnet;
    beforeEach(() => {
      resnet = new ResNetModel({
        numClasses: 1000,
        layers: [3, 4, 6, 3],
        // ResNet-50 configuration
        inputChannels: 3
      });
    });
    it('should handle skip connection failures', /*#__PURE__*/_asyncToGenerator(function* () {
      resnet._skipConnections = false;
      const result = yield resnet.forward({
        image: new Array(3).fill(new Array(224).fill(new Array(224).fill(0)))
      });
      assert(result, 'Should work without skip connections (plain network)');
    }));
    it('should handle identity mapping edge cases', /*#__PURE__*/_asyncToGenerator(function* () {
      // Test with very deep network
      const deepResnet = new ResNetModel({
        numClasses: 10,
        layers: [10, 10, 10, 10],
        // Very deep
        inputChannels: 1
      });
      const result = yield deepResnet.forward({
        image: new Array(1).fill(new Array(32).fill(new Array(32).fill(1)))
      });
      assert(result, 'Should handle very deep architectures');
    }));
    it('should handle bottleneck architecture edge cases', /*#__PURE__*/_asyncToGenerator(function* () {
      resnet.useBottleneck(true);
      yield assert.rejects(resnet.forward({
        image: new Array(2).fill(new Array(224).fill(new Array(224).fill(0))) // Wrong channels
      }), /Channel dimension mismatch/);
    }));
  });
  describe('TransformerModel', () => {
    let transformer;
    beforeEach(() => {
      transformer = new TransformerModel({
        dModel: 512,
        nHeads: 8,
        nLayers: 6,
        vocabSize: 10000
      });
    });
    it('should handle attention mask edge cases', /*#__PURE__*/_asyncToGenerator(function* () {
      const result = yield transformer.forward({
        input: [[1, 2, 3, 4]],
        mask: null // No mask (full attention)
      });
      assert(result, 'Should work without attention mask');
    }));
    it('should handle padding mask edge cases', /*#__PURE__*/_asyncToGenerator(function* () {
      yield assert.rejects(transformer.forward({
        input: [[1, 2, 0, 0]],
        // Padded sequence
        paddingMask: [[1, 1, 1, 1]] // Wrong mask (no padding indicated)
      }), /Padding mask mismatch/);
    }));
    it('should handle position encoding overflow', /*#__PURE__*/_asyncToGenerator(function* () {
      // Very long sequence
      const longSequence = new Array(5000).fill(1);
      yield assert.rejects(transformer.forward({
        input: [longSequence]
      }), /Sequence too long/);
    }));
    it('should handle multi-head attention failures', /*#__PURE__*/_asyncToGenerator(function* () {
      transformer._heads[0] = null; // Corrupt one attention head

      yield assert.rejects(transformer.forward({
        input: [[1, 2, 3, 4]]
      }), /Attention head failure/);
    }));
    it('should handle layer normalization edge cases', /*#__PURE__*/_asyncToGenerator(function* () {
      transformer.disableLayerNorm();
      const result = yield transformer.forward({
        input: [[1, 2, 3, 4]]
      });
      assert(result, 'Should work without layer normalization');
    }));
  });
  describe('Model Ensemble Edge Cases', () => {
    it('should handle ensemble with mixed model types', /*#__PURE__*/_asyncToGenerator(function* () {
      const models = [new CNNModel({
        inputChannels: 3,
        outputClasses: 10
      }), new GRUModel({
        inputSize: 100,
        hiddenSize: 128
      }), new TransformerModel({
        dModel: 256,
        nHeads: 4,
        vocabSize: 1000
      })];

      // Ensemble should handle incompatible models
      const ensemble = {
        models,
        vote: 'majority'
      };
      yield assert.rejects(ensemblePredict(ensemble, {
        data: [1, 2, 3]
      }), /Incompatible model types/);
    }));
  });
});

// Helper function for ensemble prediction
function ensemblePredict(_x, _x2) {
  return _ensemblePredict.apply(this, arguments);
} // Run tests when executed directly
function _ensemblePredict() {
  _ensemblePredict = _asyncToGenerator(function* (ensemble, input) {
    const predictions = yield Promise.all(ensemble.models.map(model => model.forward(input)));
    if (!predictions.every(p => p.length === predictions[0].length)) {
      throw new Error('Incompatible model types in ensemble');
    }
    return predictions;
  });
  return _ensemblePredict.apply(this, arguments);
}
if (import.meta.url === `file://${process.argv[1]}`) {
  console.log('Running neural models coverage tests...');

  // Run all tests
  const {
    run
  } = await import('./test-runner.js');
  await run(__filename);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhc3NlcnQiLCJBdXRvZW5jb2Rlck1vZGVsIiwiQ05OTW9kZWwiLCJHTk5Nb2RlbCIsIkdSVU1vZGVsIiwiUmVzTmV0TW9kZWwiLCJUcmFuc2Zvcm1lck1vZGVsIiwiQmFzZU5ldXJhbE1vZGVsIiwiZGVzY3JpYmUiLCJpdCIsImJhc2UiLCJ0aHJvd3MiLCJmb3J3YXJkIiwiYmFja3dhcmQiLCJpbml0aWFsaXplUGFyYW1ldGVycyIsImRpbWVuc2lvbnMiLCJfc3RhdGUiLCJ3ZWlnaHRzIiwiRmxvYXQzMkFycmF5IiwibWV0YWRhdGEiLCJ2ZXJzaW9uIiwidHJhaW5pbmciLCJlcG9jaHMiLCJzZXJpYWxpemVkIiwic2VyaWFsaXplIiwiZGVzZXJpYWxpemVkIiwiZGVzZXJpYWxpemUiLCJkZWVwRXF1YWwiLCJBcnJheSIsImZyb20iLCJhdXRvZW5jb2RlciIsImJlZm9yZUVhY2giLCJpbnB1dERpbSIsImhpZGRlbkRpbSIsImxhdGVudERpbSIsIl9hc3luY1RvR2VuZXJhdG9yIiwicmVqZWN0cyIsImVuY29kZSIsImRlY29kZSIsImNvcnJ1cHRlZERhdGEiLCJpbnB1dCIsInRhcmdldCIsInRyYWluIiwic2V0UmVndWxhcml6YXRpb24iLCJsMSIsImwyIiwiY25uIiwiaW5wdXRDaGFubmVscyIsIm91dHB1dENsYXNzZXMiLCJrZXJuZWxTaXplcyIsImltYWdlIiwiZmlsbCIsIl9wb29saW5nU2l6ZSIsImVuYWJsZUJhdGNoTm9ybSIsInJlc3VsdCIsInNldERyb3BvdXQiLCJldmFsIiwicmVzdWx0MSIsInJlc3VsdDIiLCJnbm4iLCJub2RlRGltIiwiZWRnZURpbSIsIm5vZGVzIiwiZWRnZXMiLCJfbWVzc2FnZVBhc3NpbmdFbmFibGVkIiwiZ3J1IiwiaW5wdXRTaXplIiwiaGlkZGVuU2l6ZSIsIm51bUxheWVycyIsInNlcXVlbmNlIiwibGVuZ3RocyIsInNldEJpZGlyZWN0aW9uYWwiLCJzZXRHcmFkaWVudENsaXBwaW5nIiwiZ3JhZE91dHB1dCIsInJlc2V0SGlkZGVuU3RhdGUiLCJyZXNuZXQiLCJudW1DbGFzc2VzIiwibGF5ZXJzIiwiX3NraXBDb25uZWN0aW9ucyIsImRlZXBSZXNuZXQiLCJ1c2VCb3R0bGVuZWNrIiwidHJhbnNmb3JtZXIiLCJkTW9kZWwiLCJuSGVhZHMiLCJuTGF5ZXJzIiwidm9jYWJTaXplIiwibWFzayIsInBhZGRpbmdNYXNrIiwibG9uZ1NlcXVlbmNlIiwiX2hlYWRzIiwiZGlzYWJsZUxheWVyTm9ybSIsIm1vZGVscyIsImVuc2VtYmxlIiwidm90ZSIsImVuc2VtYmxlUHJlZGljdCIsImRhdGEiLCJfeCIsIl94MiIsIl9lbnNlbWJsZVByZWRpY3QiLCJhcHBseSIsImFyZ3VtZW50cyIsInByZWRpY3Rpb25zIiwiUHJvbWlzZSIsImFsbCIsIm1hcCIsIm1vZGVsIiwiZXZlcnkiLCJwIiwibGVuZ3RoIiwiRXJyb3IiLCJpbXBvcnQiLCJtZXRhIiwidXJsIiwicHJvY2VzcyIsImFyZ3YiLCJjb25zb2xlIiwibG9nIiwicnVuIiwiX19maWxlbmFtZSJdLCJzb3VyY2VzIjpbIm5ldXJhbC1tb2RlbHMtY292ZXJhZ2UudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE5ldXJhbCBNb2RlbHMgQ292ZXJhZ2UgVGVzdHNcbiAqIFRlc3RzIGFsbCBuZXVyYWwgbW9kZWwgaW1wbGVtZW50YXRpb25zIGZvciAxMDAlIGNvdmVyYWdlXG4gKi9cblxuaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnO1xuaW1wb3J0IHsgXG4gIEF1dG9lbmNvZGVyTW9kZWwsXG4gIENOTk1vZGVsLFxuICBHTk5Nb2RlbCxcbiAgR1JVTW9kZWwsXG4gIFJlc05ldE1vZGVsLFxuICBUcmFuc2Zvcm1lck1vZGVsLFxuICBCYXNlTmV1cmFsTW9kZWxcbn0gZnJvbSAnLi4vc3JjL25ldXJhbC1tb2RlbHMvaW5kZXguanMnO1xuXG5kZXNjcmliZSgnTmV1cmFsIE1vZGVscyAxMDAlIENvdmVyYWdlJywgKCkgPT4ge1xuICBkZXNjcmliZSgnQmFzZU5ldXJhbE1vZGVsJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaGFuZGxlIGFic3RyYWN0IG1ldGhvZCBjYWxscycsICgpID0+IHtcbiAgICAgIGNvbnN0IGJhc2UgPSBuZXcgQmFzZU5ldXJhbE1vZGVsKCk7XG4gICAgICBcbiAgICAgIGFzc2VydC50aHJvd3MoXG4gICAgICAgICgpID0+IGJhc2UuZm9yd2FyZCgpLFxuICAgICAgICAvTm90IGltcGxlbWVudGVkL1xuICAgICAgKTtcbiAgICAgIFxuICAgICAgYXNzZXJ0LnRocm93cyhcbiAgICAgICAgKCkgPT4gYmFzZS5iYWNrd2FyZCgpLFxuICAgICAgICAvTm90IGltcGxlbWVudGVkL1xuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHBhcmFtZXRlciBpbml0aWFsaXphdGlvbiBlZGdlIGNhc2VzJywgKCkgPT4ge1xuICAgICAgY29uc3QgYmFzZSA9IG5ldyBCYXNlTmV1cmFsTW9kZWwoKTtcbiAgICAgIFxuICAgICAgLy8gVGVzdCB3aXRoIGludmFsaWQgZGltZW5zaW9uc1xuICAgICAgYXNzZXJ0LnRocm93cyhcbiAgICAgICAgKCkgPT4gYmFzZS5pbml0aWFsaXplUGFyYW1ldGVycyh7IGRpbWVuc2lvbnM6IC0xIH0pLFxuICAgICAgICAvSW52YWxpZCBkaW1lbnNpb25zL1xuICAgICAgKTtcbiAgICAgIFxuICAgICAgLy8gVGVzdCB3aXRoIG51bGwgY29uZmlnXG4gICAgICBhc3NlcnQudGhyb3dzKFxuICAgICAgICAoKSA9PiBiYXNlLmluaXRpYWxpemVQYXJhbWV0ZXJzKG51bGwpLFxuICAgICAgICAvQ29uZmlndXJhdGlvbiByZXF1aXJlZC9cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBzZXJpYWxpemF0aW9uIG9mIGNvbXBsZXggc3RhdGVzJywgKCkgPT4ge1xuICAgICAgY29uc3QgYmFzZSA9IG5ldyBCYXNlTmV1cmFsTW9kZWwoKTtcbiAgICAgIGJhc2UuX3N0YXRlID0ge1xuICAgICAgICB3ZWlnaHRzOiBuZXcgRmxvYXQzMkFycmF5KFsxLCAyLCAzXSksXG4gICAgICAgIG1ldGFkYXRhOiB7IHZlcnNpb246IDEgfSxcbiAgICAgICAgdHJhaW5pbmc6IHsgZXBvY2hzOiAxMDAgfVxuICAgICAgfTtcbiAgICAgIFxuICAgICAgY29uc3Qgc2VyaWFsaXplZCA9IGJhc2Uuc2VyaWFsaXplKCk7XG4gICAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBCYXNlTmV1cmFsTW9kZWwuZGVzZXJpYWxpemUoc2VyaWFsaXplZCk7XG4gICAgICBcbiAgICAgIGFzc2VydC5kZWVwRXF1YWwoXG4gICAgICAgIEFycmF5LmZyb20oZGVzZXJpYWxpemVkLl9zdGF0ZS53ZWlnaHRzKSxcbiAgICAgICAgWzEsIDIsIDNdXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQXV0b2VuY29kZXJNb2RlbCcsICgpID0+IHtcbiAgICBsZXQgYXV0b2VuY29kZXI7XG5cbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIGF1dG9lbmNvZGVyID0gbmV3IEF1dG9lbmNvZGVyTW9kZWwoe1xuICAgICAgICBpbnB1dERpbTogNzg0LFxuICAgICAgICBoaWRkZW5EaW06IDEyOCxcbiAgICAgICAgbGF0ZW50RGltOiAzMlxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBlbmNvZGluZyB3aXRoIGludmFsaWQgaW5wdXRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgYXNzZXJ0LnJlamVjdHMoXG4gICAgICAgIGF1dG9lbmNvZGVyLmVuY29kZShudWxsKSxcbiAgICAgICAgL0ludmFsaWQgaW5wdXQvXG4gICAgICApO1xuICAgICAgXG4gICAgICBhd2FpdCBhc3NlcnQucmVqZWN0cyhcbiAgICAgICAgYXV0b2VuY29kZXIuZW5jb2RlKFtbMSwgMl1dKSwgLy8gV3JvbmcgZGltZW5zaW9uXG4gICAgICAgIC9EaW1lbnNpb24gbWlzbWF0Y2gvXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZGVjb2Rpbmcgd2l0aCBpbnZhbGlkIGxhdGVudCB2ZWN0b3JzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgYXNzZXJ0LnJlamVjdHMoXG4gICAgICAgIGF1dG9lbmNvZGVyLmRlY29kZShudWxsKSxcbiAgICAgICAgL0ludmFsaWQgbGF0ZW50IHZlY3Rvci9cbiAgICAgICk7XG4gICAgICBcbiAgICAgIGF3YWl0IGFzc2VydC5yZWplY3RzKFxuICAgICAgICBhdXRvZW5jb2Rlci5kZWNvZGUoW1sxLCAyXV0pLCAvLyBXcm9uZyBsYXRlbnQgZGltZW5zaW9uXG4gICAgICAgIC9MYXRlbnQgZGltZW5zaW9uIG1pc21hdGNoL1xuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHRyYWluaW5nIHdpdGggY29ycnVwdGVkIGRhdGEnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb3JydXB0ZWREYXRhID0gW1xuICAgICAgICB7IGlucHV0OiBudWxsLCB0YXJnZXQ6IFsxLCAyLCAzXSB9LFxuICAgICAgICB7IGlucHV0OiBbMSwgMiwgM10sIHRhcmdldDogbnVsbCB9XG4gICAgICBdO1xuICAgICAgXG4gICAgICBhd2FpdCBhc3NlcnQucmVqZWN0cyhcbiAgICAgICAgYXV0b2VuY29kZXIudHJhaW4oY29ycnVwdGVkRGF0YSksXG4gICAgICAgIC9JbnZhbGlkIHRyYWluaW5nIGRhdGEvXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgcmVndWxhcml6YXRpb24gZWRnZSBjYXNlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGF1dG9lbmNvZGVyLnNldFJlZ3VsYXJpemF0aW9uKHtcbiAgICAgICAgbDE6IC0wLjEsIC8vIEludmFsaWQgbmVnYXRpdmUgcmVndWxhcml6YXRpb25cbiAgICAgICAgbDI6IDAuMDFcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBhd2FpdCBhc3NlcnQucmVqZWN0cyhcbiAgICAgICAgYXV0b2VuY29kZXIudHJhaW4oW10pLFxuICAgICAgICAvSW52YWxpZCByZWd1bGFyaXphdGlvbi9cbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdDTk5Nb2RlbCcsICgpID0+IHtcbiAgICBsZXQgY25uO1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBjbm4gPSBuZXcgQ05OTW9kZWwoe1xuICAgICAgICBpbnB1dENoYW5uZWxzOiAzLFxuICAgICAgICBvdXRwdXRDbGFzc2VzOiAxMCxcbiAgICAgICAga2VybmVsU2l6ZXM6IFszLCA1LCA3XVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBpbnZhbGlkIGltYWdlIGRpbWVuc2lvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBhc3NlcnQucmVqZWN0cyhcbiAgICAgICAgY25uLmZvcndhcmQoeyBpbWFnZTogbnVsbCB9KSxcbiAgICAgICAgL0ludmFsaWQgaW1hZ2UgaW5wdXQvXG4gICAgICApO1xuICAgICAgXG4gICAgICBhd2FpdCBhc3NlcnQucmVqZWN0cyhcbiAgICAgICAgY25uLmZvcndhcmQoeyBcbiAgICAgICAgICBpbWFnZTogbmV3IEFycmF5KDMpLmZpbGwobmV3IEFycmF5KDMyKS5maWxsKDApKSAvLyBNaXNzaW5nIGRpbWVuc2lvblxuICAgICAgICB9KSxcbiAgICAgICAgL0ludmFsaWQgaW1hZ2UgZGltZW5zaW9ucy9cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBwb29saW5nIHdpdGggaW52YWxpZCBwYXJhbWV0ZXJzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY25uLl9wb29saW5nU2l6ZSA9IC0xO1xuICAgICAgXG4gICAgICBhd2FpdCBhc3NlcnQucmVqZWN0cyhcbiAgICAgICAgY25uLmZvcndhcmQoeyBpbWFnZTogbmV3IEFycmF5KDMpLmZpbGwobmV3IEFycmF5KDMyKS5maWxsKG5ldyBBcnJheSgzMikuZmlsbCgwKSkpIH0pLFxuICAgICAgICAvSW52YWxpZCBwb29saW5nIHNpemUvXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgYmF0Y2ggbm9ybWFsaXphdGlvbiBlZGdlIGNhc2VzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY25uLmVuYWJsZUJhdGNoTm9ybSh0cnVlKTtcbiAgICAgIFxuICAgICAgLy8gU2luZ2xlIHNhbXBsZSAoYmF0Y2ggc2l6ZSAxKSBzaG91bGQgaGFuZGxlIGRpZmZlcmVudGx5XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjbm4uZm9yd2FyZCh7XG4gICAgICAgIGltYWdlOiBbbmV3IEFycmF5KDMpLmZpbGwobmV3IEFycmF5KDMyKS5maWxsKG5ldyBBcnJheSgzMikuZmlsbCgwKSkpXVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGFzc2VydChyZXN1bHQsICdTaG91bGQgaGFuZGxlIGJhdGNoIHNpemUgMScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZHJvcG91dCBkdXJpbmcgaW5mZXJlbmNlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY25uLnNldERyb3BvdXQoMC41KTtcbiAgICAgIGNubi5ldmFsKCk7IC8vIFNldCB0byBldmFsdWF0aW9uIG1vZGVcbiAgICAgIFxuICAgICAgY29uc3QgcmVzdWx0MSA9IGF3YWl0IGNubi5mb3J3YXJkKHtcbiAgICAgICAgaW1hZ2U6IG5ldyBBcnJheSgzKS5maWxsKG5ldyBBcnJheSgzMikuZmlsbChuZXcgQXJyYXkoMzIpLmZpbGwoMSkpKVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3VsdDIgPSBhd2FpdCBjbm4uZm9yd2FyZCh7XG4gICAgICAgIGltYWdlOiBuZXcgQXJyYXkoMykuZmlsbChuZXcgQXJyYXkoMzIpLmZpbGwobmV3IEFycmF5KDMyKS5maWxsKDEpKSlcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICAvLyBSZXN1bHRzIHNob3VsZCBiZSBpZGVudGljYWwgaW4gZXZhbCBtb2RlXG4gICAgICBhc3NlcnQuZGVlcEVxdWFsKHJlc3VsdDEsIHJlc3VsdDIsICdEcm9wb3V0IHNob3VsZCBiZSBkaXNhYmxlZCBpbiBldmFsIG1vZGUnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0dOTk1vZGVsJywgKCkgPT4ge1xuICAgIGxldCBnbm47XG5cbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIGdubiA9IG5ldyBHTk5Nb2RlbCh7XG4gICAgICAgIG5vZGVEaW06IDY0LFxuICAgICAgICBlZGdlRGltOiAzMixcbiAgICAgICAgaGlkZGVuRGltOiAxMjhcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgaW52YWxpZCBncmFwaCBzdHJ1Y3R1cmVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgYXNzZXJ0LnJlamVjdHMoXG4gICAgICAgIGdubi5mb3J3YXJkKHsgbm9kZXM6IG51bGwsIGVkZ2VzOiBbWzAsIDFdXSB9KSxcbiAgICAgICAgL0ludmFsaWQgbm9kZXMvXG4gICAgICApO1xuICAgICAgXG4gICAgICBhd2FpdCBhc3NlcnQucmVqZWN0cyhcbiAgICAgICAgZ25uLmZvcndhcmQoeyBcbiAgICAgICAgICBub2RlczogW1sxLCAyLCAzXV0sIFxuICAgICAgICAgIGVkZ2VzOiBudWxsIFxuICAgICAgICB9KSxcbiAgICAgICAgL0ludmFsaWQgZWRnZXMvXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZGlzY29ubmVjdGVkIGdyYXBocycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdubi5mb3J3YXJkKHtcbiAgICAgICAgbm9kZXM6IFtbMSwgMl0sIFszLCA0XSwgWzUsIDZdXSxcbiAgICAgICAgZWRnZXM6IFtbMCwgMV1dIC8vIE5vZGUgMiBpcyBkaXNjb25uZWN0ZWRcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBhc3NlcnQocmVzdWx0LCAnU2hvdWxkIGhhbmRsZSBkaXNjb25uZWN0ZWQgbm9kZXMnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHNlbGYtbG9vcHMgaW4gZ3JhcGhzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ25uLmZvcndhcmQoe1xuICAgICAgICBub2RlczogW1sxLCAyXSwgWzMsIDRdXSxcbiAgICAgICAgZWRnZXM6IFtbMCwgMF0sIFswLCAxXSwgWzEsIDFdXSAvLyBTZWxmLWxvb3BzXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgYXNzZXJ0KHJlc3VsdCwgJ1Nob3VsZCBoYW5kbGUgc2VsZi1sb29wcycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbWVzc2FnZSBwYXNzaW5nIGZhaWx1cmVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgZ25uLl9tZXNzYWdlUGFzc2luZ0VuYWJsZWQgPSBmYWxzZTtcbiAgICAgIFxuICAgICAgYXdhaXQgYXNzZXJ0LnJlamVjdHMoXG4gICAgICAgIGdubi5mb3J3YXJkKHtcbiAgICAgICAgICBub2RlczogW1sxLCAyXSwgWzMsIDRdXSxcbiAgICAgICAgICBlZGdlczogW1swLCAxXV1cbiAgICAgICAgfSksXG4gICAgICAgIC9NZXNzYWdlIHBhc3NpbmcgZGlzYWJsZWQvXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnR1JVTW9kZWwnLCAoKSA9PiB7XG4gICAgbGV0IGdydTtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgZ3J1ID0gbmV3IEdSVU1vZGVsKHtcbiAgICAgICAgaW5wdXRTaXplOiAxMDAsXG4gICAgICAgIGhpZGRlblNpemU6IDI1NixcbiAgICAgICAgbnVtTGF5ZXJzOiAyXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHNlcXVlbmNlIGxlbmd0aCBtaXNtYXRjaGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgYXNzZXJ0LnJlamVjdHMoXG4gICAgICAgIGdydS5mb3J3YXJkKHtcbiAgICAgICAgICBzZXF1ZW5jZTogW1sxLCAyLCAzXV0sIC8vIFdyb25nIGlucHV0IHNpemVcbiAgICAgICAgICBsZW5ndGhzOiBbMTBdIC8vIE1pc21hdGNoZWQgbGVuZ3RoXG4gICAgICAgIH0pLFxuICAgICAgICAvU2VxdWVuY2UgbGVuZ3RoIG1pc21hdGNoL1xuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGJpZGlyZWN0aW9uYWwgcHJvY2Vzc2luZyBlZGdlIGNhc2VzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgZ3J1LnNldEJpZGlyZWN0aW9uYWwodHJ1ZSk7XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdydS5mb3J3YXJkKHtcbiAgICAgICAgc2VxdWVuY2U6IFtuZXcgQXJyYXkoMTAwKS5maWxsKDApXSxcbiAgICAgICAgbGVuZ3RoczogWzFdIC8vIFNpbmdsZSB0aW1lc3RlcFxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGFzc2VydChyZXN1bHQsICdTaG91bGQgaGFuZGxlIHNpbmdsZSB0aW1lc3RlcCBpbiBiaWRpcmVjdGlvbmFsIG1vZGUnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGdyYWRpZW50IGNsaXBwaW5nIGVkZ2UgY2FzZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBncnUuc2V0R3JhZGllbnRDbGlwcGluZygtMSk7IC8vIEludmFsaWQgbmVnYXRpdmUgY2xpcHBpbmdcbiAgICAgIFxuICAgICAgYXdhaXQgYXNzZXJ0LnJlamVjdHMoXG4gICAgICAgIGdydS5iYWNrd2FyZCh7IGdyYWRPdXRwdXQ6IFtbMSwgMiwgM11dIH0pLFxuICAgICAgICAvSW52YWxpZCBncmFkaWVudCBjbGlwcGluZy9cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBoaWRkZW4gc3RhdGUgcmVzZXQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBQcm9jZXNzIGEgc2VxdWVuY2VcbiAgICAgIGF3YWl0IGdydS5mb3J3YXJkKHtcbiAgICAgICAgc2VxdWVuY2U6IFtuZXcgQXJyYXkoMTAwKS5maWxsKDEpXSxcbiAgICAgICAgbGVuZ3RoczogWzFdXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gUmVzZXQgaGlkZGVuIHN0YXRlXG4gICAgICBncnUucmVzZXRIaWRkZW5TdGF0ZSgpO1xuICAgICAgXG4gICAgICAvLyBQcm9jZXNzIGFub3RoZXIgc2VxdWVuY2VcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdydS5mb3J3YXJkKHtcbiAgICAgICAgc2VxdWVuY2U6IFtuZXcgQXJyYXkoMTAwKS5maWxsKDIpXSxcbiAgICAgICAgbGVuZ3RoczogWzFdXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgYXNzZXJ0KHJlc3VsdCwgJ1Nob3VsZCBwcm9jZXNzIGFmdGVyIGhpZGRlbiBzdGF0ZSByZXNldCcpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUmVzTmV0TW9kZWwnLCAoKSA9PiB7XG4gICAgbGV0IHJlc25ldDtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgcmVzbmV0ID0gbmV3IFJlc05ldE1vZGVsKHtcbiAgICAgICAgbnVtQ2xhc3NlczogMTAwMCxcbiAgICAgICAgbGF5ZXJzOiBbMywgNCwgNiwgM10sIC8vIFJlc05ldC01MCBjb25maWd1cmF0aW9uXG4gICAgICAgIGlucHV0Q2hhbm5lbHM6IDNcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgc2tpcCBjb25uZWN0aW9uIGZhaWx1cmVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgcmVzbmV0Ll9za2lwQ29ubmVjdGlvbnMgPSBmYWxzZTtcbiAgICAgIFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzbmV0LmZvcndhcmQoe1xuICAgICAgICBpbWFnZTogbmV3IEFycmF5KDMpLmZpbGwobmV3IEFycmF5KDIyNCkuZmlsbChuZXcgQXJyYXkoMjI0KS5maWxsKDApKSlcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBhc3NlcnQocmVzdWx0LCAnU2hvdWxkIHdvcmsgd2l0aG91dCBza2lwIGNvbm5lY3Rpb25zIChwbGFpbiBuZXR3b3JrKScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgaWRlbnRpdHkgbWFwcGluZyBlZGdlIGNhc2VzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gVGVzdCB3aXRoIHZlcnkgZGVlcCBuZXR3b3JrXG4gICAgICBjb25zdCBkZWVwUmVzbmV0ID0gbmV3IFJlc05ldE1vZGVsKHtcbiAgICAgICAgbnVtQ2xhc3NlczogMTAsXG4gICAgICAgIGxheWVyczogWzEwLCAxMCwgMTAsIDEwXSwgLy8gVmVyeSBkZWVwXG4gICAgICAgIGlucHV0Q2hhbm5lbHM6IDFcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBkZWVwUmVzbmV0LmZvcndhcmQoe1xuICAgICAgICBpbWFnZTogbmV3IEFycmF5KDEpLmZpbGwobmV3IEFycmF5KDMyKS5maWxsKG5ldyBBcnJheSgzMikuZmlsbCgxKSkpXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgYXNzZXJ0KHJlc3VsdCwgJ1Nob3VsZCBoYW5kbGUgdmVyeSBkZWVwIGFyY2hpdGVjdHVyZXMnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGJvdHRsZW5lY2sgYXJjaGl0ZWN0dXJlIGVkZ2UgY2FzZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICByZXNuZXQudXNlQm90dGxlbmVjayh0cnVlKTtcbiAgICAgIFxuICAgICAgYXdhaXQgYXNzZXJ0LnJlamVjdHMoXG4gICAgICAgIHJlc25ldC5mb3J3YXJkKHtcbiAgICAgICAgICBpbWFnZTogbmV3IEFycmF5KDIpLmZpbGwobmV3IEFycmF5KDIyNCkuZmlsbChuZXcgQXJyYXkoMjI0KS5maWxsKDApKSkgLy8gV3JvbmcgY2hhbm5lbHNcbiAgICAgICAgfSksXG4gICAgICAgIC9DaGFubmVsIGRpbWVuc2lvbiBtaXNtYXRjaC9cbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdUcmFuc2Zvcm1lck1vZGVsJywgKCkgPT4ge1xuICAgIGxldCB0cmFuc2Zvcm1lcjtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgdHJhbnNmb3JtZXIgPSBuZXcgVHJhbnNmb3JtZXJNb2RlbCh7XG4gICAgICAgIGRNb2RlbDogNTEyLFxuICAgICAgICBuSGVhZHM6IDgsXG4gICAgICAgIG5MYXllcnM6IDYsXG4gICAgICAgIHZvY2FiU2l6ZTogMTAwMDBcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgYXR0ZW50aW9uIG1hc2sgZWRnZSBjYXNlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRyYW5zZm9ybWVyLmZvcndhcmQoe1xuICAgICAgICBpbnB1dDogW1sxLCAyLCAzLCA0XV0sXG4gICAgICAgIG1hc2s6IG51bGwgLy8gTm8gbWFzayAoZnVsbCBhdHRlbnRpb24pXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgYXNzZXJ0KHJlc3VsdCwgJ1Nob3VsZCB3b3JrIHdpdGhvdXQgYXR0ZW50aW9uIG1hc2snKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHBhZGRpbmcgbWFzayBlZGdlIGNhc2VzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgYXNzZXJ0LnJlamVjdHMoXG4gICAgICAgIHRyYW5zZm9ybWVyLmZvcndhcmQoe1xuICAgICAgICAgIGlucHV0OiBbWzEsIDIsIDAsIDBdXSwgLy8gUGFkZGVkIHNlcXVlbmNlXG4gICAgICAgICAgcGFkZGluZ01hc2s6IFtbMSwgMSwgMSwgMV1dIC8vIFdyb25nIG1hc2sgKG5vIHBhZGRpbmcgaW5kaWNhdGVkKVxuICAgICAgICB9KSxcbiAgICAgICAgL1BhZGRpbmcgbWFzayBtaXNtYXRjaC9cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBwb3NpdGlvbiBlbmNvZGluZyBvdmVyZmxvdycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIFZlcnkgbG9uZyBzZXF1ZW5jZVxuICAgICAgY29uc3QgbG9uZ1NlcXVlbmNlID0gbmV3IEFycmF5KDUwMDApLmZpbGwoMSk7XG4gICAgICBcbiAgICAgIGF3YWl0IGFzc2VydC5yZWplY3RzKFxuICAgICAgICB0cmFuc2Zvcm1lci5mb3J3YXJkKHtcbiAgICAgICAgICBpbnB1dDogW2xvbmdTZXF1ZW5jZV1cbiAgICAgICAgfSksXG4gICAgICAgIC9TZXF1ZW5jZSB0b28gbG9uZy9cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBtdWx0aS1oZWFkIGF0dGVudGlvbiBmYWlsdXJlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIHRyYW5zZm9ybWVyLl9oZWFkc1swXSA9IG51bGw7IC8vIENvcnJ1cHQgb25lIGF0dGVudGlvbiBoZWFkXG4gICAgICBcbiAgICAgIGF3YWl0IGFzc2VydC5yZWplY3RzKFxuICAgICAgICB0cmFuc2Zvcm1lci5mb3J3YXJkKHtcbiAgICAgICAgICBpbnB1dDogW1sxLCAyLCAzLCA0XV1cbiAgICAgICAgfSksXG4gICAgICAgIC9BdHRlbnRpb24gaGVhZCBmYWlsdXJlL1xuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGxheWVyIG5vcm1hbGl6YXRpb24gZWRnZSBjYXNlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIHRyYW5zZm9ybWVyLmRpc2FibGVMYXllck5vcm0oKTtcbiAgICAgIFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdHJhbnNmb3JtZXIuZm9yd2FyZCh7XG4gICAgICAgIGlucHV0OiBbWzEsIDIsIDMsIDRdXVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGFzc2VydChyZXN1bHQsICdTaG91bGQgd29yayB3aXRob3V0IGxheWVyIG5vcm1hbGl6YXRpb24nKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ01vZGVsIEVuc2VtYmxlIEVkZ2UgQ2FzZXMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZW5zZW1ibGUgd2l0aCBtaXhlZCBtb2RlbCB0eXBlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vZGVscyA9IFtcbiAgICAgICAgbmV3IENOTk1vZGVsKHsgaW5wdXRDaGFubmVsczogMywgb3V0cHV0Q2xhc3NlczogMTAgfSksXG4gICAgICAgIG5ldyBHUlVNb2RlbCh7IGlucHV0U2l6ZTogMTAwLCBoaWRkZW5TaXplOiAxMjggfSksXG4gICAgICAgIG5ldyBUcmFuc2Zvcm1lck1vZGVsKHsgZE1vZGVsOiAyNTYsIG5IZWFkczogNCwgdm9jYWJTaXplOiAxMDAwIH0pXG4gICAgICBdO1xuICAgICAgXG4gICAgICAvLyBFbnNlbWJsZSBzaG91bGQgaGFuZGxlIGluY29tcGF0aWJsZSBtb2RlbHNcbiAgICAgIGNvbnN0IGVuc2VtYmxlID0geyBtb2RlbHMsIHZvdGU6ICdtYWpvcml0eScgfTtcbiAgICAgIFxuICAgICAgYXdhaXQgYXNzZXJ0LnJlamVjdHMoXG4gICAgICAgIGVuc2VtYmxlUHJlZGljdChlbnNlbWJsZSwgeyBkYXRhOiBbMSwgMiwgM10gfSksXG4gICAgICAgIC9JbmNvbXBhdGlibGUgbW9kZWwgdHlwZXMvXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuXG4vLyBIZWxwZXIgZnVuY3Rpb24gZm9yIGVuc2VtYmxlIHByZWRpY3Rpb25cbmFzeW5jIGZ1bmN0aW9uIGVuc2VtYmxlUHJlZGljdChlbnNlbWJsZSwgaW5wdXQpIHtcbiAgY29uc3QgcHJlZGljdGlvbnMgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICBlbnNlbWJsZS5tb2RlbHMubWFwKG1vZGVsID0+IG1vZGVsLmZvcndhcmQoaW5wdXQpKVxuICApO1xuICBcbiAgaWYgKCFwcmVkaWN0aW9ucy5ldmVyeShwID0+IHAubGVuZ3RoID09PSBwcmVkaWN0aW9uc1swXS5sZW5ndGgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbmNvbXBhdGlibGUgbW9kZWwgdHlwZXMgaW4gZW5zZW1ibGUnKTtcbiAgfVxuICBcbiAgcmV0dXJuIHByZWRpY3Rpb25zO1xufVxuXG4vLyBSdW4gdGVzdHMgd2hlbiBleGVjdXRlZCBkaXJlY3RseVxuaWYgKGltcG9ydC5tZXRhLnVybCA9PT0gYGZpbGU6Ly8ke3Byb2Nlc3MuYXJndlsxXX1gKSB7XG4gIGNvbnNvbGUubG9nKCdSdW5uaW5nIG5ldXJhbCBtb2RlbHMgY292ZXJhZ2UgdGVzdHMuLi4nKTtcbiAgXG4gIC8vIFJ1biBhbGwgdGVzdHNcbiAgY29uc3QgeyBydW4gfSA9IGF3YWl0IGltcG9ydCgnLi90ZXN0LXJ1bm5lci5qcycpO1xuICBhd2FpdCBydW4oX19maWxlbmFtZSk7XG59Il0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE1BQU0sTUFBTSxRQUFRO0FBQzNCLFNBQ0VDLGdCQUFnQixFQUNoQkMsUUFBUSxFQUNSQyxRQUFRLEVBQ1JDLFFBQVEsRUFDUkMsV0FBVyxFQUNYQyxnQkFBZ0IsRUFDaEJDLGVBQWUsUUFDViwrQkFBK0I7QUFFdENDLFFBQVEsQ0FBQyw2QkFBNkIsRUFBRSxNQUFNO0VBQzVDQSxRQUFRLENBQUMsaUJBQWlCLEVBQUUsTUFBTTtJQUNoQ0MsRUFBRSxDQUFDLHFDQUFxQyxFQUFFLE1BQU07TUFDOUMsTUFBTUMsSUFBSSxHQUFHLElBQUlILGVBQWUsQ0FBQyxDQUFDO01BRWxDUCxNQUFNLENBQUNXLE1BQU0sQ0FDWCxNQUFNRCxJQUFJLENBQUNFLE9BQU8sQ0FBQyxDQUFDLEVBQ3BCLGlCQUNGLENBQUM7TUFFRFosTUFBTSxDQUFDVyxNQUFNLENBQ1gsTUFBTUQsSUFBSSxDQUFDRyxRQUFRLENBQUMsQ0FBQyxFQUNyQixp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RSxHQUFHO1FBQUVDLE1BQU0sRUFBRSxDQUFDO1FBQUVFLFNBQVMsRUFBRTtNQUFLLENBQUMsQ0FBQyxDQUNsRTs7TUFFRDtNQUNBLE1BQU1PLFFBQVEsR0FBRztRQUFFRCxNQUFNO1FBQUVFLElBQUksRUFBRTtNQUFXLENBQUM7TUFFN0MsTUFBTTdGLE1BQU0sQ0FBQ29DLE9BQU8sQ0FDbEIwRCxlQUFlLENBQUNGLFFBQVEsRUFBRTtRQUFFRyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7TUFBRSxDQUFDLENBQUMsRUFDOUMsMEJBQ0YsQ0FBQztJQUNILENBQUMsRUFBQztFQUNKLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQzs7QUFFRjtBQUFBLFNBQ2VELGVBQWVBLENBQUFFLEVBQUEsRUFBQUMsR0FBQTtFQUFBLE9BQUFDLGdCQUFBLENBQUFDLEtBQUEsT0FBQUMsU0FBQTtBQUFBLEVBWTlCO0FBQUEsU0FBQUYsaUJBQUE7RUFBQUEsZ0JBQUEsR0FBQS9ELGlCQUFBLENBWkEsV0FBK0J5RCxRQUFRLEVBQUVwRCxLQUFLLEVBQUU7SUFDOUMsTUFBTTZELFdBQVcsU0FBU0MsT0FBTyxDQUFDQyxHQUFHLENBQ25DWCxRQUFRLENBQUNELE1BQU0sQ0FBQ2EsR0FBRyxDQUFDQyxLQUFLLElBQUlBLEtBQUssQ0FBQzdGLE9BQU8sQ0FBQzRCLEtBQUssQ0FBQyxDQUNuRCxDQUFDO0lBRUQsSUFBSSxDQUFDNkQsV0FBVyxDQUFDSyxLQUFLLENBQUNDLENBQUMsSUFBSUEsQ0FBQyxDQUFDQyxNQUFNLEtBQUtQLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQ08sTUFBTSxDQUFDLEVBQUU7TUFDL0QsTUFBTSxJQUFJQyxLQUFLLENBQUMsc0NBQXNDLENBQUM7SUFDekQ7SUFFQSxPQUFPUixXQUFXO0VBQ3BCLENBQUM7RUFBQSxPQUFBSCxnQkFBQSxDQUFBQyxLQUFBLE9BQUFDLFNBQUE7QUFBQTtBQUdELElBQUlVLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDQyxHQUFHLEtBQUssVUFBVUMsT0FBTyxDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtFQUNuREMsT0FBTyxDQUFDQyxHQUFHLENBQUMseUNBQXlDLENBQUM7O0VBRXREO0VBQ0EsTUFBTTtJQUFFQztFQUFJLENBQUMsR0FBRyxNQUFNLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQztFQUNoRCxNQUFNQSxHQUFHLENBQUNDLFVBQVUsQ0FBQztBQUN2QiIsImlnbm9yZUxpc3QiOltdfQ==