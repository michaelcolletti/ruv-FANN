{"version":3,"names":["assert","RuvSwarm","NeuralAgent","NeuralNetworkManager","SwarmPersistence","WasmLoader","Benchmark","PerformanceAnalyzer","describe","ruv","swarm","beforeEach","_asyncToGenerator","initialize","createSwarm","topology","maxAgents","it","agent","spawn","type","rejects","execute","manager","create","dimensions","hugeData","Array","fill","data","repeat","process","promises","i","push","task","results","Promise","allSettled","successful","filter","r","status","length","model","_state","invalid","Symbol","serialize","persistence","_db","saveState","loader","loadModule","setTimeout","fetchData","agents","all","tasks","map","id","promise","longRunningOperation","race","_","reject","Error","cleanupCalled","onCleanup","executeWithCleanup","error","initialMemory","memoryUsage","heapUsed","_cache","global","gc","finalMemory","setCacheLimit","cache","getFromCache","benchmark","run","iterations","analyzer","analyze","metric","transformer","forward","input","attentionMask","kernelSize","gru","hiddenSize","hiddenState","autoencoder","reconstruct","agent1","agent2","_communicationEnabled","sendMessage","orchestrate","reconfigure","result","completed","afterEach","terminate","import","meta","url","argv","console","log","__filename"],"sources":["coverage-edge-cases.test.js"],"sourcesContent":["/**\n * Edge Case Tests for 100% Coverage\n * Tests error handling, edge cases, and uncovered branches\n */\n\nimport assert from 'assert';\nimport { RuvSwarm } from '../src/index.js';\nimport { NeuralAgent } from '../src/neural-agent.js';\nimport { NeuralNetworkManager } from '../src/neural-network-manager.js';\nimport { SwarmPersistence } from '../src/persistence.js';\nimport { WasmLoader } from '../src/wasm-loader.js';\nimport { Benchmark } from '../src/benchmark.js';\nimport { PerformanceAnalyzer } from '../src/performance.js';\n\ndescribe('Edge Cases for 100% Coverage', () => {\n  let ruv;\n  let swarm;\n\n  beforeEach(async () => {\n    ruv = await RuvSwarm.initialize();\n    swarm = await ruv.createSwarm({\n      topology: 'mesh',\n      maxAgents: 3\n    });\n  });\n\n  describe('Neural Network Edge Cases', () => {\n    it('should handle null inputs gracefully', async () => {\n      const agent = await swarm.spawn({ type: 'researcher' });\n      await assert.rejects(\n        agent.execute(null),\n        /Invalid input/\n      );\n    });\n\n    it('should handle invalid neural configurations', async () => {\n      const manager = new NeuralNetworkManager();\n      await assert.rejects(\n        manager.create({\n          type: 'invalid-type',\n          dimensions: -1\n        }),\n        /Invalid configuration/\n      );\n    });\n\n    it('should handle memory limit exceeded', async () => {\n      const agent = await swarm.spawn({ type: 'coder' });\n      const hugeData = new Array(1000000).fill({ data: 'x'.repeat(1000) });\n      \n      await assert.rejects(\n        agent.process(hugeData),\n        /Memory limit/\n      );\n    });\n\n    it('should handle concurrent operations race conditions', async () => {\n      const agent = await swarm.spawn({ type: 'analyst' });\n      const promises = [];\n      \n      // Create 100 concurrent operations\n      for (let i = 0; i < 100; i++) {\n        promises.push(agent.execute({ task: `concurrent-${i}` }));\n      }\n      \n      const results = await Promise.allSettled(promises);\n      const successful = results.filter(r => r.status === 'fulfilled');\n      assert(successful.length > 0, 'At least some operations should succeed');\n    });\n\n    it('should handle model serialization failures', async () => {\n      const manager = new NeuralNetworkManager();\n      const model = await manager.create({ type: 'gru' });\n      \n      // Corrupt the model state\n      model._state = { invalid: Symbol('not-serializable') };\n      \n      await assert.rejects(\n        manager.serialize(model),\n        /Serialization failed/\n      );\n    });\n  });\n\n  describe('Error Handling Paths', () => {\n    it('should handle database connection failures', async () => {\n      const persistence = new SwarmPersistence();\n      \n      // Force database error\n      persistence._db = null;\n      \n      await assert.rejects(\n        persistence.saveState(swarm),\n        /Database connection failed/\n      );\n    });\n\n    it('should handle WASM loading failures', async () => {\n      const loader = new WasmLoader();\n      \n      await assert.rejects(\n        loader.loadModule('/invalid/path/to/wasm'),\n        /Failed to load WASM/\n      );\n    });\n\n    it('should handle network timeouts', async () => {\n      const agent = await swarm.spawn({ type: 'researcher' });\n      \n      // Set unrealistic timeout\n      agent.setTimeout(1);\n      \n      await assert.rejects(\n        agent.fetchData('https://example.com/large-data'),\n        /Timeout/\n      );\n    });\n\n    it('should handle invalid configurations', async () => {\n      await assert.rejects(\n        ruv.createSwarm({\n          topology: 'invalid-topology',\n          maxAgents: -5\n        }),\n        /Invalid configuration/\n      );\n    });\n  });\n\n  describe('Async Operations', () => {\n    it('should handle promise rejections in batch operations', async () => {\n      const agents = await Promise.all([\n        swarm.spawn({ type: 'coder' }),\n        swarm.spawn({ type: 'tester' }),\n        swarm.spawn({ type: 'analyst' })\n      ]);\n      \n      const tasks = agents.map((agent, i) => ({\n        agent,\n        task: i === 1 ? null : { id: i } // Invalid task for second agent\n      }));\n      \n      const results = await Promise.allSettled(\n        tasks.map(({ agent, task }) => agent.execute(task))\n      );\n      \n      assert(results[1].status === 'rejected', 'Second task should fail');\n    });\n\n    it('should timeout after specified duration', async () => {\n      const agent = await swarm.spawn({ type: 'optimizer' });\n      \n      const promise = agent.longRunningOperation();\n      await assert.rejects(\n        Promise.race([\n          promise,\n          new Promise((_, reject) => \n            setTimeout(() => reject(new Error('Timeout')), 100)\n          )\n        ]),\n        /Timeout/\n      );\n    });\n\n    it('should handle cleanup on failure', async () => {\n      const agent = await swarm.spawn({ type: 'coordinator' });\n      let cleanupCalled = false;\n      \n      agent.onCleanup = () => { cleanupCalled = true; };\n      \n      try {\n        await agent.executeWithCleanup(null);\n      } catch (error) {\n        // Expected error\n      }\n      \n      assert(cleanupCalled, 'Cleanup should be called on failure');\n    });\n  });\n\n  describe('Memory Management', () => {\n    it('should handle memory leak scenarios', async () => {\n      const agent = await swarm.spawn({ type: 'researcher' });\n      const initialMemory = process.memoryUsage().heapUsed;\n      \n      // Create many objects without cleanup\n      for (let i = 0; i < 1000; i++) {\n        agent._cache[`key-${i}`] = new Array(1000).fill(i);\n      }\n      \n      // Force garbage collection if available\n      if (global.gc) {\n        global.gc();\n      }\n      \n      const finalMemory = process.memoryUsage().heapUsed;\n      assert(finalMemory < initialMemory + 50 * 1024 * 1024, 'Memory usage should be controlled');\n    });\n\n    it('should handle cache overflow', async () => {\n      const agent = await swarm.spawn({ type: 'coder' });\n      agent.setCacheLimit(10);\n      \n      // Add more items than cache limit\n      for (let i = 0; i < 20; i++) {\n        agent.cache(`key-${i}`, `value-${i}`);\n      }\n      \n      // Early items should be evicted\n      assert(!agent.getFromCache('key-0'), 'Old items should be evicted');\n      assert(agent.getFromCache('key-19'), 'Recent items should remain');\n    });\n  });\n\n  describe('Benchmark Edge Cases', () => {\n    it('should handle benchmark with zero iterations', async () => {\n      const benchmark = new Benchmark();\n      \n      await assert.rejects(\n        benchmark.run({ iterations: 0 }),\n        /Invalid iterations/\n      );\n    });\n\n    it('should handle performance analyzer with invalid metrics', async () => {\n      const analyzer = new PerformanceAnalyzer();\n      \n      await assert.rejects(\n        analyzer.analyze({ metric: 'invalid-metric' }),\n        /Unknown metric/\n      );\n    });\n  });\n\n  describe('Neural Model Specific Edge Cases', () => {\n    it('should handle transformer attention mask errors', async () => {\n      const manager = new NeuralNetworkManager();\n      const transformer = await manager.create({ type: 'transformer' });\n      \n      await assert.rejects(\n        transformer.forward({\n          input: [[1, 2, 3]],\n          attentionMask: null // Invalid mask\n        }),\n        /Invalid attention mask/\n      );\n    });\n\n    it('should handle CNN invalid kernel sizes', async () => {\n      const manager = new NeuralNetworkManager();\n      \n      await assert.rejects(\n        manager.create({ \n          type: 'cnn',\n          kernelSize: -1 \n        }),\n        /Invalid kernel size/\n      );\n    });\n\n    it('should handle GRU hidden state mismatch', async () => {\n      const manager = new NeuralNetworkManager();\n      const gru = await manager.create({ type: 'gru', hiddenSize: 128 });\n      \n      await assert.rejects(\n        gru.forward({\n          input: [[1, 2, 3]],\n          hiddenState: new Array(64).fill(0) // Wrong size\n        }),\n        /Hidden state dimension mismatch/\n      );\n    });\n\n    it('should handle autoencoder reconstruction with corrupted data', async () => {\n      const manager = new NeuralNetworkManager();\n      const autoencoder = await manager.create({ type: 'autoencoder' });\n      \n      await assert.rejects(\n        autoencoder.reconstruct(null),\n        /Invalid input for reconstruction/\n      );\n    });\n  });\n\n  describe('Swarm Coordination Edge Cases', () => {\n    it('should handle agent communication failures', async () => {\n      const agent1 = await swarm.spawn({ type: 'coordinator' });\n      const agent2 = await swarm.spawn({ type: 'researcher' });\n      \n      // Simulate network partition\n      agent2._communicationEnabled = false;\n      \n      await assert.rejects(\n        agent1.sendMessage(agent2.id, { data: 'test' }),\n        /Communication failed/\n      );\n    });\n\n    it('should handle topology reconfiguration during operation', async () => {\n      const task = swarm.orchestrate({ \n        task: 'complex-task',\n        agents: 5 \n      });\n      \n      // Change topology mid-operation\n      setTimeout(() => {\n        swarm.reconfigure({ topology: 'star' });\n      }, 50);\n      \n      const result = await task;\n      assert(result.completed, 'Task should complete despite reconfiguration');\n    });\n  });\n\n  afterEach(async () => {\n    // Cleanup\n    if (swarm) {\n      await swarm.terminate();\n    }\n  });\n});\n\n// Run tests when executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  console.log('Running edge case tests for 100% coverage...');\n  \n  // Run all tests\n  const { run } = await import('./test-runner.js');\n  await run(__filename);\n}"],"mappings":"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","ignoreList":[]}