b5322df8df675582986c5ed075e85843
// Mock dependencies
_getJestObj().mock('../../src/index-enhanced.js');
_getJestObj().mock('../../src/persistence.js');
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
/**
 * MCP Tools Validation Edge Cases
 * Tests all boundary conditions and error scenarios for MCP tool validation
 */

import { describe, it, expect, jest, beforeEach, afterEach } from '@jest/globals';
import { EnhancedMCPTools } from '../../src/mcp-tools-enhanced.js';
import { RuvSwarm } from '../../src/index-enhanced.js';
describe('MCP Validation Edge Cases', () => {
  let mcpTools;
  let mockRuvSwarm;
  beforeEach(() => {
    mockRuvSwarm = {
      createSwarm: jest.fn(),
      detectFeatures: jest.fn(),
      benchmark: jest.fn()
    };
    RuvSwarm.initialize = jest.fn().mockResolvedValue(mockRuvSwarm);
    mcpTools = new EnhancedMCPTools();
  });
  afterEach(() => {
    jest.clearAllMocks();
  });
  describe('Iteration Validation Edge Cases', () => {
    it('should reject iterations at boundary values', /*#__PURE__*/_asyncToGenerator(function* () {
      yield mcpTools.initialize(mockRuvSwarm);

      // Test boundary values
      const boundaryValues = [{
        value: 0,
        shouldFail: true
      }, {
        value: 1,
        shouldFail: false
      }, {
        value: 1000,
        shouldFail: false
      }, {
        value: 1001,
        shouldFail: true
      }, {
        value: -1,
        shouldFail: true
      }, {
        value: null,
        shouldFail: true
      }, {
        value: undefined,
        shouldFail: true
      }, {
        value: NaN,
        shouldFail: true
      }, {
        value: Infinity,
        shouldFail: true
      }, {
        value: -Infinity,
        shouldFail: true
      }, {
        value: '10',
        shouldFail: true
      }, {
        value: [10],
        shouldFail: true
      }, {
        value: {
          iterations: 10
        },
        shouldFail: true
      }, {
        value: 1.5,
        shouldFail: false
      },
      // Should be floored to 1
      {
        value: 999.999,
        shouldFail: false
      } // Should be floored to 999
      ];
      for (const {
        value,
        shouldFail
      } of boundaryValues) {
        if (shouldFail) {
          yield expect(mcpTools.benchmark_run({
            iterations: value
          })).rejects.toThrow(/Iterations must be/);
        } else {
          // Should not throw
          mockRuvSwarm.benchmark.mockResolvedValue({
            results: []
          });
          yield mcpTools.benchmark_run({
            iterations: value
          });
        }
      }
    }));
    it('should handle floating point precision issues', /*#__PURE__*/_asyncToGenerator(function* () {
      yield mcpTools.initialize(mockRuvSwarm);
      mockRuvSwarm.benchmark.mockResolvedValue({
        results: []
      });

      // Floating point edge cases
      const floatCases = [0.999999999999999,
      // Just under 1
      1.000000000000001,
      // Just over 1
      999.999999999999,
      // Just under 1000
      1000.000000000001 // Just over 1000 (should fail)
      ];
      for (const value of floatCases) {
        if (value > 1000) {
          yield expect(mcpTools.benchmark_run({
            iterations: value
          })).rejects.toThrow();
        } else {
          yield mcpTools.benchmark_run({
            iterations: value
          });
        }
      }
    }));
  });
  describe('Learning Rate Validation Edge Cases', () => {
    it('should validate learning rate boundaries', /*#__PURE__*/_asyncToGenerator(function* () {
      yield mcpTools.initialize(mockRuvSwarm);
      const learningRateTests = [{
        value: 0,
        shouldFail: true
      }, {
        value: 0.000001,
        shouldFail: false
      }, {
        value: 0.5,
        shouldFail: false
      }, {
        value: 1,
        shouldFail: false
      }, {
        value: 1.000001,
        shouldFail: true
      }, {
        value: -0.1,
        shouldFail: true
      }, {
        value: Number.EPSILON,
        shouldFail: false
      }, {
        value: 1 - Number.EPSILON,
        shouldFail: false
      }];
      for (const {
        value,
        shouldFail
      } of learningRateTests) {
        const mockSwarm = {
          spawn: jest.fn().mockResolvedValue({
            id: 'agent-1',
            train: jest.fn().mockResolvedValue({
              loss: 0.1
            })
          })
        };
        mcpTools.activeSwarms.set('test-swarm', mockSwarm);
        if (shouldFail) {
          yield expect(mcpTools.neural_train({
            swarmId: 'test-swarm',
            learningRate: value
          })).rejects.toThrow(/Learning rate must be/);
        } else {
          yield mcpTools.neural_train({
            swarmId: 'test-swarm',
            learningRate: value
          });
        }
      }
    }));
  });
  describe('Model Type Validation Edge Cases', () => {
    it('should handle case sensitivity and whitespace in model types', /*#__PURE__*/_asyncToGenerator(function* () {
      yield mcpTools.initialize(mockRuvSwarm);
      const modelTypeTests = [{
        value: 'feedforward',
        shouldFail: false
      }, {
        value: 'FEEDFORWARD',
        shouldFail: true
      }, {
        value: 'FeedForward',
        shouldFail: true
      }, {
        value: ' feedforward ',
        shouldFail: true
      }, {
        value: 'feedforward\n',
        shouldFail: true
      }, {
        value: 'feed forward',
        shouldFail: true
      }, {
        value: '',
        shouldFail: true
      }, {
        value: null,
        shouldFail: true
      }, {
        value: undefined,
        shouldFail: true
      }, {
        value: 123,
        shouldFail: true
      }, {
        value: ['feedforward'],
        shouldFail: true
      }];
      for (const {
        value,
        shouldFail
      } of modelTypeTests) {
        const mockSwarm = {
          spawn: jest.fn().mockResolvedValue({
            id: 'agent-1',
            capabilities: ['neural']
          })
        };
        mcpTools.activeSwarms.set('test-swarm', mockSwarm);
        if (shouldFail) {
          yield expect(mcpTools.agent_spawn({
            swarmId: 'test-swarm',
            type: 'neural',
            modelType: value
          })).rejects.toThrow();
        } else {
          yield mcpTools.agent_spawn({
            swarmId: 'test-swarm',
            type: 'neural',
            modelType: value
          });
        }
      }
    }));
  });
  describe('Swarm ID Edge Cases', () => {
    it('should handle special characters in swarm IDs', /*#__PURE__*/_asyncToGenerator(function* () {
      yield mcpTools.initialize(mockRuvSwarm);
      const specialIds = ['swarm-with-dashes', 'swarm_with_underscores', 'swarm.with.dots', 'swarm/with/slashes', 'swarm\\with\\backslashes', 'swarm with spaces', 'swarm\twith\ttabs', 'swarm\nwith\nnewlines', 'üêùemoji-swarmüêù', 'swarm;drop table swarms;--', 'swarm<script>alert("xss")</script>', '',
      // Empty string
      '.',
      // Just a dot
      '..',
      // Two dots
      'a'.repeat(1000) // Very long ID
      ];
      mockRuvSwarm.createSwarm.mockResolvedValue({
        id: 'created-swarm',
        topology: 'mesh',
        agents: []
      });
      for (const id of specialIds) {
        // Should handle all IDs gracefully
        const result = yield mcpTools.swarm_init({
          swarmId: id,
          topology: 'mesh'
        });

        // Some IDs might be normalized or rejected
        expect(result).toBeDefined();
      }
    }));
  });
  describe('Concurrent Operation Edge Cases', () => {
    it('should handle race conditions in swarm initialization', /*#__PURE__*/_asyncToGenerator(function* () {
      yield mcpTools.initialize(mockRuvSwarm);
      let callCount = 0;
      mockRuvSwarm.createSwarm.mockImplementation(/*#__PURE__*/_asyncToGenerator(function* () {
        callCount++;
        // Simulate varying processing times
        yield new Promise(resolve => setTimeout(resolve, Math.random() * 100));
        return {
          id: `swarm-${callCount}`,
          topology: 'mesh',
          agents: []
        };
      }));

      // Create many swarms concurrently
      const promises = [];
      for (let i = 0; i < 50; i++) {
        promises.push(mcpTools.swarm_init({
          swarmId: `concurrent-${i}`,
          topology: 'mesh'
        }));
      }
      const results = yield Promise.allSettled(promises);
      const successful = results.filter(r => r.status === 'fulfilled');
      expect(successful.length).toBeGreaterThan(0);
      expect(mcpTools.activeSwarms.size).toBe(successful.length);
    }));
    it('should handle concurrent operations on the same swarm', /*#__PURE__*/_asyncToGenerator(function* () {
      yield mcpTools.initialize(mockRuvSwarm);
      const mockSwarm = {
        id: 'test-swarm',
        spawn: jest.fn().mockImplementation(/*#__PURE__*/_asyncToGenerator(function* () {
          // Simulate processing delay
          yield new Promise(resolve => setTimeout(resolve, 10));
          return {
            id: `agent-${Date.now()}`,
            type: 'researcher'
          };
        })),
        agents: []
      };
      mockRuvSwarm.createSwarm.mockResolvedValue(mockSwarm);
      yield mcpTools.swarm_init({
        topology: 'mesh'
      });

      // Spawn many agents concurrently on the same swarm
      const spawnPromises = [];
      for (let i = 0; i < 20; i++) {
        spawnPromises.push(mcpTools.agent_spawn({
          swarmId: mockSwarm.id,
          type: 'researcher'
        }));
      }
      const results = yield Promise.allSettled(spawnPromises);
      const successful = results.filter(r => r.status === 'fulfilled');
      expect(successful.length).toBe(20);
      expect(mockSwarm.spawn).toHaveBeenCalledTimes(20);
    }));
  });
  describe('Memory Pressure Edge Cases', () => {
    it('should handle memory limits when creating large swarms', /*#__PURE__*/_asyncToGenerator(function* () {
      yield mcpTools.initialize(mockRuvSwarm);
      mockRuvSwarm.createSwarm.mockImplementation(/*#__PURE__*/function () {
        var _ref1 = _asyncToGenerator(function* (config) {
          if (config.maxAgents > 100) {
            throw new Error('Memory limit exceeded');
          }
          return {
            id: 'swarm-1',
            topology: config.topology,
            maxAgents: config.maxAgents,
            agents: []
          };
        });
        return function (_x) {
          return _ref1.apply(this, arguments);
        };
      }());

      // Test various agent counts
      yield expect(mcpTools.swarm_init({
        topology: 'mesh',
        maxAgents: 1000
      })).rejects.toThrow(/Memory limit/);

      // Should succeed with reasonable limits
      const result = yield mcpTools.swarm_init({
        topology: 'mesh',
        maxAgents: 50
      });
      expect(result.maxAgents).toBe(50);
    }));
    it('should handle memory cleanup on failure', /*#__PURE__*/_asyncToGenerator(function* () {
      yield mcpTools.initialize(mockRuvSwarm);
      let swarmCount = 0;
      mockRuvSwarm.createSwarm.mockImplementation(/*#__PURE__*/_asyncToGenerator(function* () {
        swarmCount++;
        if (swarmCount > 5) {
          throw new Error('Resource exhausted');
        }
        return {
          id: `swarm-${swarmCount}`,
          topology: 'mesh',
          terminate: jest.fn()
        };
      }));

      // Create swarms until failure
      const promises = [];
      for (let i = 0; i < 10; i++) {
        promises.push(mcpTools.swarm_init({
          topology: 'mesh'
        }));
      }
      const results = yield Promise.allSettled(promises);
      const failed = results.filter(r => r.status === 'rejected');
      expect(failed.length).toBe(4); // Should fail after 5 successful
      expect(mcpTools.activeSwarms.size).toBeLessThanOrEqual(5);
    }));
  });
  describe('Input Sanitization Edge Cases', () => {
    it('should sanitize potentially malicious inputs', /*#__PURE__*/_asyncToGenerator(function* () {
      yield mcpTools.initialize(mockRuvSwarm);
      const maliciousInputs = [{
        task: '<script>alert("xss")</script>'
      }, {
        task: '"; DROP TABLE swarms; --'
      }, {
        task: '${process.exit(1)}'
      }, {
        task: '`rm -rf /`'
      }, {
        task: '../../../etc/passwd'
      }, {
        task: 'file:///etc/passwd'
      }, {
        task: String.fromCharCode(0)
      },
      // Null character
      {
        task: '\x00\x01\x02\x03'
      } // Control characters
      ];
      const mockSwarm = {
        orchestrate: jest.fn().mockResolvedValue({
          id: 'task-1',
          status: 'completed'
        })
      };
      mcpTools.activeSwarms.set('test-swarm', mockSwarm);
      for (const input of maliciousInputs) {
        // Should sanitize and not throw
        const result = yield mcpTools.task_orchestrate(_objectSpread({
          swarmId: 'test-swarm'
        }, input));
        expect(result).toBeDefined();
        expect(result.status).toBe('completed');
      }
    }));
  });
  describe('Network and Timeout Edge Cases', () => {
    it('should handle network timeouts gracefully', /*#__PURE__*/_asyncToGenerator(function* () {
      yield mcpTools.initialize(mockRuvSwarm);
      const mockSwarm = {
        monitor: jest.fn().mockImplementation(/*#__PURE__*/_asyncToGenerator(function* () {
          // Simulate long network delay
          yield new Promise(resolve => setTimeout(resolve, 5000));
          return {
            status: 'timeout'
          };
        }))
      };
      mcpTools.activeSwarms.set('test-swarm', mockSwarm);

      // Set a shorter timeout for the test
      const timeoutPromise = new Promise((_, reject) => setTimeout(() => reject(new Error('Operation timeout')), 100));
      yield expect(Promise.race([mcpTools.swarm_monitor({
        swarmId: 'test-swarm'
      }), timeoutPromise])).rejects.toThrow(/timeout/i);
    }));
  });
  describe('State Consistency Edge Cases', () => {
    it('should maintain consistency during rapid state changes', /*#__PURE__*/_asyncToGenerator(function* () {
      yield mcpTools.initialize(mockRuvSwarm);
      const mockSwarm = {
        id: 'test-swarm',
        reconfigure: jest.fn().mockResolvedValue(true),
        getStatus: jest.fn().mockReturnValue({
          topology: 'mesh'
        })
      };
      mockRuvSwarm.createSwarm.mockResolvedValue(mockSwarm);
      yield mcpTools.swarm_init({
        topology: 'mesh'
      });

      // Rapid topology changes
      const topologies = ['star', 'ring', 'hierarchical', 'mesh'];
      const promises = [];
      for (let i = 0; i < 100; i++) {
        const topology = topologies[i % topologies.length];
        promises.push(mcpTools.swarm_reconfigure({
          swarmId: 'test-swarm',
          topology
        }).catch(() => null) // Ignore errors
        );
      }
      yield Promise.all(promises);

      // Check final state is consistent
      const status = yield mcpTools.swarm_status({
        swarmId: 'test-swarm'
      });
      expect(status).toBeDefined();
      expect(topologies).toContain(status.topology);
    }));
  });
});

// Run tests when executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  console.log('Running MCP validation edge case tests...');

  // Run all tests
  const {
    run
  } = await import('../test-runner.js');
  await run(__filename);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,