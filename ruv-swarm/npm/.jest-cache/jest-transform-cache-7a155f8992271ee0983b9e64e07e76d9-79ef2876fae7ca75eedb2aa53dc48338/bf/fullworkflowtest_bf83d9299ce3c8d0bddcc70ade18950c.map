{"version":3,"names":["expect","require","sinon","RuvSwarm","Agent","AgentCommunicator","NeuralAgentManager","taskOrchestrationSimulator","describe","sandbox","swarm","communicator","beforeEach","createSandbox","afterEach","_asyncToGenerator","shutdown","restore","it","init","topology","maxAgents","strategy","initStatus","getStatus","to","equal","isActive","be","true","agentPromises","spawnAgent","type","name","agents","Promise","all","have","lengthOf","forEach","agent","property","taskResult","orchestrateTask","task","priority","assignedAgents","length","at","least","startTime","Date","now","timeout","taskStatus","getTaskStatus","id","status","resolve","setTimeout","results","exist","performance","agentMetrics","getAgentMetrics","metric","shutdownStatus","false","coordinator","workers","messages","on","msg","push","coordinatorId","greaterThan","coordinatorMessages","filter","m","from","workerMessages","some","w","persistState","savedState","exportState","newSwarm","importState","restoredStatus","restoredTasks","getActiveTasks","enableNeural","neuralManager","initialize","model","neuralAgents","a","getAgentStatus","requiresNeural","neuralContribution","confidence","autoTrain","neuralAgent","trainable","initialMetrics","initialAccuracy","accuracy","trainingTasks","i","agentId","training","train","iterations","finalMetrics","trainingIterations","enableMemory","agent1","memory","capacity","agent2","storeMemory","memory1","getAgentMemory","memory2","swarmMemory","getSwarmMemory","collective","sharedMemory","shareFindings","getSharedMemory","agentView","shared","deep"],"sources":["full-workflow.test.js"],"sourcesContent":["const { expect } = require('chai');\nconst sinon = require('sinon');\nconst RuvSwarm = require('../../../../src/core/ruv-swarm');\nconst Agent = require('../../../../src/agent');\nconst AgentCommunicator = require('../../../../src/agent-communicator');\nconst NeuralAgentManager = require('../../../../src/neural-agent');\nconst { taskOrchestrationSimulator } = require('../../../../src/task-orchestrator');\n\ndescribe('Complete Agent Workflow Integration', () => {\n  let sandbox;\n  let swarm;\n  let communicator;\n\n  beforeEach(() => {\n    sandbox = sinon.createSandbox();\n    communicator = new AgentCommunicator();\n  });\n\n  afterEach(async () => {\n    if (swarm) {\n      await swarm.shutdown();\n    }\n    sandbox.restore();\n  });\n\n  describe('Full Lifecycle Tests', () => {\n    it('should handle complete workflow from spawn to completion', async () => {\n      // Initialize swarm with mesh topology\n      swarm = new RuvSwarm();\n      await swarm.init({ \n        topology: 'mesh',\n        maxAgents: 6,\n        strategy: 'balanced' \n      });\n\n      // Verify initialization\n      const initStatus = await swarm.getStatus();\n      expect(initStatus.topology).to.equal('mesh');\n      expect(initStatus.maxAgents).to.equal(6);\n      expect(initStatus.isActive).to.be.true;\n\n      // Spawn multiple agents in parallel\n      const agentPromises = [\n        swarm.spawnAgent({ type: 'researcher', name: 'Data Researcher' }),\n        swarm.spawnAgent({ type: 'coder', name: 'API Developer' }),\n        swarm.spawnAgent({ type: 'analyst', name: 'Performance Analyst' }),\n        swarm.spawnAgent({ type: 'tester', name: 'QA Engineer' })\n      ];\n\n      const agents = await Promise.all(agentPromises);\n      \n      // Verify all agents spawned successfully\n      expect(agents).to.have.lengthOf(4);\n      agents.forEach(agent => {\n        expect(agent).to.have.property('id');\n        expect(agent).to.have.property('type');\n        expect(agent).to.have.property('status', 'idle');\n      });\n\n      // Orchestrate a complex task\n      const taskResult = await swarm.orchestrateTask({\n        task: 'Build and optimize REST API with authentication',\n        priority: 'high',\n        strategy: 'parallel',\n        maxAgents: 4\n      });\n\n      // Verify task orchestration\n      expect(taskResult).to.have.property('id');\n      expect(taskResult).to.have.property('status');\n      expect(taskResult).to.have.property('assignedAgents');\n      expect(taskResult.assignedAgents).to.have.length.at.least(1);\n\n      // Wait for task completion with timeout\n      const startTime = Date.now();\n      const timeout = 30000; // 30 seconds\n      let taskStatus;\n\n      while (Date.now() - startTime < timeout) {\n        taskStatus = await swarm.getTaskStatus(taskResult.id);\n        if (taskStatus.status === 'completed' || taskStatus.status === 'failed') {\n          break;\n        }\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n\n      // Verify task completion\n      expect(taskStatus.status).to.equal('completed');\n      expect(taskStatus.results).to.exist;\n      expect(taskStatus.performance).to.have.property('totalTime');\n      expect(taskStatus.performance).to.have.property('efficiency');\n\n      // Get agent metrics\n      const agentMetrics = await swarm.getAgentMetrics();\n      expect(agentMetrics).to.have.property('agents');\n      expect(agentMetrics.agents).to.have.length.at.least(4);\n      \n      agentMetrics.agents.forEach(metric => {\n        expect(metric).to.have.property('tasksCompleted');\n        expect(metric).to.have.property('averagePerformance');\n        expect(metric).to.have.property('resourceUsage');\n      });\n\n      // Verify proper cleanup\n      await swarm.shutdown();\n      const shutdownStatus = await swarm.getStatus();\n      expect(shutdownStatus.isActive).to.be.false;\n      expect(shutdownStatus.agents).to.have.lengthOf(0);\n    });\n\n    it('should handle agent communication throughout lifecycle', async () => {\n      swarm = new RuvSwarm();\n      await swarm.init({ topology: 'star' });\n\n      // Spawn coordinator and worker agents\n      const coordinator = await swarm.spawnAgent({ \n        type: 'coordinator', \n        name: 'Central Coordinator' \n      });\n      \n      const workers = await Promise.all([\n        swarm.spawnAgent({ type: 'coder', name: 'Worker 1' }),\n        swarm.spawnAgent({ type: 'coder', name: 'Worker 2' }),\n        swarm.spawnAgent({ type: 'coder', name: 'Worker 3' })\n      ]);\n\n      // Set up message tracking\n      const messages = [];\n      communicator.on('message', (msg) => messages.push(msg));\n\n      // Orchestrate collaborative task\n      const taskResult = await swarm.orchestrateTask({\n        task: 'Implement microservices architecture',\n        strategy: 'sequential',\n        coordinatorId: coordinator.id\n      });\n\n      // Wait for some communication\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Verify communication patterns\n      expect(messages.length).to.be.greaterThan(0);\n      \n      const coordinatorMessages = messages.filter(m => m.from === coordinator.id);\n      const workerMessages = messages.filter(m => workers.some(w => w.id === m.from));\n      \n      expect(coordinatorMessages.length).to.be.greaterThan(0);\n      expect(workerMessages.length).to.be.greaterThan(0);\n\n      // Verify star topology communication\n      workerMessages.forEach(msg => {\n        expect(msg.to).to.equal(coordinator.id);\n      });\n    });\n\n    it('should persist and restore swarm state', async () => {\n      // Create initial swarm\n      swarm = new RuvSwarm();\n      await swarm.init({ \n        topology: 'hierarchical',\n        persistState: true \n      });\n\n      // Spawn agents and create state\n      const agents = await Promise.all([\n        swarm.spawnAgent({ type: 'architect' }),\n        swarm.spawnAgent({ type: 'coder' }),\n        swarm.spawnAgent({ type: 'analyst' })\n      ]);\n\n      const task = await swarm.orchestrateTask({\n        task: 'Design system architecture',\n        priority: 'high'\n      });\n\n      // Save current state\n      const savedState = await swarm.exportState();\n      expect(savedState).to.have.property('topology');\n      expect(savedState).to.have.property('agents');\n      expect(savedState).to.have.property('tasks');\n      expect(savedState).to.have.property('memory');\n\n      // Shutdown original swarm\n      await swarm.shutdown();\n\n      // Create new swarm and restore state\n      const newSwarm = new RuvSwarm();\n      await newSwarm.importState(savedState);\n\n      // Verify restoration\n      const restoredStatus = await newSwarm.getStatus();\n      expect(restoredStatus.topology).to.equal('hierarchical');\n      expect(restoredStatus.agents).to.have.lengthOf(3);\n      \n      const restoredTasks = await newSwarm.getActiveTasks();\n      expect(restoredTasks).to.have.lengthOf(1);\n      expect(restoredTasks[0].id).to.equal(task.id);\n\n      await newSwarm.shutdown();\n    });\n  });\n\n  describe('Neural Integration Lifecycle', () => {\n    it('should integrate neural agents with standard workflow', async () => {\n      swarm = new RuvSwarm();\n      await swarm.init({ \n        topology: 'mesh',\n        enableNeural: true \n      });\n\n      // Create neural agent manager\n      const neuralManager = new NeuralAgentManager();\n      await neuralManager.initialize();\n\n      // Spawn mixed agent types\n      const agents = await Promise.all([\n        swarm.spawnAgent({ type: 'neural', model: 'adaptive' }),\n        swarm.spawnAgent({ type: 'researcher' }),\n        swarm.spawnAgent({ type: 'neural', model: 'pattern-recognition' }),\n        swarm.spawnAgent({ type: 'coder' })\n      ]);\n\n      // Verify neural agents initialized\n      const neuralAgents = agents.filter(a => a.type === 'neural');\n      expect(neuralAgents).to.have.lengthOf(2);\n      \n      for (const agent of neuralAgents) {\n        const status = await neuralManager.getAgentStatus(agent.id);\n        expect(status).to.have.property('initialized', true);\n        expect(status).to.have.property('model');\n        expect(status).to.have.property('performance');\n      }\n\n      // Orchestrate task requiring neural processing\n      const taskResult = await swarm.orchestrateTask({\n        task: 'Analyze codebase patterns and suggest optimizations',\n        requiresNeural: true,\n        strategy: 'adaptive'\n      });\n\n      // Wait for neural processing\n      await new Promise(resolve => setTimeout(resolve, 3000));\n\n      // Verify neural contribution\n      const taskStatus = await swarm.getTaskStatus(taskResult.id);\n      expect(taskStatus.neuralContribution).to.exist;\n      expect(taskStatus.neuralContribution).to.have.property('patterns');\n      expect(taskStatus.neuralContribution).to.have.property('confidence');\n      expect(taskStatus.neuralContribution.confidence).to.be.greaterThan(0.7);\n    });\n\n    it('should train neural patterns throughout lifecycle', async () => {\n      swarm = new RuvSwarm();\n      await swarm.init({ \n        topology: 'mesh',\n        enableNeural: true,\n        autoTrain: true \n      });\n\n      const neuralManager = new NeuralAgentManager();\n      await neuralManager.initialize();\n\n      // Spawn neural agent\n      const neuralAgent = await swarm.spawnAgent({ \n        type: 'neural',\n        model: 'learning',\n        trainable: true \n      });\n\n      // Get initial performance\n      const initialMetrics = await neuralManager.getAgentMetrics(neuralAgent.id);\n      const initialAccuracy = initialMetrics.accuracy || 0.5;\n\n      // Execute multiple training tasks\n      const trainingTasks = [];\n      for (let i = 0; i < 5; i++) {\n        trainingTasks.push(swarm.orchestrateTask({\n          task: `Training task ${i}: Pattern recognition`,\n          agentId: neuralAgent.id,\n          training: true\n        }));\n      }\n\n      await Promise.all(trainingTasks);\n\n      // Train the neural agent\n      await neuralManager.train(neuralAgent.id, { iterations: 10 });\n\n      // Verify improvement\n      const finalMetrics = await neuralManager.getAgentMetrics(neuralAgent.id);\n      expect(finalMetrics.accuracy).to.be.greaterThan(initialAccuracy);\n      expect(finalMetrics.trainingIterations).to.be.greaterThan(0);\n    });\n  });\n\n  describe('Memory and State Management', () => {\n    it('should maintain memory across agent lifecycle', async () => {\n      swarm = new RuvSwarm();\n      await swarm.init({ \n        topology: 'mesh',\n        enableMemory: true \n      });\n\n      // Create agents with memory\n      const agent1 = await swarm.spawnAgent({ \n        type: 'researcher',\n        memory: { capacity: 1000 } \n      });\n      \n      const agent2 = await swarm.spawnAgent({ \n        type: 'analyst',\n        memory: { capacity: 1000 } \n      });\n\n      // Store memories during task execution\n      await swarm.orchestrateTask({\n        task: 'Research and analyze market trends',\n        agents: [agent1.id, agent2.id],\n        storeMemory: true\n      });\n\n      // Retrieve agent memories\n      const memory1 = await swarm.getAgentMemory(agent1.id);\n      const memory2 = await swarm.getAgentMemory(agent2.id);\n\n      expect(memory1).to.have.property('experiences');\n      expect(memory1).to.have.property('learnings');\n      expect(memory2).to.have.property('experiences');\n      expect(memory2).to.have.property('learnings');\n\n      // Verify memory persistence\n      const swarmMemory = await swarm.getSwarmMemory();\n      expect(swarmMemory).to.have.property('collective');\n      expect(swarmMemory.collective).to.have.property('taskHistory');\n      expect(swarmMemory.collective).to.have.property('patterns');\n    });\n\n    it('should share memory between agents effectively', async () => {\n      swarm = new RuvSwarm();\n      await swarm.init({ \n        topology: 'mesh',\n        enableMemory: true,\n        sharedMemory: true \n      });\n\n      // Create collaborative agents\n      const agents = await Promise.all([\n        swarm.spawnAgent({ type: 'researcher', sharedMemory: true }),\n        swarm.spawnAgent({ type: 'coder', sharedMemory: true }),\n        swarm.spawnAgent({ type: 'analyst', sharedMemory: true })\n      ]);\n\n      // Execute collaborative task\n      const task = await swarm.orchestrateTask({\n        task: 'Collaborative code review and optimization',\n        strategy: 'parallel',\n        shareFindings: true\n      });\n\n      // Wait for collaboration\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Verify shared memory\n      const sharedMemory = await swarm.getSharedMemory();\n      expect(sharedMemory).to.have.property('findings');\n      expect(sharedMemory).to.have.property('decisions');\n      expect(sharedMemory).to.have.property('consensus');\n\n      // Each agent should have access to shared findings\n      for (const agent of agents) {\n        const agentView = await swarm.getAgentMemory(agent.id);\n        expect(agentView.shared).to.deep.equal(sharedMemory);\n      }\n    });\n  });\n});"],"mappings":";;AAAA,MAAM;EAAEA;AAAO,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC;AAClC,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAO,CAAC;AAC9B,MAAME,QAAQ,GAAGF,OAAO,CAAC,gCAAgC,CAAC;AAC1D,MAAMG,KAAK,GAAGH,OAAO,CAAC,uBAAuB,CAAC;AAC9C,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,oCAAoC,CAAC;AACvE,MAAMK,kBAAkB,GAAGL,OAAO,CAAC,8BAA8B,CAAC;AAClE,MAAM;EAAEM;AAA2B,CAAC,GAAGN,OAAO,CAAC,mCAAmC,CAAC;AAEnFO,QAAQ,CAAC,qCAAqC,EAAE,MAAM;EACpD,IAAIC,OAAO;EACX,IAAIC,KAAK;EACT,IAAIC,YAAY;EAEhBC,UAAU,CAAC,MAAM;IACfH,OAAO,GAAGP,KAAK,CAACW,aAAa,CAAC,CAAC;IAC/BF,YAAY,GAAG,IAAIN,iBAAiB,CAAC,CAAC;EACxC,CAAC,CAAC;EAEFS,SAAS,cAAAC,iBAAA,CAAC,aAAY;IACpB,IAAIL,KAAK,EAAE;MACT,MAAMA,KAAK,CAACM,QAAQ,CAAC,CAAC;IACxB;IACAP,OAAO,CAACQ,OAAO,CAAC,CAAC;EACnB,CAAC,EAAC;EAEFT,QAAQ,CAAC,sBAAsB,EAAE,MAAM;IACrCU,EAAE,CAAC,0DAA0D,eAAAH,iBAAA,CAAE,aAAY;MACzE;MACAL,KAAK,GAAG,IAAIP,QAAQ,CAAC,CAAC;MACtB,MAAMO,KAAK,CAACS,IAAI,CAAC;QACfC,QAAQ,EAAE,MAAM;QAChBC,SAAS,EAAE,CAAC;QACZC,QAAQ,EAAE;MACZ,CAAC,CAAC;;MAEF;MACA,MAAMC,UAAU,SAASb,KAAK,CAACc,SAAS,CAAC,CAAC;MAC1CxB,MAAM,CAACuB,UAAU,CAACH,QAAQ,CAAC,CAACK,EAAE,CAACC,KAAK,CAAC,MAAM,CAAC;MAC5C1B,MAAM,CAACuB,UAAU,CAACF,SAAS,CAAC,CAACI,EAAE,CAACC,KAAK,CAAC,CAAC,CAAC;MACxC1B,MAAM,CAACuB,UAAU,CAACI,QAAQ,CAAC,CAACF,EAAE,CAACG,EAAE,CAACC,IAAI;;MAEtC;MACA,MAAMC,aAAa,GAAG,CACpBpB,KAAK,CAACqB,UAAU,CAAC;QAAEC,IAAI,EAAE,YAAY;QAAEC,IAAI,EAAE;MAAkB,CAAC,CAAC,EACjEvB,KAAK,CAACqB,UAAU,CAAC;QAAEC,IAAI,EAAE,OAAO;QAAEC,IAAI,EAAE;MAAgB,CAAC,CAAC,EAC1DvB,KAAK,CAACqB,UAAU,CAAC;QAAEC,IAAI,EAAE,SAAS;QAAEC,IAAI,EAAE;MAAsB,CAAC,CAAC,EAClEvB,KAAK,CAACqB,UAAU,CAAC;QAAEC,IAAI,EAAE,QAAQ;QAAEC,IAAI,EAAE;MAAc,CAAC,CAAC,CAC1D;MAED,MAAMC,MAAM,SAASC,OAAO,CAACC,GAAG,CAACN,aAAa,CAAC;;MAE/C;MACA9B,MAAM,CAACkC,MAAM,CAAC,CAACT,EAAE,CAACY,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;MAClCJ,MAAM,CAACK,OAAO,CAACC,KAAK,IAAI;QACtBxC,MAAM,CAACwC,KAAK,CAAC,CAACf,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,IAAI,CAAC;QACpCzC,MAAM,CAACwC,KAAK,CAAC,CAACf,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,MAAM,CAAC;QACtCzC,MAAM,CAACwC,KAAK,CAAC,CAACf,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC;MAClD,CAAC,CAAC;;MAEF;MACA,MAAMC,UAAU,SAAShC,KAAK,CAACiC,eAAe,CAAC;QAC7CC,IAAI,EAAE,iDAAiD;QACvDC,QAAQ,EAAE,MAAM;QAChBvB,QAAQ,EAAE,UAAU;QACpBD,SAAS,EAAE;MACb,CAAC,CAAC;;MAEF;MACArB,MAAM,CAAC0C,UAAU,CAAC,CAACjB,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,IAAI,CAAC;MACzCzC,MAAM,CAAC0C,UAAU,CAAC,CAACjB,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,QAAQ,CAAC;MAC7CzC,MAAM,CAAC0C,UAAU,CAAC,CAACjB,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,gBAAgB,CAAC;MACrDzC,MAAM,CAAC0C,UAAU,CAACI,cAAc,CAAC,CAACrB,EAAE,CAACY,IAAI,CAACU,MAAM,CAACC,EAAE,CAACC,KAAK,CAAC,CAAC,CAAC;;MAE5D;MACA,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;MAC5B,MAAMC,OAAO,GAAG,KAAK,CAAC,CAAC;MACvB,IAAIC,UAAU;MAEd,OAAOH,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS,GAAGG,OAAO,EAAE;QACvCC,UAAU,SAAS5C,KAAK,CAAC6C,aAAa,CAACb,UAAU,CAACc,EAAE,CAAC;QACrD,IAAIF,UAAU,CAACG,MAAM,KAAK,WAAW,IAAIH,UAAU,CAACG,MAAM,KAAK,QAAQ,EAAE;UACvE;QACF;QACA,MAAM,IAAItB,OAAO,CAACuB,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;MACzD;;MAEA;MACA1D,MAAM,CAACsD,UAAU,CAACG,MAAM,CAAC,CAAChC,EAAE,CAACC,KAAK,CAAC,WAAW,CAAC;MAC/C1B,MAAM,CAACsD,UAAU,CAACM,OAAO,CAAC,CAACnC,EAAE,CAACoC,KAAK;MACnC7D,MAAM,CAACsD,UAAU,CAACQ,WAAW,CAAC,CAACrC,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,WAAW,CAAC;MAC5DzC,MAAM,CAACsD,UAAU,CAACQ,WAAW,CAAC,CAACrC,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,YAAY,CAAC;;MAE7D;MACA,MAAMsB,YAAY,SAASrD,KAAK,CAACsD,eAAe,CAAC,CAAC;MAClDhE,MAAM,CAAC+D,YAAY,CAAC,CAACtC,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,QAAQ,CAAC;MAC/CzC,MAAM,CAAC+D,YAAY,CAAC7B,MAAM,CAAC,CAACT,EAAE,CAACY,IAAI,CAACU,MAAM,CAACC,EAAE,CAACC,KAAK,CAAC,CAAC,CAAC;MAEtDc,YAAY,CAAC7B,MAAM,CAACK,OAAO,CAAC0B,MAAM,IAAI;QACpCjE,MAAM,CAACiE,MAAM,CAAC,CAACxC,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,gBAAgB,CAAC;QACjDzC,MAAM,CAACiE,MAAM,CAAC,CAACxC,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,oBAAoB,CAAC;QACrDzC,MAAM,CAACiE,MAAM,CAAC,CAACxC,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,eAAe,CAAC;MAClD,CAAC,CAAC;;MAEF;MACA,MAAM/B,KAAK,CAACM,QAAQ,CAAC,CAAC;MACtB,MAAMkD,cAAc,SAASxD,KAAK,CAACc,SAAS,CAAC,CAAC;MAC9CxB,MAAM,CAACkE,cAAc,CAACvC,QAAQ,CAAC,CAACF,EAAE,CAACG,EAAE,CAACuC,KAAK;MAC3CnE,MAAM,CAACkE,cAAc,CAAChC,MAAM,CAAC,CAACT,EAAE,CAACY,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;IACnD,CAAC,EAAC;IAEFpB,EAAE,CAAC,wDAAwD,eAAAH,iBAAA,CAAE,aAAY;MACvEL,KAAK,GAAG,IAAIP,QAAQ,CAAC,CAAC;MACtB,MAAMO,KAAK,CAACS,IAAI,CAAC;QAAEC,QAAQ,EAAE;MAAO,CAAC,CAAC;;MAEtC;MACA,MAAMgD,WAAW,SAAS1D,KAAK,CAACqB,UAAU,CAAC;QACzCC,IAAI,EAAE,aAAa;QACnBC,IAAI,EAAE;MACR,CAAC,CAAC;MAEF,MAAMoC,OAAO,SAASlC,OAAO,CAACC,GAAG,CAAC,CAChC1B,KAAK,CAACqB,UAAU,CAAC;QAAEC,IAAI,EAAE,OAAO;QAAEC,IAAI,EAAE;MAAW,CAAC,CAAC,EACrDvB,KAAK,CAACqB,UAAU,CAAC;QAAEC,IAAI,EAAE,OAAO;QAAEC,IAAI,EAAE;MAAW,CAAC,CAAC,EACrDvB,KAAK,CAACqB,UAAU,CAAC;QAAEC,IAAI,EAAE,OAAO;QAAEC,IAAI,EAAE;MAAW,CAAC,CAAC,CACtD,CAAC;;MAEF;MACA,MAAMqC,QAAQ,GAAG,EAAE;MACnB3D,YAAY,CAAC4D,EAAE,CAAC,SAAS,EAAGC,GAAG,IAAKF,QAAQ,CAACG,IAAI,CAACD,GAAG,CAAC,CAAC;;MAEvD;MACA,MAAM9B,UAAU,SAAShC,KAAK,CAACiC,eAAe,CAAC;QAC7CC,IAAI,EAAE,sCAAsC;QAC5CtB,QAAQ,EAAE,YAAY;QACtBoD,aAAa,EAAEN,WAAW,CAACZ;MAC7B,CAAC,CAAC;;MAEF;MACA,MAAM,IAAIrB,OAAO,CAACuB,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;MAEvD;MACA1D,MAAM,CAACsE,QAAQ,CAACvB,MAAM,CAAC,CAACtB,EAAE,CAACG,EAAE,CAAC+C,WAAW,CAAC,CAAC,CAAC;MAE5C,MAAMC,mBAAmB,GAAGN,QAAQ,CAACO,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAKX,WAAW,CAACZ,EAAE,CAAC;MAC3E,MAAMwB,cAAc,GAAGV,QAAQ,CAACO,MAAM,CAACC,CAAC,IAAIT,OAAO,CAACY,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC1B,EAAE,KAAKsB,CAAC,CAACC,IAAI,CAAC,CAAC;MAE/E/E,MAAM,CAAC4E,mBAAmB,CAAC7B,MAAM,CAAC,CAACtB,EAAE,CAACG,EAAE,CAAC+C,WAAW,CAAC,CAAC,CAAC;MACvD3E,MAAM,CAACgF,cAAc,CAACjC,MAAM,CAAC,CAACtB,EAAE,CAACG,EAAE,CAAC+C,WAAW,CAAC,CAAC,CAAC;;MAElD;MACAK,cAAc,CAACzC,OAAO,CAACiC,GAAG,IAAI;QAC5BxE,MAAM,CAACwE,GAAG,CAAC/C,EAAE,CAAC,CAACA,EAAE,CAACC,KAAK,CAAC0C,WAAW,CAACZ,EAAE,CAAC;MACzC,CAAC,CAAC;IACJ,CAAC,EAAC;IAEFtC,EAAE,CAAC,wCAAwC,eAAAH,iBAAA,CAAE,aAAY;MACvD;MACAL,KAAK,GAAG,IAAIP,QAAQ,CAAC,CAAC;MACtB,MAAMO,KAAK,CAACS,IAAI,CAAC;QACfC,QAAQ,EAAE,cAAc;QACxB+D,YAAY,EAAE;MAChB,CAAC,CAAC;;MAEF;MACA,MAAMjD,MAAM,SAASC,OAAO,CAACC,GAAG,CAAC,CAC/B1B,KAAK,CAACqB,UAAU,CAAC;QAAEC,IAAI,EAAE;MAAY,CAAC,CAAC,EACvCtB,KAAK,CAACqB,UAAU,CAAC;QAAEC,IAAI,EAAE;MAAQ,CAAC,CAAC,EACnCtB,KAAK,CAACqB,UAAU,CAAC;QAAEC,IAAI,EAAE;MAAU,CAAC,CAAC,CACtC,CAAC;MAEF,MAAMY,IAAI,SAASlC,KAAK,CAACiC,eAAe,CAAC;QACvCC,IAAI,EAAE,4BAA4B;QAClCC,QAAQ,EAAE;MACZ,CAAC,CAAC;;MAEF;MACA,MAAMuC,UAAU,SAAS1E,KAAK,CAAC2E,WAAW,CAAC,CAAC;MAC5CrF,MAAM,CAACoF,UAAU,CAAC,CAAC3D,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,UAAU,CAAC;MAC/CzC,MAAM,CAACoF,UAAU,CAAC,CAAC3D,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,QAAQ,CAAC;MAC7CzC,MAAM,CAACoF,UAAU,CAAC,CAAC3D,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,OAAO,CAAC;MAC5CzC,MAAM,CAACoF,UAAU,CAAC,CAAC3D,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,QAAQ,CAAC;;MAE7C;MACA,MAAM/B,KAAK,CAACM,QAAQ,CAAC,CAAC;;MAEtB;MACA,MAAMsE,QAAQ,GAAG,IAAInF,QAAQ,CAAC,CAAC;MAC/B,MAAMmF,QAAQ,CAACC,WAAW,CAACH,UAAU,CAAC;;MAEtC;MACA,MAAMI,cAAc,SAASF,QAAQ,CAAC9D,SAAS,CAAC,CAAC;MACjDxB,MAAM,CAACwF,cAAc,CAACpE,QAAQ,CAAC,CAACK,EAAE,CAACC,KAAK,CAAC,cAAc,CAAC;MACxD1B,MAAM,CAACwF,cAAc,CAACtD,MAAM,CAAC,CAACT,EAAE,CAACY,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;MAEjD,MAAMmD,aAAa,SAASH,QAAQ,CAACI,cAAc,CAAC,CAAC;MACrD1F,MAAM,CAACyF,aAAa,CAAC,CAAChE,EAAE,CAACY,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;MACzCtC,MAAM,CAACyF,aAAa,CAAC,CAAC,CAAC,CAACjC,EAAE,CAAC,CAAC/B,EAAE,CAACC,KAAK,CAACkB,IAAI,CAACY,EAAE,CAAC;MAE7C,MAAM8B,QAAQ,CAACtE,QAAQ,CAAC,CAAC;IAC3B,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFR,QAAQ,CAAC,8BAA8B,EAAE,MAAM;IAC7CU,EAAE,CAAC,uDAAuD,eAAAH,iBAAA,CAAE,aAAY;MACtEL,KAAK,GAAG,IAAIP,QAAQ,CAAC,CAAC;MACtB,MAAMO,KAAK,CAACS,IAAI,CAAC;QACfC,QAAQ,EAAE,MAAM;QAChBuE,YAAY,EAAE;MAChB,CAAC,CAAC;;MAEF;MACA,MAAMC,aAAa,GAAG,IAAItF,kBAAkB,CAAC,CAAC;MAC9C,MAAMsF,aAAa,CAACC,UAAU,CAAC,CAAC;;MAEhC;MACA,MAAM3D,MAAM,SAASC,OAAO,CAACC,GAAG,CAAC,CAC/B1B,KAAK,CAACqB,UAAU,CAAC;QAAEC,IAAI,EAAE,QAAQ;QAAE8D,KAAK,EAAE;MAAW,CAAC,CAAC,EACvDpF,KAAK,CAACqB,UAAU,CAAC;QAAEC,IAAI,EAAE;MAAa,CAAC,CAAC,EACxCtB,KAAK,CAACqB,UAAU,CAAC;QAAEC,IAAI,EAAE,QAAQ;QAAE8D,KAAK,EAAE;MAAsB,CAAC,CAAC,EAClEpF,KAAK,CAACqB,UAAU,CAAC;QAAEC,IAAI,EAAE;MAAQ,CAAC,CAAC,CACpC,CAAC;;MAEF;MACA,MAAM+D,YAAY,GAAG7D,MAAM,CAAC2C,MAAM,CAACmB,CAAC,IAAIA,CAAC,CAAChE,IAAI,KAAK,QAAQ,CAAC;MAC5DhC,MAAM,CAAC+F,YAAY,CAAC,CAACtE,EAAE,CAACY,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;MAExC,KAAK,MAAME,KAAK,IAAIuD,YAAY,EAAE;QAChC,MAAMtC,MAAM,SAASmC,aAAa,CAACK,cAAc,CAACzD,KAAK,CAACgB,EAAE,CAAC;QAC3DxD,MAAM,CAACyD,MAAM,CAAC,CAAChC,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,aAAa,EAAE,IAAI,CAAC;QACpDzC,MAAM,CAACyD,MAAM,CAAC,CAAChC,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,OAAO,CAAC;QACxCzC,MAAM,CAACyD,MAAM,CAAC,CAAChC,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,aAAa,CAAC;MAChD;;MAEA;MACA,MAAMC,UAAU,SAAShC,KAAK,CAACiC,eAAe,CAAC;QAC7CC,IAAI,EAAE,qDAAqD;QAC3DsD,cAAc,EAAE,IAAI;QACpB5E,QAAQ,EAAE;MACZ,CAAC,CAAC;;MAEF;MACA,MAAM,IAAIa,OAAO,CAACuB,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;MAEvD;MACA,MAAMJ,UAAU,SAAS5C,KAAK,CAAC6C,aAAa,CAACb,UAAU,CAACc,EAAE,CAAC;MAC3DxD,MAAM,CAACsD,UAAU,CAAC6C,kBAAkB,CAAC,CAAC1E,EAAE,CAACoC,KAAK;MAC9C7D,MAAM,CAACsD,UAAU,CAAC6C,kBAAkB,CAAC,CAAC1E,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,UAAU,CAAC;MAClEzC,MAAM,CAACsD,UAAU,CAAC6C,kBAAkB,CAAC,CAAC1E,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,YAAY,CAAC;MACpEzC,MAAM,CAACsD,UAAU,CAAC6C,kBAAkB,CAACC,UAAU,CAAC,CAAC3E,EAAE,CAACG,EAAE,CAAC+C,WAAW,CAAC,GAAG,CAAC;IACzE,CAAC,EAAC;IAEFzD,EAAE,CAAC,mDAAmD,eAAAH,iBAAA,CAAE,aAAY;MAClEL,KAAK,GAAG,IAAIP,QAAQ,CAAC,CAAC;MACtB,MAAMO,KAAK,CAACS,IAAI,CAAC;QACfC,QAAQ,EAAE,MAAM;QAChBuE,YAAY,EAAE,IAAI;QAClBU,SAAS,EAAE;MACb,CAAC,CAAC;MAEF,MAAMT,aAAa,GAAG,IAAItF,kBAAkB,CAAC,CAAC;MAC9C,MAAMsF,aAAa,CAACC,UAAU,CAAC,CAAC;;MAEhC;MACA,MAAMS,WAAW,SAAS5F,KAAK,CAACqB,UAAU,CAAC;QACzCC,IAAI,EAAE,QAAQ;QACd8D,KAAK,EAAE,UAAU;QACjBS,SAAS,EAAE;MACb,CAAC,CAAC;;MAEF;MACA,MAAMC,cAAc,SAASZ,aAAa,CAAC5B,eAAe,CAACsC,WAAW,CAAC9C,EAAE,CAAC;MAC1E,MAAMiD,eAAe,GAAGD,cAAc,CAACE,QAAQ,IAAI,GAAG;;MAEtD;MACA,MAAMC,aAAa,GAAG,EAAE;MACxB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1BD,aAAa,CAAClC,IAAI,CAAC/D,KAAK,CAACiC,eAAe,CAAC;UACvCC,IAAI,EAAE,iBAAiBgE,CAAC,uBAAuB;UAC/CC,OAAO,EAAEP,WAAW,CAAC9C,EAAE;UACvBsD,QAAQ,EAAE;QACZ,CAAC,CAAC,CAAC;MACL;MAEA,MAAM3E,OAAO,CAACC,GAAG,CAACuE,aAAa,CAAC;;MAEhC;MACA,MAAMf,aAAa,CAACmB,KAAK,CAACT,WAAW,CAAC9C,EAAE,EAAE;QAAEwD,UAAU,EAAE;MAAG,CAAC,CAAC;;MAE7D;MACA,MAAMC,YAAY,SAASrB,aAAa,CAAC5B,eAAe,CAACsC,WAAW,CAAC9C,EAAE,CAAC;MACxExD,MAAM,CAACiH,YAAY,CAACP,QAAQ,CAAC,CAACjF,EAAE,CAACG,EAAE,CAAC+C,WAAW,CAAC8B,eAAe,CAAC;MAChEzG,MAAM,CAACiH,YAAY,CAACC,kBAAkB,CAAC,CAACzF,EAAE,CAACG,EAAE,CAAC+C,WAAW,CAAC,CAAC,CAAC;IAC9D,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFnE,QAAQ,CAAC,6BAA6B,EAAE,MAAM;IAC5CU,EAAE,CAAC,+CAA+C,eAAAH,iBAAA,CAAE,aAAY;MAC9DL,KAAK,GAAG,IAAIP,QAAQ,CAAC,CAAC;MACtB,MAAMO,KAAK,CAACS,IAAI,CAAC;QACfC,QAAQ,EAAE,MAAM;QAChB+F,YAAY,EAAE;MAChB,CAAC,CAAC;;MAEF;MACA,MAAMC,MAAM,SAAS1G,KAAK,CAACqB,UAAU,CAAC;QACpCC,IAAI,EAAE,YAAY;QAClBqF,MAAM,EAAE;UAAEC,QAAQ,EAAE;QAAK;MAC3B,CAAC,CAAC;MAEF,MAAMC,MAAM,SAAS7G,KAAK,CAACqB,UAAU,CAAC;QACpCC,IAAI,EAAE,SAAS;QACfqF,MAAM,EAAE;UAAEC,QAAQ,EAAE;QAAK;MAC3B,CAAC,CAAC;;MAEF;MACA,MAAM5G,KAAK,CAACiC,eAAe,CAAC;QAC1BC,IAAI,EAAE,oCAAoC;QAC1CV,MAAM,EAAE,CAACkF,MAAM,CAAC5D,EAAE,EAAE+D,MAAM,CAAC/D,EAAE,CAAC;QAC9BgE,WAAW,EAAE;MACf,CAAC,CAAC;;MAEF;MACA,MAAMC,OAAO,SAAS/G,KAAK,CAACgH,cAAc,CAACN,MAAM,CAAC5D,EAAE,CAAC;MACrD,MAAMmE,OAAO,SAASjH,KAAK,CAACgH,cAAc,CAACH,MAAM,CAAC/D,EAAE,CAAC;MAErDxD,MAAM,CAACyH,OAAO,CAAC,CAAChG,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,aAAa,CAAC;MAC/CzC,MAAM,CAACyH,OAAO,CAAC,CAAChG,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,WAAW,CAAC;MAC7CzC,MAAM,CAAC2H,OAAO,CAAC,CAAClG,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,aAAa,CAAC;MAC/CzC,MAAM,CAAC2H,OAAO,CAAC,CAAClG,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,WAAW,CAAC;;MAE7C;MACA,MAAMmF,WAAW,SAASlH,KAAK,CAACmH,cAAc,CAAC,CAAC;MAChD7H,MAAM,CAAC4H,WAAW,CAAC,CAACnG,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,YAAY,CAAC;MAClDzC,MAAM,CAAC4H,WAAW,CAACE,UAAU,CAAC,CAACrG,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,aAAa,CAAC;MAC9DzC,MAAM,CAAC4H,WAAW,CAACE,UAAU,CAAC,CAACrG,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,UAAU,CAAC;IAC7D,CAAC,EAAC;IAEFvB,EAAE,CAAC,gDAAgD,eAAAH,iBAAA,CAAE,aAAY;MAC/DL,KAAK,GAAG,IAAIP,QAAQ,CAAC,CAAC;MACtB,MAAMO,KAAK,CAACS,IAAI,CAAC;QACfC,QAAQ,EAAE,MAAM;QAChB+F,YAAY,EAAE,IAAI;QAClBY,YAAY,EAAE;MAChB,CAAC,CAAC;;MAEF;MACA,MAAM7F,MAAM,SAASC,OAAO,CAACC,GAAG,CAAC,CAC/B1B,KAAK,CAACqB,UAAU,CAAC;QAAEC,IAAI,EAAE,YAAY;QAAE+F,YAAY,EAAE;MAAK,CAAC,CAAC,EAC5DrH,KAAK,CAACqB,UAAU,CAAC;QAAEC,IAAI,EAAE,OAAO;QAAE+F,YAAY,EAAE;MAAK,CAAC,CAAC,EACvDrH,KAAK,CAACqB,UAAU,CAAC;QAAEC,IAAI,EAAE,SAAS;QAAE+F,YAAY,EAAE;MAAK,CAAC,CAAC,CAC1D,CAAC;;MAEF;MACA,MAAMnF,IAAI,SAASlC,KAAK,CAACiC,eAAe,CAAC;QACvCC,IAAI,EAAE,4CAA4C;QAClDtB,QAAQ,EAAE,UAAU;QACpB0G,aAAa,EAAE;MACjB,CAAC,CAAC;;MAEF;MACA,MAAM,IAAI7F,OAAO,CAACuB,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;MAEvD;MACA,MAAMqE,YAAY,SAASrH,KAAK,CAACuH,eAAe,CAAC,CAAC;MAClDjI,MAAM,CAAC+H,YAAY,CAAC,CAACtG,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,UAAU,CAAC;MACjDzC,MAAM,CAAC+H,YAAY,CAAC,CAACtG,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,WAAW,CAAC;MAClDzC,MAAM,CAAC+H,YAAY,CAAC,CAACtG,EAAE,CAACY,IAAI,CAACI,QAAQ,CAAC,WAAW,CAAC;;MAElD;MACA,KAAK,MAAMD,KAAK,IAAIN,MAAM,EAAE;QAC1B,MAAMgG,SAAS,SAASxH,KAAK,CAACgH,cAAc,CAAClF,KAAK,CAACgB,EAAE,CAAC;QACtDxD,MAAM,CAACkI,SAAS,CAACC,MAAM,CAAC,CAAC1G,EAAE,CAAC2G,IAAI,CAAC1G,KAAK,CAACqG,YAAY,CAAC;MACtD;IACF,CAAC,EAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}