d77ac6f1d6eb7b72cbf18750e1cb61ce
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
const {
  expect
} = require('chai');
const sinon = require('sinon');
const RuvSwarm = require('../../../../src/core/ruv-swarm');
const Agent = require('../../../../src/agent');
const AgentCommunicator = require('../../../../src/agent-communicator');
const NeuralAgentManager = require('../../../../src/neural-agent');
const {
  taskOrchestrationSimulator
} = require('../../../../src/task-orchestrator');
describe('Complete Agent Workflow Integration', () => {
  let sandbox;
  let swarm;
  let communicator;
  beforeEach(() => {
    sandbox = sinon.createSandbox();
    communicator = new AgentCommunicator();
  });
  afterEach(/*#__PURE__*/_asyncToGenerator(function* () {
    if (swarm) {
      yield swarm.shutdown();
    }
    sandbox.restore();
  }));
  describe('Full Lifecycle Tests', () => {
    it('should handle complete workflow from spawn to completion', /*#__PURE__*/_asyncToGenerator(function* () {
      // Initialize swarm with mesh topology
      swarm = new RuvSwarm();
      yield swarm.init({
        topology: 'mesh',
        maxAgents: 6,
        strategy: 'balanced'
      });

      // Verify initialization
      const initStatus = yield swarm.getStatus();
      expect(initStatus.topology).to.equal('mesh');
      expect(initStatus.maxAgents).to.equal(6);
      expect(initStatus.isActive).to.be.true;

      // Spawn multiple agents in parallel
      const agentPromises = [swarm.spawnAgent({
        type: 'researcher',
        name: 'Data Researcher'
      }), swarm.spawnAgent({
        type: 'coder',
        name: 'API Developer'
      }), swarm.spawnAgent({
        type: 'analyst',
        name: 'Performance Analyst'
      }), swarm.spawnAgent({
        type: 'tester',
        name: 'QA Engineer'
      })];
      const agents = yield Promise.all(agentPromises);

      // Verify all agents spawned successfully
      expect(agents).to.have.lengthOf(4);
      agents.forEach(agent => {
        expect(agent).to.have.property('id');
        expect(agent).to.have.property('type');
        expect(agent).to.have.property('status', 'idle');
      });

      // Orchestrate a complex task
      const taskResult = yield swarm.orchestrateTask({
        task: 'Build and optimize REST API with authentication',
        priority: 'high',
        strategy: 'parallel',
        maxAgents: 4
      });

      // Verify task orchestration
      expect(taskResult).to.have.property('id');
      expect(taskResult).to.have.property('status');
      expect(taskResult).to.have.property('assignedAgents');
      expect(taskResult.assignedAgents).to.have.length.at.least(1);

      // Wait for task completion with timeout
      const startTime = Date.now();
      const timeout = 30000; // 30 seconds
      let taskStatus;
      while (Date.now() - startTime < timeout) {
        taskStatus = yield swarm.getTaskStatus(taskResult.id);
        if (taskStatus.status === 'completed' || taskStatus.status === 'failed') {
          break;
        }
        yield new Promise(resolve => setTimeout(resolve, 1000));
      }

      // Verify task completion
      expect(taskStatus.status).to.equal('completed');
      expect(taskStatus.results).to.exist;
      expect(taskStatus.performance).to.have.property('totalTime');
      expect(taskStatus.performance).to.have.property('efficiency');

      // Get agent metrics
      const agentMetrics = yield swarm.getAgentMetrics();
      expect(agentMetrics).to.have.property('agents');
      expect(agentMetrics.agents).to.have.length.at.least(4);
      agentMetrics.agents.forEach(metric => {
        expect(metric).to.have.property('tasksCompleted');
        expect(metric).to.have.property('averagePerformance');
        expect(metric).to.have.property('resourceUsage');
      });

      // Verify proper cleanup
      yield swarm.shutdown();
      const shutdownStatus = yield swarm.getStatus();
      expect(shutdownStatus.isActive).to.be.false;
      expect(shutdownStatus.agents).to.have.lengthOf(0);
    }));
    it('should handle agent communication throughout lifecycle', /*#__PURE__*/_asyncToGenerator(function* () {
      swarm = new RuvSwarm();
      yield swarm.init({
        topology: 'star'
      });

      // Spawn coordinator and worker agents
      const coordinator = yield swarm.spawnAgent({
        type: 'coordinator',
        name: 'Central Coordinator'
      });
      const workers = yield Promise.all([swarm.spawnAgent({
        type: 'coder',
        name: 'Worker 1'
      }), swarm.spawnAgent({
        type: 'coder',
        name: 'Worker 2'
      }), swarm.spawnAgent({
        type: 'coder',
        name: 'Worker 3'
      })]);

      // Set up message tracking
      const messages = [];
      communicator.on('message', msg => messages.push(msg));

      // Orchestrate collaborative task
      const taskResult = yield swarm.orchestrateTask({
        task: 'Implement microservices architecture',
        strategy: 'sequential',
        coordinatorId: coordinator.id
      });

      // Wait for some communication
      yield new Promise(resolve => setTimeout(resolve, 2000));

      // Verify communication patterns
      expect(messages.length).to.be.greaterThan(0);
      const coordinatorMessages = messages.filter(m => m.from === coordinator.id);
      const workerMessages = messages.filter(m => workers.some(w => w.id === m.from));
      expect(coordinatorMessages.length).to.be.greaterThan(0);
      expect(workerMessages.length).to.be.greaterThan(0);

      // Verify star topology communication
      workerMessages.forEach(msg => {
        expect(msg.to).to.equal(coordinator.id);
      });
    }));
    it('should persist and restore swarm state', /*#__PURE__*/_asyncToGenerator(function* () {
      // Create initial swarm
      swarm = new RuvSwarm();
      yield swarm.init({
        topology: 'hierarchical',
        persistState: true
      });

      // Spawn agents and create state
      const agents = yield Promise.all([swarm.spawnAgent({
        type: 'architect'
      }), swarm.spawnAgent({
        type: 'coder'
      }), swarm.spawnAgent({
        type: 'analyst'
      })]);
      const task = yield swarm.orchestrateTask({
        task: 'Design system architecture',
        priority: 'high'
      });

      // Save current state
      const savedState = yield swarm.exportState();
      expect(savedState).to.have.property('topology');
      expect(savedState).to.have.property('agents');
      expect(savedState).to.have.property('tasks');
      expect(savedState).to.have.property('memory');

      // Shutdown original swarm
      yield swarm.shutdown();

      // Create new swarm and restore state
      const newSwarm = new RuvSwarm();
      yield newSwarm.importState(savedState);

      // Verify restoration
      const restoredStatus = yield newSwarm.getStatus();
      expect(restoredStatus.topology).to.equal('hierarchical');
      expect(restoredStatus.agents).to.have.lengthOf(3);
      const restoredTasks = yield newSwarm.getActiveTasks();
      expect(restoredTasks).to.have.lengthOf(1);
      expect(restoredTasks[0].id).to.equal(task.id);
      yield newSwarm.shutdown();
    }));
  });
  describe('Neural Integration Lifecycle', () => {
    it('should integrate neural agents with standard workflow', /*#__PURE__*/_asyncToGenerator(function* () {
      swarm = new RuvSwarm();
      yield swarm.init({
        topology: 'mesh',
        enableNeural: true
      });

      // Create neural agent manager
      const neuralManager = new NeuralAgentManager();
      yield neuralManager.initialize();

      // Spawn mixed agent types
      const agents = yield Promise.all([swarm.spawnAgent({
        type: 'neural',
        model: 'adaptive'
      }), swarm.spawnAgent({
        type: 'researcher'
      }), swarm.spawnAgent({
        type: 'neural',
        model: 'pattern-recognition'
      }), swarm.spawnAgent({
        type: 'coder'
      })]);

      // Verify neural agents initialized
      const neuralAgents = agents.filter(a => a.type === 'neural');
      expect(neuralAgents).to.have.lengthOf(2);
      for (const agent of neuralAgents) {
        const status = yield neuralManager.getAgentStatus(agent.id);
        expect(status).to.have.property('initialized', true);
        expect(status).to.have.property('model');
        expect(status).to.have.property('performance');
      }

      // Orchestrate task requiring neural processing
      const taskResult = yield swarm.orchestrateTask({
        task: 'Analyze codebase patterns and suggest optimizations',
        requiresNeural: true,
        strategy: 'adaptive'
      });

      // Wait for neural processing
      yield new Promise(resolve => setTimeout(resolve, 3000));

      // Verify neural contribution
      const taskStatus = yield swarm.getTaskStatus(taskResult.id);
      expect(taskStatus.neuralContribution).to.exist;
      expect(taskStatus.neuralContribution).to.have.property('patterns');
      expect(taskStatus.neuralContribution).to.have.property('confidence');
      expect(taskStatus.neuralContribution.confidence).to.be.greaterThan(0.7);
    }));
    it('should train neural patterns throughout lifecycle', /*#__PURE__*/_asyncToGenerator(function* () {
      swarm = new RuvSwarm();
      yield swarm.init({
        topology: 'mesh',
        enableNeural: true,
        autoTrain: true
      });
      const neuralManager = new NeuralAgentManager();
      yield neuralManager.initialize();

      // Spawn neural agent
      const neuralAgent = yield swarm.spawnAgent({
        type: 'neural',
        model: 'learning',
        trainable: true
      });

      // Get initial performance
      const initialMetrics = yield neuralManager.getAgentMetrics(neuralAgent.id);
      const initialAccuracy = initialMetrics.accuracy || 0.5;

      // Execute multiple training tasks
      const trainingTasks = [];
      for (let i = 0; i < 5; i++) {
        trainingTasks.push(swarm.orchestrateTask({
          task: `Training task ${i}: Pattern recognition`,
          agentId: neuralAgent.id,
          training: true
        }));
      }
      yield Promise.all(trainingTasks);

      // Train the neural agent
      yield neuralManager.train(neuralAgent.id, {
        iterations: 10
      });

      // Verify improvement
      const finalMetrics = yield neuralManager.getAgentMetrics(neuralAgent.id);
      expect(finalMetrics.accuracy).to.be.greaterThan(initialAccuracy);
      expect(finalMetrics.trainingIterations).to.be.greaterThan(0);
    }));
  });
  describe('Memory and State Management', () => {
    it('should maintain memory across agent lifecycle', /*#__PURE__*/_asyncToGenerator(function* () {
      swarm = new RuvSwarm();
      yield swarm.init({
        topology: 'mesh',
        enableMemory: true
      });

      // Create agents with memory
      const agent1 = yield swarm.spawnAgent({
        type: 'researcher',
        memory: {
          capacity: 1000
        }
      });
      const agent2 = yield swarm.spawnAgent({
        type: 'analyst',
        memory: {
          capacity: 1000
        }
      });

      // Store memories during task execution
      yield swarm.orchestrateTask({
        task: 'Research and analyze market trends',
        agents: [agent1.id, agent2.id],
        storeMemory: true
      });

      // Retrieve agent memories
      const memory1 = yield swarm.getAgentMemory(agent1.id);
      const memory2 = yield swarm.getAgentMemory(agent2.id);
      expect(memory1).to.have.property('experiences');
      expect(memory1).to.have.property('learnings');
      expect(memory2).to.have.property('experiences');
      expect(memory2).to.have.property('learnings');

      // Verify memory persistence
      const swarmMemory = yield swarm.getSwarmMemory();
      expect(swarmMemory).to.have.property('collective');
      expect(swarmMemory.collective).to.have.property('taskHistory');
      expect(swarmMemory.collective).to.have.property('patterns');
    }));
    it('should share memory between agents effectively', /*#__PURE__*/_asyncToGenerator(function* () {
      swarm = new RuvSwarm();
      yield swarm.init({
        topology: 'mesh',
        enableMemory: true,
        sharedMemory: true
      });

      // Create collaborative agents
      const agents = yield Promise.all([swarm.spawnAgent({
        type: 'researcher',
        sharedMemory: true
      }), swarm.spawnAgent({
        type: 'coder',
        sharedMemory: true
      }), swarm.spawnAgent({
        type: 'analyst',
        sharedMemory: true
      })]);

      // Execute collaborative task
      const task = yield swarm.orchestrateTask({
        task: 'Collaborative code review and optimization',
        strategy: 'parallel',
        shareFindings: true
      });

      // Wait for collaboration
      yield new Promise(resolve => setTimeout(resolve, 2000));

      // Verify shared memory
      const sharedMemory = yield swarm.getSharedMemory();
      expect(sharedMemory).to.have.property('findings');
      expect(sharedMemory).to.have.property('decisions');
      expect(sharedMemory).to.have.property('consensus');

      // Each agent should have access to shared findings
      for (const agent of agents) {
        const agentView = yield swarm.getAgentMemory(agent.id);
        expect(agentView.shared).to.deep.equal(sharedMemory);
      }
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,