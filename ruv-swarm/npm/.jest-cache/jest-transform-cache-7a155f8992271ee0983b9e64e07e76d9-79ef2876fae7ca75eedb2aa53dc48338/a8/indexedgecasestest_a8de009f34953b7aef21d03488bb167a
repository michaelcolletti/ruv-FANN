b5a9f5fc40d175de18deb4a66db2a574
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * Edge Cases and E2E Tests for src/index.js
 * Comprehensive coverage for WASM loader, worker pool, and main RuvSwarm class
 */

import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';
import { fileURLToPath } from 'url';
import path from 'path';
import fs from 'fs/promises';

// Import all exports from the main index.js file 
import { RuvSwarm, consoleLog, consoleError, consoleWarn, formatJsError, NeuralAgent, NeuralAgentFactory, NeuralNetwork, COGNITIVE_PATTERNS, AGENT_COGNITIVE_PROFILES, DAAService, daaService } from '../../src/index.js';
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
describe('Index.js Edge Cases and E2E Tests', () => {
  let mockWasmPath;
  beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {
    // Create mock WASM directory structure
    mockWasmPath = path.join(__dirname, '../../test-wasm-mock');
    yield fs.mkdir(mockWasmPath, {
      recursive: true
    });

    // Create mock WASM files
    yield fs.writeFile(path.join(mockWasmPath, 'ruv_swarm_wasm.js'), `
      export default function init() {
        return Promise.resolve();
      }
      export class RuntimeFeatures {
        constructor() {
          this.simd_available = true;
          this.threads_available = true;
          this.memory_limit = 2 * 1024 * 1024 * 1024;
        }
      }
      export class RuvSwarm {
        constructor(config) {
          this.config = config;
          this.agents = new Map();
        }
        spawn(agentConfig) {
          const agent = { id: Date.now(), config: agentConfig };
          this.agents.set(agent.id, agent);
          return agent;
        }
        get_agents() {
          return Array.from(this.agents.values());
        }
        get_status() {
          return { active: true, agents: this.agents.size };
        }
      }
      `);
    yield fs.writeFile(path.join(mockWasmPath, 'ruv_swarm_wasm_bg.wasm'), 'mock-wasm-binary');
    yield fs.writeFile(path.join(mockWasmPath, 'ruv_swarm_simd.wasm'), 'mock-simd-wasm-binary');
  }));
  afterEach(/*#__PURE__*/_asyncToGenerator(function* () {
    // Cleanup mock files
    try {
      yield fs.rm(mockWasmPath, {
        recursive: true,
        force: true
      });
    } catch (error) {
      // Ignore cleanup errors
    }
  }));
  describe('WASM Loader Edge Cases', () => {
    it('should handle SIMD detection failure gracefully', /*#__PURE__*/_asyncToGenerator(function* () {
      var _globalThis$WebAssemb;
      // Mock WebAssembly.validate to throw
      const originalValidate = (_globalThis$WebAssemb = globalThis.WebAssembly) === null || _globalThis$WebAssemb === void 0 ? void 0 : _globalThis$WebAssemb.validate;
      if (globalThis.WebAssembly) {
        globalThis.WebAssembly.validate = vi.fn(() => {
          throw new Error('SIMD validation failed');
        });
      }
      try {
        const result = RuvSwarm.detectSIMDSupport();
        expect(result).toBe(false);
      } finally {
        // Restore original
        if (originalValidate && globalThis.WebAssembly) {
          globalThis.WebAssembly.validate = originalValidate;
        }
      }
    }));
    it('should handle missing WASM files gracefully', /*#__PURE__*/_asyncToGenerator(function* () {
      const invalidPath = '/nonexistent/path';
      yield expect(RuvSwarm.initialize({
        wasmPath: invalidPath,
        debug: true
      })).rejects.toThrow();
    }));
    it('should fallback to manual loading when ES module import fails', /*#__PURE__*/_asyncToGenerator(function* () {
      // Create invalid JS file that will fail to import
      yield fs.writeFile(path.join(mockWasmPath, 'ruv_swarm_wasm.js'), 'invalid javascript syntax {');
      yield expect(RuvSwarm.initialize({
        wasmPath: mockWasmPath,
        debug: true
      })).rejects.toThrow();
    }));
    it('should handle WebAssembly instantiation failures', /*#__PURE__*/_asyncToGenerator(function* () {
      // Create valid JS but with invalid WASM binary
      yield fs.writeFile(path.join(mockWasmPath, 'ruv_swarm_wasm.js'), `
        export default function init() { return Promise.resolve(); }
        export class RuntimeFeatures {
          constructor() { this.simd_available = false; }
        }
        `);
      yield fs.writeFile(path.join(mockWasmPath, 'ruv_swarm_wasm_bg.wasm'), 'invalid-wasm');
      yield expect(RuvSwarm.initialize({
        wasmPath: mockWasmPath,
        useSIMD: false
      })).rejects.toThrow();
    }));
    it('should handle browser environment detection', /*#__PURE__*/_asyncToGenerator(function* () {
      // Mock browser environment
      const originalWindow = globalThis.window;
      const originalFetch = globalThis.fetch;
      globalThis.window = {
        location: {
          href: 'http://localhost'
        }
      };
      globalThis.fetch = vi.fn().mockRejectedValue(new Error('Network error'));
      try {
        yield expect(RuvSwarm.initialize({
          wasmPath: mockWasmPath
        })).rejects.toThrow();
      } finally {
        globalThis.window = originalWindow;
        globalThis.fetch = originalFetch;
      }
    }));
    it('should handle memory allocation failures', /*#__PURE__*/_asyncToGenerator(function* () {
      var _globalThis$WebAssemb2;
      // Test with extremely large memory requirements
      const originalMemory = (_globalThis$WebAssemb2 = globalThis.WebAssembly) === null || _globalThis$WebAssemb2 === void 0 ? void 0 : _globalThis$WebAssemb2.Memory;
      if (globalThis.WebAssembly) {
        globalThis.WebAssembly.Memory = class {
          constructor(config) {
            if (config.initial > 1000) {
              throw new Error('Memory allocation failed');
            }
          }
        };
      }
      try {
        // This should not fail with normal requirements
        const ruvSwarm = yield RuvSwarm.initialize({
          wasmPath: mockWasmPath
        });
        expect(ruvSwarm).toBeDefined();
      } finally {
        if (originalMemory && globalThis.WebAssembly) {
          globalThis.WebAssembly.Memory = originalMemory;
        }
      }
    }));
  });
  describe('Worker Pool Edge Cases', () => {
    it('should handle worker creation failures in Node.js environment', /*#__PURE__*/_asyncToGenerator(function* () {
      const ruvSwarm = yield RuvSwarm.initialize({
        wasmPath: mockWasmPath,
        parallel: true,
        workerPoolSize: 2
      });
      expect(ruvSwarm).toBeDefined();
      expect(ruvSwarm._workerPool).toBeDefined();
    }));
    it('should handle worker termination edge cases', /*#__PURE__*/_asyncToGenerator(function* () {
      const ruvSwarm = yield RuvSwarm.initialize({
        wasmPath: mockWasmPath,
        parallel: true,
        workerPoolSize: 1
      });

      // Test termination
      ruvSwarm._workerPool.terminate();
      expect(ruvSwarm._workerPool.workers.length).toBe(0);
      expect(ruvSwarm._workerPool.initialized).toBe(false);
    }));
    it('should handle concurrent task execution', /*#__PURE__*/_asyncToGenerator(function* () {
      const ruvSwarm = yield RuvSwarm.initialize({
        wasmPath: mockWasmPath,
        parallel: true
      });
      const tasks = Array.from({
        length: 10
      }, (_, i) => `task-${i}`);
      const results = yield Promise.all(tasks.map(task => ruvSwarm._workerPool.execute(task)));
      expect(results).toHaveLength(10);
      results.forEach((result, index) => {
        expect(result).toBe(`task-${index}`);
      });
    }));
  });
  describe('RuvSwarm Class Edge Cases', () => {
    it('should handle invalid swarm configuration', /*#__PURE__*/_asyncToGenerator(function* () {
      const ruvSwarm = yield RuvSwarm.initialize({
        wasmPath: mockWasmPath
      });
      yield expect(ruvSwarm.createSwarm(null)).rejects.toThrow();
      yield expect(ruvSwarm.createSwarm({
        invalid: 'config'
      })).rejects.toThrow();
    }));
    it('should handle swarm creation with valid configuration', /*#__PURE__*/_asyncToGenerator(function* () {
      const ruvSwarm = yield RuvSwarm.initialize({
        wasmPath: mockWasmPath
      });
      const swarm = yield ruvSwarm.createSwarm({
        name: 'test-swarm',
        maxAgents: 5
      });
      expect(swarm).toBeDefined();
      expect(swarm.name).toBeDefined();
    }));
    it('should handle retry operations with failures', /*#__PURE__*/_asyncToGenerator(function* () {
      const ruvSwarm = yield RuvSwarm.initialize({
        wasmPath: mockWasmPath
      });
      const swarm = yield ruvSwarm.createSwarm({
        name: 'retry-test',
        retryAttempts: 3,
        retryDelay: 10
      });

      // Mock a failing operation that succeeds on retry
      let attemptCount = 0;
      const mockOperation = vi.fn(() => {
        attemptCount++;
        if (attemptCount < 2) {
          throw new Error('Temporary failure');
        }
        return Promise.resolve({
          success: true
        });
      });
      const result = yield swarm._retryOperation(mockOperation);
      expect(result.success).toBe(true);
      expect(mockOperation).toHaveBeenCalledTimes(2);
    }));
    it('should handle retry operations that always fail', /*#__PURE__*/_asyncToGenerator(function* () {
      const ruvSwarm = yield RuvSwarm.initialize({
        wasmPath: mockWasmPath
      });
      const swarm = yield ruvSwarm.createSwarm({
        name: 'fail-test',
        retryAttempts: 2,
        retryDelay: 5
      });
      const alwaysFailOperation = vi.fn(() => {
        throw new Error('Persistent failure');
      });
      yield expect(swarm._retryOperation(alwaysFailOperation)).rejects.toThrow('Persistent failure');
      expect(alwaysFailOperation).toHaveBeenCalledTimes(2);
    }));
  });
  describe('Agent Wrapper Edge Cases', () => {
    it('should handle agent spawning and execution', /*#__PURE__*/_asyncToGenerator(function* () {
      const ruvSwarm = yield RuvSwarm.initialize({
        wasmPath: mockWasmPath
      });
      const swarm = yield ruvSwarm.createSwarm({
        name: 'agent-test'
      });
      const agent = yield swarm.spawn({
        type: 'test-agent',
        capabilities: ['test']
      });
      expect(agent).toBeDefined();
      expect(agent.id).toBeDefined();
      expect(agent.agentType).toBeDefined();
    }));
    it('should handle agent metrics and capabilities', /*#__PURE__*/_asyncToGenerator(function* () {
      const ruvSwarm = yield RuvSwarm.initialize({
        wasmPath: mockWasmPath
      });
      const swarm = yield ruvSwarm.createSwarm({
        name: 'metrics-test'
      });
      const agent = yield swarm.spawn({
        type: 'metrics-agent'
      });
      const metrics = agent.getMetrics();
      const capabilities = agent.getCapabilities();
      expect(metrics).toBeDefined();
      expect(capabilities).toBeDefined();
    }));
    it('should handle agent reset operations', /*#__PURE__*/_asyncToGenerator(function* () {
      const ruvSwarm = yield RuvSwarm.initialize({
        wasmPath: mockWasmPath
      });
      const swarm = yield ruvSwarm.createSwarm({
        name: 'reset-test'
      });
      const agent = yield swarm.spawn({
        type: 'reset-agent'
      });

      // Reset should not throw
      expect(() => agent.reset()).not.toThrow();
    }));
  });
  describe('Utility Functions Edge Cases', () => {
    it('should handle console logging without WASM instance', () => {
      const originalConsole = console.log;
      const mockLog = vi.fn();
      console.log = mockLog;
      try {
        consoleLog('test message');
        expect(mockLog).toHaveBeenCalledWith('test message');
      } finally {
        console.log = originalConsole;
      }
    });
    it('should handle console error without WASM instance', () => {
      const originalConsole = console.error;
      const mockError = vi.fn();
      console.error = mockError;
      try {
        consoleError('error message');
        expect(mockError).toHaveBeenCalledWith('error message');
      } finally {
        console.error = originalConsole;
      }
    });
    it('should handle console warn without WASM instance', () => {
      const originalConsole = console.warn;
      const mockWarn = vi.fn();
      console.warn = mockWarn;
      try {
        consoleWarn('warning message');
        expect(mockWarn).toHaveBeenCalledWith('warning message');
      } finally {
        console.warn = originalConsole;
      }
    });
    it('should handle error formatting without WASM instance', () => {
      const error = new Error('test error');
      const formatted = formatJsError(error);
      expect(formatted).toContain('test error');
    });
    it('should handle complex error objects', () => {
      const complexError = {
        name: 'CustomError',
        message: 'Complex error message',
        stack: 'Error stack trace',
        code: 'ERR_CUSTOM',
        toString: () => 'CustomError: Complex error message'
      };
      const formatted = formatJsError(complexError);
      expect(formatted).toContain('Complex error message');
    });
  });
  describe('Runtime Features Edge Cases', () => {
    it('should handle getRuntimeFeatures without initialization', () => {
      expect(() => {
        RuvSwarm.getRuntimeFeatures();
      }).toThrow('RuvSwarm not initialized');
    });
    it('should handle getVersion without WASM instance', () => {
      const version = RuvSwarm.getVersion();
      expect(version).toBeDefined();
      expect(typeof version).toBe('string');
    });
    it('should handle getMemoryUsage without WASM instance', () => {
      const memoryUsage = RuvSwarm.getMemoryUsage();
      expect(memoryUsage).toBe(0);
    });
  });
  describe('Neural Agent Integration Edge Cases', () => {
    it('should handle neural agent factory creation', () => {
      expect(NeuralAgentFactory).toBeDefined();
      expect(typeof NeuralAgentFactory).toBe('function');
    });
    it('should handle neural network class', () => {
      expect(NeuralNetwork).toBeDefined();
      expect(typeof NeuralNetwork).toBe('function');
    });
    it('should handle cognitive patterns constants', () => {
      expect(COGNITIVE_PATTERNS).toBeDefined();
      expect(typeof COGNITIVE_PATTERNS).toBe('object');
    });
    it('should handle agent cognitive profiles', () => {
      expect(AGENT_COGNITIVE_PROFILES).toBeDefined();
      expect(typeof AGENT_COGNITIVE_PROFILES).toBe('object');
    });
  });
  describe('DAA Service Integration Edge Cases', () => {
    it('should handle DAA service class', () => {
      expect(DAAService).toBeDefined();
      expect(typeof DAAService).toBe('function');
    });
    it('should handle DAA service singleton', () => {
      expect(daaService).toBeDefined();
      expect(typeof daaService).toBe('object');
    });
    it('should handle DAA service methods', () => {
      expect(typeof daaService.initialize).toBe('function');
      expect(typeof daaService.createAgent).toBe('function');
      expect(typeof daaService.getCapabilities).toBe('function');
    });
  });
  describe('End-to-End Workflow Tests', () => {
    it('should complete full initialization and swarm creation workflow', /*#__PURE__*/_asyncToGenerator(function* () {
      // Step 1: Initialize RuvSwarm
      const ruvSwarm = yield RuvSwarm.initialize({
        wasmPath: mockWasmPath,
        debug: true,
        enableSIMD: true,
        enableNeuralNetworks: true
      });
      expect(ruvSwarm).toBeDefined();

      // Step 2: Create swarm
      const swarm = yield ruvSwarm.createSwarm({
        name: 'e2e-test-swarm',
        maxAgents: 3
      });
      expect(swarm).toBeDefined();
      expect(swarm.name).toBeDefined();
      expect(swarm.agentCount).toBe(0);

      // Step 3: Spawn multiple agents
      const agents = [];
      for (let i = 0; i < 3; i++) {
        const agent = yield swarm.spawn({
          type: `agent-${i}`,
          capabilities: [`capability-${i}`]
        });
        agents.push(agent);
        expect(agent.id).toBeDefined();
      }
      expect(agents).toHaveLength(3);

      // Step 4: Execute tasks with agents
      const taskResults = yield Promise.all(agents.map(/*#__PURE__*/function () {
        var _ref18 = _asyncToGenerator(function* (agent, index) {
          try {
            return yield agent.execute(`task-${index}`);
          } catch (error) {
            // Some agents might not have execute method implemented
            return {
              taskId: `task-${index}`,
              completed: true
            };
          }
        });
        return function (_x, _x2) {
          return _ref18.apply(this, arguments);
        };
      }()));
      expect(taskResults).toHaveLength(3);

      // Step 5: Get swarm status and agent metrics
      const swarmStatus = swarm.getStatus();
      expect(swarmStatus).toBeDefined();
      const swarmAgents = swarm.getAgents();
      expect(swarmAgents).toBeDefined();

      // Step 6: Test orchestration
      try {
        const orchestrationResult = yield swarm.orchestrate({
          type: 'test-orchestration',
          agents: agents.map(a => a.id)
        });
        expect(orchestrationResult).toBeDefined();
      } catch (error) {
        // Orchestration might not be fully implemented
        expect(error).toBeDefined();
      }
    }));
    it('should handle concurrent swarm operations', /*#__PURE__*/_asyncToGenerator(function* () {
      const ruvSwarm = yield RuvSwarm.initialize({
        wasmPath: mockWasmPath,
        parallel: true
      });

      // Create multiple swarms concurrently
      const swarmPromises = Array.from({
        length: 3
      }, (_, i) => ruvSwarm.createSwarm({
        name: `concurrent-swarm-${i}`,
        maxAgents: 2
      }));
      const swarms = yield Promise.all(swarmPromises);
      expect(swarms).toHaveLength(3);

      // Spawn agents in all swarms concurrently
      const agentPromises = swarms.flatMap((swarm, swarmIndex) => Array.from({
        length: 2
      }, (_, agentIndex) => swarm.spawn({
        type: `agent-${swarmIndex}-${agentIndex}`,
        capabilities: [`swarm-${swarmIndex}`]
      })));
      const agents = yield Promise.all(agentPromises);
      expect(agents).toHaveLength(6);
    }));
    it('should handle error recovery in complex workflows', /*#__PURE__*/_asyncToGenerator(function* () {
      const ruvSwarm = yield RuvSwarm.initialize({
        wasmPath: mockWasmPath
      });
      const swarm = yield ruvSwarm.createSwarm({
        name: 'error-recovery-test',
        retryAttempts: 3,
        retryDelay: 10
      });

      // Test agent spawning with some failures
      const agentPromises = Array.from({
        length: 5
      }, /*#__PURE__*/function () {
        var _ref21 = _asyncToGenerator(function* (_, i) {
          try {
            if (i === 2) {
              // Simulate a failure that should be retried
              throw new Error('Simulated agent spawn failure');
            }
            return yield swarm.spawn({
              type: `recovery-agent-${i}`,
              capabilities: [`recovery-${i}`]
            });
          } catch (error) {
            // Return a mock failed agent for testing
            return {
              id: `failed-${i}`,
              error: error.message,
              failed: true
            };
          }
        });
        return function (_x3, _x4) {
          return _ref21.apply(this, arguments);
        };
      }());
      const results = yield Promise.allSettled(agentPromises);

      // Some should succeed, some should fail
      const successful = results.filter(r => r.status === 'fulfilled').length;
      const failed = results.filter(r => r.status === 'rejected').length;
      expect(successful + failed).toBe(5);
    }));
    it('should handle memory and resource cleanup', /*#__PURE__*/_asyncToGenerator(function* () {
      const ruvSwarm = yield RuvSwarm.initialize({
        wasmPath: mockWasmPath,
        parallel: true
      });

      // Create and destroy multiple swarms to test cleanup
      for (let iteration = 0; iteration < 3; iteration++) {
        const swarm = yield ruvSwarm.createSwarm({
          name: `cleanup-test-${iteration}`,
          maxAgents: 2
        });
        const agents = yield Promise.all([swarm.spawn({
          type: 'cleanup-agent-1'
        }), swarm.spawn({
          type: 'cleanup-agent-2'
        })]);

        // Reset agents to test cleanup
        agents.forEach(agent => {
          try {
            agent.reset();
          } catch (error) {
            // Reset might not be implemented
          }
        });
      }

      // Test worker pool cleanup
      if (ruvSwarm._workerPool) {
        ruvSwarm._workerPool.terminate();
        expect(ruvSwarm._workerPool.initialized).toBe(false);
      }
    }));
  });
  describe('Integration with Neural Components', () => {
    it('should integrate with neural agents properly', /*#__PURE__*/_asyncToGenerator(function* () {
      const ruvSwarm = yield RuvSwarm.initialize({
        wasmPath: mockWasmPath,
        enableNeuralNetworks: true
      });

      // Test that neural components are available
      expect(NeuralAgent).toBeDefined();
      expect(NeuralNetwork).toBeDefined();

      // Test creating a neural-enhanced swarm
      const swarm = yield ruvSwarm.createSwarm({
        name: 'neural-integration-test',
        neuralEnabled: true
      });
      expect(swarm).toBeDefined();
    }));
    it('should integrate with DAA service properly', /*#__PURE__*/_asyncToGenerator(function* () {
      const ruvSwarm = yield RuvSwarm.initialize({
        wasmPath: mockWasmPath
      });

      // Test that DAA service is available
      expect(daaService).toBeDefined();

      // Test DAA service integration
      const swarm = yield ruvSwarm.createSwarm({
        name: 'daa-integration-test',
        daaEnabled: true
      });
      expect(swarm).toBeDefined();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,