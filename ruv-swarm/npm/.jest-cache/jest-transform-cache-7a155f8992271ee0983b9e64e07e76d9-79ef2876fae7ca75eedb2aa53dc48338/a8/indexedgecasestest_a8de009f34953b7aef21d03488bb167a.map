{"version":3,"names":["describe","it","expect","beforeEach","afterEach","vi","fileURLToPath","path","fs","RuvSwarm","consoleLog","consoleError","consoleWarn","formatJsError","NeuralAgent","NeuralAgentFactory","NeuralNetwork","COGNITIVE_PATTERNS","AGENT_COGNITIVE_PROFILES","DAAService","daaService","__filename","import","meta","url","__dirname","dirname","mockWasmPath","_asyncToGenerator","join","mkdir","recursive","writeFile","rm","force","error","_globalThis$WebAssemb","originalValidate","globalThis","WebAssembly","validate","fn","Error","result","detectSIMDSupport","toBe","invalidPath","initialize","wasmPath","debug","rejects","toThrow","useSIMD","originalWindow","window","originalFetch","fetch","location","href","mockRejectedValue","_globalThis$WebAssemb2","originalMemory","Memory","constructor","config","initial","ruvSwarm","toBeDefined","parallel","workerPoolSize","_workerPool","terminate","workers","length","initialized","tasks","Array","from","_","i","results","Promise","all","map","task","execute","toHaveLength","forEach","index","createSwarm","invalid","swarm","name","maxAgents","retryAttempts","retryDelay","attemptCount","mockOperation","resolve","success","_retryOperation","toHaveBeenCalledTimes","alwaysFailOperation","agent","spawn","type","capabilities","id","agentType","metrics","getMetrics","getCapabilities","reset","not","originalConsole","console","log","mockLog","toHaveBeenCalledWith","mockError","warn","mockWarn","formatted","toContain","complexError","message","stack","code","toString","getRuntimeFeatures","version","getVersion","memoryUsage","getMemoryUsage","createAgent","enableSIMD","enableNeuralNetworks","agentCount","agents","push","taskResults","_ref18","taskId","completed","_x","_x2","apply","arguments","swarmStatus","getStatus","swarmAgents","getAgents","orchestrationResult","orchestrate","a","swarmPromises","swarms","agentPromises","flatMap","swarmIndex","agentIndex","_ref21","failed","_x3","_x4","allSettled","successful","filter","r","status","iteration","neuralEnabled","daaEnabled"],"sources":["index-edge-cases.test.js"],"sourcesContent":["/**\n * Edge Cases and E2E Tests for src/index.js\n * Comprehensive coverage for WASM loader, worker pool, and main RuvSwarm class\n */\n\nimport { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';\nimport { fileURLToPath } from 'url';\nimport path from 'path';\nimport fs from 'fs/promises';\n\n// Import all exports from the main index.js file \nimport {\n  RuvSwarm,\n  consoleLog,\n  consoleError,\n  consoleWarn,\n  formatJsError,\n  NeuralAgent,\n  NeuralAgentFactory,\n  NeuralNetwork,\n  COGNITIVE_PATTERNS,\n  AGENT_COGNITIVE_PROFILES,\n  DAAService,\n  daaService\n} from '../../src/index.js';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\ndescribe('Index.js Edge Cases and E2E Tests', () => {\n  let mockWasmPath;\n\n  beforeEach(async () => {\n    // Create mock WASM directory structure\n    mockWasmPath = path.join(__dirname, '../../test-wasm-mock');\n    await fs.mkdir(mockWasmPath, { recursive: true });\n    \n    // Create mock WASM files\n    await fs.writeFile(\n      path.join(mockWasmPath, 'ruv_swarm_wasm.js'),\n      `\n      export default function init() {\n        return Promise.resolve();\n      }\n      export class RuntimeFeatures {\n        constructor() {\n          this.simd_available = true;\n          this.threads_available = true;\n          this.memory_limit = 2 * 1024 * 1024 * 1024;\n        }\n      }\n      export class RuvSwarm {\n        constructor(config) {\n          this.config = config;\n          this.agents = new Map();\n        }\n        spawn(agentConfig) {\n          const agent = { id: Date.now(), config: agentConfig };\n          this.agents.set(agent.id, agent);\n          return agent;\n        }\n        get_agents() {\n          return Array.from(this.agents.values());\n        }\n        get_status() {\n          return { active: true, agents: this.agents.size };\n        }\n      }\n      `\n    );\n    \n    await fs.writeFile(path.join(mockWasmPath, 'ruv_swarm_wasm_bg.wasm'), 'mock-wasm-binary');\n    await fs.writeFile(path.join(mockWasmPath, 'ruv_swarm_simd.wasm'), 'mock-simd-wasm-binary');\n  });\n\n  afterEach(async () => {\n    // Cleanup mock files\n    try {\n      await fs.rm(mockWasmPath, { recursive: true, force: true });\n    } catch (error) {\n      // Ignore cleanup errors\n    }\n  });\n\n  describe('WASM Loader Edge Cases', () => {\n    it('should handle SIMD detection failure gracefully', async () => {\n      // Mock WebAssembly.validate to throw\n      const originalValidate = globalThis.WebAssembly?.validate;\n      if (globalThis.WebAssembly) {\n        globalThis.WebAssembly.validate = vi.fn(() => {\n          throw new Error('SIMD validation failed');\n        });\n      }\n\n      try {\n        const result = RuvSwarm.detectSIMDSupport();\n        expect(result).toBe(false);\n      } finally {\n        // Restore original\n        if (originalValidate && globalThis.WebAssembly) {\n          globalThis.WebAssembly.validate = originalValidate;\n        }\n      }\n    });\n\n    it('should handle missing WASM files gracefully', async () => {\n      const invalidPath = '/nonexistent/path';\n      \n      await expect(\n        RuvSwarm.initialize({\n          wasmPath: invalidPath,\n          debug: true\n        })\n      ).rejects.toThrow();\n    });\n\n    it('should fallback to manual loading when ES module import fails', async () => {\n      // Create invalid JS file that will fail to import\n      await fs.writeFile(\n        path.join(mockWasmPath, 'ruv_swarm_wasm.js'),\n        'invalid javascript syntax {'\n      );\n\n      await expect(\n        RuvSwarm.initialize({\n          wasmPath: mockWasmPath,\n          debug: true\n        })\n      ).rejects.toThrow();\n    });\n\n    it('should handle WebAssembly instantiation failures', async () => {\n      // Create valid JS but with invalid WASM binary\n      await fs.writeFile(\n        path.join(mockWasmPath, 'ruv_swarm_wasm.js'),\n        `\n        export default function init() { return Promise.resolve(); }\n        export class RuntimeFeatures {\n          constructor() { this.simd_available = false; }\n        }\n        `\n      );\n      \n      await fs.writeFile(path.join(mockWasmPath, 'ruv_swarm_wasm_bg.wasm'), 'invalid-wasm');\n\n      await expect(\n        RuvSwarm.initialize({\n          wasmPath: mockWasmPath,\n          useSIMD: false\n        })\n      ).rejects.toThrow();\n    });\n\n    it('should handle browser environment detection', async () => {\n      // Mock browser environment\n      const originalWindow = globalThis.window;\n      const originalFetch = globalThis.fetch;\n      \n      globalThis.window = { location: { href: 'http://localhost' } };\n      globalThis.fetch = vi.fn().mockRejectedValue(new Error('Network error'));\n\n      try {\n        await expect(\n          RuvSwarm.initialize({\n            wasmPath: mockWasmPath\n          })\n        ).rejects.toThrow();\n      } finally {\n        globalThis.window = originalWindow;\n        globalThis.fetch = originalFetch;\n      }\n    });\n\n    it('should handle memory allocation failures', async () => {\n      // Test with extremely large memory requirements\n      const originalMemory = globalThis.WebAssembly?.Memory;\n      \n      if (globalThis.WebAssembly) {\n        globalThis.WebAssembly.Memory = class {\n          constructor(config) {\n            if (config.initial > 1000) {\n              throw new Error('Memory allocation failed');\n            }\n          }\n        };\n      }\n\n      try {\n        // This should not fail with normal requirements\n        const ruvSwarm = await RuvSwarm.initialize({\n          wasmPath: mockWasmPath\n        });\n        expect(ruvSwarm).toBeDefined();\n      } finally {\n        if (originalMemory && globalThis.WebAssembly) {\n          globalThis.WebAssembly.Memory = originalMemory;\n        }\n      }\n    });\n  });\n\n  describe('Worker Pool Edge Cases', () => {\n    it('should handle worker creation failures in Node.js environment', async () => {\n      const ruvSwarm = await RuvSwarm.initialize({\n        wasmPath: mockWasmPath,\n        parallel: true,\n        workerPoolSize: 2\n      });\n      \n      expect(ruvSwarm).toBeDefined();\n      expect(ruvSwarm._workerPool).toBeDefined();\n    });\n\n    it('should handle worker termination edge cases', async () => {\n      const ruvSwarm = await RuvSwarm.initialize({\n        wasmPath: mockWasmPath,\n        parallel: true,\n        workerPoolSize: 1\n      });\n      \n      // Test termination\n      ruvSwarm._workerPool.terminate();\n      expect(ruvSwarm._workerPool.workers.length).toBe(0);\n      expect(ruvSwarm._workerPool.initialized).toBe(false);\n    });\n\n    it('should handle concurrent task execution', async () => {\n      const ruvSwarm = await RuvSwarm.initialize({\n        wasmPath: mockWasmPath,\n        parallel: true\n      });\n      \n      const tasks = Array.from({ length: 10 }, (_, i) => `task-${i}`);\n      const results = await Promise.all(\n        tasks.map(task => ruvSwarm._workerPool.execute(task))\n      );\n      \n      expect(results).toHaveLength(10);\n      results.forEach((result, index) => {\n        expect(result).toBe(`task-${index}`);\n      });\n    });\n  });\n\n  describe('RuvSwarm Class Edge Cases', () => {\n    it('should handle invalid swarm configuration', async () => {\n      const ruvSwarm = await RuvSwarm.initialize({\n        wasmPath: mockWasmPath\n      });\n      \n      await expect(\n        ruvSwarm.createSwarm(null)\n      ).rejects.toThrow();\n      \n      await expect(\n        ruvSwarm.createSwarm({ invalid: 'config' })\n      ).rejects.toThrow();\n    });\n\n    it('should handle swarm creation with valid configuration', async () => {\n      const ruvSwarm = await RuvSwarm.initialize({\n        wasmPath: mockWasmPath\n      });\n      \n      const swarm = await ruvSwarm.createSwarm({\n        name: 'test-swarm',\n        maxAgents: 5\n      });\n      \n      expect(swarm).toBeDefined();\n      expect(swarm.name).toBeDefined();\n    });\n\n    it('should handle retry operations with failures', async () => {\n      const ruvSwarm = await RuvSwarm.initialize({\n        wasmPath: mockWasmPath\n      });\n      \n      const swarm = await ruvSwarm.createSwarm({\n        name: 'retry-test',\n        retryAttempts: 3,\n        retryDelay: 10\n      });\n      \n      // Mock a failing operation that succeeds on retry\n      let attemptCount = 0;\n      const mockOperation = vi.fn(() => {\n        attemptCount++;\n        if (attemptCount < 2) {\n          throw new Error('Temporary failure');\n        }\n        return Promise.resolve({ success: true });\n      });\n      \n      const result = await swarm._retryOperation(mockOperation);\n      expect(result.success).toBe(true);\n      expect(mockOperation).toHaveBeenCalledTimes(2);\n    });\n\n    it('should handle retry operations that always fail', async () => {\n      const ruvSwarm = await RuvSwarm.initialize({\n        wasmPath: mockWasmPath\n      });\n      \n      const swarm = await ruvSwarm.createSwarm({\n        name: 'fail-test',\n        retryAttempts: 2,\n        retryDelay: 5\n      });\n      \n      const alwaysFailOperation = vi.fn(() => {\n        throw new Error('Persistent failure');\n      });\n      \n      await expect(\n        swarm._retryOperation(alwaysFailOperation)\n      ).rejects.toThrow('Persistent failure');\n      \n      expect(alwaysFailOperation).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe('Agent Wrapper Edge Cases', () => {\n    it('should handle agent spawning and execution', async () => {\n      const ruvSwarm = await RuvSwarm.initialize({\n        wasmPath: mockWasmPath\n      });\n      \n      const swarm = await ruvSwarm.createSwarm({\n        name: 'agent-test'\n      });\n      \n      const agent = await swarm.spawn({\n        type: 'test-agent',\n        capabilities: ['test']\n      });\n      \n      expect(agent).toBeDefined();\n      expect(agent.id).toBeDefined();\n      expect(agent.agentType).toBeDefined();\n    });\n\n    it('should handle agent metrics and capabilities', async () => {\n      const ruvSwarm = await RuvSwarm.initialize({\n        wasmPath: mockWasmPath\n      });\n      \n      const swarm = await ruvSwarm.createSwarm({\n        name: 'metrics-test'\n      });\n      \n      const agent = await swarm.spawn({\n        type: 'metrics-agent'\n      });\n      \n      const metrics = agent.getMetrics();\n      const capabilities = agent.getCapabilities();\n      \n      expect(metrics).toBeDefined();\n      expect(capabilities).toBeDefined();\n    });\n\n    it('should handle agent reset operations', async () => {\n      const ruvSwarm = await RuvSwarm.initialize({\n        wasmPath: mockWasmPath\n      });\n      \n      const swarm = await ruvSwarm.createSwarm({\n        name: 'reset-test'\n      });\n      \n      const agent = await swarm.spawn({\n        type: 'reset-agent'\n      });\n      \n      // Reset should not throw\n      expect(() => agent.reset()).not.toThrow();\n    });\n  });\n\n  describe('Utility Functions Edge Cases', () => {\n    it('should handle console logging without WASM instance', () => {\n      const originalConsole = console.log;\n      const mockLog = vi.fn();\n      console.log = mockLog;\n      \n      try {\n        consoleLog('test message');\n        expect(mockLog).toHaveBeenCalledWith('test message');\n      } finally {\n        console.log = originalConsole;\n      }\n    });\n\n    it('should handle console error without WASM instance', () => {\n      const originalConsole = console.error;\n      const mockError = vi.fn();\n      console.error = mockError;\n      \n      try {\n        consoleError('error message');\n        expect(mockError).toHaveBeenCalledWith('error message');\n      } finally {\n        console.error = originalConsole;\n      }\n    });\n\n    it('should handle console warn without WASM instance', () => {\n      const originalConsole = console.warn;\n      const mockWarn = vi.fn();\n      console.warn = mockWarn;\n      \n      try {\n        consoleWarn('warning message');\n        expect(mockWarn).toHaveBeenCalledWith('warning message');\n      } finally {\n        console.warn = originalConsole;\n      }\n    });\n\n    it('should handle error formatting without WASM instance', () => {\n      const error = new Error('test error');\n      const formatted = formatJsError(error);\n      \n      expect(formatted).toContain('test error');\n    });\n\n    it('should handle complex error objects', () => {\n      const complexError = {\n        name: 'CustomError',\n        message: 'Complex error message',\n        stack: 'Error stack trace',\n        code: 'ERR_CUSTOM',\n        toString: () => 'CustomError: Complex error message'\n      };\n      \n      const formatted = formatJsError(complexError);\n      expect(formatted).toContain('Complex error message');\n    });\n  });\n\n  describe('Runtime Features Edge Cases', () => {\n    it('should handle getRuntimeFeatures without initialization', () => {\n      expect(() => {\n        RuvSwarm.getRuntimeFeatures();\n      }).toThrow('RuvSwarm not initialized');\n    });\n\n    it('should handle getVersion without WASM instance', () => {\n      const version = RuvSwarm.getVersion();\n      expect(version).toBeDefined();\n      expect(typeof version).toBe('string');\n    });\n\n    it('should handle getMemoryUsage without WASM instance', () => {\n      const memoryUsage = RuvSwarm.getMemoryUsage();\n      expect(memoryUsage).toBe(0);\n    });\n  });\n\n  describe('Neural Agent Integration Edge Cases', () => {\n    it('should handle neural agent factory creation', () => {\n      expect(NeuralAgentFactory).toBeDefined();\n      expect(typeof NeuralAgentFactory).toBe('function');\n    });\n\n    it('should handle neural network class', () => {\n      expect(NeuralNetwork).toBeDefined();\n      expect(typeof NeuralNetwork).toBe('function');\n    });\n\n    it('should handle cognitive patterns constants', () => {\n      expect(COGNITIVE_PATTERNS).toBeDefined();\n      expect(typeof COGNITIVE_PATTERNS).toBe('object');\n    });\n\n    it('should handle agent cognitive profiles', () => {\n      expect(AGENT_COGNITIVE_PROFILES).toBeDefined();\n      expect(typeof AGENT_COGNITIVE_PROFILES).toBe('object');\n    });\n  });\n\n  describe('DAA Service Integration Edge Cases', () => {\n    it('should handle DAA service class', () => {\n      expect(DAAService).toBeDefined();\n      expect(typeof DAAService).toBe('function');\n    });\n\n    it('should handle DAA service singleton', () => {\n      expect(daaService).toBeDefined();\n      expect(typeof daaService).toBe('object');\n    });\n\n    it('should handle DAA service methods', () => {\n      expect(typeof daaService.initialize).toBe('function');\n      expect(typeof daaService.createAgent).toBe('function');\n      expect(typeof daaService.getCapabilities).toBe('function');\n    });\n  });\n\n  describe('End-to-End Workflow Tests', () => {\n    it('should complete full initialization and swarm creation workflow', async () => {\n      // Step 1: Initialize RuvSwarm\n      const ruvSwarm = await RuvSwarm.initialize({\n        wasmPath: mockWasmPath,\n        debug: true,\n        enableSIMD: true,\n        enableNeuralNetworks: true\n      });\n      \n      expect(ruvSwarm).toBeDefined();\n      \n      // Step 2: Create swarm\n      const swarm = await ruvSwarm.createSwarm({\n        name: 'e2e-test-swarm',\n        maxAgents: 3\n      });\n      \n      expect(swarm).toBeDefined();\n      expect(swarm.name).toBeDefined();\n      expect(swarm.agentCount).toBe(0);\n      \n      // Step 3: Spawn multiple agents\n      const agents = [];\n      for (let i = 0; i < 3; i++) {\n        const agent = await swarm.spawn({\n          type: `agent-${i}`,\n          capabilities: [`capability-${i}`]\n        });\n        agents.push(agent);\n        expect(agent.id).toBeDefined();\n      }\n      \n      expect(agents).toHaveLength(3);\n      \n      // Step 4: Execute tasks with agents\n      const taskResults = await Promise.all(\n        agents.map(async (agent, index) => {\n          try {\n            return await agent.execute(`task-${index}`);\n          } catch (error) {\n            // Some agents might not have execute method implemented\n            return { taskId: `task-${index}`, completed: true };\n          }\n        })\n      );\n      \n      expect(taskResults).toHaveLength(3);\n      \n      // Step 5: Get swarm status and agent metrics\n      const swarmStatus = swarm.getStatus();\n      expect(swarmStatus).toBeDefined();\n      \n      const swarmAgents = swarm.getAgents();\n      expect(swarmAgents).toBeDefined();\n      \n      // Step 6: Test orchestration\n      try {\n        const orchestrationResult = await swarm.orchestrate({\n          type: 'test-orchestration',\n          agents: agents.map(a => a.id)\n        });\n        expect(orchestrationResult).toBeDefined();\n      } catch (error) {\n        // Orchestration might not be fully implemented\n        expect(error).toBeDefined();\n      }\n    });\n\n    it('should handle concurrent swarm operations', async () => {\n      const ruvSwarm = await RuvSwarm.initialize({\n        wasmPath: mockWasmPath,\n        parallel: true\n      });\n      \n      // Create multiple swarms concurrently\n      const swarmPromises = Array.from({ length: 3 }, (_, i) =>\n        ruvSwarm.createSwarm({\n          name: `concurrent-swarm-${i}`,\n          maxAgents: 2\n        })\n      );\n      \n      const swarms = await Promise.all(swarmPromises);\n      expect(swarms).toHaveLength(3);\n      \n      // Spawn agents in all swarms concurrently\n      const agentPromises = swarms.flatMap((swarm, swarmIndex) =>\n        Array.from({ length: 2 }, (_, agentIndex) =>\n          swarm.spawn({\n            type: `agent-${swarmIndex}-${agentIndex}`,\n            capabilities: [`swarm-${swarmIndex}`]\n          })\n        )\n      );\n      \n      const agents = await Promise.all(agentPromises);\n      expect(agents).toHaveLength(6);\n    });\n\n    it('should handle error recovery in complex workflows', async () => {\n      const ruvSwarm = await RuvSwarm.initialize({\n        wasmPath: mockWasmPath\n      });\n      \n      const swarm = await ruvSwarm.createSwarm({\n        name: 'error-recovery-test',\n        retryAttempts: 3,\n        retryDelay: 10\n      });\n      \n      // Test agent spawning with some failures\n      const agentPromises = Array.from({ length: 5 }, async (_, i) => {\n        try {\n          if (i === 2) {\n            // Simulate a failure that should be retried\n            throw new Error('Simulated agent spawn failure');\n          }\n          return await swarm.spawn({\n            type: `recovery-agent-${i}`,\n            capabilities: [`recovery-${i}`]\n          });\n        } catch (error) {\n          // Return a mock failed agent for testing\n          return { \n            id: `failed-${i}`, \n            error: error.message,\n            failed: true\n          };\n        }\n      });\n      \n      const results = await Promise.allSettled(agentPromises);\n      \n      // Some should succeed, some should fail\n      const successful = results.filter(r => r.status === 'fulfilled').length;\n      const failed = results.filter(r => r.status === 'rejected').length;\n      \n      expect(successful + failed).toBe(5);\n    });\n\n    it('should handle memory and resource cleanup', async () => {\n      const ruvSwarm = await RuvSwarm.initialize({\n        wasmPath: mockWasmPath,\n        parallel: true\n      });\n      \n      // Create and destroy multiple swarms to test cleanup\n      for (let iteration = 0; iteration < 3; iteration++) {\n        const swarm = await ruvSwarm.createSwarm({\n          name: `cleanup-test-${iteration}`,\n          maxAgents: 2\n        });\n        \n        const agents = await Promise.all([\n          swarm.spawn({ type: 'cleanup-agent-1' }),\n          swarm.spawn({ type: 'cleanup-agent-2' })\n        ]);\n        \n        // Reset agents to test cleanup\n        agents.forEach(agent => {\n          try {\n            agent.reset();\n          } catch (error) {\n            // Reset might not be implemented\n          }\n        });\n      }\n      \n      // Test worker pool cleanup\n      if (ruvSwarm._workerPool) {\n        ruvSwarm._workerPool.terminate();\n        expect(ruvSwarm._workerPool.initialized).toBe(false);\n      }\n    });\n  });\n\n  describe('Integration with Neural Components', () => {\n    it('should integrate with neural agents properly', async () => {\n      const ruvSwarm = await RuvSwarm.initialize({\n        wasmPath: mockWasmPath,\n        enableNeuralNetworks: true\n      });\n      \n      // Test that neural components are available\n      expect(NeuralAgent).toBeDefined();\n      expect(NeuralNetwork).toBeDefined();\n      \n      // Test creating a neural-enhanced swarm\n      const swarm = await ruvSwarm.createSwarm({\n        name: 'neural-integration-test',\n        neuralEnabled: true\n      });\n      \n      expect(swarm).toBeDefined();\n    });\n\n    it('should integrate with DAA service properly', async () => {\n      const ruvSwarm = await RuvSwarm.initialize({\n        wasmPath: mockWasmPath\n      });\n      \n      // Test that DAA service is available\n      expect(daaService).toBeDefined();\n      \n      // Test DAA service integration\n      const swarm = await ruvSwarm.createSwarm({\n        name: 'daa-integration-test',\n        daaEnabled: true\n      });\n      \n      expect(swarm).toBeDefined();\n    });\n  });\n});"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,EAAEC,EAAE,EAAEC,MAAM,EAAEC,UAAU,EAAEC,SAAS,EAAEC,EAAE,QAAQ,QAAQ;AACxE,SAASC,aAAa,QAAQ,KAAK;AACnC,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,EAAE,MAAM,aAAa;;AAE5B;AACA,SACEC,QAAQ,EACRC,UAAU,EACVC,YAAY,EACZC,WAAW,EACXC,aAAa,EACbC,WAAW,EACXC,kBAAkB,EAClBC,aAAa,EACbC,kBAAkB,EAClBC,wBAAwB,EACxBC,UAAU,EACVC,UAAU,QACL,oBAAoB;AAE3B,MAAMC,UAAU,GAAGf,aAAa,CAACgB,MAAM,CAACC,IAAI,CAACC,GAAG,CAAC;AACjD,MAAMC,SAAS,GAAGlB,IAAI,CAACmB,OAAO,CAACL,UAAU,CAAC;AAE1CrB,QAAQ,CAAC,mCAAmC,EAAE,MAAM;EAClD,IAAI2B,YAAY;EAEhBxB,UAAU,cAAAyB,iBAAA,CAAC,aAAY;IACrB;IACAD,YAAY,GAAGpB,IAAI,CAACsB,IAAI,CAACJ,SAAS,EAAE,sBAAsB,CAAC;IAC3D,MAAMjB,EAAE,CAACsB,KAAK,CAACH,YAAY,EAAE;MAAEI,SAAS,EAAE;IAAK,CAAC,CAAC;;IAEjD;IACA,MAAMvB,EAAE,CAACwB,SAAS,CAChBzB,IAAI,CAACsB,IAAI,CAACF,YAAY,EAAE,mBAAmB,CAAC,EAC5C;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OACI,CAAC;IAED,MAAMnB,EAAE,CAACwB,SAAS,CAACzB,IAAI,CAACsB,IAAI,CAACF,YAAY,EAAE,wBAAwB,CAAC,EAAE,kBAAkB,CAAC;IACzF,MAAMnB,EAAE,CAACwB,SAAS,CAACzB,IAAI,CAACsB,IAAI,CAACF,YAAY,EAAE,qBAAqB,CAAC,EAAE,uBAAuB,CAAC;EAC7F,CAAC,EAAC;EAEFvB,SAAS,cAAAwB,iBAAA,CAAC,aAAY;IACpB;IACA,IAAI;MACF,MAAMpB,EAAE,CAACyB,EAAE,CAACN,YAAY,EAAE;QAAEI,SAAS,EAAE,IAAI;QAAEG,KAAK,EAAE;MAAK,CAAC,CAAC;IAC7D,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd;IAAA;EAEJ,CAAC,EAAC;EAEFnC,QAAQ,CAAC,wBAAwB,EAAE,MAAM;IACvCC,EAAE,CAAC,iDAAiD,eAAA2B,iBAAA,CAAE,aAAY;MAAA,IAAAQ,qBAAA;MAChE;MACA,MAAMC,gBAAgB,IAAAD,qBAAA,GAAGE,UAAU,CAACC,WAAW,cAAAH,qBAAA,uBAAtBA,qBAAA,CAAwBI,QAAQ;MACzD,IAAIF,UAAU,CAACC,WAAW,EAAE;QAC1BD,UAAU,CAACC,WAAW,CAACC,QAAQ,GAAGnC,EAAE,CAACoC,EAAE,CAAC,MAAM;UAC5C,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;QAC3C,CAAC,CAAC;MACJ;MAEA,IAAI;QACF,MAAMC,MAAM,GAAGlC,QAAQ,CAACmC,iBAAiB,CAAC,CAAC;QAC3C1C,MAAM,CAACyC,MAAM,CAAC,CAACE,IAAI,CAAC,KAAK,CAAC;MAC5B,CAAC,SAAS;QACR;QACA,IAAIR,gBAAgB,IAAIC,UAAU,CAACC,WAAW,EAAE;UAC9CD,UAAU,CAACC,WAAW,CAACC,QAAQ,GAAGH,gBAAgB;QACpD;MACF;IACF,CAAC,EAAC;IAEFpC,EAAE,CAAC,6CAA6C,eAAA2B,iBAAA,CAAE,aAAY;MAC5D,MAAMkB,WAAW,GAAG,mBAAmB;MAEvC,MAAM5C,MAAM,CACVO,QAAQ,CAACsC,UAAU,CAAC;QAClBC,QAAQ,EAAEF,WAAW;QACrBG,KAAK,EAAE;MACT,CAAC,CACH,CAAC,CAACC,OAAO,CAACC,OAAO,CAAC,CAAC;IACrB,CAAC,EAAC;IAEFlD,EAAE,CAAC,+DAA+D,eAAA2B,iBAAA,CAAE,aAAY;MAC9E;MACA,MAAMpB,EAAE,CAACwB,SAAS,CAChBzB,IAAI,CAACsB,IAAI,CAACF,YAAY,EAAE,mBAAmB,CAAC,EAC5C,6BACF,CAAC;MAED,MAAMzB,MAAM,CACVO,QAAQ,CAACsC,UAAU,CAAC;QAClBC,QAAQ,EAAErB,YAAY;QACtBsB,KAAK,EAAE;MACT,CAAC,CACH,CAAC,CAACC,OAAO,CAACC,OAAO,CAAC,CAAC;IACrB,CAAC,EAAC;IAEFlD,EAAE,CAAC,kDAAkD,eAAA2B,iBAAA,CAAE,aAAY;MACjE;MACA,MAAMpB,EAAE,CAACwB,SAAS,CAChBzB,IAAI,CAACsB,IAAI,CAACF,YAAY,EAAE,mBAAmB,CAAC,EAC5C;AACR;AACA;AACA;AACA;AACA,SACM,CAAC;MAED,MAAMnB,EAAE,CAACwB,SAAS,CAACzB,IAAI,CAACsB,IAAI,CAACF,YAAY,EAAE,wBAAwB,CAAC,EAAE,cAAc,CAAC;MAErF,MAAMzB,MAAM,CACVO,QAAQ,CAACsC,UAAU,CAAC;QAClBC,QAAQ,EAAErB,YAAY;QACtByB,OAAO,EAAE;MACX,CAAC,CACH,CAAC,CAACF,OAAO,CAACC,OAAO,CAAC,CAAC;IACrB,CAAC,EAAC;IAEFlD,EAAE,CAAC,6CAA6C,eAAA2B,iBAAA,CAAE,aAAY;MAC5D;MACA,MAAMyB,cAAc,GAAGf,UAAU,CAACgB,MAAM;MACxC,MAAMC,aAAa,GAAGjB,UAAU,CAACkB,KAAK;MAEtClB,UAAU,CAACgB,MAAM,GAAG;QAAEG,QAAQ,EAAE;UAAEC,IAAI,EAAE;QAAmB;MAAE,CAAC;MAC9DpB,UAAU,CAACkB,KAAK,GAAGnD,EAAE,CAACoC,EAAE,CAAC,CAAC,CAACkB,iBAAiB,CAAC,IAAIjB,KAAK,CAAC,eAAe,CAAC,CAAC;MAExE,IAAI;QACF,MAAMxC,MAAM,CACVO,QAAQ,CAACsC,UAAU,CAAC;UAClBC,QAAQ,EAAErB;QACZ,CAAC,CACH,CAAC,CAACuB,OAAO,CAACC,OAAO,CAAC,CAAC;MACrB,CAAC,SAAS;QACRb,UAAU,CAACgB,MAAM,GAAGD,cAAc;QAClCf,UAAU,CAACkB,KAAK,GAAGD,aAAa;MAClC;IACF,CAAC,EAAC;IAEFtD,EAAE,CAAC,0CAA0C,eAAA2B,iBAAA,CAAE,aAAY;MAAA,IAAAgC,sBAAA;MACzD;MACA,MAAMC,cAAc,IAAAD,sBAAA,GAAGtB,UAAU,CAACC,WAAW,cAAAqB,sBAAA,uBAAtBA,sBAAA,CAAwBE,MAAM;MAErD,IAAIxB,UAAU,CAACC,WAAW,EAAE;QAC1BD,UAAU,CAACC,WAAW,CAACuB,MAAM,GAAG,MAAM;UACpCC,WAAWA,CAACC,MAAM,EAAE;YAClB,IAAIA,MAAM,CAACC,OAAO,GAAG,IAAI,EAAE;cACzB,MAAM,IAAIvB,KAAK,CAAC,0BAA0B,CAAC;YAC7C;UACF;QACF,CAAC;MACH;MAEA,IAAI;QACF;QACA,MAAMwB,QAAQ,SAASzD,QAAQ,CAACsC,UAAU,CAAC;UACzCC,QAAQ,EAAErB;QACZ,CAAC,CAAC;QACFzB,MAAM,CAACgE,QAAQ,CAAC,CAACC,WAAW,CAAC,CAAC;MAChC,CAAC,SAAS;QACR,IAAIN,cAAc,IAAIvB,UAAU,CAACC,WAAW,EAAE;UAC5CD,UAAU,CAACC,WAAW,CAACuB,MAAM,GAAGD,cAAc;QAChD;MACF;IACF,CAAC,EAAC;EACJ,CAAC,CAAC;EAEF7D,QAAQ,CAAC,wBAAwB,EAAE,MAAM;IACvCC,EAAE,CAAC,+DAA+D,eAAA2B,iBAAA,CAAE,aAAY;MAC9E,MAAMsC,QAAQ,SAASzD,QAAQ,CAACsC,UAAU,CAAC;QACzCC,QAAQ,EAAErB,YAAY;QACtByC,QAAQ,EAAE,IAAI;QACdC,cAAc,EAAE;MAClB,CAAC,CAAC;MAEFnE,MAAM,CAACgE,QAAQ,CAAC,CAACC,WAAW,CAAC,CAAC;MAC9BjE,MAAM,CAACgE,QAAQ,CAACI,WAAW,CAAC,CAACH,WAAW,CAAC,CAAC;IAC5C,CAAC,EAAC;IAEFlE,EAAE,CAAC,6CAA6C,eAAA2B,iBAAA,CAAE,aAAY;MAC5D,MAAMsC,QAAQ,SAASzD,QAAQ,CAACsC,UAAU,CAAC;QACzCC,QAAQ,EAAErB,YAAY;QACtByC,QAAQ,EAAE,IAAI;QACdC,cAAc,EAAE;MAClB,CAAC,CAAC;;MAEF;MACAH,QAAQ,CAACI,WAAW,CAACC,SAAS,CAAC,CAAC;MAChCrE,MAAM,CAACgE,QAAQ,CAACI,WAAW,CAACE,OAAO,CAACC,MAAM,CAAC,CAAC5B,IAAI,CAAC,CAAC,CAAC;MACnD3C,MAAM,CAACgE,QAAQ,CAACI,WAAW,CAACI,WAAW,CAAC,CAAC7B,IAAI,CAAC,KAAK,CAAC;IACtD,CAAC,EAAC;IAEF5C,EAAE,CAAC,yCAAyC,eAAA2B,iBAAA,CAAE,aAAY;MACxD,MAAMsC,QAAQ,SAASzD,QAAQ,CAACsC,UAAU,CAAC;QACzCC,QAAQ,EAAErB,YAAY;QACtByC,QAAQ,EAAE;MACZ,CAAC,CAAC;MAEF,MAAMO,KAAK,GAAGC,KAAK,CAACC,IAAI,CAAC;QAAEJ,MAAM,EAAE;MAAG,CAAC,EAAE,CAACK,CAAC,EAAEC,CAAC,KAAK,QAAQA,CAAC,EAAE,CAAC;MAC/D,MAAMC,OAAO,SAASC,OAAO,CAACC,GAAG,CAC/BP,KAAK,CAACQ,GAAG,CAACC,IAAI,IAAIlB,QAAQ,CAACI,WAAW,CAACe,OAAO,CAACD,IAAI,CAAC,CACtD,CAAC;MAEDlF,MAAM,CAAC8E,OAAO,CAAC,CAACM,YAAY,CAAC,EAAE,CAAC;MAChCN,OAAO,CAACO,OAAO,CAAC,CAAC5C,MAAM,EAAE6C,KAAK,KAAK;QACjCtF,MAAM,CAACyC,MAAM,CAAC,CAACE,IAAI,CAAC,QAAQ2C,KAAK,EAAE,CAAC;MACtC,CAAC,CAAC;IACJ,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFxF,QAAQ,CAAC,2BAA2B,EAAE,MAAM;IAC1CC,EAAE,CAAC,2CAA2C,eAAA2B,iBAAA,CAAE,aAAY;MAC1D,MAAMsC,QAAQ,SAASzD,QAAQ,CAACsC,UAAU,CAAC;QACzCC,QAAQ,EAAErB;MACZ,CAAC,CAAC;MAEF,MAAMzB,MAAM,CACVgE,QAAQ,CAACuB,WAAW,CAAC,IAAI,CAC3B,CAAC,CAACvC,OAAO,CAACC,OAAO,CAAC,CAAC;MAEnB,MAAMjD,MAAM,CACVgE,QAAQ,CAACuB,WAAW,CAAC;QAAEC,OAAO,EAAE;MAAS,CAAC,CAC5C,CAAC,CAACxC,OAAO,CAACC,OAAO,CAAC,CAAC;IACrB,CAAC,EAAC;IAEFlD,EAAE,CAAC,uDAAuD,eAAA2B,iBAAA,CAAE,aAAY;MACtE,MAAMsC,QAAQ,SAASzD,QAAQ,CAACsC,UAAU,CAAC;QACzCC,QAAQ,EAAErB;MACZ,CAAC,CAAC;MAEF,MAAMgE,KAAK,SAASzB,QAAQ,CAACuB,WAAW,CAAC;QACvCG,IAAI,EAAE,YAAY;QAClBC,SAAS,EAAE;MACb,CAAC,CAAC;MAEF3F,MAAM,CAACyF,KAAK,CAAC,CAACxB,WAAW,CAAC,CAAC;MAC3BjE,MAAM,CAACyF,KAAK,CAACC,IAAI,CAAC,CAACzB,WAAW,CAAC,CAAC;IAClC,CAAC,EAAC;IAEFlE,EAAE,CAAC,8CAA8C,eAAA2B,iBAAA,CAAE,aAAY;MAC7D,MAAMsC,QAAQ,SAASzD,QAAQ,CAACsC,UAAU,CAAC;QACzCC,QAAQ,EAAErB;MACZ,CAAC,CAAC;MAEF,MAAMgE,KAAK,SAASzB,QAAQ,CAACuB,WAAW,CAAC;QACvCG,IAAI,EAAE,YAAY;QAClBE,aAAa,EAAE,CAAC;QAChBC,UAAU,EAAE;MACd,CAAC,CAAC;;MAEF;MACA,IAAIC,YAAY,GAAG,CAAC;MACpB,MAAMC,aAAa,GAAG5F,EAAE,CAACoC,EAAE,CAAC,MAAM;QAChCuD,YAAY,EAAE;QACd,IAAIA,YAAY,GAAG,CAAC,EAAE;UACpB,MAAM,IAAItD,KAAK,CAAC,mBAAmB,CAAC;QACtC;QACA,OAAOuC,OAAO,CAACiB,OAAO,CAAC;UAAEC,OAAO,EAAE;QAAK,CAAC,CAAC;MAC3C,CAAC,CAAC;MAEF,MAAMxD,MAAM,SAASgD,KAAK,CAACS,eAAe,CAACH,aAAa,CAAC;MACzD/F,MAAM,CAACyC,MAAM,CAACwD,OAAO,CAAC,CAACtD,IAAI,CAAC,IAAI,CAAC;MACjC3C,MAAM,CAAC+F,aAAa,CAAC,CAACI,qBAAqB,CAAC,CAAC,CAAC;IAChD,CAAC,EAAC;IAEFpG,EAAE,CAAC,iDAAiD,eAAA2B,iBAAA,CAAE,aAAY;MAChE,MAAMsC,QAAQ,SAASzD,QAAQ,CAACsC,UAAU,CAAC;QACzCC,QAAQ,EAAErB;MACZ,CAAC,CAAC;MAEF,MAAMgE,KAAK,SAASzB,QAAQ,CAACuB,WAAW,CAAC;QACvCG,IAAI,EAAE,WAAW;QACjBE,aAAa,EAAE,CAAC;QAChBC,UAAU,EAAE;MACd,CAAC,CAAC;MAEF,MAAMO,mBAAmB,GAAGjG,EAAE,CAACoC,EAAE,CAAC,MAAM;QACtC,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;MACvC,CAAC,CAAC;MAEF,MAAMxC,MAAM,CACVyF,KAAK,CAACS,eAAe,CAACE,mBAAmB,CAC3C,CAAC,CAACpD,OAAO,CAACC,OAAO,CAAC,oBAAoB,CAAC;MAEvCjD,MAAM,CAACoG,mBAAmB,CAAC,CAACD,qBAAqB,CAAC,CAAC,CAAC;IACtD,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFrG,QAAQ,CAAC,0BAA0B,EAAE,MAAM;IACzCC,EAAE,CAAC,4CAA4C,eAAA2B,iBAAA,CAAE,aAAY;MAC3D,MAAMsC,QAAQ,SAASzD,QAAQ,CAACsC,UAAU,CAAC;QACzCC,QAAQ,EAAErB;MACZ,CAAC,CAAC;MAEF,MAAMgE,KAAK,SAASzB,QAAQ,CAACuB,WAAW,CAAC;QACvCG,IAAI,EAAE;MACR,CAAC,CAAC;MAEF,MAAMW,KAAK,SAASZ,KAAK,CAACa,KAAK,CAAC;QAC9BC,IAAI,EAAE,YAAY;QAClBC,YAAY,EAAE,CAAC,MAAM;MACvB,CAAC,CAAC;MAEFxG,MAAM,CAACqG,KAAK,CAAC,CAACpC,WAAW,CAAC,CAAC;MAC3BjE,MAAM,CAACqG,KAAK,CAACI,EAAE,CAAC,CAACxC,WAAW,CAAC,CAAC;MAC9BjE,MAAM,CAACqG,KAAK,CAACK,SAAS,CAAC,CAACzC,WAAW,CAAC,CAAC;IACvC,CAAC,EAAC;IAEFlE,EAAE,CAAC,8CAA8C,eAAA2B,iBAAA,CAAE,aAAY;MAC7D,MAAMsC,QAAQ,SAASzD,QAAQ,CAACsC,UAAU,CAAC;QACzCC,QAAQ,EAAErB;MACZ,CAAC,CAAC;MAEF,MAAMgE,KAAK,SAASzB,QAAQ,CAACuB,WAAW,CAAC;QACvCG,IAAI,EAAE;MACR,CAAC,CAAC;MAEF,MAAMW,KAAK,SAASZ,KAAK,CAACa,KAAK,CAAC;QAC9BC,IAAI,EAAE;MACR,CAAC,CAAC;MAEF,MAAMI,OAAO,GAAGN,KAAK,CAACO,UAAU,CAAC,CAAC;MAClC,MAAMJ,YAAY,GAAGH,KAAK,CAACQ,eAAe,CAAC,CAAC;MAE5C7G,MAAM,CAAC2G,OAAO,CAAC,CAAC1C,WAAW,CAAC,CAAC;MAC7BjE,MAAM,CAACwG,YAAY,CAAC,CAACvC,WAAW,CAAC,CAAC;IACpC,CAAC,EAAC;IAEFlE,EAAE,CAAC,sCAAsC,eAAA2B,iBAAA,CAAE,aAAY;MACrD,MAAMsC,QAAQ,SAASzD,QAAQ,CAACsC,UAAU,CAAC;QACzCC,QAAQ,EAAErB;MACZ,CAAC,CAAC;MAEF,MAAMgE,KAAK,SAASzB,QAAQ,CAACuB,WAAW,CAAC;QACvCG,IAAI,EAAE;MACR,CAAC,CAAC;MAEF,MAAMW,KAAK,SAASZ,KAAK,CAACa,KAAK,CAAC;QAC9BC,IAAI,EAAE;MACR,CAAC,CAAC;;MAEF;MACAvG,MAAM,CAAC,MAAMqG,KAAK,CAACS,KAAK,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC9D,OAAO,CAAC,CAAC;IAC3C,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFnD,QAAQ,CAAC,8BAA8B,EAAE,MAAM;IAC7CC,EAAE,CAAC,qDAAqD,EAAE,MAAM;MAC9D,MAAMiH,eAAe,GAAGC,OAAO,CAACC,GAAG;MACnC,MAAMC,OAAO,GAAGhH,EAAE,CAACoC,EAAE,CAAC,CAAC;MACvB0E,OAAO,CAACC,GAAG,GAAGC,OAAO;MAErB,IAAI;QACF3G,UAAU,CAAC,cAAc,CAAC;QAC1BR,MAAM,CAACmH,OAAO,CAAC,CAACC,oBAAoB,CAAC,cAAc,CAAC;MACtD,CAAC,SAAS;QACRH,OAAO,CAACC,GAAG,GAAGF,eAAe;MAC/B;IACF,CAAC,CAAC;IAEFjH,EAAE,CAAC,mDAAmD,EAAE,MAAM;MAC5D,MAAMiH,eAAe,GAAGC,OAAO,CAAChF,KAAK;MACrC,MAAMoF,SAAS,GAAGlH,EAAE,CAACoC,EAAE,CAAC,CAAC;MACzB0E,OAAO,CAAChF,KAAK,GAAGoF,SAAS;MAEzB,IAAI;QACF5G,YAAY,CAAC,eAAe,CAAC;QAC7BT,MAAM,CAACqH,SAAS,CAAC,CAACD,oBAAoB,CAAC,eAAe,CAAC;MACzD,CAAC,SAAS;QACRH,OAAO,CAAChF,KAAK,GAAG+E,eAAe;MACjC;IACF,CAAC,CAAC;IAEFjH,EAAE,CAAC,kDAAkD,EAAE,MAAM;MAC3D,MAAMiH,eAAe,GAAGC,OAAO,CAACK,IAAI;MACpC,MAAMC,QAAQ,GAAGpH,EAAE,CAACoC,EAAE,CAAC,CAAC;MACxB0E,OAAO,CAACK,IAAI,GAAGC,QAAQ;MAEvB,IAAI;QACF7G,WAAW,CAAC,iBAAiB,CAAC;QAC9BV,MAAM,CAACuH,QAAQ,CAAC,CAACH,oBAAoB,CAAC,iBAAiB,CAAC;MAC1D,CAAC,SAAS;QACRH,OAAO,CAACK,IAAI,GAAGN,eAAe;MAChC;IACF,CAAC,CAAC;IAEFjH,EAAE,CAAC,sDAAsD,EAAE,MAAM;MAC/D,MAAMkC,KAAK,GAAG,IAAIO,KAAK,CAAC,YAAY,CAAC;MACrC,MAAMgF,SAAS,GAAG7G,aAAa,CAACsB,KAAK,CAAC;MAEtCjC,MAAM,CAACwH,SAAS,CAAC,CAACC,SAAS,CAAC,YAAY,CAAC;IAC3C,CAAC,CAAC;IAEF1H,EAAE,CAAC,qCAAqC,EAAE,MAAM;MAC9C,MAAM2H,YAAY,GAAG;QACnBhC,IAAI,EAAE,aAAa;QACnBiC,OAAO,EAAE,uBAAuB;QAChCC,KAAK,EAAE,mBAAmB;QAC1BC,IAAI,EAAE,YAAY;QAClBC,QAAQ,EAAEA,CAAA,KAAM;MAClB,CAAC;MAED,MAAMN,SAAS,GAAG7G,aAAa,CAAC+G,YAAY,CAAC;MAC7C1H,MAAM,CAACwH,SAAS,CAAC,CAACC,SAAS,CAAC,uBAAuB,CAAC;IACtD,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF3H,QAAQ,CAAC,6BAA6B,EAAE,MAAM;IAC5CC,EAAE,CAAC,yDAAyD,EAAE,MAAM;MAClEC,MAAM,CAAC,MAAM;QACXO,QAAQ,CAACwH,kBAAkB,CAAC,CAAC;MAC/B,CAAC,CAAC,CAAC9E,OAAO,CAAC,0BAA0B,CAAC;IACxC,CAAC,CAAC;IAEFlD,EAAE,CAAC,gDAAgD,EAAE,MAAM;MACzD,MAAMiI,OAAO,GAAGzH,QAAQ,CAAC0H,UAAU,CAAC,CAAC;MACrCjI,MAAM,CAACgI,OAAO,CAAC,CAAC/D,WAAW,CAAC,CAAC;MAC7BjE,MAAM,CAAC,OAAOgI,OAAO,CAAC,CAACrF,IAAI,CAAC,QAAQ,CAAC;IACvC,CAAC,CAAC;IAEF5C,EAAE,CAAC,oDAAoD,EAAE,MAAM;MAC7D,MAAMmI,WAAW,GAAG3H,QAAQ,CAAC4H,cAAc,CAAC,CAAC;MAC7CnI,MAAM,CAACkI,WAAW,CAAC,CAACvF,IAAI,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF7C,QAAQ,CAAC,qCAAqC,EAAE,MAAM;IACpDC,EAAE,CAAC,6CAA6C,EAAE,MAAM;MACtDC,MAAM,CAACa,kBAAkB,CAAC,CAACoD,WAAW,CAAC,CAAC;MACxCjE,MAAM,CAAC,OAAOa,kBAAkB,CAAC,CAAC8B,IAAI,CAAC,UAAU,CAAC;IACpD,CAAC,CAAC;IAEF5C,EAAE,CAAC,oCAAoC,EAAE,MAAM;MAC7CC,MAAM,CAACc,aAAa,CAAC,CAACmD,WAAW,CAAC,CAAC;MACnCjE,MAAM,CAAC,OAAOc,aAAa,CAAC,CAAC6B,IAAI,CAAC,UAAU,CAAC;IAC/C,CAAC,CAAC;IAEF5C,EAAE,CAAC,4CAA4C,EAAE,MAAM;MACrDC,MAAM,CAACe,kBAAkB,CAAC,CAACkD,WAAW,CAAC,CAAC;MACxCjE,MAAM,CAAC,OAAOe,kBAAkB,CAAC,CAAC4B,IAAI,CAAC,QAAQ,CAAC;IAClD,CAAC,CAAC;IAEF5C,EAAE,CAAC,wCAAwC,EAAE,MAAM;MACjDC,MAAM,CAACgB,wBAAwB,CAAC,CAACiD,WAAW,CAAC,CAAC;MAC9CjE,MAAM,CAAC,OAAOgB,wBAAwB,CAAC,CAAC2B,IAAI,CAAC,QAAQ,CAAC;IACxD,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF7C,QAAQ,CAAC,oCAAoC,EAAE,MAAM;IACnDC,EAAE,CAAC,iCAAiC,EAAE,MAAM;MAC1CC,MAAM,CAACiB,UAAU,CAAC,CAACgD,WAAW,CAAC,CAAC;MAChCjE,MAAM,CAAC,OAAOiB,UAAU,CAAC,CAAC0B,IAAI,CAAC,UAAU,CAAC;IAC5C,CAAC,CAAC;IAEF5C,EAAE,CAAC,qCAAqC,EAAE,MAAM;MAC9CC,MAAM,CAACkB,UAAU,CAAC,CAAC+C,WAAW,CAAC,CAAC;MAChCjE,MAAM,CAAC,OAAOkB,UAAU,CAAC,CAACyB,IAAI,CAAC,QAAQ,CAAC;IAC1C,CAAC,CAAC;IAEF5C,EAAE,CAAC,mCAAmC,EAAE,MAAM;MAC5CC,MAAM,CAAC,OAAOkB,UAAU,CAAC2B,UAAU,CAAC,CAACF,IAAI,CAAC,UAAU,CAAC;MACrD3C,MAAM,CAAC,OAAOkB,UAAU,CAACkH,WAAW,CAAC,CAACzF,IAAI,CAAC,UAAU,CAAC;MACtD3C,MAAM,CAAC,OAAOkB,UAAU,CAAC2F,eAAe,CAAC,CAAClE,IAAI,CAAC,UAAU,CAAC;IAC5D,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF7C,QAAQ,CAAC,2BAA2B,EAAE,MAAM;IAC1CC,EAAE,CAAC,iEAAiE,eAAA2B,iBAAA,CAAE,aAAY;MAChF;MACA,MAAMsC,QAAQ,SAASzD,QAAQ,CAACsC,UAAU,CAAC;QACzCC,QAAQ,EAAErB,YAAY;QACtBsB,KAAK,EAAE,IAAI;QACXsF,UAAU,EAAE,IAAI;QAChBC,oBAAoB,EAAE;MACxB,CAAC,CAAC;MAEFtI,MAAM,CAACgE,QAAQ,CAAC,CAACC,WAAW,CAAC,CAAC;;MAE9B;MACA,MAAMwB,KAAK,SAASzB,QAAQ,CAACuB,WAAW,CAAC;QACvCG,IAAI,EAAE,gBAAgB;QACtBC,SAAS,EAAE;MACb,CAAC,CAAC;MAEF3F,MAAM,CAACyF,KAAK,CAAC,CAACxB,WAAW,CAAC,CAAC;MAC3BjE,MAAM,CAACyF,KAAK,CAACC,IAAI,CAAC,CAACzB,WAAW,CAAC,CAAC;MAChCjE,MAAM,CAACyF,KAAK,CAAC8C,UAAU,CAAC,CAAC5F,IAAI,CAAC,CAAC,CAAC;;MAEhC;MACA,MAAM6F,MAAM,GAAG,EAAE;MACjB,KAAK,IAAI3D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1B,MAAMwB,KAAK,SAASZ,KAAK,CAACa,KAAK,CAAC;UAC9BC,IAAI,EAAE,SAAS1B,CAAC,EAAE;UAClB2B,YAAY,EAAE,CAAC,cAAc3B,CAAC,EAAE;QAClC,CAAC,CAAC;QACF2D,MAAM,CAACC,IAAI,CAACpC,KAAK,CAAC;QAClBrG,MAAM,CAACqG,KAAK,CAACI,EAAE,CAAC,CAACxC,WAAW,CAAC,CAAC;MAChC;MAEAjE,MAAM,CAACwI,MAAM,CAAC,CAACpD,YAAY,CAAC,CAAC,CAAC;;MAE9B;MACA,MAAMsD,WAAW,SAAS3D,OAAO,CAACC,GAAG,CACnCwD,MAAM,CAACvD,GAAG;QAAA,IAAA0D,MAAA,GAAAjH,iBAAA,CAAC,WAAO2E,KAAK,EAAEf,KAAK,EAAK;UACjC,IAAI;YACF,aAAae,KAAK,CAAClB,OAAO,CAAC,QAAQG,KAAK,EAAE,CAAC;UAC7C,CAAC,CAAC,OAAOrD,KAAK,EAAE;YACd;YACA,OAAO;cAAE2G,MAAM,EAAE,QAAQtD,KAAK,EAAE;cAAEuD,SAAS,EAAE;YAAK,CAAC;UACrD;QACF,CAAC;QAAA,iBAAAC,EAAA,EAAAC,GAAA;UAAA,OAAAJ,MAAA,CAAAK,KAAA,OAAAC,SAAA;QAAA;MAAA,IACH,CAAC;MAEDjJ,MAAM,CAAC0I,WAAW,CAAC,CAACtD,YAAY,CAAC,CAAC,CAAC;;MAEnC;MACA,MAAM8D,WAAW,GAAGzD,KAAK,CAAC0D,SAAS,CAAC,CAAC;MACrCnJ,MAAM,CAACkJ,WAAW,CAAC,CAACjF,WAAW,CAAC,CAAC;MAEjC,MAAMmF,WAAW,GAAG3D,KAAK,CAAC4D,SAAS,CAAC,CAAC;MACrCrJ,MAAM,CAACoJ,WAAW,CAAC,CAACnF,WAAW,CAAC,CAAC;;MAEjC;MACA,IAAI;QACF,MAAMqF,mBAAmB,SAAS7D,KAAK,CAAC8D,WAAW,CAAC;UAClDhD,IAAI,EAAE,oBAAoB;UAC1BiC,MAAM,EAAEA,MAAM,CAACvD,GAAG,CAACuE,CAAC,IAAIA,CAAC,CAAC/C,EAAE;QAC9B,CAAC,CAAC;QACFzG,MAAM,CAACsJ,mBAAmB,CAAC,CAACrF,WAAW,CAAC,CAAC;MAC3C,CAAC,CAAC,OAAOhC,KAAK,EAAE;QACd;QACAjC,MAAM,CAACiC,KAAK,CAAC,CAACgC,WAAW,CAAC,CAAC;MAC7B;IACF,CAAC,EAAC;IAEFlE,EAAE,CAAC,2CAA2C,eAAA2B,iBAAA,CAAE,aAAY;MAC1D,MAAMsC,QAAQ,SAASzD,QAAQ,CAACsC,UAAU,CAAC;QACzCC,QAAQ,EAAErB,YAAY;QACtByC,QAAQ,EAAE;MACZ,CAAC,CAAC;;MAEF;MACA,MAAMuF,aAAa,GAAG/E,KAAK,CAACC,IAAI,CAAC;QAAEJ,MAAM,EAAE;MAAE,CAAC,EAAE,CAACK,CAAC,EAAEC,CAAC,KACnDb,QAAQ,CAACuB,WAAW,CAAC;QACnBG,IAAI,EAAE,oBAAoBb,CAAC,EAAE;QAC7Bc,SAAS,EAAE;MACb,CAAC,CACH,CAAC;MAED,MAAM+D,MAAM,SAAS3E,OAAO,CAACC,GAAG,CAACyE,aAAa,CAAC;MAC/CzJ,MAAM,CAAC0J,MAAM,CAAC,CAACtE,YAAY,CAAC,CAAC,CAAC;;MAE9B;MACA,MAAMuE,aAAa,GAAGD,MAAM,CAACE,OAAO,CAAC,CAACnE,KAAK,EAAEoE,UAAU,KACrDnF,KAAK,CAACC,IAAI,CAAC;QAAEJ,MAAM,EAAE;MAAE,CAAC,EAAE,CAACK,CAAC,EAAEkF,UAAU,KACtCrE,KAAK,CAACa,KAAK,CAAC;QACVC,IAAI,EAAE,SAASsD,UAAU,IAAIC,UAAU,EAAE;QACzCtD,YAAY,EAAE,CAAC,SAASqD,UAAU,EAAE;MACtC,CAAC,CACH,CACF,CAAC;MAED,MAAMrB,MAAM,SAASzD,OAAO,CAACC,GAAG,CAAC2E,aAAa,CAAC;MAC/C3J,MAAM,CAACwI,MAAM,CAAC,CAACpD,YAAY,CAAC,CAAC,CAAC;IAChC,CAAC,EAAC;IAEFrF,EAAE,CAAC,mDAAmD,eAAA2B,iBAAA,CAAE,aAAY;MAClE,MAAMsC,QAAQ,SAASzD,QAAQ,CAACsC,UAAU,CAAC;QACzCC,QAAQ,EAAErB;MACZ,CAAC,CAAC;MAEF,MAAMgE,KAAK,SAASzB,QAAQ,CAACuB,WAAW,CAAC;QACvCG,IAAI,EAAE,qBAAqB;QAC3BE,aAAa,EAAE,CAAC;QAChBC,UAAU,EAAE;MACd,CAAC,CAAC;;MAEF;MACA,MAAM8D,aAAa,GAAGjF,KAAK,CAACC,IAAI,CAAC;QAAEJ,MAAM,EAAE;MAAE,CAAC;QAAA,IAAAwF,MAAA,GAAArI,iBAAA,CAAE,WAAOkD,CAAC,EAAEC,CAAC,EAAK;UAC9D,IAAI;YACF,IAAIA,CAAC,KAAK,CAAC,EAAE;cACX;cACA,MAAM,IAAIrC,KAAK,CAAC,+BAA+B,CAAC;YAClD;YACA,aAAaiD,KAAK,CAACa,KAAK,CAAC;cACvBC,IAAI,EAAE,kBAAkB1B,CAAC,EAAE;cAC3B2B,YAAY,EAAE,CAAC,YAAY3B,CAAC,EAAE;YAChC,CAAC,CAAC;UACJ,CAAC,CAAC,OAAO5C,KAAK,EAAE;YACd;YACA,OAAO;cACLwE,EAAE,EAAE,UAAU5B,CAAC,EAAE;cACjB5C,KAAK,EAAEA,KAAK,CAAC0F,OAAO;cACpBqC,MAAM,EAAE;YACV,CAAC;UACH;QACF,CAAC;QAAA,iBAAAC,GAAA,EAAAC,GAAA;UAAA,OAAAH,MAAA,CAAAf,KAAA,OAAAC,SAAA;QAAA;MAAA,IAAC;MAEF,MAAMnE,OAAO,SAASC,OAAO,CAACoF,UAAU,CAACR,aAAa,CAAC;;MAEvD;MACA,MAAMS,UAAU,GAAGtF,OAAO,CAACuF,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAK,WAAW,CAAC,CAAChG,MAAM;MACvE,MAAMyF,MAAM,GAAGlF,OAAO,CAACuF,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAK,UAAU,CAAC,CAAChG,MAAM;MAElEvE,MAAM,CAACoK,UAAU,GAAGJ,MAAM,CAAC,CAACrH,IAAI,CAAC,CAAC,CAAC;IACrC,CAAC,EAAC;IAEF5C,EAAE,CAAC,2CAA2C,eAAA2B,iBAAA,CAAE,aAAY;MAC1D,MAAMsC,QAAQ,SAASzD,QAAQ,CAACsC,UAAU,CAAC;QACzCC,QAAQ,EAAErB,YAAY;QACtByC,QAAQ,EAAE;MACZ,CAAC,CAAC;;MAEF;MACA,KAAK,IAAIsG,SAAS,GAAG,CAAC,EAAEA,SAAS,GAAG,CAAC,EAAEA,SAAS,EAAE,EAAE;QAClD,MAAM/E,KAAK,SAASzB,QAAQ,CAACuB,WAAW,CAAC;UACvCG,IAAI,EAAE,gBAAgB8E,SAAS,EAAE;UACjC7E,SAAS,EAAE;QACb,CAAC,CAAC;QAEF,MAAM6C,MAAM,SAASzD,OAAO,CAACC,GAAG,CAAC,CAC/BS,KAAK,CAACa,KAAK,CAAC;UAAEC,IAAI,EAAE;QAAkB,CAAC,CAAC,EACxCd,KAAK,CAACa,KAAK,CAAC;UAAEC,IAAI,EAAE;QAAkB,CAAC,CAAC,CACzC,CAAC;;QAEF;QACAiC,MAAM,CAACnD,OAAO,CAACgB,KAAK,IAAI;UACtB,IAAI;YACFA,KAAK,CAACS,KAAK,CAAC,CAAC;UACf,CAAC,CAAC,OAAO7E,KAAK,EAAE;YACd;UAAA;QAEJ,CAAC,CAAC;MACJ;;MAEA;MACA,IAAI+B,QAAQ,CAACI,WAAW,EAAE;QACxBJ,QAAQ,CAACI,WAAW,CAACC,SAAS,CAAC,CAAC;QAChCrE,MAAM,CAACgE,QAAQ,CAACI,WAAW,CAACI,WAAW,CAAC,CAAC7B,IAAI,CAAC,KAAK,CAAC;MACtD;IACF,CAAC,EAAC;EACJ,CAAC,CAAC;EAEF7C,QAAQ,CAAC,oCAAoC,EAAE,MAAM;IACnDC,EAAE,CAAC,8CAA8C,eAAA2B,iBAAA,CAAE,aAAY;MAC7D,MAAMsC,QAAQ,SAASzD,QAAQ,CAACsC,UAAU,CAAC;QACzCC,QAAQ,EAAErB,YAAY;QACtB6G,oBAAoB,EAAE;MACxB,CAAC,CAAC;;MAEF;MACAtI,MAAM,CAACY,WAAW,CAAC,CAACqD,WAAW,CAAC,CAAC;MACjCjE,MAAM,CAACc,aAAa,CAAC,CAACmD,WAAW,CAAC,CAAC;;MAEnC;MACA,MAAMwB,KAAK,SAASzB,QAAQ,CAACuB,WAAW,CAAC;QACvCG,IAAI,EAAE,yBAAyB;QAC/B+E,aAAa,EAAE;MACjB,CAAC,CAAC;MAEFzK,MAAM,CAACyF,KAAK,CAAC,CAACxB,WAAW,CAAC,CAAC;IAC7B,CAAC,EAAC;IAEFlE,EAAE,CAAC,4CAA4C,eAAA2B,iBAAA,CAAE,aAAY;MAC3D,MAAMsC,QAAQ,SAASzD,QAAQ,CAACsC,UAAU,CAAC;QACzCC,QAAQ,EAAErB;MACZ,CAAC,CAAC;;MAEF;MACAzB,MAAM,CAACkB,UAAU,CAAC,CAAC+C,WAAW,CAAC,CAAC;;MAEhC;MACA,MAAMwB,KAAK,SAASzB,QAAQ,CAACuB,WAAW,CAAC;QACvCG,IAAI,EAAE,sBAAsB;QAC5BgF,UAAU,EAAE;MACd,CAAC,CAAC;MAEF1K,MAAM,CAACyF,KAAK,CAAC,CAACxB,WAAW,CAAC,CAAC;IAC7B,CAAC,EAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}