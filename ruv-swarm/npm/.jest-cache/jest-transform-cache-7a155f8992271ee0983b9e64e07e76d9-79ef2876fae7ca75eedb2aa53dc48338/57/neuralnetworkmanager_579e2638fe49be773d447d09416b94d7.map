{"version":3,"names":["cov_2hb24uai6z","actualCoverage","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","value","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","asyncGeneratorStep","n","a","c","u","done","Promise","resolve","then","_asyncToGenerator","_next","_throw","createNeuralModel","MODEL_PRESETS","NEURAL_PRESETS","getPreset","getCategoryPresets","searchPresetsByUseCase","getRecommendedPreset","validatePresetConfig","COMPLETE_NEURAL_PRESETS","CognitivePatternSelector","NeuralAdaptationEngine","CognitivePatternEvolution","MetaLearningFramework","NeuralCoordinationProtocol","DAACognition","NeuralNetworkManager","constructor","wasmLoader","f","s","neuralNetworks","Map","cognitiveEvolution","metaLearning","coordinationProtocol","daaCognition","cognitivePatternSelector","neuralAdaptationEngine","sharedKnowledge","agentInteractions","collaborativeMemory","performanceMetrics","adaptiveOptimization","federatedLearningEnabled","templates","deep_analyzer","layers","activation","output_activation","dropout","nlp_processor","reinforcement_learner","pattern_recognizer","time_series_analyzer","transformer_nlp","modelType","preset","dimensions","heads","cnn_vision","inputShape","outputSize","gru_sequence","hiddenSize","numLayers","bidirectional","autoencoder_compress","bottleneckSize","variational","gnn_social","nodeDimensions","resnet_classifier","inputDimensions","outputDimensions","vae_generator","latentDimensions","betaKL","lstm_sequence","preset_model","usePreset","attention_mechanism","dropoutRate","diffusion_model","timesteps","betaSchedule","neural_ode","solverMethod","tolerance","capsule_network","primaryCaps","digitCaps","spiking_neural","neuronModel","threshold","graph_attention","attentionHeads","hiddenUnits","neural_turing","memorySize","controllerSize","memory_network","memorySlots","hops","neural_cellular","channels","updateRule","hypernetwork","hyperDim","targetLayers","meta_learning","innerLR","outerLR","innerSteps","neural_architecture_search","searchSpace","epochs","mixture_of_experts","numExperts","expertCapacity","neural_radiance_field","positionEncoding","directionEncoding","wavenet_audio","dilationChannels","residualChannels","pointnet_3d","pointFeatures","globalFeatures","neural_baby_ai","vocabSize","instructionLength","world_model","visionModel","memoryModel","flow_based","flowType","couplingLayers","energy_based","energyFunction","samplingSteps","neural_processes","latentDim","contextPoints","set_transformer","inducingPoints","neural_implicit","coordinateDim","hiddenLayers","evolutionary_neural","populationSize","mutationRate","quantum_neural","qubits","optical_neural","wavelengths","modulators","neuromorphic","spikeEncoding","synapticModel","neuralModels","createAgentNeuralNetwork","_x","_this","agentId","config","b","initializeAgent","enableMetaLearning","adaptConfiguration","template","templateConfig","createAdvancedNeuralModel","neuralModule","loadModule","isPlaceholder","console","warn","createSimulatedNetwork","learningRate","optimizer","networkConfig","networkId","exports","create_neural_network","JSON","stringify","agent_id","learning_rate","network","NeuralNetwork","set","error","SimulatedNeuralNetwork","_x2","_x3","_this2","customConfig","Error","taskContext","requiresCreativity","requiresPrecision","requiresAdaptation","complexity","cognitivePatterns","selectPatternsForPreset","presetConfig","assign","model","wrappedModel","AdvancedNeuralNetwork","registerAgent","initializeAdaptation","creationTime","Date","now","adaptationHistory","collaborationScore","log","fineTuneNetwork","_x4","_x5","_this3","trainingData","options","get","batchSize","freezeLayers","enableCognitiveEvolution","evolvePatterns","optimizedOptions","optimizeTraining","result","train","metrics","adaptationResult","timestamp","trainingResult","cognitiveGrowth","assessGrowth","accuracy","performance","insights","recordAdaptation","enableCollaborativeLearning","_x6","_this4","agentIds","strategy","syncInterval","privacyLevel","enableKnowledgeSharing","enableCrossAgentEvolution","networks","map","id","session","active","knowledgeGraph","evolutionTracker","coordinationMatrix","Array","fill","initializeSession","startFederatedLearning","startKnowledgeDistillation","startNeuralCoordination","syncFunction","gradients","getGradients","aggregatedGradients","aggregateGradients","applyGradients","setTimeout","aggregated","cognitiveWeights","calculateAggregationWeights","noise","differentialPrivacy","grad","index","weight","entries","key","aggregatedValue","sensitivity","calculateSensitivity","laplacianNoise","generateLaplacianNoise","Math","random","parameterKey","values","abs","max","min","epsilon","scale","u1","u2","sign","getNetworkMetrics","getMetrics","saveNetworkState","filePath","save","loadNetworkState","_this5","load","createAgentFromPreset","_x7","_x8","_x9","_this6","category","presetName","_COMPLETE_NEURAL_PRES","completePreset","createAgentFromCompletePreset","name","expectedAccuracy","inferenceTime","presetInfo","description","useCase","message","_x0","_x1","_x10","_this7","_COMPLETE_NEURAL_PRES2","join","cognitivePreference","templateMap","transformer","cnn","lstm","gru","autoencoder","vae","gnn","gat","resnet","attention","diffusion","capsnet","snn","ntm","memnn","nca","hypernet","maml","nas","moe","nerf","wavenet","pointnet","normalizing_flow","ebm","neural_process","createAgentForUseCase","_x11","_x12","_this8","recommendedPreset","searchResults","bestMatch","getAvailablePresets","searchPresets","searchTerm","getPresetPerformance","getPresetSummary","summary","presets","count","getAgentPresetInfo","updateAgentWithPreset","_x13","_x14","_x15","_this9","existingNetwork","cognitiveHistory","preserveHistory","metaLearningState","preserveState","delete","newNetwork","restoreHistory","restoreState","batchCreateAgentsFromPresets","agentConfigs","_this0","results","errors","agent","success","_this1","knowledge","extractAgentKnowledge","sharingMatrix","createKnowledgeSharingMatrix","knowledgeSharingMatrix","_this10","weights","extractImportantWeights","patterns","extractPatterns","experiences","extractExperiences","specializations","identifySpecializations","_this11","getWeights","importantWeights","layer","importance","w","calculateImportanceThreshold","idx","sorted","slice","sort","topPercentile","floor","_this12","adaptation","domain","inferDomainFromTraining","confidence","loss","_this13","matrix","agentA","j","agentB","similarity","calculateAgentSimilarity","_this14","knowledgeA","knowledgeB","structuralSimilarity","calculateStructuralSimilarity","performanceSimilarity","calculatePerformanceSimilarity","specializationSimilarity","calculateSpecializationSimilarity","weightsA","flat","weightsB","minLength","dotProduct","normA","normB","sqrt","perfA","perfB","accuracyDiff","lossDiff","accuracySimilarity","lossSimilarity","specsA","Set","specsB","intersection","x","has","union","size","_this15","distillationFunction","_ref","teachers","identifyTeacherAgents","students","includes","teacher","student","performKnowledgeDistillation","_this16","agentPerformances","numTeachers","ap","teacherAgentId","studentAgentId","_this17","teacherKnowledge","distillationTemperature","alpha","distillationResult","applyKnowledgeDistillation","temperature","teacherIdx","indexOf","studentIdx","improvement","_this18","beforeMetrics","transferPatterns","afterMetrics","_this19","coordinationFunction","_ref2","updateCoordinationMatrix","coordinate","applyCoordinationResults","_this20","interactionStrength","calculateInteractionStrength","_this21","interactions","totalStrength","totalWeight","interaction","age","exp","strength","_this22","coordinationResults","getResults","coordination","weightAdjustments","applyWeightAdjustments","patternUpdates","applyPatternUpdates","newPatterns","adjustments","currentWeights","adjustedWeights","adjustment","setWeights","recordAgentInteraction","type","interactionKey","splice","getCompleteNeuralPresets","getPresetRecommendations","requirements","getAdaptationRecommendations","_this23","getAdaptationInsights","exportAdaptationInsights","getAllNeuralModelTypes","modelTypes","_Object$values$","getEnhancedStatistics","stats","totalAgents","getStatistics","collaborations","avgAccuracy","avgCollaborationScore","totalAdaptations","perf","wasmModule","trainingHistory","epochs_trained","total_samples","forward","input","_this24","forward_pass","Float32Array","_this25","epoch","epochLoss","batchCount","samples","batch","train_batch","avgLoss","toFixed","get_gradients","parse","apply_gradients","training_history","network_info","parameters","reduce","acc","_this26","state","serialize_network","_this27","deserialize_network","initializeWeights","_this$config$layers","_this28","_this28$config$layers","output","_this29","layer_0","layer_1","NeuralNetworkTemplates","getTemplate","templateName","isAdvanced","_this30","formattedInput","shape","reconstruction","_this31","_this32","_this33","encode","_this34","encoder","getEncoder","decode","latent","_this35","decoder","getDecoder","generate","numSamples","_this36"],"sources":["neural-network-manager.js"],"sourcesContent":["/**\n * Neural Network Manager\n * Manages per-agent neural networks with WASM integration\n */\n\nimport { createNeuralModel, MODEL_PRESETS } from './neural-models/index.js';\nimport { \n  NEURAL_PRESETS, \n  getPreset, \n  getCategoryPresets,\n  searchPresetsByUseCase,\n  getRecommendedPreset,\n  validatePresetConfig \n} from './neural-models/presets/index.js';\nimport { \n  COMPLETE_NEURAL_PRESETS,\n  CognitivePatternSelector,\n  NeuralAdaptationEngine\n} from './neural-models/neural-presets-complete.js';\nimport { CognitivePatternEvolution } from './cognitive-pattern-evolution.js';\nimport { MetaLearningFramework } from './meta-learning-framework.js';\nimport { NeuralCoordinationProtocol } from './neural-coordination-protocol.js';\nimport { DAACognition } from './daa-cognition.js';\n\nclass NeuralNetworkManager {\n  constructor(wasmLoader) {\n    this.wasmLoader = wasmLoader;\n    this.neuralNetworks = new Map();\n    \n    // Enhanced capabilities\n    this.cognitiveEvolution = new CognitivePatternEvolution();\n    this.metaLearning = new MetaLearningFramework();\n    this.coordinationProtocol = new NeuralCoordinationProtocol();\n    this.daaCognition = new DAACognition();\n    \n    // Complete neural presets integration\n    this.cognitivePatternSelector = new CognitivePatternSelector();\n    this.neuralAdaptationEngine = new NeuralAdaptationEngine();\n    \n    // Cross-agent memory and knowledge sharing\n    this.sharedKnowledge = new Map();\n    this.agentInteractions = new Map();\n    this.collaborativeMemory = new Map();\n    \n    // Performance tracking and optimization\n    this.performanceMetrics = new Map();\n    this.adaptiveOptimization = true;\n    this.federatedLearningEnabled = true;\n    \n    this.templates = {\n      deep_analyzer: {\n        layers: [128, 256, 512, 256, 128],\n        activation: 'relu',\n        output_activation: 'sigmoid',\n        dropout: 0.3,\n      },\n      nlp_processor: {\n        layers: [512, 1024, 512, 256],\n        activation: 'gelu',\n        output_activation: 'softmax',\n        dropout: 0.4,\n      },\n      reinforcement_learner: {\n        layers: [64, 128, 128, 64],\n        activation: 'tanh',\n        output_activation: 'linear',\n        dropout: 0.2,\n      },\n      pattern_recognizer: {\n        layers: [256, 512, 1024, 512, 256],\n        activation: 'relu',\n        output_activation: 'sigmoid',\n        dropout: 0.35,\n      },\n      time_series_analyzer: {\n        layers: [128, 256, 256, 128],\n        activation: 'lstm',\n        output_activation: 'linear',\n        dropout: 0.25,\n      },\n      transformer_nlp: {\n        modelType: 'transformer',\n        preset: 'base',\n        dimensions: 512,\n        heads: 8,\n        layers: 6,\n      },\n      cnn_vision: {\n        modelType: 'cnn',\n        preset: 'cifar10',\n        inputShape: [32, 32, 3],\n        outputSize: 10,\n      },\n      gru_sequence: {\n        modelType: 'gru',\n        preset: 'text_classification',\n        hiddenSize: 256,\n        numLayers: 2,\n        bidirectional: true,\n      },\n      autoencoder_compress: {\n        modelType: 'autoencoder',\n        preset: 'mnist_compress',\n        bottleneckSize: 32,\n        variational: false,\n      },\n      gnn_social: {\n        modelType: 'gnn',\n        preset: 'social_network',\n        nodeDimensions: 128,\n        numLayers: 3,\n      },\n      resnet_classifier: {\n        modelType: 'resnet',\n        preset: 'resnet18',\n        inputDimensions: 784,\n        outputDimensions: 10,\n      },\n      vae_generator: {\n        modelType: 'vae',\n        preset: 'mnist_vae',\n        latentDimensions: 20,\n        betaKL: 1.0,\n      },\n      lstm_sequence: {\n        modelType: 'lstm',\n        preset: 'sentiment_analysis',\n        hiddenSize: 256,\n        numLayers: 2,\n        bidirectional: true,\n      },\n      // Special template for preset-based models\n      preset_model: {\n        modelType: 'preset', // Will be overridden by actual model type\n        usePreset: true\n      },\n      \n      // Advanced neural architectures (27+ models)\n      attention_mechanism: {\n        modelType: 'attention',\n        preset: 'multi_head_attention',\n        heads: 8,\n        dimensions: 512,\n        dropoutRate: 0.1\n      },\n      diffusion_model: {\n        modelType: 'diffusion',\n        preset: 'denoising_diffusion',\n        timesteps: 1000,\n        betaSchedule: 'cosine'\n      },\n      neural_ode: {\n        modelType: 'neural_ode',\n        preset: 'continuous_dynamics',\n        solverMethod: 'dopri5',\n        tolerance: 1e-6\n      },\n      capsule_network: {\n        modelType: 'capsnet',\n        preset: 'dynamic_routing',\n        primaryCaps: 32,\n        digitCaps: 10\n      },\n      spiking_neural: {\n        modelType: 'snn',\n        preset: 'leaky_integrate_fire',\n        neuronModel: 'lif',\n        threshold: 1.0\n      },\n      graph_attention: {\n        modelType: 'gat',\n        preset: 'multi_head_gat',\n        attentionHeads: 8,\n        hiddenUnits: 256\n      },\n      neural_turing: {\n        modelType: 'ntm',\n        preset: 'differentiable_memory',\n        memorySize: [128, 20],\n        controllerSize: 100\n      },\n      memory_network: {\n        modelType: 'memnn',\n        preset: 'end_to_end_memory',\n        memorySlots: 100,\n        hops: 3\n      },\n      neural_cellular: {\n        modelType: 'nca',\n        preset: 'growing_patterns',\n        channels: 16,\n        updateRule: 'sobel'\n      },\n      hypernetwork: {\n        modelType: 'hypernet',\n        preset: 'weight_generation',\n        hyperDim: 512,\n        targetLayers: ['conv1', 'conv2']\n      },\n      meta_learning: {\n        modelType: 'maml',\n        preset: 'few_shot_learning',\n        innerLR: 0.01,\n        outerLR: 0.001,\n        innerSteps: 5\n      },\n      neural_architecture_search: {\n        modelType: 'nas',\n        preset: 'differentiable_nas',\n        searchSpace: 'mobile_search_space',\n        epochs: 50\n      },\n      mixture_of_experts: {\n        modelType: 'moe',\n        preset: 'sparse_expert_routing',\n        numExperts: 8,\n        expertCapacity: 2\n      },\n      neural_radiance_field: {\n        modelType: 'nerf',\n        preset: '3d_scene_reconstruction',\n        positionEncoding: 10,\n        directionEncoding: 4\n      },\n      wavenet_audio: {\n        modelType: 'wavenet',\n        preset: 'speech_synthesis',\n        dilationChannels: 32,\n        residualChannels: 32\n      },\n      pointnet_3d: {\n        modelType: 'pointnet',\n        preset: 'point_cloud_classification',\n        pointFeatures: 3,\n        globalFeatures: 1024\n      },\n      neural_baby_ai: {\n        modelType: 'baby_ai',\n        preset: 'instruction_following',\n        vocabSize: 100,\n        instructionLength: 20\n      },\n      world_model: {\n        modelType: 'world_model',\n        preset: 'environment_prediction',\n        visionModel: 'vae',\n        memoryModel: 'mdn_rnn'\n      },\n      flow_based: {\n        modelType: 'normalizing_flow',\n        preset: 'density_estimation',\n        flowType: 'real_nvp',\n        couplingLayers: 8\n      },\n      energy_based: {\n        modelType: 'ebm',\n        preset: 'contrastive_divergence',\n        energyFunction: 'mlp',\n        samplingSteps: 100\n      },\n      neural_processes: {\n        modelType: 'neural_process',\n        preset: 'function_approximation',\n        latentDim: 128,\n        contextPoints: 10\n      },\n      set_transformer: {\n        modelType: 'set_transformer',\n        preset: 'permutation_invariant',\n        inducingPoints: 32,\n        dimensions: 128\n      },\n      neural_implicit: {\n        modelType: 'neural_implicit',\n        preset: 'coordinate_networks',\n        coordinateDim: 2,\n        hiddenLayers: 8\n      },\n      evolutionary_neural: {\n        modelType: 'evolutionary_nn',\n        preset: 'neuroevolution',\n        populationSize: 50,\n        mutationRate: 0.1\n      },\n      quantum_neural: {\n        modelType: 'qnn',\n        preset: 'variational_quantum',\n        qubits: 4,\n        layers: 6\n      },\n      optical_neural: {\n        modelType: 'onn',\n        preset: 'photonic_computation',\n        wavelengths: 16,\n        modulators: 'mach_zehnder'\n      },\n      neuromorphic: {\n        modelType: 'neuromorphic',\n        preset: 'event_driven',\n        spikeEncoding: 'rate',\n        synapticModel: 'stdp'\n      }\n    };\n    \n    // Store instances of new neural models\n    this.neuralModels = new Map();\n  }\n\n  async createAgentNeuralNetwork(agentId, config = {}) {\n    // Initialize cognitive evolution for this agent\n    await this.cognitiveEvolution.initializeAgent(agentId, config);\n    \n    // Apply meta-learning if enabled\n    if (config.enableMetaLearning) {\n      config = await this.metaLearning.adaptConfiguration(agentId, config);\n    }\n    \n    // Check if this is a new neural model type\n    const template = config.template || 'deep_analyzer';\n    const templateConfig = this.templates[template];\n    \n    if (templateConfig && templateConfig.modelType) {\n      // Create new neural model with enhanced capabilities\n      return this.createAdvancedNeuralModel(agentId, template, config);\n    }\n    \n    // Load neural module if not already loaded\n    const neuralModule = await this.wasmLoader.loadModule('neural');\n\n    if (!neuralModule || neuralModule.isPlaceholder) {\n      console.warn('Neural network module not available, using simulation');\n      return this.createSimulatedNetwork(agentId, config);\n    }\n\n    const {\n      layers = null,\n      activation = 'relu',\n      learningRate = 0.001,\n      optimizer = 'adam',\n    } = config;\n\n    // Use template or custom layers\n    const networkConfig = layers ? { layers, activation } : this.templates[template];\n\n    try {\n      // Create network using WASM module\n      const networkId = neuralModule.exports.create_neural_network(\n        JSON.stringify({\n          agent_id: agentId,\n          layers: networkConfig.layers,\n          activation: networkConfig.activation,\n          learning_rate: learningRate,\n          optimizer,\n        }),\n      );\n\n      const network = new NeuralNetwork(networkId, agentId, networkConfig, neuralModule);\n      this.neuralNetworks.set(agentId, network);\n\n      return network;\n    } catch (error) {\n      console.error('Failed to create neural network:', error);\n      return this.createSimulatedNetwork(agentId, config);\n    }\n  }\n\n  createSimulatedNetwork(agentId, config) {\n    const network = new SimulatedNeuralNetwork(agentId, config);\n    this.neuralNetworks.set(agentId, network);\n    return network;\n  }\n\n  async createAdvancedNeuralModel(agentId, template, customConfig = {}) {\n    const templateConfig = this.templates[template];\n    \n    if (!templateConfig || !templateConfig.modelType) {\n      throw new Error(`Invalid template: ${template}`);\n    }\n    \n    // Merge template config with custom config\n    const config = {\n      ...templateConfig,\n      ...customConfig\n    };\n    \n    // Select cognitive patterns based on model type and task\n    const taskContext = {\n      requiresCreativity: customConfig.requiresCreativity || false,\n      requiresPrecision: customConfig.requiresPrecision || false,\n      requiresAdaptation: customConfig.requiresAdaptation || false,\n      complexity: customConfig.complexity || 'medium'\n    };\n    \n    const cognitivePatterns = this.cognitivePatternSelector.selectPatternsForPreset(\n      config.modelType,\n      template,\n      taskContext\n    );\n    \n    config.cognitivePatterns = cognitivePatterns;\n    \n    // Use preset if specified\n    if (config.preset && MODEL_PRESETS[config.modelType]) {\n      const presetConfig = MODEL_PRESETS[config.modelType][config.preset];\n      Object.assign(config, presetConfig);\n    }\n    \n    try {\n      // Create the neural model\n      const model = await createNeuralModel(config.modelType, config);\n      \n      // Wrap in a compatible interface\n      const wrappedModel = new AdvancedNeuralNetwork(agentId, model, config);\n      \n      // Enhanced registration with cognitive capabilities\n      this.neuralNetworks.set(agentId, wrappedModel);\n      this.neuralModels.set(agentId, model);\n      \n      // Register with coordination protocol\n      await this.coordinationProtocol.registerAgent(agentId, wrappedModel);\n      \n      // Initialize neural adaptation engine\n      await this.neuralAdaptationEngine.initializeAdaptation(agentId, config.modelType, template);\n      \n      // Initialize performance tracking\n      this.performanceMetrics.set(agentId, {\n        creationTime: Date.now(),\n        modelType: config.modelType,\n        cognitivePatterns: cognitivePatterns || [],\n        adaptationHistory: [],\n        collaborationScore: 0\n      });\n      \n      console.log(`Created ${config.modelType} neural network for agent ${agentId} with enhanced cognitive capabilities`);\n      \n      return wrappedModel;\n    } catch (error) {\n      console.error(`Failed to create advanced neural model: ${error}`);\n      return this.createSimulatedNetwork(agentId, config);\n    }\n  }\n\n  async fineTuneNetwork(agentId, trainingData, options = {}) {\n    const network = this.neuralNetworks.get(agentId);\n    if (!network) {\n      throw new Error(`No neural network found for agent ${agentId}`);\n    }\n\n    const {\n      epochs = 10,\n      batchSize = 32,\n      learningRate = 0.001,\n      freezeLayers = [],\n      enableCognitiveEvolution = true,\n      enableMetaLearning = true,\n    } = options;\n\n    // Apply cognitive pattern evolution during training\n    if (enableCognitiveEvolution) {\n      await this.cognitiveEvolution.evolvePatterns(agentId, trainingData);\n    }\n    \n    // Apply meta-learning optimization\n    if (enableMetaLearning) {\n      const optimizedOptions = await this.metaLearning.optimizeTraining(agentId, options);\n      Object.assign(options, optimizedOptions);\n    }\n    \n    // Enhanced training with adaptive optimization\n    const result = await network.train(trainingData, { epochs, batchSize, learningRate, freezeLayers });\n    \n    // Update performance metrics\n    const metrics = this.performanceMetrics.get(agentId);\n    if (metrics) {\n      const adaptationResult = {\n        timestamp: Date.now(),\n        trainingResult: result,\n        cognitiveGrowth: await this.cognitiveEvolution.assessGrowth(agentId),\n        accuracy: result.accuracy || 0,\n        cognitivePatterns: metrics.cognitivePatterns,\n        performance: result,\n        insights: []\n      };\n      \n      metrics.adaptationHistory.push(adaptationResult);\n      \n      // Record adaptation in neural adaptation engine\n      await this.neuralAdaptationEngine.recordAdaptation(agentId, adaptationResult);\n    }\n    \n    return result;\n  }\n\n  async enableCollaborativeLearning(agentIds, options = {}) {\n    const {\n      strategy = 'federated',\n      syncInterval = 30000,\n      privacyLevel = 'high',\n      enableKnowledgeSharing = true,\n      enableCrossAgentEvolution = true,\n    } = options;\n\n    const networks = agentIds.map(id => this.neuralNetworks.get(id)).filter(n => n);\n\n    if (networks.length < 2) {\n      throw new Error('At least 2 neural networks required for collaborative learning');\n    }\n\n    // Create enhanced collaborative learning session\n    const session = {\n      id: `collab-${Date.now()}`,\n      networks,\n      agentIds,\n      strategy,\n      syncInterval,\n      privacyLevel,\n      active: true,\n      knowledgeGraph: new Map(),\n      evolutionTracker: new Map(),\n      coordinationMatrix: new Array(agentIds.length).fill(0).map(() => new Array(agentIds.length).fill(0))\n    };\n\n    // Initialize neural coordination protocol\n    await this.coordinationProtocol.initializeSession(session);\n    \n    // Enable cross-agent knowledge sharing\n    if (enableKnowledgeSharing) {\n      await this.enableKnowledgeSharing(agentIds, session);\n    }\n    \n    // Enable cross-agent cognitive evolution\n    if (enableCrossAgentEvolution) {\n      await this.cognitiveEvolution.enableCrossAgentEvolution(agentIds, session);\n    }\n\n    // Start enhanced synchronization\n    if (strategy === 'federated') {\n      this.startFederatedLearning(session);\n    } else if (strategy === 'knowledge_distillation') {\n      this.startKnowledgeDistillation(session);\n    } else if (strategy === 'neural_coordination') {\n      this.startNeuralCoordination(session);\n    }\n\n    return session;\n  }\n\n  startFederatedLearning(session) {\n    const syncFunction = () => {\n      if (!session.active) {\n        return;\n      }\n\n      // Aggregate gradients from all networks\n      const gradients = session.networks.map(n => n.getGradients());\n\n      // Apply privacy-preserving aggregation\n      const aggregatedGradients = this.aggregateGradients(gradients, session.privacyLevel);\n\n      // Update all networks with aggregated gradients\n      session.networks.forEach(n => n.applyGradients(aggregatedGradients));\n\n      // Schedule next sync\n      setTimeout(syncFunction, session.syncInterval);\n    };\n\n    // Start synchronization\n    setTimeout(syncFunction, session.syncInterval);\n  }\n\n  aggregateGradients(gradients, privacyLevel) {\n    // Enhanced aggregation with cognitive pattern preservation\n    const aggregated = {};\n    const cognitiveWeights = this.cognitiveEvolution.calculateAggregationWeights(gradients);\n\n    // Privacy levels with advanced secure aggregation\n    let noise = 0;\n    let differentialPrivacy = false;\n    \n    switch (privacyLevel) {\n      case 'high':\n        noise = 0.01;\n        differentialPrivacy = true;\n        break;\n      case 'medium':\n        noise = 0.005;\n        break;\n      case 'low':\n        noise = 0.001;\n        break;\n    }\n\n    // Cognitive-weighted gradient aggregation\n    gradients.forEach((grad, index) => {\n      const weight = cognitiveWeights[index] || (1 / gradients.length);\n      \n      Object.entries(grad).forEach(([key, value]) => {\n        if (!aggregated[key]) {\n          aggregated[key] = 0;\n        }\n        \n        let aggregatedValue = value * weight;\n        \n        // Apply differential privacy if enabled\n        if (differentialPrivacy) {\n          const sensitivity = this.calculateSensitivity(key, gradients);\n          const laplacianNoise = this.generateLaplacianNoise(sensitivity, noise);\n          aggregatedValue += laplacianNoise;\n        } else {\n          aggregatedValue += (Math.random() - 0.5) * noise;\n        }\n        \n        aggregated[key] += aggregatedValue;\n      });\n    });\n\n    return aggregated;\n  }\n  \n  calculateSensitivity(parameterKey, gradients) {\n    // Calculate L1 sensitivity for differential privacy\n    const values = gradients.map(grad => Math.abs(grad[parameterKey] || 0));\n    return Math.max(...values) - Math.min(...values);\n  }\n  \n  generateLaplacianNoise(sensitivity, epsilon) {\n    // Generate Laplacian noise for differential privacy\n    const scale = sensitivity / epsilon;\n    const u1 = Math.random();\n    const u2 = Math.random();\n    return scale * Math.sign(u1 - 0.5) * Math.log(1 - 2 * Math.abs(u1 - 0.5));\n  }\n\n  getNetworkMetrics(agentId) {\n    const network = this.neuralNetworks.get(agentId);\n    if (!network) {\n      return null;\n    }\n\n    return network.getMetrics();\n  }\n\n  saveNetworkState(agentId, filePath) {\n    const network = this.neuralNetworks.get(agentId);\n    if (!network) {\n      throw new Error(`No neural network found for agent ${agentId}`);\n    }\n\n    return network.save(filePath);\n  }\n\n  async loadNetworkState(agentId, filePath) {\n    const network = this.neuralNetworks.get(agentId);\n    if (!network) {\n      throw new Error(`No neural network found for agent ${agentId}`);\n    }\n\n    return network.load(filePath);\n  }\n\n  // ===============================\n  // PRESET INTEGRATION METHODS\n  // ===============================\n\n  /**\n   * Create a neural network from a production preset\n   * @param {string} agentId - Agent identifier\n   * @param {string} category - Preset category (nlp, vision, timeseries, graph)\n   * @param {string} presetName - Name of the preset\n   * @param {object} customConfig - Optional custom configuration overrides\n   */\n  async createAgentFromPreset(agentId, category, presetName, customConfig = {}) {\n    // First check complete neural presets\n    const completePreset = COMPLETE_NEURAL_PRESETS[category]?.[presetName];\n    if (completePreset) {\n      return this.createAgentFromCompletePreset(agentId, category, presetName, customConfig);\n    }\n    try {\n      const preset = getPreset(category, presetName);\n      validatePresetConfig(preset);\n\n      console.log(`Creating ${agentId} from preset: ${preset.name}`);\n      console.log(`Expected performance: ${preset.performance.expectedAccuracy} accuracy in ${preset.performance.inferenceTime}`);\n\n      // Merge preset config with custom overrides\n      const config = {\n        ...preset.config,\n        ...customConfig,\n        modelType: preset.model,\n        presetInfo: {\n          category,\n          presetName,\n          name: preset.name,\n          description: preset.description,\n          useCase: preset.useCase,\n          performance: preset.performance\n        }\n      };\n\n      return this.createAdvancedNeuralModel(agentId, 'preset_model', config);\n    } catch (error) {\n      console.error(`Failed to create agent from preset: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Create a neural network from complete preset (27+ models)\n   * @param {string} agentId - Agent identifier\n   * @param {string} modelType - Model type (transformer, cnn, lstm, etc.)\n   * @param {string} presetName - Name of the preset\n   * @param {object} customConfig - Optional custom configuration overrides\n   */\n  async createAgentFromCompletePreset(agentId, modelType, presetName, customConfig = {}) {\n    const preset = COMPLETE_NEURAL_PRESETS[modelType]?.[presetName];\n    if (!preset) {\n      throw new Error(`Complete preset not found: ${modelType}/${presetName}`);\n    }\n\n    console.log(`Creating ${agentId} from complete preset: ${preset.name}`);\n    console.log(`Expected performance: ${preset.performance.expectedAccuracy} accuracy in ${preset.performance.inferenceTime}`);\n    console.log(`Cognitive patterns: ${preset.cognitivePatterns.join(', ')}`);\n\n    // Get optimized cognitive patterns\n    const taskContext = {\n      requiresCreativity: customConfig.requiresCreativity || false,\n      requiresPrecision: customConfig.requiresPrecision || false,\n      requiresAdaptation: customConfig.requiresAdaptation || false,\n      complexity: customConfig.complexity || 'medium',\n      cognitivePreference: customConfig.cognitivePreference\n    };\n    \n    const cognitivePatterns = this.cognitivePatternSelector.selectPatternsForPreset(\n      preset.model,\n      presetName,\n      taskContext\n    );\n\n    // Merge preset config with custom overrides\n    const config = {\n      ...preset.config,\n      ...customConfig,\n      modelType: preset.model,\n      cognitivePatterns,\n      presetInfo: {\n        modelType,\n        presetName,\n        name: preset.name,\n        description: preset.description,\n        useCase: preset.useCase,\n        performance: preset.performance,\n        cognitivePatterns: preset.cognitivePatterns\n      }\n    };\n\n    // Select appropriate template based on model type\n    const templateMap = {\n      transformer: 'transformer_nlp',\n      cnn: 'cnn_vision',\n      lstm: 'lstm_sequence',\n      gru: 'gru_sequence',\n      autoencoder: 'autoencoder_compress',\n      vae: 'vae_generator',\n      gnn: 'gnn_social',\n      gat: 'graph_attention',\n      resnet: 'resnet_classifier',\n      attention: 'attention_mechanism',\n      diffusion: 'diffusion_model',\n      neural_ode: 'neural_ode',\n      capsnet: 'capsule_network',\n      snn: 'spiking_neural',\n      ntm: 'neural_turing',\n      memnn: 'memory_network',\n      nca: 'neural_cellular',\n      hypernet: 'hypernetwork',\n      maml: 'meta_learning',\n      nas: 'neural_architecture_search',\n      moe: 'mixture_of_experts',\n      nerf: 'neural_radiance_field',\n      wavenet: 'wavenet_audio',\n      pointnet: 'pointnet_3d',\n      world_model: 'world_model',\n      normalizing_flow: 'flow_based',\n      ebm: 'energy_based',\n      neural_process: 'neural_processes',\n      set_transformer: 'set_transformer'\n    };\n\n    const template = templateMap[preset.model] || 'preset_model';\n    \n    return this.createAdvancedNeuralModel(agentId, template, config);\n  }\n\n  /**\n   * Create a neural network from a recommended preset based on use case\n   * @param {string} agentId - Agent identifier\n   * @param {string} useCase - Use case description\n   * @param {object} customConfig - Optional custom configuration overrides\n   */\n  async createAgentForUseCase(agentId, useCase, customConfig = {}) {\n    const recommendedPreset = getRecommendedPreset(useCase);\n    \n    if (!recommendedPreset) {\n      // Try searching by use case\n      const searchResults = searchPresetsByUseCase(useCase);\n      if (searchResults.length === 0) {\n        throw new Error(`No preset found for use case: ${useCase}`);\n      }\n      \n      const bestMatch = searchResults[0];\n      console.log(`Found preset for \"${useCase}\": ${bestMatch.preset.name}`);\n      \n      return this.createAgentFromPreset(\n        agentId, \n        bestMatch.category, \n        bestMatch.presetName, \n        customConfig\n      );\n    }\n\n    return this.createAgentFromPreset(\n      agentId,\n      recommendedPreset.category,\n      recommendedPreset.presetName,\n      customConfig\n    );\n  }\n\n  /**\n   * Get all available presets for a category\n   * @param {string} category - Preset category\n   */\n  getAvailablePresets(category = null) {\n    if (category) {\n      return getCategoryPresets(category);\n    }\n    return NEURAL_PRESETS;\n  }\n\n  /**\n   * Search presets by use case or description\n   * @param {string} searchTerm - Search term\n   */\n  searchPresets(searchTerm) {\n    return searchPresetsByUseCase(searchTerm);\n  }\n\n  /**\n   * Get performance information for a preset\n   * @param {string} category - Preset category\n   * @param {string} presetName - Preset name\n   */\n  getPresetPerformance(category, presetName) {\n    const preset = getPreset(category, presetName);\n    return preset.performance;\n  }\n\n  /**\n   * List all available preset categories and their counts\n   */\n  getPresetSummary() {\n    const summary = {};\n    Object.entries(NEURAL_PRESETS).forEach(([category, presets]) => {\n      summary[category] = {\n        count: Object.keys(presets).length,\n        presets: Object.keys(presets)\n      };\n    });\n    return summary;\n  }\n\n  /**\n   * Get detailed information about agent's preset (if created from preset)\n   * @param {string} agentId - Agent identifier\n   */\n  getAgentPresetInfo(agentId) {\n    const network = this.neuralNetworks.get(agentId);\n    if (!network || !network.config || !network.config.presetInfo) {\n      return null;\n    }\n    return network.config.presetInfo;\n  }\n\n  /**\n   * Update existing agent with preset configuration\n   * @param {string} agentId - Agent identifier\n   * @param {string} category - Preset category\n   * @param {string} presetName - Preset name\n   * @param {object} customConfig - Optional custom configuration overrides\n   */\n  async updateAgentWithPreset(agentId, category, presetName, customConfig = {}) {\n    const existingNetwork = this.neuralNetworks.get(agentId);\n    if (existingNetwork) {\n      // Save current state if needed\n      console.log(`Updating agent ${agentId} with new preset: ${category}/${presetName}`);\n    }\n\n    // Preserve cognitive evolution history\n    const cognitiveHistory = await this.cognitiveEvolution.preserveHistory(agentId);\n    const metaLearningState = await this.metaLearning.preserveState(agentId);\n    \n    // Remove existing network\n    this.neuralNetworks.delete(agentId);\n    this.neuralModels.delete(agentId);\n\n    // Create new network with preset and restored cognitive capabilities\n    const newNetwork = await this.createAgentFromPreset(agentId, category, presetName, customConfig);\n    \n    // Restore cognitive evolution and meta-learning state\n    await this.cognitiveEvolution.restoreHistory(agentId, cognitiveHistory);\n    await this.metaLearning.restoreState(agentId, metaLearningState);\n    \n    return newNetwork;\n  }\n\n  /**\n   * Batch create agents from presets\n   * @param {Array} agentConfigs - Array of {agentId, category, presetName, customConfig}\n   */\n  async batchCreateAgentsFromPresets(agentConfigs) {\n    const results = [];\n    const errors = [];\n\n    for (const config of agentConfigs) {\n      try {\n        const agent = await this.createAgentFromPreset(\n          config.agentId,\n          config.category,\n          config.presetName,\n          config.customConfig || {}\n        );\n        results.push({ agentId: config.agentId, success: true, agent });\n      } catch (error) {\n        errors.push({ agentId: config.agentId, error: error.message });\n      }\n    }\n\n    return { results, errors };\n  }\n\n  // ===============================\n  // ENHANCED NEURAL CAPABILITIES\n  // ===============================\n\n  /**\n   * Enable knowledge sharing between agents\n   * @param {Array} agentIds - List of agent IDs\n   * @param {Object} session - Collaborative session object\n   */\n  async enableKnowledgeSharing(agentIds, session) {\n    const knowledgeGraph = session.knowledgeGraph;\n    \n    for (const agentId of agentIds) {\n      const agent = this.neuralNetworks.get(agentId);\n      if (!agent) continue;\n      \n      // Extract knowledge from agent\n      const knowledge = await this.extractAgentKnowledge(agentId);\n      knowledgeGraph.set(agentId, knowledge);\n      \n      // Store in shared knowledge base\n      this.sharedKnowledge.set(agentId, knowledge);\n    }\n    \n    // Create knowledge sharing matrix\n    const sharingMatrix = await this.createKnowledgeSharingMatrix(agentIds);\n    session.knowledgeSharingMatrix = sharingMatrix;\n    \n    console.log(`Knowledge sharing enabled for ${agentIds.length} agents`);\n  }\n\n  /**\n   * Extract knowledge from a neural network agent\n   * @param {string} agentId - Agent identifier\n   */\n  async extractAgentKnowledge(agentId) {\n    const network = this.neuralNetworks.get(agentId);\n    if (!network) return null;\n    \n    const knowledge = {\n      agentId,\n      timestamp: Date.now(),\n      modelType: network.modelType,\n      weights: await this.extractImportantWeights(network),\n      patterns: await this.cognitiveEvolution.extractPatterns(agentId),\n      experiences: await this.metaLearning.extractExperiences(agentId),\n      performance: network.getMetrics(),\n      specializations: await this.identifySpecializations(agentId)\n    };\n    \n    return knowledge;\n  }\n\n  /**\n   * Extract important weights from a neural network\n   * @param {Object} network - Neural network instance\n   */\n  async extractImportantWeights(network) {\n    // Use magnitude-based importance scoring\n    const weights = network.getWeights();\n    const importantWeights = {};\n    \n    Object.entries(weights).forEach(([layer, weight]) => {\n      if (weight && weight.length > 0) {\n        // Calculate importance scores (magnitude-based)\n        const importance = weight.map(w => Math.abs(w));\n        const threshold = this.calculateImportanceThreshold(importance);\n        \n        importantWeights[layer] = weight.filter((w, idx) => importance[idx] > threshold);\n      }\n    });\n    \n    return importantWeights;\n  }\n\n  /**\n   * Calculate importance threshold for weight selection\n   * @param {Array} importance - Array of importance scores\n   */\n  calculateImportanceThreshold(importance) {\n    const sorted = importance.slice().sort((a, b) => b - a);\n    // Take top 20% of weights\n    const topPercentile = Math.floor(sorted.length * 0.2);\n    return sorted[topPercentile] || 0;\n  }\n\n  /**\n   * Identify agent specializations based on performance patterns\n   * @param {string} agentId - Agent identifier\n   */\n  async identifySpecializations(agentId) {\n    const metrics = this.performanceMetrics.get(agentId);\n    if (!metrics) return [];\n    \n    const specializations = [];\n    \n    // Analyze adaptation history for specialization patterns\n    for (const adaptation of metrics.adaptationHistory) {\n      if (adaptation.trainingResult && adaptation.trainingResult.accuracy > 0.8) {\n        specializations.push({\n          domain: this.inferDomainFromTraining(adaptation),\n          confidence: adaptation.trainingResult.accuracy,\n          timestamp: adaptation.timestamp\n        });\n      }\n    }\n    \n    return specializations;\n  }\n\n  /**\n   * Infer domain from training patterns\n   * @param {Object} adaptation - Adaptation record\n   */\n  inferDomainFromTraining(adaptation) {\n    // Simple heuristic - in practice, would use more sophisticated analysis\n    const accuracy = adaptation.trainingResult.accuracy;\n    const loss = adaptation.trainingResult.loss;\n    \n    if (accuracy > 0.9 && loss < 0.1) return 'classification';\n    if (accuracy > 0.85 && loss < 0.2) return 'regression';\n    if (loss < 0.3) return 'generation';\n    return 'general';\n  }\n\n  /**\n   * Create knowledge sharing matrix between agents\n   * @param {Array} agentIds - List of agent IDs\n   */\n  async createKnowledgeSharingMatrix(agentIds) {\n    const matrix = {};\n    \n    for (let i = 0; i < agentIds.length; i++) {\n      const agentA = agentIds[i];\n      matrix[agentA] = {};\n      \n      for (let j = 0; j < agentIds.length; j++) {\n        const agentB = agentIds[j];\n        \n        if (i === j) {\n          matrix[agentA][agentB] = 1.0; // Self-similarity\n          continue;\n        }\n        \n        const similarity = await this.calculateAgentSimilarity(agentA, agentB);\n        matrix[agentA][agentB] = similarity;\n      }\n    }\n    \n    return matrix;\n  }\n\n  /**\n   * Calculate similarity between two agents\n   * @param {string} agentA - First agent ID\n   * @param {string} agentB - Second agent ID\n   */\n  async calculateAgentSimilarity(agentA, agentB) {\n    const knowledgeA = this.sharedKnowledge.get(agentA);\n    const knowledgeB = this.sharedKnowledge.get(agentB);\n    \n    if (!knowledgeA || !knowledgeB) return 0;\n    \n    // Calculate multiple similarity metrics\n    const structuralSimilarity = this.calculateStructuralSimilarity(knowledgeA, knowledgeB);\n    const performanceSimilarity = this.calculatePerformanceSimilarity(knowledgeA, knowledgeB);\n    const specializationSimilarity = this.calculateSpecializationSimilarity(knowledgeA, knowledgeB);\n    \n    // Weighted combination\n    return (structuralSimilarity * 0.4 + performanceSimilarity * 0.3 + specializationSimilarity * 0.3);\n  }\n\n  /**\n   * Calculate structural similarity between agents\n   * @param {Object} knowledgeA - Knowledge from agent A\n   * @param {Object} knowledgeB - Knowledge from agent B\n   */\n  calculateStructuralSimilarity(knowledgeA, knowledgeB) {\n    if (knowledgeA.modelType !== knowledgeB.modelType) return 0.1;\n    \n    // Compare weight patterns (simplified cosine similarity)\n    const weightsA = Object.values(knowledgeA.weights).flat();\n    const weightsB = Object.values(knowledgeB.weights).flat();\n    \n    if (weightsA.length === 0 || weightsB.length === 0) return 0.5;\n    \n    const minLength = Math.min(weightsA.length, weightsB.length);\n    let dotProduct = 0;\n    let normA = 0;\n    let normB = 0;\n    \n    for (let i = 0; i < minLength; i++) {\n      dotProduct += weightsA[i] * weightsB[i];\n      normA += weightsA[i] * weightsA[i];\n      normB += weightsB[i] * weightsB[i];\n    }\n    \n    const similarity = dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));\n    return Math.max(0, Math.min(1, similarity));\n  }\n\n  /**\n   * Calculate performance similarity between agents\n   * @param {Object} knowledgeA - Knowledge from agent A\n   * @param {Object} knowledgeB - Knowledge from agent B\n   */\n  calculatePerformanceSimilarity(knowledgeA, knowledgeB) {\n    const perfA = knowledgeA.performance;\n    const perfB = knowledgeB.performance;\n    \n    const accuracyDiff = Math.abs(perfA.accuracy - perfB.accuracy);\n    const lossDiff = Math.abs(perfA.loss - perfB.loss);\n    \n    // Inverse relationship - smaller differences = higher similarity\n    const accuracySimilarity = 1 - Math.min(1, accuracyDiff);\n    const lossSimilarity = 1 - Math.min(1, lossDiff);\n    \n    return (accuracySimilarity + lossSimilarity) / 2;\n  }\n\n  /**\n   * Calculate specialization similarity between agents\n   * @param {Object} knowledgeA - Knowledge from agent A\n   * @param {Object} knowledgeB - Knowledge from agent B\n   */\n  calculateSpecializationSimilarity(knowledgeA, knowledgeB) {\n    const specsA = new Set(knowledgeA.specializations.map(s => s.domain));\n    const specsB = new Set(knowledgeB.specializations.map(s => s.domain));\n    \n    const intersection = new Set([...specsA].filter(x => specsB.has(x)));\n    const union = new Set([...specsA, ...specsB]);\n    \n    return union.size > 0 ? intersection.size / union.size : 0;\n  }\n\n  /**\n   * Start knowledge distillation learning\n   * @param {Object} session - Collaborative session\n   */\n  startKnowledgeDistillation(session) {\n    const distillationFunction = async () => {\n      if (!session.active) return;\n      \n      try {\n        // Identify teacher and student agents\n        const teachers = await this.identifyTeacherAgents(session.agentIds);\n        const students = session.agentIds.filter(id => !teachers.includes(id));\n        \n        // Perform knowledge distillation\n        for (const teacher of teachers) {\n          for (const student of students) {\n            await this.performKnowledgeDistillation(teacher, student, session);\n          }\n        }\n        \n        console.log(`Knowledge distillation completed for session ${session.id}`);\n        \n      } catch (error) {\n        console.error('Knowledge distillation failed:', error);\n      }\n      \n      // Schedule next distillation\n      setTimeout(distillationFunction, session.syncInterval);\n    };\n    \n    // Start distillation process\n    setTimeout(distillationFunction, 1000);\n  }\n\n  /**\n   * Identify teacher agents based on performance\n   * @param {Array} agentIds - List of agent IDs\n   */\n  async identifyTeacherAgents(agentIds) {\n    const agentPerformances = [];\n    \n    for (const agentId of agentIds) {\n      const network = this.neuralNetworks.get(agentId);\n      if (network) {\n        const metrics = network.getMetrics();\n        agentPerformances.push({\n          agentId,\n          performance: metrics.accuracy || 0\n        });\n      }\n    }\n    \n    // Sort by performance and take top 30%\n    agentPerformances.sort((a, b) => b.performance - a.performance);\n    const numTeachers = Math.max(1, Math.floor(agentPerformances.length * 0.3));\n    \n    return agentPerformances.slice(0, numTeachers).map(ap => ap.agentId);\n  }\n\n  /**\n   * Perform knowledge distillation between teacher and student\n   * @param {string} teacherAgentId - Teacher agent ID\n   * @param {string} studentAgentId - Student agent ID\n   * @param {Object} session - Collaborative session\n   */\n  async performKnowledgeDistillation(teacherAgentId, studentAgentId, session) {\n    const teacher = this.neuralNetworks.get(teacherAgentId);\n    const student = this.neuralNetworks.get(studentAgentId);\n    \n    if (!teacher || !student) return;\n    \n    try {\n      // Extract soft targets from teacher\n      const teacherKnowledge = this.sharedKnowledge.get(teacherAgentId);\n      if (!teacherKnowledge) return;\n      \n      // Create distillation loss function\n      const distillationTemperature = 3.0;\n      const alpha = 0.7; // Weight for distillation loss vs hard target loss\n      \n      // Apply knowledge distillation (simplified)\n      const distillationResult = await this.applyKnowledgeDistillation(\n        student,\n        teacherKnowledge,\n        { temperature: distillationTemperature, alpha }\n      );\n      \n      // Update collaboration matrix\n      const teacherIdx = session.agentIds.indexOf(teacherAgentId);\n      const studentIdx = session.agentIds.indexOf(studentAgentId);\n      \n      if (teacherIdx >= 0 && studentIdx >= 0) {\n        session.coordinationMatrix[studentIdx][teacherIdx] += distillationResult.improvement;\n      }\n      \n    } catch (error) {\n      console.error(`Knowledge distillation failed between ${teacherAgentId} and ${studentAgentId}:`, error);\n    }\n  }\n\n  /**\n   * Apply knowledge distillation to student network\n   * @param {Object} student - Student network\n   * @param {Object} teacherKnowledge - Teacher's knowledge\n   * @param {Object} options - Distillation options\n   */\n  async applyKnowledgeDistillation(student, teacherKnowledge, options) {\n    const { temperature, alpha } = options;\n    \n    // Simulate knowledge transfer (in practice, would involve actual training)\n    const beforeMetrics = student.getMetrics();\n    \n    // Apply teacher's patterns to student (simplified)\n    const patterns = teacherKnowledge.patterns;\n    if (patterns && patterns.length > 0) {\n      await this.cognitiveEvolution.transferPatterns(student.agentId, patterns);\n    }\n    \n    const afterMetrics = student.getMetrics();\n    const improvement = Math.max(0, afterMetrics.accuracy - beforeMetrics.accuracy);\n    \n    return { improvement, beforeMetrics, afterMetrics };\n  }\n\n  /**\n   * Start neural coordination protocol\n   * @param {Object} session - Collaborative session\n   */\n  startNeuralCoordination(session) {\n    const coordinationFunction = async () => {\n      if (!session.active) return;\n      \n      try {\n        // Update coordination matrix\n        await this.updateCoordinationMatrix(session);\n        \n        // Perform neural coordination\n        await this.coordinationProtocol.coordinate(session);\n        \n        // Apply coordination results\n        await this.applyCoordinationResults(session);\n        \n        console.log(`Neural coordination completed for session ${session.id}`);\n        \n      } catch (error) {\n        console.error('Neural coordination failed:', error);\n      }\n      \n      // Schedule next coordination\n      setTimeout(coordinationFunction, session.syncInterval);\n    };\n    \n    // Start coordination process\n    setTimeout(coordinationFunction, 1000);\n  }\n\n  /**\n   * Update coordination matrix based on agent interactions\n   * @param {Object} session - Collaborative session\n   */\n  async updateCoordinationMatrix(session) {\n    for (let i = 0; i < session.agentIds.length; i++) {\n      for (let j = 0; j < session.agentIds.length; j++) {\n        if (i === j) continue;\n        \n        const agentA = session.agentIds[i];\n        const agentB = session.agentIds[j];\n        \n        // Calculate interaction strength\n        const interactionStrength = await this.calculateInteractionStrength(agentA, agentB);\n        session.coordinationMatrix[i][j] = interactionStrength;\n      }\n    }\n  }\n\n  /**\n   * Calculate interaction strength between two agents\n   * @param {string} agentA - First agent ID\n   * @param {string} agentB - Second agent ID\n   */\n  async calculateInteractionStrength(agentA, agentB) {\n    const interactions = this.agentInteractions.get(`${agentA}-${agentB}`) || [];\n    \n    if (interactions.length === 0) return 0.1; // Minimal baseline interaction\n    \n    // Calculate recency-weighted interaction strength\n    const now = Date.now();\n    let totalStrength = 0;\n    let totalWeight = 0;\n    \n    for (const interaction of interactions) {\n      const age = now - interaction.timestamp;\n      const weight = Math.exp(-age / (24 * 60 * 60 * 1000)); // Exponential decay over 24 hours\n      \n      totalStrength += interaction.strength * weight;\n      totalWeight += weight;\n    }\n    \n    return totalWeight > 0 ? totalStrength / totalWeight : 0.1;\n  }\n\n  /**\n   * Apply coordination results to agents\n   * @param {Object} session - Collaborative session\n   */\n  async applyCoordinationResults(session) {\n    const coordinationResults = await this.coordinationProtocol.getResults(session.id);\n    if (!coordinationResults) return;\n    \n    for (const [agentId, coordination] of coordinationResults.entries()) {\n      const agent = this.neuralNetworks.get(agentId);\n      if (!agent) continue;\n      \n      // Apply coordination adjustments\n      if (coordination.weightAdjustments) {\n        await this.applyWeightAdjustments(agent, coordination.weightAdjustments);\n      }\n      \n      // Apply cognitive pattern updates\n      if (coordination.patternUpdates) {\n        await this.cognitiveEvolution.applyPatternUpdates(agentId, coordination.patternUpdates);\n      }\n      \n      // Update performance metrics\n      const metrics = this.performanceMetrics.get(agentId);\n      if (metrics) {\n        metrics.collaborationScore = coordination.collaborationScore || 0;\n        metrics.cognitivePatterns.push(...(coordination.newPatterns || []));\n      }\n    }\n  }\n\n  /**\n   * Apply weight adjustments to a neural network\n   * @param {Object} agent - Neural network agent\n   * @param {Object} adjustments - Weight adjustments\n   */\n  async applyWeightAdjustments(agent, adjustments) {\n    try {\n      const currentWeights = agent.getWeights();\n      const adjustedWeights = {};\n      \n      Object.entries(currentWeights).forEach(([layer, weights]) => {\n        if (adjustments[layer]) {\n          adjustedWeights[layer] = weights.map((w, idx) => {\n            const adjustment = adjustments[layer][idx] || 0;\n            return w + adjustment * 0.1; // Scale adjustment factor\n          });\n        } else {\n          adjustedWeights[layer] = weights;\n        }\n      });\n      \n      agent.setWeights(adjustedWeights);\n      \n    } catch (error) {\n      console.error('Failed to apply weight adjustments:', error);\n    }\n  }\n\n  /**\n   * Record agent interaction for coordination tracking\n   * @param {string} agentA - First agent ID\n   * @param {string} agentB - Second agent ID\n   * @param {number} strength - Interaction strength (0-1)\n   * @param {string} type - Interaction type\n   */\n  recordAgentInteraction(agentA, agentB, strength, type = 'general') {\n    const interactionKey = `${agentA}-${agentB}`;\n    \n    if (!this.agentInteractions.has(interactionKey)) {\n      this.agentInteractions.set(interactionKey, []);\n    }\n    \n    this.agentInteractions.get(interactionKey).push({\n      timestamp: Date.now(),\n      strength,\n      type,\n      agentA,\n      agentB\n    });\n    \n    // Keep only recent interactions (last 100)\n    const interactions = this.agentInteractions.get(interactionKey);\n    if (interactions.length > 100) {\n      interactions.splice(0, interactions.length - 100);\n    }\n  }\n\n  /**\n   * Get all complete neural presets (27+ models)\n   */\n  getCompleteNeuralPresets() {\n    return COMPLETE_NEURAL_PRESETS;\n  }\n\n  /**\n   * Get preset recommendations based on requirements\n   * @param {string} useCase - Use case description\n   * @param {Object} requirements - Performance and other requirements\n   */\n  getPresetRecommendations(useCase, requirements = {}) {\n    return this.cognitivePatternSelector.getPresetRecommendations(useCase, requirements);\n  }\n\n  /**\n   * Get adaptation recommendations for an agent\n   * @param {string} agentId - Agent identifier\n   */\n  async getAdaptationRecommendations(agentId) {\n    return this.neuralAdaptationEngine.getAdaptationRecommendations(agentId);\n  }\n\n  /**\n   * Export adaptation insights across all agents\n   */\n  getAdaptationInsights() {\n    return this.neuralAdaptationEngine.exportAdaptationInsights();\n  }\n\n  /**\n   * List all available neural model types with counts\n   */\n  getAllNeuralModelTypes() {\n    const modelTypes = {};\n    \n    // Count presets from complete neural presets\n    Object.entries(COMPLETE_NEURAL_PRESETS).forEach(([modelType, presets]) => {\n      modelTypes[modelType] = {\n        count: Object.keys(presets).length,\n        presets: Object.keys(presets),\n        description: Object.values(presets)[0]?.description || 'Neural model type'\n      };\n    });\n    \n    return modelTypes;\n  }\n\n  /**\n   * Get comprehensive neural network statistics\n   */\n  getEnhancedStatistics() {\n    const stats = {\n      totalAgents: this.neuralNetworks.size,\n      modelTypes: {},\n      cognitiveEvolution: this.cognitiveEvolution.getStatistics(),\n      metaLearning: this.metaLearning.getStatistics(),\n      coordination: this.coordinationProtocol.getStatistics(),\n      performance: {},\n      collaborations: 0\n    };\n    \n    // Count model types\n    for (const [agentId, network] of this.neuralNetworks.entries()) {\n      const modelType = network.modelType || 'unknown';\n      stats.modelTypes[modelType] = (stats.modelTypes[modelType] || 0) + 1;\n      \n      // Performance statistics\n      const metrics = this.performanceMetrics.get(agentId);\n      if (metrics) {\n        if (!stats.performance[modelType]) {\n          stats.performance[modelType] = {\n            count: 0,\n            avgAccuracy: 0,\n            avgCollaborationScore: 0,\n            totalAdaptations: 0\n          };\n        }\n        \n        const perf = stats.performance[modelType];\n        perf.count++;\n        perf.avgAccuracy += (network.getMetrics().accuracy || 0);\n        perf.avgCollaborationScore += metrics.collaborationScore;\n        perf.totalAdaptations += metrics.adaptationHistory.length;\n      }\n    }\n    \n    // Calculate averages\n    Object.values(stats.performance).forEach(perf => {\n      if (perf.count > 0) {\n        perf.avgAccuracy /= perf.count;\n        perf.avgCollaborationScore /= perf.count;\n      }\n    });\n    \n    // Count active collaborations\n    stats.collaborations = this.sharedKnowledge.size;\n    \n    return stats;\n  }\n}\n\n// Neural Network wrapper class\nclass NeuralNetwork {\n  constructor(networkId, agentId, config, wasmModule) {\n    this.networkId = networkId;\n    this.agentId = agentId;\n    this.config = config;\n    this.wasmModule = wasmModule;\n    this.trainingHistory = [];\n    this.metrics = {\n      accuracy: 0,\n      loss: 1.0,\n      epochs_trained: 0,\n      total_samples: 0,\n    };\n  }\n\n  async forward(input) {\n    try {\n      const result = this.wasmModule.exports.forward_pass(this.networkId, input);\n      return result;\n    } catch (error) {\n      console.error('Forward pass failed:', error);\n      return new Float32Array(this.config.layers[this.config.layers.length - 1]).fill(0.5);\n    }\n  }\n\n  async train(trainingData, options) {\n    const { epochs, batchSize, learningRate, freezeLayers } = options;\n\n    for (let epoch = 0; epoch < epochs; epoch++) {\n      let epochLoss = 0;\n      let batchCount = 0;\n\n      // Process in batches\n      for (let i = 0; i < trainingData.samples.length; i += batchSize) {\n        const batch = trainingData.samples.slice(i, i + batchSize);\n\n        try {\n          const loss = this.wasmModule.exports.train_batch(\n            this.networkId,\n            JSON.stringify(batch),\n            learningRate,\n            JSON.stringify(freezeLayers),\n          );\n\n          epochLoss += loss;\n          batchCount++;\n        } catch (error) {\n          console.error('Training batch failed:', error);\n        }\n      }\n\n      const avgLoss = epochLoss / batchCount;\n      this.metrics.loss = avgLoss;\n      this.metrics.epochs_trained++;\n      this.trainingHistory.push({ epoch, loss: avgLoss });\n\n      console.log(`Epoch ${epoch + 1}/${epochs} - Loss: ${avgLoss.toFixed(4)}`);\n    }\n\n    return this.metrics;\n  }\n\n  getGradients() {\n    // Get gradients from WASM module\n    try {\n      const gradients = this.wasmModule.exports.get_gradients(this.networkId);\n      return JSON.parse(gradients);\n    } catch (error) {\n      console.error('Failed to get gradients:', error);\n      return {};\n    }\n  }\n\n  applyGradients(gradients) {\n    // Apply gradients to network\n    try {\n      this.wasmModule.exports.apply_gradients(this.networkId, JSON.stringify(gradients));\n    } catch (error) {\n      console.error('Failed to apply gradients:', error);\n    }\n  }\n\n  getMetrics() {\n    return {\n      ...this.metrics,\n      training_history: this.trainingHistory,\n      network_info: {\n        layers: this.config.layers,\n        parameters: this.config.layers.reduce((acc, size, i) => {\n          if (i > 0) {\n            return acc + (this.config.layers[i - 1] * size);\n          }\n          return acc;\n        }, 0),\n      },\n    };\n  }\n\n  async save(filePath) {\n    try {\n      const state = this.wasmModule.exports.serialize_network(this.networkId);\n      // In real implementation, save to file\n      console.log(`Saving network state to ${filePath}`);\n      return true;\n    } catch (error) {\n      console.error('Failed to save network:', error);\n      return false;\n    }\n  }\n\n  async load(filePath) {\n    try {\n      // In real implementation, load from file\n      console.log(`Loading network state from ${filePath}`);\n      this.wasmModule.exports.deserialize_network(this.networkId, 'state_data');\n      return true;\n    } catch (error) {\n      console.error('Failed to load network:', error);\n      return false;\n    }\n  }\n}\n\n// Simulated Neural Network for when WASM is not available\nclass SimulatedNeuralNetwork {\n  constructor(agentId, config) {\n    this.agentId = agentId;\n    this.config = config;\n    this.weights = this.initializeWeights();\n    this.trainingHistory = [];\n    this.metrics = {\n      accuracy: 0.5 + Math.random() * 0.3,\n      loss: 0.5 + Math.random() * 0.5,\n      epochs_trained: 0,\n      total_samples: 0,\n    };\n  }\n\n  initializeWeights() {\n    // Simple weight initialization\n    return this.config.layers?.map(() => Math.random() * 2 - 1) || [0];\n  }\n\n  async forward(input) {\n    // Simple forward pass simulation\n    const outputSize = this.config.layers?.[this.config.layers.length - 1] || 1;\n    const output = new Float32Array(outputSize);\n\n    for (let i = 0; i < outputSize; i++) {\n      output[i] = Math.random();\n    }\n\n    return output;\n  }\n\n  async train(trainingData, options) {\n    const { epochs } = options;\n\n    for (let epoch = 0; epoch < epochs; epoch++) {\n      const loss = Math.max(0.01, this.metrics.loss * (0.9 + Math.random() * 0.1));\n      this.metrics.loss = loss;\n      this.metrics.epochs_trained++;\n      this.metrics.accuracy = Math.min(0.99, this.metrics.accuracy + 0.01);\n      this.trainingHistory.push({ epoch, loss });\n\n      console.log(`[Simulated] Epoch ${epoch + 1}/${epochs} - Loss: ${loss.toFixed(4)}`);\n    }\n\n    return this.metrics;\n  }\n\n  getGradients() {\n    // Simulated gradients\n    return {\n      layer_0: Math.random() * 0.1,\n      layer_1: Math.random() * 0.1,\n    };\n  }\n\n  applyGradients(gradients) {\n    // Simulate gradient application\n    console.log('[Simulated] Applying gradients');\n  }\n\n  getMetrics() {\n    return {\n      ...this.metrics,\n      training_history: this.trainingHistory,\n      network_info: {\n        layers: this.config.layers || [128, 64, 32],\n        parameters: 10000, // Simulated parameter count\n      },\n    };\n  }\n\n  async save(filePath) {\n    console.log(`[Simulated] Saving network state to ${filePath}`);\n    return true;\n  }\n\n  async load(filePath) {\n    console.log(`[Simulated] Loading network state from ${filePath}`);\n    return true;\n  }\n}\n\n// Neural Network Templates for quick configuration\nconst NeuralNetworkTemplates = {\n  getTemplate: (templateName) => {\n    const templates = {\n      deep_analyzer: {\n        layers: [128, 256, 512, 256, 128],\n        activation: 'relu',\n        output_activation: 'sigmoid',\n        dropout: 0.3,\n      },\n      nlp_processor: {\n        layers: [512, 1024, 512, 256],\n        activation: 'gelu',\n        output_activation: 'softmax',\n        dropout: 0.4,\n      },\n      reinforcement_learner: {\n        layers: [64, 128, 128, 64],\n        activation: 'tanh',\n        output_activation: 'linear',\n        dropout: 0.2,\n      },\n    };\n\n    return templates[templateName] || templates.deep_analyzer;\n  },\n};\n\n// Advanced Neural Network wrapper for new model types\nclass AdvancedNeuralNetwork {\n  constructor(agentId, model, config) {\n    this.agentId = agentId;\n    this.model = model;\n    this.config = config;\n    this.modelType = config.modelType;\n    this.isAdvanced = true;\n  }\n\n  async forward(input) {\n    try {\n      // Handle different input formats\n      let formattedInput = input;\n      \n      if (this.modelType === 'transformer' || this.modelType === 'gru') {\n        // Ensure input has shape [batch_size, sequence_length, features]\n        if (!input.shape) {\n          formattedInput = new Float32Array(input);\n          formattedInput.shape = [1, input.length, 1];\n        }\n      } else if (this.modelType === 'cnn') {\n        // Ensure input has shape [batch_size, height, width, channels]\n        if (!input.shape) {\n          const inputShape = this.config.inputShape;\n          formattedInput = new Float32Array(input);\n          formattedInput.shape = [1, ...inputShape];\n        }\n      } else if (this.modelType === 'autoencoder') {\n        // Ensure input has shape [batch_size, input_size]\n        if (!input.shape) {\n          formattedInput = new Float32Array(input);\n          formattedInput.shape = [1, input.length];\n        }\n      }\n      \n      const result = await this.model.forward(formattedInput, false);\n      \n      // Return appropriate output based on model type\n      if (this.modelType === 'autoencoder') {\n        return result.reconstruction;\n      }\n      \n      return result;\n    } catch (error) {\n      console.error(`Forward pass failed for ${this.modelType}:`, error);\n      return new Float32Array(this.config.outputSize || 10).fill(0.5);\n    }\n  }\n\n  async train(trainingData, options) {\n    return this.model.train(trainingData, options);\n  }\n\n  getGradients() {\n    // Advanced models handle gradients internally\n    return {};\n  }\n\n  applyGradients(gradients) {\n    // Advanced models handle gradient updates internally\n    console.log(`Gradient update handled internally by ${this.modelType}`);\n  }\n\n  getMetrics() {\n    return this.model.getMetrics();\n  }\n\n  async save(filePath) {\n    return this.model.save(filePath);\n  }\n\n  async load(filePath) {\n    return this.model.load(filePath);\n  }\n\n  // Special methods for specific model types\n  async encode(input) {\n    if (this.modelType === 'autoencoder') {\n      const encoder = await this.model.getEncoder();\n      return encoder.encode(input);\n    }\n    throw new Error(`Encode not supported for ${this.modelType}`);\n  }\n\n  async decode(latent) {\n    if (this.modelType === 'autoencoder') {\n      const decoder = await this.model.getDecoder();\n      return decoder.decode(latent);\n    }\n    throw new Error(`Decode not supported for ${this.modelType}`);\n  }\n\n  async generate(numSamples) {\n    if (this.modelType === 'autoencoder' && this.config.variational) {\n      return this.model.generate(numSamples);\n    }\n    throw new Error(`Generation not supported for ${this.modelType}`);\n  }\n}\n\nexport { NeuralNetworkManager, NeuralNetworkTemplates };"],"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","ignoreList":[]}