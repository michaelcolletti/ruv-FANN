{"version":3,"names":["RuvSwarm","NeuralNetwork","SwarmPersistence","assert","path","fs","fileURLToPath","dirname","__filename","import","meta","url","__dirname","BenchmarkRunner","constructor","name","results","run","_x","_this","_asyncToGenerator","fn","iterations","times","i","start","process","hrtime","bigint","end","push","Number","sort","a","b","mean","reduce","sum","t","length","median","Math","floor","p95","p99","min","max","result","ops_per_second","apply","arguments","report","console","log","repeat","toFixed","describe","ruvSwarm","testDbPath","join","beforeEach","existsSync","unlinkSync","global","_ruvSwarmInstance","_ruvSwarmInitialized","afterEach","persistence","close","it","benchmark","initialize","enablePersistence","createSwarm","topology","maxAgents","swarm","spawn","type","enableNeuralNetwork","orchestrate","description","priority","network","networkLayers","activationFunction","learningRate","momentum","input","Array","fill","map","random","forward","target","train","swarmId","id","agentId","createAgent","keyId","key","data","value","timestamp","Date","now","storeAgentMemory","getAgentMemory","getSwarmAgents","promises","Promise","all","initialMemory","memoryUsage","agents","finalMemory","memoryIncrease","heapUsed","external","rss","agentCounts","count","timeMs","timePerAgent","totalTime","firstTimePerAgent","lastTimePerAgent","enableNeuralNetworks","strategy","capabilities","tasks","requiredCapabilities","resolve","setTimeout","getStatus","agent","completed","require"],"sources":["benchmarks.test.js"],"sourcesContent":["/**\n * Performance benchmarks for ruv-swarm\n */\n\nimport { RuvSwarm  } from '../../src/index-enhanced';\nimport { NeuralNetwork  } from '../../src/neural-agent';\nimport { SwarmPersistence  } from '../../src/persistence';\nimport assert from 'assert';\nimport path from 'path';\nimport fs from 'fs';\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\n// Benchmark utilities\nclass BenchmarkRunner {\n  constructor(name) {\n    this.name = name;\n    this.results = [];\n  }\n\n  async run(fn, iterations = 100) {\n    const times = [];\n\n    // Warmup\n    for (let i = 0; i < 10; i++) {\n      await fn();\n    }\n\n    // Actual benchmark\n    for (let i = 0; i < iterations; i++) {\n      const start = process.hrtime.bigint();\n      await fn();\n      const end = process.hrtime.bigint();\n      times.push(Number(end - start) / 1e6); // Convert to milliseconds\n    }\n\n    // Calculate statistics\n    times.sort((a, b) => a - b);\n    const mean = times.reduce((sum, t) => sum + t, 0) / times.length;\n    const median = times[Math.floor(times.length / 2)];\n    const p95 = times[Math.floor(times.length * 0.95)];\n    const p99 = times[Math.floor(times.length * 0.99)];\n    const min = times[0];\n    const max = times[times.length - 1];\n\n    const result = {\n      name: this.name,\n      iterations,\n      mean,\n      median,\n      p95,\n      p99,\n      min,\n      max,\n      ops_per_second: 1000 / mean,\n    };\n\n    this.results.push(result);\n    return result;\n  }\n\n  report() {\n    console.log(`\\n${ '='.repeat(80)}`);\n    console.log(`Benchmark Results: ${this.name}`);\n    console.log('='.repeat(80));\n\n    for (const result of this.results) {\n      console.log(`\\n${result.name}:`);\n      console.log(`  Iterations: ${result.iterations}`);\n      console.log(`  Mean: ${result.mean.toFixed(3)}ms`);\n      console.log(`  Median: ${result.median.toFixed(3)}ms`);\n      console.log(`  P95: ${result.p95.toFixed(3)}ms`);\n      console.log(`  P99: ${result.p99.toFixed(3)}ms`);\n      console.log(`  Min: ${result.min.toFixed(3)}ms`);\n      console.log(`  Max: ${result.max.toFixed(3)}ms`);\n      console.log(`  Ops/sec: ${result.ops_per_second.toFixed(2)}`);\n    }\n\n    console.log(`\\n${ '='.repeat(80)}`);\n  }\n}\n\ndescribe('Performance Benchmarks', () => {\n  let ruvSwarm;\n  const testDbPath = path.join(__dirname, 'benchmark.db');\n\n  beforeEach(async() => {\n    // Clean up\n    if (fs.existsSync(testDbPath)) {\n      fs.unlinkSync(testDbPath);\n    }\n\n    // Reset global state\n    global._ruvSwarmInstance = null;\n    global._ruvSwarmInitialized = 0;\n  });\n\n  afterEach(() => {\n    if (ruvSwarm && ruvSwarm.persistence) {\n      ruvSwarm.persistence.close();\n    }\n    if (fs.existsSync(testDbPath)) {\n      fs.unlinkSync(testDbPath);\n    }\n  });\n\n  describe('Core Operations Benchmarks', () => {\n    it('should benchmark RuvSwarm initialization', async() => {\n      const benchmark = new BenchmarkRunner('RuvSwarm Initialization');\n\n      const result = await benchmark.run(async() => {\n        global._ruvSwarmInstance = null;\n        await RuvSwarm.initialize({ enablePersistence: false });\n      }, 50);\n\n      benchmark.report();\n      assert(result.mean < 100); // Should initialize in less than 100ms\n    });\n\n    it('should benchmark swarm creation', async() => {\n      ruvSwarm = await RuvSwarm.initialize({ enablePersistence: false });\n      const benchmark = new BenchmarkRunner('Swarm Creation');\n\n      const result = await benchmark.run(async() => {\n        await ruvSwarm.createSwarm({\n          name: 'benchmark-swarm',\n          topology: 'mesh',\n          maxAgents: 10,\n        });\n      });\n\n      benchmark.report();\n      assert(result.mean < 10); // Should create swarm in less than 10ms\n    });\n\n    it('should benchmark agent spawning', async() => {\n      ruvSwarm = await RuvSwarm.initialize({ enablePersistence: false });\n      const swarm = await ruvSwarm.createSwarm({ name: 'agent-benchmark' });\n      const benchmark = new BenchmarkRunner('Agent Spawning');\n\n      const result = await benchmark.run(async() => {\n        await swarm.spawn({\n          type: 'researcher',\n          enableNeuralNetwork: false,\n        });\n      });\n\n      benchmark.report();\n      assert(result.mean < 5); // Should spawn agent in less than 5ms\n    });\n\n    it('should benchmark task orchestration', async() => {\n      ruvSwarm = await RuvSwarm.initialize({ enablePersistence: false });\n      const swarm = await ruvSwarm.createSwarm({ name: 'task-benchmark' });\n\n      // Spawn agents for task assignment\n      for (let i = 0; i < 5; i++) {\n        await swarm.spawn({ type: 'researcher' });\n      }\n\n      const benchmark = new BenchmarkRunner('Task Orchestration');\n\n      const result = await benchmark.run(async() => {\n        await swarm.orchestrate({\n          description: 'Benchmark task',\n          priority: 'medium',\n        });\n      });\n\n      benchmark.report();\n      assert(result.mean < 10); // Should orchestrate in less than 10ms\n    });\n  });\n\n  describe('Neural Network Benchmarks', () => {\n    it('should benchmark neural network forward propagation', async() => {\n      const network = new NeuralNetwork({\n        networkLayers: [100, 200, 100, 50],\n        activationFunction: 'relu',\n        learningRate: 0.5,\n        momentum: 0.2,\n      });\n\n      const input = new Array(100).fill(0).map(() => Math.random());\n      const benchmark = new BenchmarkRunner('Neural Network Forward Pass');\n\n      const result = await benchmark.run(async() => {\n        network.forward(input);\n      }, 1000);\n\n      benchmark.report();\n      assert(result.ops_per_second > 1000); // Should handle > 1000 ops/sec\n    });\n\n    it('should benchmark neural network training', async() => {\n      const network = new NeuralNetwork({\n        networkLayers: [50, 100, 50, 25],\n        activationFunction: 'sigmoid',\n        learningRate: 0.5,\n        momentum: 0.2,\n      });\n\n      const input = new Array(50).fill(0).map(() => Math.random());\n      const target = new Array(25).fill(0).map(() => Math.random());\n      const benchmark = new BenchmarkRunner('Neural Network Training');\n\n      const result = await benchmark.run(async() => {\n        network.train(input, target);\n      }, 500);\n\n      benchmark.report();\n      assert(result.ops_per_second > 100); // Should handle > 100 training ops/sec\n    });\n  });\n\n  describe('Persistence Benchmarks', () => {\n    let persistence;\n\n    beforeEach(() => {\n      persistence = new SwarmPersistence(testDbPath);\n    });\n\n    afterEach(() => {\n      if (persistence) {\n        persistence.close();\n      }\n    });\n\n    it('should benchmark swarm persistence', async() => {\n      const benchmark = new BenchmarkRunner('Swarm Persistence');\n      let swarmId = 0;\n\n      const result = await benchmark.run(async() => {\n        persistence.createSwarm({\n          id: `swarm-${swarmId++}`,\n          name: 'Benchmark Swarm',\n          topology: 'mesh',\n          maxAgents: 10,\n        });\n      });\n\n      benchmark.report();\n      assert(result.mean < 5); // Should persist in less than 5ms\n    });\n\n    it('should benchmark agent persistence', async() => {\n      // Create parent swarm\n      persistence.createSwarm({\n        id: 'parent-swarm',\n        name: 'Parent',\n        topology: 'mesh',\n        maxAgents: 100,\n      });\n\n      const benchmark = new BenchmarkRunner('Agent Persistence');\n      let agentId = 0;\n\n      const result = await benchmark.run(async() => {\n        persistence.createAgent({\n          id: `agent-${agentId++}`,\n          swarmId: 'parent-swarm',\n          name: 'Benchmark Agent',\n          type: 'researcher',\n        });\n      });\n\n      benchmark.report();\n      assert(result.mean < 5); // Should persist in less than 5ms\n    });\n\n    it('should benchmark memory operations', async() => {\n      // Create parent entities\n      persistence.createSwarm({\n        id: 'memory-swarm',\n        name: 'Memory Test',\n        topology: 'mesh',\n        maxAgents: 10,\n      });\n\n      persistence.createAgent({\n        id: 'memory-agent',\n        swarmId: 'memory-swarm',\n        name: 'Memory Agent',\n        type: 'researcher',\n      });\n\n      const benchmark = new BenchmarkRunner('Memory Store/Retrieve');\n      let keyId = 0;\n\n      const result = await benchmark.run(async() => {\n        const key = `key-${keyId++}`;\n        const data = { value: Math.random(), timestamp: Date.now() };\n\n        // Store\n        persistence.storeAgentMemory('memory-agent', key, data);\n\n        // Retrieve\n        persistence.getAgentMemory('memory-agent', key);\n      });\n\n      benchmark.report();\n      assert(result.mean < 10); // Should complete in less than 10ms\n    });\n\n    it('should benchmark query performance', async() => {\n      // Populate with test data\n      const swarmId = 'query-swarm';\n      persistence.createSwarm({\n        id: swarmId,\n        name: 'Query Test',\n        topology: 'mesh',\n        maxAgents: 100,\n      });\n\n      // Create 100 agents\n      for (let i = 0; i < 100; i++) {\n        persistence.createAgent({\n          id: `agent-${i}`,\n          swarmId,\n          name: `Agent ${i}`,\n          type: i % 2 === 0 ? 'researcher' : 'coder',\n        });\n      }\n\n      const benchmark = new BenchmarkRunner('Agent Query');\n\n      const result = await benchmark.run(async() => {\n        persistence.getSwarmAgents(swarmId);\n      });\n\n      benchmark.report();\n      assert(result.mean < 20); // Should query 100 agents in less than 20ms\n    });\n  });\n\n  describe('Concurrent Operations Benchmarks', () => {\n    it('should benchmark concurrent swarm operations', async() => {\n      ruvSwarm = await RuvSwarm.initialize({ enablePersistence: false });\n      const benchmark = new BenchmarkRunner('Concurrent Swarm Operations');\n\n      const result = await benchmark.run(async() => {\n        // Create multiple swarms concurrently\n        const promises = [];\n        for (let i = 0; i < 5; i++) {\n          promises.push(\n            ruvSwarm.createSwarm({\n              name: `concurrent-swarm-${i}`,\n              topology: 'mesh',\n            }),\n          );\n        }\n        await Promise.all(promises);\n      }, 50);\n\n      benchmark.report();\n      assert(result.mean < 50); // Should handle 5 concurrent creates in < 50ms\n    });\n\n    it('should benchmark concurrent agent operations', async() => {\n      ruvSwarm = await RuvSwarm.initialize({ enablePersistence: false });\n      const swarm = await ruvSwarm.createSwarm({ name: 'concurrent-test' });\n      const benchmark = new BenchmarkRunner('Concurrent Agent Spawning');\n\n      const result = await benchmark.run(async() => {\n        // Spawn multiple agents concurrently\n        const promises = [];\n        for (let i = 0; i < 10; i++) {\n          promises.push(\n            swarm.spawn({\n              type: i % 2 === 0 ? 'researcher' : 'coder',\n              name: `agent-${i}`,\n            }),\n          );\n        }\n        await Promise.all(promises);\n      }, 20);\n\n      benchmark.report();\n      assert(result.mean < 100); // Should spawn 10 agents in < 100ms\n    });\n  });\n\n  describe('Memory Usage Benchmarks', () => {\n    it('should measure memory usage for large swarms', async() => {\n      ruvSwarm = await RuvSwarm.initialize({ enablePersistence: false });\n\n      const initialMemory = process.memoryUsage();\n\n      // Create large swarm\n      const swarm = await ruvSwarm.createSwarm({\n        name: 'memory-test-swarm',\n        maxAgents: 1000,\n      });\n\n      // Spawn many agents\n      const agents = [];\n      for (let i = 0; i < 100; i++) {\n        agents.push(await swarm.spawn({ type: 'researcher' }));\n      }\n\n      // Create many tasks\n      for (let i = 0; i < 50; i++) {\n        await swarm.orchestrate({\n          description: `Memory test task ${i}`,\n        });\n      }\n\n      const finalMemory = process.memoryUsage();\n\n      const memoryIncrease = {\n        heapUsed: (finalMemory.heapUsed - initialMemory.heapUsed) / 1024 / 1024,\n        external: (finalMemory.external - initialMemory.external) / 1024 / 1024,\n        rss: (finalMemory.rss - initialMemory.rss) / 1024 / 1024,\n      };\n\n      console.log('\\nMemory Usage:');\n      console.log(`  Heap increase: ${memoryIncrease.heapUsed.toFixed(2)} MB`);\n      console.log(`  External increase: ${memoryIncrease.external.toFixed(2)} MB`);\n      console.log(`  RSS increase: ${memoryIncrease.rss.toFixed(2)} MB`);\n\n      // Should not use excessive memory\n      assert(memoryIncrease.heapUsed < 100); // Less than 100MB for 100 agents\n    });\n  });\n\n  describe('Scalability Benchmarks', () => {\n    it('should benchmark scalability with increasing agents', async() => {\n      ruvSwarm = await RuvSwarm.initialize({ enablePersistence: false });\n      const swarm = await ruvSwarm.createSwarm({ name: 'scalability-test' });\n\n      const agentCounts = [10, 50, 100, 200];\n      const results = [];\n\n      for (const count of agentCounts) {\n        // Spawn agents\n        const start = process.hrtime.bigint();\n        for (let i = 0; i < count; i++) {\n          await swarm.spawn({ type: 'researcher' });\n        }\n        const end = process.hrtime.bigint();\n\n        const timeMs = Number(end - start) / 1e6;\n        const timePerAgent = timeMs / count;\n\n        results.push({\n          agents: count,\n          totalTime: timeMs,\n          timePerAgent,\n        });\n      }\n\n      console.log('\\nScalability Results:');\n      for (const result of results) {\n        console.log(`  ${result.agents} agents: ${result.totalTime.toFixed(2)}ms total, ${result.timePerAgent.toFixed(3)}ms per agent`);\n      }\n\n      // Time per agent should not increase significantly\n      const firstTimePerAgent = results[0].timePerAgent;\n      const lastTimePerAgent = results[results.length - 1].timePerAgent;\n      assert(lastTimePerAgent < firstTimePerAgent * 2); // Should not double\n    });\n  });\n\n  describe('Real-world Scenario Benchmarks', () => {\n    it('should benchmark a realistic workflow', async() => {\n      ruvSwarm = await RuvSwarm.initialize({\n        enablePersistence: true,\n        enableNeuralNetworks: true,\n      });\n\n      if (ruvSwarm.persistence) {\n        ruvSwarm.persistence.close();\n        ruvSwarm.persistence = new SwarmPersistence(testDbPath);\n      }\n\n      const benchmark = new BenchmarkRunner('Realistic Workflow');\n\n      const result = await benchmark.run(async() => {\n        // Create swarm\n        const swarm = await ruvSwarm.createSwarm({\n          name: 'project-swarm',\n          topology: 'hierarchical',\n          strategy: 'specialized',\n        });\n\n        // Spawn diverse agents\n        const agents = await Promise.all([\n          swarm.spawn({ type: 'researcher', capabilities: ['research', 'documentation'] }),\n          swarm.spawn({ type: 'coder', capabilities: ['javascript', 'python'] }),\n          swarm.spawn({ type: 'analyst', capabilities: ['analysis', 'testing'] }),\n          swarm.spawn({ type: 'optimizer', capabilities: ['performance', 'optimization'] }),\n        ]);\n\n        // Orchestrate multiple tasks\n        const tasks = await Promise.all([\n          swarm.orchestrate({\n            description: 'Research best practices',\n            priority: 'high',\n            requiredCapabilities: ['research'],\n          }),\n          swarm.orchestrate({\n            description: 'Implement core features',\n            priority: 'high',\n            requiredCapabilities: ['javascript'],\n          }),\n          swarm.orchestrate({\n            description: 'Analyze performance',\n            priority: 'medium',\n            requiredCapabilities: ['analysis'],\n          }),\n        ]);\n\n        // Wait for some execution\n        await new Promise(resolve => setTimeout(resolve, 10));\n\n        // Get status\n        await swarm.getStatus();\n\n        // Store some memory\n        if (ruvSwarm.persistence) {\n          for (const agent of agents) {\n            ruvSwarm.persistence.storeAgentMemory(\n              agent.id,\n              'workflow_state',\n              { completed: true },\n            );\n          }\n        }\n      }, 20);\n\n      benchmark.report();\n      console.log('\\nRealistic workflow completed successfully');\n      assert(result.mean < 200); // Should complete in less than 200ms\n    });\n  });\n});\n\n// Run benchmarks\n// Direct execution block\n{\n  console.log('Running Performance Benchmarks...');\n  console.log('This may take a few minutes...\\n');\n  require('../../node_modules/.bin/jest');\n}"],"mappings":"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","ignoreList":[]}