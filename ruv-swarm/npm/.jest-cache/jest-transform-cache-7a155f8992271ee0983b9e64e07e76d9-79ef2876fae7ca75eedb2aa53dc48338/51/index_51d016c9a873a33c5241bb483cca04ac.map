{"version":3,"names":["cov_1jx9quiuyg","actualCoverage","nlpPresets","getNLPPreset","availableNLPPresets","visionPresets","getVisionPreset","availableVisionPresets","timeSeriesPresets","getTimeSeriesPreset","availableTimeSeriesPresets","graphPresets","getGraphPreset","availableGraphPresets","NEURAL_PRESETS","s","nlp","vision","timeseries","graph","getPreset","category","presetName","f","categoryMap","b","Error","Object","keys","join","getCategoryPresets","getAllPresetNames","searchPresetsByUseCase","searchTerm","results","searchLower","toLowerCase","entries","forEach","presets","preset","useCase","includes","name","description","push","searchPresetsByAccuracy","minAccuracy","accuracyStr","performance","expectedAccuracy","accuracyMatch","match","minAcc","parseInt","accuracy","sort","a","searchPresetsByInferenceTime","maxTimeMs","timeStr","inferenceTime","timeMatch","timeMs","getPresetStatistics","stats","totalPresets","categories","models","accuracyRanges","inferenceTimeRanges","length","values","modelType","model","PRESET_CATEGORIES","NLP","VISION","TIME_SERIES","GRAPH","PRESET_MODEL_TYPES","validatePresetConfig","requiredFields","missingFields","filter","field","requiredPerformanceFields","missingPerfFields","DEFAULT_RECOMMENDATIONS","getRecommendedPreset","recommendation"],"sources":["index.js"],"sourcesContent":["/**\n * Neural Network Presets Index\n * Centralized access to all production-ready neural network configurations\n */\n\nimport { nlpPresets, getNLPPreset, availableNLPPresets } from './nlp.js';\nimport { visionPresets, getVisionPreset, availableVisionPresets } from './vision.js';\nimport { timeSeriesPresets, getTimeSeriesPreset, availableTimeSeriesPresets } from './timeseries.js';\nimport { graphPresets, getGraphPreset, availableGraphPresets } from './graph.js';\n\n// Combined presets object\nexport const NEURAL_PRESETS = {\n  nlp: nlpPresets,\n  vision: visionPresets,\n  timeseries: timeSeriesPresets,\n  graph: graphPresets\n};\n\n// Category-specific getters\nexport {\n  getNLPPreset,\n  getVisionPreset, \n  getTimeSeriesPreset,\n  getGraphPreset\n};\n\n// Available presets lists\nexport {\n  availableNLPPresets,\n  availableVisionPresets,\n  availableTimeSeriesPresets,\n  availableGraphPresets\n};\n\n// Universal preset getter function\nexport const getPreset = (category, presetName) => {\n  const categoryMap = {\n    nlp: getNLPPreset,\n    vision: getVisionPreset,\n    timeseries: getTimeSeriesPreset,\n    graph: getGraphPreset\n  };\n\n  if (!categoryMap[category]) {\n    throw new Error(`Unknown preset category: ${category}. Available categories: ${Object.keys(categoryMap).join(', ')}`);\n  }\n\n  return categoryMap[category](presetName);\n};\n\n// Get all presets for a category\nexport const getCategoryPresets = (category) => {\n  const categoryMap = {\n    nlp: nlpPresets,\n    vision: visionPresets,\n    timeseries: timeSeriesPresets,\n    graph: graphPresets\n  };\n\n  if (!categoryMap[category]) {\n    throw new Error(`Unknown preset category: ${category}. Available categories: ${Object.keys(categoryMap).join(', ')}`);\n  }\n\n  return categoryMap[category];\n};\n\n// Get all available preset names by category\nexport const getAllPresetNames = () => {\n  return {\n    nlp: availableNLPPresets,\n    vision: availableVisionPresets,\n    timeseries: availableTimeSeriesPresets,\n    graph: availableGraphPresets\n  };\n};\n\n// Search presets by use case\nexport const searchPresetsByUseCase = (searchTerm) => {\n  const results = [];\n  const searchLower = searchTerm.toLowerCase();\n\n  Object.entries(NEURAL_PRESETS).forEach(([category, presets]) => {\n    Object.entries(presets).forEach(([presetName, preset]) => {\n      if (\n        preset.useCase.toLowerCase().includes(searchLower) ||\n        preset.name.toLowerCase().includes(searchLower) ||\n        preset.description.toLowerCase().includes(searchLower)\n      ) {\n        results.push({\n          category,\n          presetName,\n          preset\n        });\n      }\n    });\n  });\n\n  return results;\n};\n\n// Search presets by accuracy range\nexport const searchPresetsByAccuracy = (minAccuracy) => {\n  const results = [];\n\n  Object.entries(NEURAL_PRESETS).forEach(([category, presets]) => {\n    Object.entries(presets).forEach(([presetName, preset]) => {\n      const accuracyStr = preset.performance.expectedAccuracy;\n      const accuracyMatch = accuracyStr.match(/(\\d+)-?(\\d+)?%/);\n      \n      if (accuracyMatch) {\n        const minAcc = parseInt(accuracyMatch[1]);\n        if (minAcc >= minAccuracy) {\n          results.push({\n            category,\n            presetName,\n            preset,\n            accuracy: minAcc\n          });\n        }\n      }\n    });\n  });\n\n  return results.sort((a, b) => b.accuracy - a.accuracy);\n};\n\n// Search presets by inference time\nexport const searchPresetsByInferenceTime = (maxTimeMs) => {\n  const results = [];\n\n  Object.entries(NEURAL_PRESETS).forEach(([category, presets]) => {\n    Object.entries(presets).forEach(([presetName, preset]) => {\n      const timeStr = preset.performance.inferenceTime;\n      const timeMatch = timeStr.match(/(\\d+)ms/);\n      \n      if (timeMatch) {\n        const timeMs = parseInt(timeMatch[1]);\n        if (timeMs <= maxTimeMs) {\n          results.push({\n            category,\n            presetName,\n            preset,\n            inferenceTime: timeMs\n          });\n        }\n      }\n    });\n  });\n\n  return results.sort((a, b) => a.inferenceTime - b.inferenceTime);\n};\n\n// Get preset statistics\nexport const getPresetStatistics = () => {\n  const stats = {\n    totalPresets: 0,\n    categories: {},\n    models: {},\n    accuracyRanges: {\n      '90-100%': 0,\n      '80-89%': 0,\n      '70-79%': 0,\n      'below-70%': 0\n    },\n    inferenceTimeRanges: {\n      'under-10ms': 0,\n      '10-50ms': 0,\n      '50-100ms': 0,\n      'over-100ms': 0\n    }\n  };\n\n  Object.entries(NEURAL_PRESETS).forEach(([category, presets]) => {\n    stats.categories[category] = Object.keys(presets).length;\n    stats.totalPresets += Object.keys(presets).length;\n\n    Object.values(presets).forEach(preset => {\n      // Count model types\n      const modelType = preset.model;\n      stats.models[modelType] = (stats.models[modelType] || 0) + 1;\n\n      // Categorize accuracy\n      const accuracyStr = preset.performance.expectedAccuracy;\n      const accuracyMatch = accuracyStr.match(/(\\d+)-?(\\d+)?%/);\n      if (accuracyMatch) {\n        const minAcc = parseInt(accuracyMatch[1]);\n        if (minAcc >= 90) stats.accuracyRanges['90-100%']++;\n        else if (minAcc >= 80) stats.accuracyRanges['80-89%']++;\n        else if (minAcc >= 70) stats.accuracyRanges['70-79%']++;\n        else stats.accuracyRanges['below-70%']++;\n      }\n\n      // Categorize inference time\n      const timeStr = preset.performance.inferenceTime;\n      const timeMatch = timeStr.match(/(\\d+)ms/);\n      if (timeMatch) {\n        const timeMs = parseInt(timeMatch[1]);\n        if (timeMs < 10) stats.inferenceTimeRanges['under-10ms']++;\n        else if (timeMs < 50) stats.inferenceTimeRanges['10-50ms']++;\n        else if (timeMs < 100) stats.inferenceTimeRanges['50-100ms']++;\n        else stats.inferenceTimeRanges['over-100ms']++;\n      }\n    });\n  });\n\n  return stats;\n};\n\n// Export preset categories for easy reference\nexport const PRESET_CATEGORIES = {\n  NLP: 'nlp',\n  VISION: 'vision', \n  TIME_SERIES: 'timeseries',\n  GRAPH: 'graph'\n};\n\n// Export model types used in presets\nexport const PRESET_MODEL_TYPES = [\n  'transformer',\n  'cnn',\n  'lstm',\n  'gru',\n  'autoencoder',\n  'gnn',\n  'resnet',\n  'vae'\n];\n\n// Utility function to validate preset configuration\nexport const validatePresetConfig = (preset) => {\n  const requiredFields = ['name', 'description', 'model', 'config', 'training', 'performance', 'useCase'];\n  const missingFields = requiredFields.filter(field => !preset[field]);\n  \n  if (missingFields.length > 0) {\n    throw new Error(`Preset validation failed. Missing fields: ${missingFields.join(', ')}`);\n  }\n\n  // Validate performance fields\n  const requiredPerformanceFields = ['expectedAccuracy', 'inferenceTime', 'memoryUsage', 'trainingTime'];\n  const missingPerfFields = requiredPerformanceFields.filter(field => !preset.performance[field]);\n  \n  if (missingPerfFields.length > 0) {\n    throw new Error(`Preset performance validation failed. Missing fields: ${missingPerfFields.join(', ')}`);\n  }\n\n  return true;\n};\n\n// Export default preset recommendations by use case\nexport const DEFAULT_RECOMMENDATIONS = {\n  'chatbot': { category: 'nlp', preset: 'conversational_ai' },\n  'sentiment_analysis': { category: 'nlp', preset: 'sentiment_analysis_social' },\n  'object_detection': { category: 'vision', preset: 'object_detection_realtime' },\n  'face_recognition': { category: 'vision', preset: 'facial_recognition_secure' },\n  'stock_prediction': { category: 'timeseries', preset: 'stock_market_prediction' },\n  'weather_forecast': { category: 'timeseries', preset: 'weather_forecasting' },\n  'fraud_detection': { category: 'graph', preset: 'fraud_detection_financial' },\n  'recommendation': { category: 'graph', preset: 'recommendation_engine' }\n};\n\n// Get recommended preset for a use case\nexport const getRecommendedPreset = (useCase) => {\n  const recommendation = DEFAULT_RECOMMENDATIONS[useCase.toLowerCase()];\n  if (!recommendation) {\n    return null;\n  }\n  \n  return getPreset(recommendation.category, recommendation.preset);\n};"],"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","ignoreList":[]}