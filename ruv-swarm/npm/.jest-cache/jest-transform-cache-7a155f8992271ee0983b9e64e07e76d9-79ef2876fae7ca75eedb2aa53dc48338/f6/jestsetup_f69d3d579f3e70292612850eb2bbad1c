dbbff43cd386192dbb7a36abb6876983
// Mock worker_threads for environments that don't support it
_getJestObj().mock('worker_threads', () => ({
  Worker: jest.fn(),
  isMainThread: true,
  parentPort: null,
  workerData: null,
  MessageChannel: jest.fn(),
  MessagePort: jest.fn(),
  moveMessagePortToContext: jest.fn(),
  receiveMessageOnPort: jest.fn(),
  threadId: 0
}), {
  virtual: true
});

// Mock fs/promises for Node.js compatibility
_getJestObj().mock('fs/promises', () => ({
  readFile: jest.fn(),
  writeFile: jest.fn(),
  mkdir: jest.fn(),
  readdir: jest.fn(),
  stat: jest.fn(),
  access: jest.fn()
}), {
  virtual: true
});

// Mock better-sqlite3 for tests that don't need real database
_getJestObj().mock('better-sqlite3', () => {
  return jest.fn().mockImplementation(() => ({
    prepare: jest.fn().mockReturnValue({
      run: jest.fn(),
      get: jest.fn(),
      all: jest.fn().mockReturnValue([]),
      iterate: jest.fn()
    }),
    exec: jest.fn(),
    close: jest.fn(),
    transaction: jest.fn().mockReturnValue(() => {}),
    pragma: jest.fn()
  }));
}, {
  virtual: true
});

// Mock UUID generation for consistent test results
_getJestObj().mock('uuid', () => ({
  v4: jest.fn(() => 'mock-uuid-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9))
}), {
  virtual: true
});

// Mock WebSocket for MCP tests
_getJestObj().mock('ws', () => ({
  WebSocket: jest.fn().mockImplementation(() => ({
    on: jest.fn(),
    send: jest.fn(),
    close: jest.fn(),
    readyState: 1,
    // OPEN
    CONNECTING: 0,
    OPEN: 1,
    CLOSING: 2,
    CLOSED: 3
  })),
  WebSocketServer: jest.fn().mockImplementation(() => ({
    on: jest.fn(),
    close: jest.fn()
  }))
}), {
  virtual: true
});

// Performance polyfill for older Node.js versions
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * Jest Test Setup
 * Global configuration and mocks for all tests
 */

// Global test configuration
global.console = _objectSpread(_objectSpread({}, console), {}, {
  // Uncomment to suppress console output during tests
  // log: jest.fn(),
  // debug: jest.fn(),
  // info: jest.fn(),
  // warn: jest.fn(),
  error: console.error // Keep errors visible
});

// WebAssembly polyfill for Node.js environments that might not have it
if (typeof global.WebAssembly === 'undefined') {
  global.WebAssembly = {
    Memory: class MockMemory {
      constructor(descriptor) {
        this.descriptor = descriptor;
        this.buffer = new ArrayBuffer(descriptor.initial * 65536);
      }
    },
    Module: class MockModule {
      constructor() {}
    },
    Instance: class MockInstance {
      constructor(module, imports) {
        this.exports = _objectSpread({
          memory: new global.WebAssembly.Memory({
            initial: 1
          })
        }, (imports === null || imports === void 0 ? void 0 : imports.env) || {});
      }
    },
    instantiate: jest.fn().mockResolvedValue({
      instance: new global.WebAssembly.Instance(),
      module: new global.WebAssembly.Module()
    }),
    instantiateStreaming: jest.fn().mockResolvedValue({
      instance: new global.WebAssembly.Instance(),
      module: new global.WebAssembly.Module()
    })
  };
}
if (typeof global.performance === 'undefined') {
  global.performance = {
    now: () => Date.now(),
    mark: () => {},
    measure: () => {},
    getEntries: () => [],
    getEntriesByName: () => [],
    getEntriesByType: () => [],
    clearMarks: () => {},
    clearMeasures: () => {}
  };
}

// Set up default timeouts
jest.setTimeout(30000);

// Global test utilities
global.testUtils = {
  /**
   * Wait for a specific amount of time
   */
  wait: ms => new Promise(resolve => setTimeout(resolve, ms)),
  /**
   * Create a mock agent configuration
   */
  createMockAgent: (overrides = {}) => _objectSpread({
    id: 'mock-agent-' + Date.now(),
    type: 'researcher',
    name: 'test-agent',
    capabilities: ['research', 'analysis'],
    status: 'idle'
  }, overrides),
  /**
   * Create a mock swarm configuration
   */
  createMockSwarm: (overrides = {}) => _objectSpread({
    id: 'mock-swarm-' + Date.now(),
    name: 'test-swarm',
    topology: 'mesh',
    maxAgents: 10,
    strategy: 'balanced'
  }, overrides),
  /**
   * Create a mock task configuration
   */
  createMockTask: (overrides = {}) => _objectSpread({
    id: 'mock-task-' + Date.now(),
    description: 'Test task',
    priority: 'medium',
    status: 'pending',
    dependencies: []
  }, overrides),
  /**
   * Mock WASM module loader
   */
  createMockWasmModule: () => ({
    exports: {
      initialize: jest.fn().mockReturnValue(true),
      getVersion: jest.fn().mockReturnValue('0.2.0'),
      createAgent: jest.fn().mockReturnValue('mock-agent'),
      createSwarm: jest.fn().mockReturnValue('mock-swarm'),
      getMemoryUsage: jest.fn().mockReturnValue({
        heapUsed: 1024,
        heapTotal: 2048
      })
    }
  })
};

// Environment detection
global.testEnv = {
  isCI: process.env.CI === 'true',
  isGitHub: process.env.GITHUB_ACTIONS === 'true',
  nodeVersion: process.version,
  platform: process.platform,
  arch: process.arch
};

// Suppress deprecation warnings in tests
process.on('warning', warning => {
  if (warning.name === 'DeprecationWarning') {
    return; // Suppress deprecation warnings
  }
  console.warn(warning);
});

// Handle unhandled promise rejections in tests
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
  // Don't exit the process in tests, just log
});

// Cleanup after each test
afterEach(() => {
  // Clear all timers
  jest.clearAllTimers();

  // Clear all mocks
  jest.clearAllMocks();

  // Reset modules
  jest.resetModules();
});

// Global cleanup
afterAll(() => {
  // Final cleanup
  jest.restoreAllMocks();
});
console.log('Jest setup completed successfully');
console.log('Test environment:', global.testEnv);
console.log('WebAssembly support:', typeof global.WebAssembly !== 'undefined');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,