{"version":3,"names":["describe","it","expect","jest","beforeEach","afterEach","RuvSwarm","NeuralAgent","SwarmPersistence","initialMemory","process","memoryUsage","global","gc","arrays","lastSuccessfulSize","exp","size","Math","pow","arr","Array","fill","push","currentMemory","heapUsed","error","message","toMatch","toBeGreaterThan","length","smallArrays","largeArrays","i","splice","memoryAfterGC","toBeLessThan","objects","obj1","id","data","obj2","ref","memoryAfterCleanup","_asyncToGenerator","fs","handles","handle","open","Promise","allSettled","map","_handle$close","close","call","TimerObject","constructor","timers","destroyed","startTimer","interval","timer","setInterval","clearInterval","destroy","forEach","promises","obj","random","resolve","setTimeout","all","toBe","toHaveLength","weakMap","WeakMap","weakSet","WeakSet","strongRefs","set","add","weakMapCount","weakSetCount","has","FinalizationRegistry","cleanupCallbacks","registry","heldValue","register","toBeGreaterThanOrEqual","EventEmitter","emitter","initialListeners","listenerCount","listeners","listener","on","removeListener","removeAllListeners","buffers","totalSize","buffer","Buffer","alloc","ResourcePool","maxSize","resources","available","allocated","acquire","_this","pop","resource","acquired","Error","release","pool","rejects","toThrow","newResource","toBeDefined","ConcurrentResource","users","maxUsers","use","_this2","catch","results","successful","filter","r","failed","allocations","memoryUsed","import","meta","url","argv","console","log","run","__filename"],"sources":["memory-resource-edge-cases.test.js"],"sourcesContent":["/**\n * Memory and Resource Management Edge Cases\n * Tests memory limits, resource cleanup, garbage collection scenarios\n */\n\nimport { describe, it, expect, jest, beforeEach, afterEach } from '@jest/globals';\nimport { RuvSwarm } from '../../src/index-enhanced.js';\nimport { NeuralAgent } from '../../src/neural-agent.js';\nimport { SwarmPersistence } from '../../src/persistence.js';\n\ndescribe('Memory and Resource Edge Cases', () => {\n  let initialMemory;\n\n  beforeEach(() => {\n    initialMemory = process.memoryUsage();\n    // Force garbage collection if available\n    if (global.gc) {\n      global.gc();\n    }\n  });\n\n  afterEach(() => {\n    // Cleanup after each test\n    if (global.gc) {\n      global.gc();\n    }\n  });\n\n  describe('Memory Pressure Scenarios', () => {\n    it('should handle large array allocations', () => {\n      const arrays = [];\n      let lastSuccessfulSize = 0;\n\n      try {\n        // Try increasingly large allocations\n        for (let exp = 10; exp < 28; exp++) { // Up to ~256MB\n          const size = Math.pow(2, exp);\n          const arr = new Array(size).fill(1);\n          arrays.push(arr);\n          lastSuccessfulSize = size;\n          \n          // Check memory usage periodically\n          if (exp % 3 === 0) {\n            const currentMemory = process.memoryUsage();\n            if (currentMemory.heapUsed > initialMemory.heapUsed + 500 * 1024 * 1024) {\n              // Stop if we've allocated too much\n              break;\n            }\n          }\n        }\n      } catch (error) {\n        // Expected - system ran out of memory\n        expect(error.message).toMatch(/out of memory|Maximum call stack/i);\n      }\n\n      expect(lastSuccessfulSize).toBeGreaterThan(0);\n      \n      // Cleanup\n      arrays.length = 0;\n      if (global.gc) global.gc();\n    });\n\n    it('should handle memory fragmentation scenarios', () => {\n      const smallArrays = [];\n      const largeArrays = [];\n\n      try {\n        // Create fragmentation by alternating small and large allocations\n        for (let i = 0; i < 1000; i++) {\n          if (i % 2 === 0) {\n            smallArrays.push(new Array(1000).fill(i));\n          } else {\n            largeArrays.push(new Array(100000).fill(i));\n          }\n\n          // Periodically free some small arrays to create holes\n          if (i % 100 === 99 && smallArrays.length > 50) {\n            smallArrays.splice(0, 25);\n          }\n        }\n\n        // Force GC to see how well it handles fragmentation\n        if (global.gc) {\n          global.gc();\n        }\n\n        const memoryAfterGC = process.memoryUsage();\n        expect(memoryAfterGC.heapUsed).toBeLessThan(\n          initialMemory.heapUsed + 200 * 1024 * 1024 // 200MB limit\n        );\n\n      } finally {\n        // Cleanup\n        smallArrays.length = 0;\n        largeArrays.length = 0;\n      }\n    });\n\n    it('should handle circular reference memory leaks', () => {\n      const objects = [];\n      \n      // Create circular references\n      for (let i = 0; i < 10000; i++) {\n        const obj1 = { id: i, data: new Array(100).fill(i) };\n        const obj2 = { id: i + 10000, data: new Array(100).fill(i + 10000) };\n        \n        // Create circular reference\n        obj1.ref = obj2;\n        obj2.ref = obj1;\n        \n        objects.push(obj1, obj2);\n      }\n\n      // Remove references but keep some circular ones\n      for (let i = 0; i < objects.length; i += 4) {\n        objects[i] = null;\n      }\n\n      // Force garbage collection\n      if (global.gc) {\n        global.gc();\n      }\n\n      const memoryAfterCleanup = process.memoryUsage();\n      \n      // Modern JS engines should handle circular references\n      expect(memoryAfterCleanup.heapUsed).toBeLessThan(\n        initialMemory.heapUsed + 100 * 1024 * 1024\n      );\n    });\n  });\n\n  describe('Resource Cleanup Edge Cases', () => {\n    it('should cleanup file handles properly', async () => {\n      const fs = await import('fs/promises');\n      const handles = [];\n\n      try {\n        // Open many temporary file handles\n        for (let i = 0; i < 100; i++) {\n          try {\n            const handle = await fs.open('/tmp/test-file-${i}', 'w');\n            handles.push(handle);\n          } catch (error) {\n            // Some might fail due to system limits\n          }\n        }\n\n        expect(handles.length).toBeGreaterThan(0);\n\n      } finally {\n        // Cleanup all handles\n        await Promise.allSettled(\n          handles.map(handle => handle?.close?.())\n        );\n      }\n    });\n\n    it('should handle timer cleanup on object destruction', async () => {\n      class TimerObject {\n        constructor() {\n          this.timers = [];\n          this.destroyed = false;\n        }\n\n        startTimer(interval) {\n          const timer = setInterval(() => {\n            if (this.destroyed) {\n              clearInterval(timer);\n            }\n          }, interval);\n          this.timers.push(timer);\n        }\n\n        destroy() {\n          this.destroyed = true;\n          this.timers.forEach(timer => clearInterval(timer));\n          this.timers = [];\n        }\n      }\n\n      const objects = [];\n      \n      // Create objects with timers\n      const promises = [];\n      for (let i = 0; i < 50; i++) {\n        const obj = new TimerObject();\n        obj.startTimer(10);\n        objects.push(obj);\n        \n        // Destroy some objects randomly\n        if (Math.random() > 0.5) {\n          promises.push(\n            new Promise(resolve => {\n              setTimeout(() => {\n                obj.destroy();\n                resolve();\n              }, Math.random() * 100);\n            })\n          );\n        }\n      }\n\n      await Promise.all(promises);\n      \n      // Cleanup remaining objects\n      objects.forEach(obj => obj.destroy());\n      \n      // Verify cleanup\n      objects.forEach(obj => {\n        expect(obj.destroyed).toBe(true);\n        expect(obj.timers).toHaveLength(0);\n      });\n    });\n  });\n\n  describe('Garbage Collection Edge Cases', () => {\n    it('should handle WeakMap and WeakSet edge cases', () => {\n      const weakMap = new WeakMap();\n      const weakSet = new WeakSet();\n      const strongRefs = [];\n\n      // Create objects and weak references\n      for (let i = 0; i < 1000; i++) {\n        const obj = { id: i, data: new Array(100).fill(i) };\n        \n        weakMap.set(obj, `value-${i}`);\n        weakSet.add(obj);\n        \n        // Keep strong references to some objects\n        if (i % 3 === 0) {\n          strongRefs.push(obj);\n        }\n      }\n\n      // Force garbage collection\n      if (global.gc) {\n        global.gc();\n      }\n\n      // Check that weak references to unreferenced objects are cleaned up\n      let weakMapCount = 0;\n      let weakSetCount = 0;\n\n      strongRefs.forEach(obj => {\n        if (weakMap.has(obj)) weakMapCount++;\n        if (weakSet.has(obj)) weakSetCount++;\n      });\n\n      expect(weakMapCount).toBeGreaterThan(0);\n      expect(weakSetCount).toBeGreaterThan(0);\n    });\n\n    it('should handle finalization registry edge cases', () => {\n      if (typeof FinalizationRegistry === 'undefined') {\n        // Skip if not supported\n        return;\n      }\n\n      const cleanupCallbacks = [];\n      const registry = new FinalizationRegistry((heldValue) => {\n        cleanupCallbacks.push(heldValue);\n      });\n\n      // Create objects and register for cleanup\n      const objects = [];\n      for (let i = 0; i < 100; i++) {\n        const obj = { id: i };\n        objects.push(obj);\n        registry.register(obj, `cleanup-${i}`);\n      }\n\n      // Remove references to half the objects\n      objects.splice(0, 50);\n\n      // Force multiple GCs\n      if (global.gc) {\n        global.gc();\n        global.gc();\n        global.gc();\n      }\n\n      // Note: Finalization is not guaranteed to run immediately\n      // This test mainly verifies no errors occur\n      expect(cleanupCallbacks.length).toBeGreaterThanOrEqual(0);\n    });\n  });\n\n  describe('Memory Monitoring Edge Cases', () => {\n    it('should detect memory leaks in event listeners', async () => {\n      const { EventEmitter } = await import('events');\n      const emitter = new EventEmitter();\n      const initialListeners = emitter.listenerCount('test');\n\n      // Add many listeners\n      const listeners = [];\n      for (let i = 0; i < 1000; i++) {\n        const listener = () => { /* noop */ };\n        listeners.push(listener);\n        emitter.on('test', listener);\n      }\n\n      expect(emitter.listenerCount('test')).toBe(initialListeners + 1000);\n\n      // Remove only half\n      for (let i = 0; i < 500; i++) {\n        emitter.removeListener('test', listeners[i]);\n      }\n\n      expect(emitter.listenerCount('test')).toBe(initialListeners + 500);\n\n      // Cleanup remaining\n      emitter.removeAllListeners('test');\n      expect(emitter.listenerCount('test')).toBe(0);\n    });\n\n    it('should handle buffer overflow scenarios', () => {\n      const buffers = [];\n      let totalSize = 0;\n\n      try {\n        // Create increasingly large buffers\n        for (let exp = 10; exp < 26; exp++) { // Up to 64MB\n          const size = Math.pow(2, exp);\n          const buffer = Buffer.alloc(size);\n          buffers.push(buffer);\n          totalSize += size;\n\n          // Fill with pattern to ensure allocation\n          buffer.fill(exp % 256);\n\n          // Stop if we've allocated too much\n          if (totalSize > 100 * 1024 * 1024) { // 100MB\n            break;\n          }\n        }\n\n        expect(totalSize).toBeGreaterThan(0);\n\n      } catch (error) {\n        // Expected on systems with low memory\n        expect(error.message).toMatch(/out of memory|Invalid array length/i);\n      } finally {\n        // Cleanup\n        buffers.length = 0;\n      }\n    });\n  });\n\n  describe('Resource Pool Edge Cases', () => {\n    it('should handle resource pool exhaustion', async () => {\n      class ResourcePool {\n        constructor(maxSize = 10) {\n          this.resources = [];\n          this.available = [];\n          this.maxSize = maxSize;\n          this.allocated = 0;\n        }\n\n        async acquire() {\n          if (this.available.length > 0) {\n            return this.available.pop();\n          }\n\n          if (this.allocated < this.maxSize) {\n            const resource = { id: this.allocated++, acquired: true };\n            this.resources.push(resource);\n            return resource;\n          }\n\n          throw new Error('Pool exhausted');\n        }\n\n        release(resource) {\n          resource.acquired = false;\n          this.available.push(resource);\n        }\n\n        destroy() {\n          this.resources = [];\n          this.available = [];\n          this.allocated = 0;\n        }\n      }\n\n      const pool = new ResourcePool(5);\n      const acquired = [];\n\n      // Acquire all resources\n      for (let i = 0; i < 5; i++) {\n        const resource = await pool.acquire();\n        acquired.push(resource);\n      }\n\n      // Next acquisition should fail\n      await expect(pool.acquire()).rejects.toThrow('Pool exhausted');\n\n      // Release one and try again\n      pool.release(acquired[0]);\n      const newResource = await pool.acquire();\n      expect(newResource).toBeDefined();\n\n      pool.destroy();\n    });\n\n    it('should handle concurrent resource access', async () => {\n      class ConcurrentResource {\n        constructor() {\n          this.users = 0;\n          this.maxUsers = 3;\n        }\n\n        async use() {\n          if (this.users >= this.maxUsers) {\n            throw new Error('Resource busy');\n          }\n\n          this.users++;\n          try {\n            // Simulate work\n            await new Promise(resolve => setTimeout(resolve, 10));\n            return `Used by ${this.users} users`;\n          } finally {\n            this.users--;\n          }\n        }\n      }\n\n      const resource = new ConcurrentResource();\n      const promises = [];\n\n      // Try to use resource concurrently\n      for (let i = 0; i < 10; i++) {\n        promises.push(\n          resource.use().catch(error => ({ error: error.message }))\n        );\n      }\n\n      const results = await Promise.all(promises);\n      const successful = results.filter(r => !r.error);\n      const failed = results.filter(r => r.error);\n\n      expect(successful.length).toBeGreaterThan(0);\n      expect(failed.length).toBeGreaterThan(0);\n      expect(resource.users).toBe(0); // All should be released\n    });\n  });\n\n  describe('Memory Allocation Patterns', () => {\n    it('should handle different allocation patterns', () => {\n      const allocations = [];\n\n      // Pattern 1: Many small allocations\n      for (let i = 0; i < 10000; i++) {\n        allocations.push(new Array(10).fill(i));\n      }\n\n      // Pattern 2: Few large allocations\n      for (let i = 0; i < 10; i++) {\n        allocations.push(new Array(100000).fill(i));\n      }\n\n      // Pattern 3: Exponential allocation sizes\n      for (let exp = 1; exp < 16; exp++) {\n        const size = Math.pow(2, exp);\n        allocations.push(new Array(size).fill(exp));\n      }\n\n      const memoryUsed = process.memoryUsage();\n      expect(memoryUsed.heapUsed).toBeGreaterThan(initialMemory.heapUsed);\n\n      // Cleanup half randomly\n      for (let i = allocations.length - 1; i >= 0; i -= 2) {\n        allocations.splice(i, 1);\n      }\n\n      if (global.gc) {\n        global.gc();\n      }\n\n      const memoryAfterCleanup = process.memoryUsage();\n      expect(memoryAfterCleanup.heapUsed).toBeLessThan(memoryUsed.heapUsed);\n    });\n  });\n});\n\n// Run tests when executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  console.log('Running memory and resource edge case tests...');\n  \n  // Run all tests\n  const { run } = await import('../test-runner.js');\n  await run(__filename);\n}"],"mappings":"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","ignoreList":[]}