b807a0c6e8543530523b309370a9a71f
const _excluded = ["a"];
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * Basic Jest test to verify the test infrastructure
 */

describe('Test Infrastructure', () => {
  test('should run basic JavaScript test', () => {
    expect(1 + 1).toBe(2);
  });
  test('should handle async operations', /*#__PURE__*/_asyncToGenerator(function* () {
    const promise = Promise.resolve('test');
    const result = yield promise;
    expect(result).toBe('test');
  }));
  test('should have access to Node.js globals', () => {
    expect(global).toBeDefined();
    expect(process).toBeDefined();
    expect(console).toBeDefined();
  });
  test('should work with modern JavaScript features', () => {
    const obj = {
      a: 1,
      b: 2
    };
    const {
        a
      } = obj,
      rest = _objectWithoutProperties(obj, _excluded);
    expect(a).toBe(1);
    expect(rest).toEqual({
      b: 2
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZXNjcmliZSIsInRlc3QiLCJleHBlY3QiLCJ0b0JlIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJwcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZXN1bHQiLCJnbG9iYWwiLCJ0b0JlRGVmaW5lZCIsInByb2Nlc3MiLCJjb25zb2xlIiwib2JqIiwiYSIsImIiLCJyZXN0IiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiX2V4Y2x1ZGVkIiwidG9FcXVhbCJdLCJzb3VyY2VzIjpbImJhc2ljLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBCYXNpYyBKZXN0IHRlc3QgdG8gdmVyaWZ5IHRoZSB0ZXN0IGluZnJhc3RydWN0dXJlXG4gKi9cblxuZGVzY3JpYmUoJ1Rlc3QgSW5mcmFzdHJ1Y3R1cmUnLCAoKSA9PiB7XG4gIHRlc3QoJ3Nob3VsZCBydW4gYmFzaWMgSmF2YVNjcmlwdCB0ZXN0JywgKCkgPT4ge1xuICAgIGV4cGVjdCgxICsgMSkudG9CZSgyKTtcbiAgfSk7XG5cbiAgdGVzdCgnc2hvdWxkIGhhbmRsZSBhc3luYyBvcGVyYXRpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoJ3Rlc3QnKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcm9taXNlO1xuICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoJ3Rlc3QnKTtcbiAgfSk7XG5cbiAgdGVzdCgnc2hvdWxkIGhhdmUgYWNjZXNzIHRvIE5vZGUuanMgZ2xvYmFscycsICgpID0+IHtcbiAgICBleHBlY3QoZ2xvYmFsKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChwcm9jZXNzKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChjb25zb2xlKS50b0JlRGVmaW5lZCgpO1xuICB9KTtcblxuICB0ZXN0KCdzaG91bGQgd29yayB3aXRoIG1vZGVybiBKYXZhU2NyaXB0IGZlYXR1cmVzJywgKCkgPT4ge1xuICAgIGNvbnN0IG9iaiA9IHsgYTogMSwgYjogMiB9O1xuICAgIGNvbnN0IHsgYSwgLi4ucmVzdCB9ID0gb2JqO1xuICAgIGV4cGVjdChhKS50b0JlKDEpO1xuICAgIGV4cGVjdChyZXN0KS50b0VxdWFsKHsgYjogMiB9KTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBOztBQUVBQSxRQUFRLENBQUMscUJBQXFCLEVBQUUsTUFBTTtFQUNwQ0MsSUFBSSxDQUFDLGtDQUFrQyxFQUFFLE1BQU07SUFDN0NDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUNDLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDdkIsQ0FBQyxDQUFDO0VBRUZGLElBQUksQ0FBQyxnQ0FBZ0MsZUFBQUcsaUJBQUEsQ0FBRSxhQUFZO0lBQ2pELE1BQU1DLE9BQU8sR0FBR0MsT0FBTyxDQUFDQyxPQUFPLENBQUMsTUFBTSxDQUFDO0lBQ3ZDLE1BQU1DLE1BQU0sU0FBU0gsT0FBTztJQUM1QkgsTUFBTSxDQUFDTSxNQUFNLENBQUMsQ0FBQ0wsSUFBSSxDQUFDLE1BQU0sQ0FBQztFQUM3QixDQUFDLEVBQUM7RUFFRkYsSUFBSSxDQUFDLHVDQUF1QyxFQUFFLE1BQU07SUFDbERDLE1BQU0sQ0FBQ08sTUFBTSxDQUFDLENBQUNDLFdBQVcsQ0FBQyxDQUFDO0lBQzVCUixNQUFNLENBQUNTLE9BQU8sQ0FBQyxDQUFDRCxXQUFXLENBQUMsQ0FBQztJQUM3QlIsTUFBTSxDQUFDVSxPQUFPLENBQUMsQ0FBQ0YsV0FBVyxDQUFDLENBQUM7RUFDL0IsQ0FBQyxDQUFDO0VBRUZULElBQUksQ0FBQyw2Q0FBNkMsRUFBRSxNQUFNO0lBQ3hELE1BQU1ZLEdBQUcsR0FBRztNQUFFQyxDQUFDLEVBQUUsQ0FBQztNQUFFQyxDQUFDLEVBQUU7SUFBRSxDQUFDO0lBQzFCLE1BQU07UUFBRUQ7TUFBVyxDQUFDLEdBQUdELEdBQUc7TUFBWkcsSUFBSSxHQUFBQyx3QkFBQSxDQUFLSixHQUFHLEVBQUFLLFNBQUE7SUFDMUJoQixNQUFNLENBQUNZLENBQUMsQ0FBQyxDQUFDWCxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2pCRCxNQUFNLENBQUNjLElBQUksQ0FBQyxDQUFDRyxPQUFPLENBQUM7TUFBRUosQ0FBQyxFQUFFO0lBQUUsQ0FBQyxDQUFDO0VBQ2hDLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==