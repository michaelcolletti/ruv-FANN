b413297581486cc5bfc0163a250f156a
/* istanbul ignore next */
function cov_2ifhk2nvfs() {
  var path = "/workspaces/ruv-FANN/ruv-swarm/npm/src/memory-config.js";
  var hash = "b1284264c0ad345d0e63b5a7be103fd8ae637955";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/ruv-FANN/ruv-swarm/npm/src/memory-config.js",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 30
        },
        end: {
          line: 38,
          column: 1
        }
      },
      "1": {
        start: {
          line: 40,
          column: 0
        },
        end: {
          line: 42,
          column: 2
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b1284264c0ad345d0e63b5a7be103fd8ae637955"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2ifhk2nvfs = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2ifhk2nvfs();
/**
 * Memory configuration for cognitive patterns
 * Separated to avoid circular dependencies
 */

// Memory configuration for optimized patterns
const PATTERN_MEMORY_CONFIG =
/* istanbul ignore next */
(cov_2ifhk2nvfs().s[0]++, {
  convergent: {
    baseMemory: 250,
    // Reduced from 291 MB
    poolSharing: 0.8,
    // 80% shared memory
    lazyLoading: true
  },
  divergent: {
    baseMemory: 280,
    // Reduced from 473 MB
    poolSharing: 0.7,
    // 70% shared memory
    lazyLoading: true
  },
  lateral: {
    baseMemory: 300,
    // Reduced from 557 MB
    poolSharing: 0.65,
    // 65% shared memory
    lazyLoading: true
  },
  systems: {
    baseMemory: 270,
    poolSharing: 0.75,
    lazyLoading: true
  },
  critical: {
    baseMemory: 260,
    poolSharing: 0.75,
    lazyLoading: true
  },
  abstract: {
    baseMemory: 265,
    poolSharing: 0.75,
    lazyLoading: true
  }
});
/* istanbul ignore next */
cov_2ifhk2nvfs().s[1]++;
module.exports = {
  PATTERN_MEMORY_CONFIG
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMmlmaGsybnZmcyIsImFjdHVhbENvdmVyYWdlIiwiUEFUVEVSTl9NRU1PUllfQ09ORklHIiwicyIsImNvbnZlcmdlbnQiLCJiYXNlTWVtb3J5IiwicG9vbFNoYXJpbmciLCJsYXp5TG9hZGluZyIsImRpdmVyZ2VudCIsImxhdGVyYWwiLCJzeXN0ZW1zIiwiY3JpdGljYWwiLCJhYnN0cmFjdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJtZW1vcnktY29uZmlnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTWVtb3J5IGNvbmZpZ3VyYXRpb24gZm9yIGNvZ25pdGl2ZSBwYXR0ZXJuc1xuICogU2VwYXJhdGVkIHRvIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY2llc1xuICovXG5cbi8vIE1lbW9yeSBjb25maWd1cmF0aW9uIGZvciBvcHRpbWl6ZWQgcGF0dGVybnNcbmNvbnN0IFBBVFRFUk5fTUVNT1JZX0NPTkZJRyA9IHtcbiAgY29udmVyZ2VudDoge1xuICAgIGJhc2VNZW1vcnk6IDI1MCwgLy8gUmVkdWNlZCBmcm9tIDI5MSBNQlxuICAgIHBvb2xTaGFyaW5nOiAwLjgsIC8vIDgwJSBzaGFyZWQgbWVtb3J5XG4gICAgbGF6eUxvYWRpbmc6IHRydWUsXG4gIH0sXG4gIGRpdmVyZ2VudDoge1xuICAgIGJhc2VNZW1vcnk6IDI4MCwgLy8gUmVkdWNlZCBmcm9tIDQ3MyBNQlxuICAgIHBvb2xTaGFyaW5nOiAwLjcsIC8vIDcwJSBzaGFyZWQgbWVtb3J5XG4gICAgbGF6eUxvYWRpbmc6IHRydWUsXG4gIH0sXG4gIGxhdGVyYWw6IHtcbiAgICBiYXNlTWVtb3J5OiAzMDAsIC8vIFJlZHVjZWQgZnJvbSA1NTcgTUJcbiAgICBwb29sU2hhcmluZzogMC42NSwgLy8gNjUlIHNoYXJlZCBtZW1vcnlcbiAgICBsYXp5TG9hZGluZzogdHJ1ZSxcbiAgfSxcbiAgc3lzdGVtczoge1xuICAgIGJhc2VNZW1vcnk6IDI3MCxcbiAgICBwb29sU2hhcmluZzogMC43NSxcbiAgICBsYXp5TG9hZGluZzogdHJ1ZSxcbiAgfSxcbiAgY3JpdGljYWw6IHtcbiAgICBiYXNlTWVtb3J5OiAyNjAsXG4gICAgcG9vbFNoYXJpbmc6IDAuNzUsXG4gICAgbGF6eUxvYWRpbmc6IHRydWUsXG4gIH0sXG4gIGFic3RyYWN0OiB7XG4gICAgYmFzZU1lbW9yeTogMjY1LFxuICAgIHBvb2xTaGFyaW5nOiAwLjc1LFxuICAgIGxhenlMb2FkaW5nOiB0cnVlLFxuICB9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFBBVFRFUk5fTUVNT1JZX0NPTkZJRyxcbn07Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWVZO0lBQUFBLGNBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFELGNBQUE7QUFmWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU1FLHFCQUFxQjtBQUFBO0FBQUEsQ0FBQUYsY0FBQSxHQUFBRyxDQUFBLE9BQUc7RUFDNUJDLFVBQVUsRUFBRTtJQUNWQyxVQUFVLEVBQUUsR0FBRztJQUFFO0lBQ2pCQyxXQUFXLEVBQUUsR0FBRztJQUFFO0lBQ2xCQyxXQUFXLEVBQUU7RUFDZixDQUFDO0VBQ0RDLFNBQVMsRUFBRTtJQUNUSCxVQUFVLEVBQUUsR0FBRztJQUFFO0lBQ2pCQyxXQUFXLEVBQUUsR0FBRztJQUFFO0lBQ2xCQyxXQUFXLEVBQUU7RUFDZixDQUFDO0VBQ0RFLE9BQU8sRUFBRTtJQUNQSixVQUFVLEVBQUUsR0FBRztJQUFFO0lBQ2pCQyxXQUFXLEVBQUUsSUFBSTtJQUFFO0lBQ25CQyxXQUFXLEVBQUU7RUFDZixDQUFDO0VBQ0RHLE9BQU8sRUFBRTtJQUNQTCxVQUFVLEVBQUUsR0FBRztJQUNmQyxXQUFXLEVBQUUsSUFBSTtJQUNqQkMsV0FBVyxFQUFFO0VBQ2YsQ0FBQztFQUNESSxRQUFRLEVBQUU7SUFDUk4sVUFBVSxFQUFFLEdBQUc7SUFDZkMsV0FBVyxFQUFFLElBQUk7SUFDakJDLFdBQVcsRUFBRTtFQUNmLENBQUM7RUFDREssUUFBUSxFQUFFO0lBQ1JQLFVBQVUsRUFBRSxHQUFHO0lBQ2ZDLFdBQVcsRUFBRSxJQUFJO0lBQ2pCQyxXQUFXLEVBQUU7RUFDZjtBQUNGLENBQUM7QUFBQztBQUFBUCxjQUFBLEdBQUFHLENBQUE7QUFFRlUsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZlo7QUFDRixDQUFDIiwiaWdub3JlTGlzdCI6W119