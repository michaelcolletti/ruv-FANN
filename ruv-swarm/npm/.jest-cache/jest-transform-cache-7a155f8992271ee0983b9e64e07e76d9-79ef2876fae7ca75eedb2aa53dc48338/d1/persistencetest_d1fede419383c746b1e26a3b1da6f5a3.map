{"version":3,"names":["assert","sqlite3","require","verbose","path","promises","fs","v4","uuidv4","fileURLToPath","dirname","__filename","import","meta","url","__dirname","TEST_DB_PATH","join","SwarmPersistence","constructor","dbPath","db","connect","_this","_asyncToGenerator","Promise","resolve","reject","Database","err","close","_this2","initSchema","_this3","schema","exec","createAgent","agent","_this4","sql","run","id","name","agent_type","status","JSON","stringify","capabilities","getAgent","_this5","row","get","parse","updateAgentStatus","_this6","createTask","task","_this7","task_type","description","priority","assigned_agent","updateTaskStatus","_x","_x2","_this8","result","apply","arguments","storeMemory","_x3","_x4","_this9","key","value","ttlSeconds","expiresAt","Date","now","toISOString","getMemory","_this0","cleanupExpiredMemory","_this1","saveSwarmState","state","_this10","getLatestSwarmState","_this11","state_data","saveNeuralWeights","_x5","_x6","_x7","_this12","agentId","layerIndex","weights","biases","Buffer","from","getNeuralWeights","_this13","all","recordMetric","_x8","_x9","_this14","metricType","metadata","getMetrics","_x0","_this15","since","params","push","lastID","changes","rows","runPersistenceTests","_runPersistenceTests","console","log","results","passed","failed","errors","test","_x1","_x10","_test","fn","error","message","max_tokens","specialization","retrieved","strictEqual","deepStrictEqual","started_at","completed_at","framework","version","features","temp","setTimeout","topology","agents","active_tasks","configuration","max_agents","coordination_mode","neural_enabled","Float32Array","savedWeights","length","layer_index","cpuMetrics","allMetrics","i","count","taskId","phase","taskState","testKey","testValue","important","timestamp","valid","startTime","index","insertTime","queryStart","coders","queryTime","unlink","repeat","forEach","e","process","argv","then","exit","catch"],"sources":["persistence.test.js"],"sourcesContent":["/**\n * Persistence Layer Tests for ruv-swarm\n * Tests database persistence, state recovery, and data integrity\n */\n\nimport assert from 'assert';\nconst sqlite3 = require('sqlite3').verbose();\nimport path from 'path';\nimport { promises as fs } from 'fs';\nimport { v4 as uuidv4 } from 'uuid';\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\n// Test database path\nconst TEST_DB_PATH = path.join(__dirname, 'test-swarm.db');\n\n// SQLite persistence wrapper\nclass SwarmPersistence {\n  constructor(dbPath) {\n    this.dbPath = dbPath;\n    this.db = null;\n  }\n\n  async connect() {\n    return new Promise((resolve, reject) => {\n      this.db = new sqlite3.Database(this.dbPath, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  async close() {\n    return new Promise((resolve, reject) => {\n      if (this.db) {\n        this.db.close((err) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      } else {\n        resolve();\n      }\n    });\n  }\n\n  async initSchema() {\n    const schema = `\n            -- Agents table\n            CREATE TABLE IF NOT EXISTS agents (\n                id TEXT PRIMARY KEY,\n                name TEXT NOT NULL,\n                agent_type TEXT NOT NULL,\n                status TEXT DEFAULT 'active',\n                capabilities TEXT,\n                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n            );\n\n            -- Tasks table\n            CREATE TABLE IF NOT EXISTS tasks (\n                id TEXT PRIMARY KEY,\n                task_type TEXT NOT NULL,\n                description TEXT NOT NULL,\n                priority TEXT DEFAULT 'medium',\n                status TEXT DEFAULT 'pending',\n                assigned_agent TEXT,\n                result TEXT,\n                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                started_at TIMESTAMP,\n                completed_at TIMESTAMP,\n                FOREIGN KEY (assigned_agent) REFERENCES agents(id)\n            );\n\n            -- Memory storage table\n            CREATE TABLE IF NOT EXISTS memory (\n                key TEXT PRIMARY KEY,\n                value TEXT NOT NULL,\n                ttl_seconds INTEGER,\n                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                expires_at TIMESTAMP\n            );\n\n            -- Swarm state table\n            CREATE TABLE IF NOT EXISTS swarm_state (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                state_data TEXT NOT NULL,\n                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n            );\n\n            -- Agent messages table\n            CREATE TABLE IF NOT EXISTS agent_messages (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                agent_id TEXT NOT NULL,\n                message_type TEXT NOT NULL,\n                content TEXT NOT NULL,\n                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                FOREIGN KEY (agent_id) REFERENCES agents(id)\n            );\n\n            -- Performance metrics table\n            CREATE TABLE IF NOT EXISTS metrics (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                metric_type TEXT NOT NULL,\n                agent_id TEXT,\n                value REAL NOT NULL,\n                metadata TEXT,\n                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n            );\n\n            -- Neural network weights table\n            CREATE TABLE IF NOT EXISTS neural_weights (\n                id TEXT PRIMARY KEY,\n                agent_id TEXT NOT NULL,\n                layer_index INTEGER NOT NULL,\n                weights BLOB NOT NULL,\n                biases BLOB,\n                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                FOREIGN KEY (agent_id) REFERENCES agents(id)\n            );\n\n            -- Create indexes\n            CREATE INDEX IF NOT EXISTS idx_tasks_status ON tasks(status);\n            CREATE INDEX IF NOT EXISTS idx_tasks_assigned ON tasks(assigned_agent);\n            CREATE INDEX IF NOT EXISTS idx_memory_expires ON memory(expires_at);\n            CREATE INDEX IF NOT EXISTS idx_messages_agent ON agent_messages(agent_id);\n            CREATE INDEX IF NOT EXISTS idx_metrics_timestamp ON metrics(timestamp);\n        `;\n\n    return new Promise((resolve, reject) => {\n      this.db.exec(schema, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  // Agent operations\n  async createAgent(agent) {\n    const sql = `\n            INSERT INTO agents (id, name, agent_type, status, capabilities)\n            VALUES (?, ?, ?, ?, ?)\n        `;\n    return this.run(sql, [\n      agent.id,\n      agent.name,\n      agent.agent_type,\n      agent.status || 'active',\n      JSON.stringify(agent.capabilities || {}),\n    ]);\n  }\n\n  async getAgent(id) {\n    const sql = 'SELECT * FROM agents WHERE id = ?';\n    const row = await this.get(sql, [id]);\n    if (row) {\n      row.capabilities = JSON.parse(row.capabilities);\n    }\n    return row;\n  }\n\n  async updateAgentStatus(id, status) {\n    const sql = `\n            UPDATE agents \n            SET status = ?, updated_at = CURRENT_TIMESTAMP \n            WHERE id = ?\n        `;\n    return this.run(sql, [status, id]);\n  }\n\n  // Task operations\n  async createTask(task) {\n    const sql = `\n            INSERT INTO tasks (id, task_type, description, priority, status, assigned_agent)\n            VALUES (?, ?, ?, ?, ?, ?)\n        `;\n    return this.run(sql, [\n      task.id,\n      task.task_type,\n      task.description,\n      task.priority || 'medium',\n      task.status || 'pending',\n      task.assigned_agent,\n    ]);\n  }\n\n  async updateTaskStatus(id, status, result = null) {\n    const sql = `\n            UPDATE tasks \n            SET status = ?, \n                result = ?,\n                started_at = CASE WHEN ? = 'in_progress' THEN CURRENT_TIMESTAMP ELSE started_at END,\n                completed_at = CASE WHEN ? = 'completed' THEN CURRENT_TIMESTAMP ELSE completed_at END\n            WHERE id = ?\n        `;\n    return this.run(sql, [status, result, status, status, id]);\n  }\n\n  // Memory operations\n  async storeMemory(key, value, ttlSeconds = null) {\n    const sql = `\n            INSERT OR REPLACE INTO memory (key, value, ttl_seconds, expires_at)\n            VALUES (?, ?, ?, ?)\n        `;\n    const expiresAt = ttlSeconds\n      ? new Date(Date.now() + ttlSeconds * 1000).toISOString()\n      : null;\n    return this.run(sql, [key, JSON.stringify(value), ttlSeconds, expiresAt]);\n  }\n\n  async getMemory(key) {\n    const sql = `\n            SELECT * FROM memory \n            WHERE key = ? \n            AND (expires_at IS NULL OR expires_at > CURRENT_TIMESTAMP)\n        `;\n    const row = await this.get(sql, [key]);\n    if (row) {\n      return JSON.parse(row.value);\n    }\n    return null;\n  }\n\n  async cleanupExpiredMemory() {\n    const sql = 'DELETE FROM memory WHERE expires_at <= CURRENT_TIMESTAMP';\n    return this.run(sql);\n  }\n\n  // State operations\n  async saveSwarmState(state) {\n    const sql = 'INSERT INTO swarm_state (state_data) VALUES (?)';\n    return this.run(sql, [JSON.stringify(state)]);\n  }\n\n  async getLatestSwarmState() {\n    const sql = 'SELECT * FROM swarm_state ORDER BY timestamp DESC LIMIT 1';\n    const row = await this.get(sql);\n    if (row) {\n      return JSON.parse(row.state_data);\n    }\n    return null;\n  }\n\n  // Neural weight operations\n  async saveNeuralWeights(agentId, layerIndex, weights, biases = null) {\n    const sql = `\n            INSERT OR REPLACE INTO neural_weights (id, agent_id, layer_index, weights, biases)\n            VALUES (?, ?, ?, ?, ?)\n        `;\n    const id = `${agentId}_layer_${layerIndex}`;\n    return this.run(sql, [\n      id,\n      agentId,\n      layerIndex,\n      Buffer.from(weights),\n      biases ? Buffer.from(biases) : null,\n    ]);\n  }\n\n  async getNeuralWeights(agentId) {\n    const sql = 'SELECT * FROM neural_weights WHERE agent_id = ? ORDER BY layer_index';\n    return this.all(sql, [agentId]);\n  }\n\n  // Metrics operations\n  async recordMetric(metricType, value, agentId = null, metadata = null) {\n    const sql = `\n            INSERT INTO metrics (metric_type, agent_id, value, metadata)\n            VALUES (?, ?, ?, ?)\n        `;\n    return this.run(sql, [\n      metricType,\n      agentId,\n      value,\n      metadata ? JSON.stringify(metadata) : null,\n    ]);\n  }\n\n  async getMetrics(metricType, since = null, agentId = null) {\n    let sql = 'SELECT * FROM metrics WHERE metric_type = ?';\n    const params = [metricType];\n\n    if (since) {\n      sql += ' AND timestamp >= ?';\n      params.push(since);\n    }\n\n    if (agentId) {\n      sql += ' AND agent_id = ?';\n      params.push(agentId);\n    }\n\n    sql += ' ORDER BY timestamp DESC';\n    return this.all(sql, params);\n  }\n\n  // Helper methods\n  run(sql, params = []) {\n    return new Promise((resolve, reject) => {\n      this.db.run(sql, params, function(err) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve({ lastID: this.lastID, changes: this.changes });\n        }\n      });\n    });\n  }\n\n  get(sql, params = []) {\n    return new Promise((resolve, reject) => {\n      this.db.get(sql, params, (err, row) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(row);\n        }\n      });\n    });\n  }\n\n  all(sql, params = []) {\n    return new Promise((resolve, reject) => {\n      this.db.all(sql, params, (err, rows) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(rows);\n        }\n      });\n    });\n  }\n}\n\n// Test suites\nasync function runPersistenceTests() {\n  console.log('🗄️  Starting Persistence Layer Tests\\n');\n\n  const results = {\n    passed: 0,\n    failed: 0,\n    errors: [],\n  };\n\n  const db = new SwarmPersistence(TEST_DB_PATH);\n\n  async function test(name, fn) {\n    try {\n      await fn();\n      console.log(`✅ ${name}`);\n      results.passed++;\n    } catch (error) {\n      console.error(`❌ ${name}`);\n      console.error(`   ${error.message}`);\n      results.failed++;\n      results.errors.push({ test: name, error: error.message });\n    }\n  }\n\n  try {\n    // Setup\n    await db.connect();\n    await db.initSchema();\n\n    // Test Agent Persistence\n    await test('Agent Creation and Retrieval', async() => {\n      const agent = {\n        id: uuidv4(),\n        name: 'test-researcher',\n        agent_type: 'researcher',\n        capabilities: {\n          max_tokens: 4096,\n          specialization: 'web_tech',\n        },\n      };\n\n      await db.createAgent(agent);\n      const retrieved = await db.getAgent(agent.id);\n\n      assert(retrieved);\n      assert.strictEqual(retrieved.id, agent.id);\n      assert.strictEqual(retrieved.name, agent.name);\n      assert.deepStrictEqual(retrieved.capabilities, agent.capabilities);\n    });\n\n    await test('Agent Status Update', async() => {\n      const agentId = uuidv4();\n      await db.createAgent({\n        id: agentId,\n        name: 'status-test',\n        agent_type: 'coder',\n      });\n\n      await db.updateAgentStatus(agentId, 'busy');\n      const agent = await db.getAgent(agentId);\n      assert.strictEqual(agent.status, 'busy');\n    });\n\n    // Test Task Persistence\n    await test('Task Creation and Status Updates', async() => {\n      const agentId = uuidv4();\n      await db.createAgent({\n        id: agentId,\n        name: 'task-agent',\n        agent_type: 'coder',\n      });\n\n      const task = {\n        id: uuidv4(),\n        task_type: 'development',\n        description: 'Implement user authentication',\n        priority: 'high',\n        assigned_agent: agentId,\n      };\n\n      await db.createTask(task);\n\n      // Update to in_progress\n      await db.updateTaskStatus(task.id, 'in_progress');\n      let retrieved = await db.get('SELECT * FROM tasks WHERE id = ?', [task.id]);\n      assert.strictEqual(retrieved.status, 'in_progress');\n      assert(retrieved.started_at);\n\n      // Complete task\n      await db.updateTaskStatus(task.id, 'completed', 'Successfully implemented');\n      retrieved = await db.get('SELECT * FROM tasks WHERE id = ?', [task.id]);\n      assert.strictEqual(retrieved.status, 'completed');\n      assert(retrieved.completed_at);\n      assert.strictEqual(retrieved.result, 'Successfully implemented');\n    });\n\n    // Test Memory Persistence\n    await test('Memory Storage and Retrieval', async() => {\n      const key = 'test_config';\n      const value = {\n        framework: 'React',\n        version: '18.0',\n        features: ['hooks', 'concurrent', 'suspense'],\n      };\n\n      await db.storeMemory(key, value);\n      const retrieved = await db.getMemory(key);\n      assert.deepStrictEqual(retrieved, value);\n    });\n\n    await test('Memory TTL Expiration', async() => {\n      const key = 'temp_data';\n      const value = { temp: true };\n\n      // Store with 1 second TTL\n      await db.storeMemory(key, value, 1);\n\n      // Should exist immediately\n      let retrieved = await db.getMemory(key);\n      assert.deepStrictEqual(retrieved, value);\n\n      // Wait for expiration\n      await new Promise(resolve => setTimeout(resolve, 1100));\n\n      // Should be expired\n      retrieved = await db.getMemory(key);\n      assert.strictEqual(retrieved, null);\n    });\n\n    // Test Swarm State Persistence\n    await test('Swarm State Save and Restore', async() => {\n      const state = {\n        topology: 'mesh',\n        agents: ['agent1', 'agent2', 'agent3'],\n        active_tasks: 5,\n        configuration: {\n          max_agents: 10,\n          coordination_mode: 'distributed',\n        },\n      };\n\n      await db.saveSwarmState(state);\n      const retrieved = await db.getLatestSwarmState();\n      assert.deepStrictEqual(retrieved, state);\n    });\n\n    // Test Neural Weights Persistence\n    await test('Neural Weight Storage', async() => {\n      const agentId = uuidv4();\n      await db.createAgent({\n        id: agentId,\n        name: 'neural-agent',\n        agent_type: 'analyst',\n        capabilities: { neural_enabled: true },\n      });\n\n      // Simulate neural network weights\n      const weights = new Float32Array([0.1, 0.2, 0.3, 0.4, 0.5]);\n      const biases = new Float32Array([0.01, 0.02]);\n\n      await db.saveNeuralWeights(agentId, 0, weights, biases);\n      await db.saveNeuralWeights(agentId, 1, weights);\n\n      const savedWeights = await db.getNeuralWeights(agentId);\n      assert.strictEqual(savedWeights.length, 2);\n      assert.strictEqual(savedWeights[0].layer_index, 0);\n      assert(savedWeights[0].biases);\n      assert.strictEqual(savedWeights[1].layer_index, 1);\n    });\n\n    // Test Metrics Persistence\n    await test('Metrics Recording and Retrieval', async() => {\n      const agentId = uuidv4();\n\n      // Record various metrics\n      await db.recordMetric('cpu_usage', 45.2, agentId);\n      await db.recordMetric('memory_usage', 512.8, agentId);\n      await db.recordMetric('task_completion_time', 3.5, agentId, {\n        task_type: 'research',\n      });\n\n      // Retrieve metrics\n      const cpuMetrics = await db.getMetrics('cpu_usage', null, agentId);\n      assert(cpuMetrics.length >= 1);\n      assert.strictEqual(cpuMetrics[0].value, 45.2);\n\n      const allMetrics = await db.all(\n        'SELECT DISTINCT metric_type FROM metrics WHERE agent_id = ?',\n        [agentId],\n      );\n      assert.strictEqual(allMetrics.length, 3);\n    });\n\n    // Test Concurrent Operations\n    await test('Concurrent Write Operations', async() => {\n      const promises = [];\n\n      // Create 10 agents concurrently\n      for (let i = 0; i < 10; i++) {\n        promises.push(db.createAgent({\n          id: uuidv4(),\n          name: `concurrent-agent-${i}`,\n          agent_type: 'coder',\n        }));\n      }\n\n      await Promise.all(promises);\n\n      const agents = await db.all('SELECT COUNT(*) as count FROM agents');\n      assert(agents[0].count >= 10);\n    });\n\n    // Test Transaction-like Operations\n    await test('Complex State Update', async() => {\n      const agentId = uuidv4();\n      const taskId = uuidv4();\n\n      // Create agent and task\n      await db.createAgent({\n        id: agentId,\n        name: 'complex-agent',\n        agent_type: 'analyst',\n      });\n\n      await db.createTask({\n        id: taskId,\n        task_type: 'analysis',\n        description: 'Complex analysis task',\n        assigned_agent: agentId,\n      });\n\n      // Update multiple states\n      await Promise.all([\n        db.updateAgentStatus(agentId, 'busy'),\n        db.updateTaskStatus(taskId, 'in_progress'),\n        db.recordMetric('task_started', 1, agentId),\n        db.storeMemory(`task_${taskId}_state`, { phase: 'initialization' }),\n      ]);\n\n      // Verify all updates\n      const agent = await db.getAgent(agentId);\n      const task = await db.get('SELECT * FROM tasks WHERE id = ?', [taskId]);\n      const taskState = await db.getMemory(`task_${taskId}_state`);\n\n      assert.strictEqual(agent.status, 'busy');\n      assert.strictEqual(task.status, 'in_progress');\n      assert.deepStrictEqual(taskState, { phase: 'initialization' });\n    });\n\n    // Test Data Recovery\n    await test('Database Recovery After Close/Reopen', async() => {\n      // Store test data\n      const testKey = 'recovery_test';\n      const testValue = { important: 'data', timestamp: Date.now() };\n      await db.storeMemory(testKey, testValue);\n\n      // Close database\n      await db.close();\n\n      // Reopen and verify data persists\n      await db.connect();\n      const retrieved = await db.getMemory(testKey);\n      assert.deepStrictEqual(retrieved, testValue);\n    });\n\n    // Test Cleanup Operations\n    await test('Expired Memory Cleanup', async() => {\n      // Create some expired entries\n      for (let i = 0; i < 5; i++) {\n        await db.run(\n          'INSERT INTO memory (key, value, expires_at) VALUES (?, ?, ?)',\n          [`expired_${i}`, '{}', new Date(Date.now() - 1000).toISOString()],\n        );\n      }\n\n      // Create valid entries\n      await db.storeMemory('valid_entry', { valid: true });\n\n      // Run cleanup\n      const result = await db.cleanupExpiredMemory();\n      assert(result.changes >= 5);\n\n      // Verify valid entry remains\n      const valid = await db.getMemory('valid_entry');\n      assert(valid);\n    });\n\n    // Test Performance with Large Dataset\n    await test('Performance: Bulk Operations', async() => {\n      const startTime = Date.now();\n      const count = 100;\n\n      // Bulk insert agents\n      const agents = [];\n      for (let i = 0; i < count; i++) {\n        agents.push(db.createAgent({\n          id: uuidv4(),\n          name: `perf-agent-${i}`,\n          agent_type: ['researcher', 'coder', 'analyst'][i % 3],\n          capabilities: { index: i },\n        }));\n      }\n\n      await Promise.all(agents);\n      const insertTime = Date.now() - startTime;\n\n      // Query performance\n      const queryStart = Date.now();\n      const coders = await db.all(\n        'SELECT * FROM agents WHERE agent_type = ?',\n        ['coder'],\n      );\n      const queryTime = Date.now() - queryStart;\n\n      console.log(`   Inserted ${count} agents in ${insertTime}ms`);\n      console.log(`   Queried ${coders.length} coders in ${queryTime}ms`);\n\n      assert(insertTime < 5000); // Should complete within 5 seconds\n      assert(queryTime < 100); // Query should be fast\n    });\n\n  } catch (error) {\n    console.error('Test suite error:', error);\n    results.failed++;\n  } finally {\n    await db.close();\n    // Clean up test database\n    try {\n      await fs.unlink(TEST_DB_PATH);\n    } catch (err) {\n      // Ignore cleanup errors\n    }\n  }\n\n  // Summary\n  console.log('\\n📊 Persistence Test Results');\n  console.log('─'.repeat(50));\n  console.log(`Total Tests: ${results.passed + results.failed}`);\n  console.log(`✅ Passed: ${results.passed}`);\n  console.log(`❌ Failed: ${results.failed}`);\n\n  if (results.errors.length > 0) {\n    console.log('\\n❌ Failed Tests:');\n    results.errors.forEach(e => {\n      console.log(`  - ${e.test}: ${e.error}`);\n    });\n  }\n\n  return results.failed === 0;\n}\n\n// Export for use in other test suites\nexport { SwarmPersistence, runPersistenceTests };\n\n// Run tests when this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  runPersistenceTests()\n    .then(passed => process.exit(passed ? 0 : 1))\n    .catch(error => {\n      console.error('Fatal error:', error);\n      process.exit(1);\n    });\n}"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA,OAAOA,MAAM,MAAM,QAAQ;AAC3B,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC,CAACC,OAAO,CAAC,CAAC;AAC5C,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,QAAQ,IAAIC,EAAE,QAAQ,IAAI;AACnC,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AACnC,SAASC,aAAa,QAAQ,KAAK;AACnC,SAASC,OAAO,QAAQ,MAAM;AAE9B,MAAMC,UAAU,GAAGF,aAAa,CAACG,MAAM,CAACC,IAAI,CAACC,GAAG,CAAC;AACjD,MAAMC,SAAS,GAAGL,OAAO,CAACC,UAAU,CAAC;;AAErC;AACA,MAAMK,YAAY,GAAGZ,IAAI,CAACa,IAAI,CAACF,SAAS,EAAE,eAAe,CAAC;;AAE1D;AACA,MAAMG,gBAAgB,CAAC;EACrBC,WAAWA,CAACC,MAAM,EAAE;IAClB,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,EAAE,GAAG,IAAI;EAChB;EAEMC,OAAOA,CAAA,EAAG;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACd,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACtCJ,KAAI,CAACF,EAAE,GAAG,IAAIpB,OAAO,CAAC2B,QAAQ,CAACL,KAAI,CAACH,MAAM,EAAGS,GAAG,IAAK;UACnD,IAAIA,GAAG,EAAE;YACPF,MAAM,CAACE,GAAG,CAAC;UACb,CAAC,MAAM;YACLH,OAAO,CAAC,CAAC;UACX;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;IAAC;EACL;EAEMI,KAAKA,CAAA,EAAG;IAAA,IAAAC,MAAA;IAAA,OAAAP,iBAAA;MACZ,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACtC,IAAII,MAAI,CAACV,EAAE,EAAE;UACXU,MAAI,CAACV,EAAE,CAACS,KAAK,CAAED,GAAG,IAAK;YACrB,IAAIA,GAAG,EAAE;cACPF,MAAM,CAACE,GAAG,CAAC;YACb,CAAC,MAAM;cACLH,OAAO,CAAC,CAAC;YACX;UACF,CAAC,CAAC;QACJ,CAAC,MAAM;UACLA,OAAO,CAAC,CAAC;QACX;MACF,CAAC,CAAC;IAAC;EACL;EAEMM,UAAUA,CAAA,EAAG;IAAA,IAAAC,MAAA;IAAA,OAAAT,iBAAA;MACjB,MAAMU,MAAM,GAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;MAEL,OAAO,IAAIT,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACtCM,MAAI,CAACZ,EAAE,CAACc,IAAI,CAACD,MAAM,EAAGL,GAAG,IAAK;UAC5B,IAAIA,GAAG,EAAE;YACPF,MAAM,CAACE,GAAG,CAAC;UACb,CAAC,MAAM;YACLH,OAAO,CAAC,CAAC;UACX;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;IAAC;EACL;;EAEA;EACMU,WAAWA,CAACC,KAAK,EAAE;IAAA,IAAAC,MAAA;IAAA,OAAAd,iBAAA;MACvB,MAAMe,GAAG,GAAG;AAChB;AACA;AACA,SAAS;MACL,OAAOD,MAAI,CAACE,GAAG,CAACD,GAAG,EAAE,CACnBF,KAAK,CAACI,EAAE,EACRJ,KAAK,CAACK,IAAI,EACVL,KAAK,CAACM,UAAU,EAChBN,KAAK,CAACO,MAAM,IAAI,QAAQ,EACxBC,IAAI,CAACC,SAAS,CAACT,KAAK,CAACU,YAAY,IAAI,CAAC,CAAC,CAAC,CACzC,CAAC;IAAC;EACL;EAEMC,QAAQA,CAACP,EAAE,EAAE;IAAA,IAAAQ,MAAA;IAAA,OAAAzB,iBAAA;MA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","ignoreList":[]}