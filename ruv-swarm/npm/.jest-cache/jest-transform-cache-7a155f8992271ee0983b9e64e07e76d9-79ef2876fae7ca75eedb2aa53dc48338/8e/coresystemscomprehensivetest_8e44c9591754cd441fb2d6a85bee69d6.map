{"version":3,"names":["assert","fileURLToPath","path","fs","EventEmitter","RuvSwarm","Swarm","Agent","Task","DAAService","daaService","WasmModuleLoader","SwarmPersistence","RuvSwarmError","ValidationError","SwarmError","AgentError","TaskError","NeuralError","WasmError","ConfigurationError","NetworkError","PersistenceError","ResourceError","ConcurrencyError","ErrorFactory","ErrorContext","ValidationUtils","MCPSchemas","BaseValidator","__filename","import","meta","url","__dirname","dirname","describe","testInstances","beforeEach","global","_ruvSwarmInstance","_ruvSwarmInitialized","afterEach","_asyncToGenerator","instance","cleanup","error","console","warn","message","it","instance1","initialize","debug","instance2","strictEqual","push","wasmLoader","features","originalInit","prototype","Error","rejects","enableNeuralNetworks","enablePersistence","persistence","undefined","enableForecasting","neural_networks","forecasting","simdSupported","detectSIMDSupport","originalLoadModule","loadModule","detectFeatures","cognitive_diversity","simd_support","swarm","createSwarm","id","activeSwarms","size","existingId","name","topology","agents","Map","tasks","originalCreate","agent","spawn","type","enableNeuralNetwork","neuralNetworkId","orchestrate","description","requiredCapabilities","capabilities","task","maxAgents","assignedAgents","length","Promise","resolve","setTimeout","includes","status","metrics","getGlobalMetrics","totalAgents","totalTasks","totalSwarms","memoryUsage","wasm_modules","timestamp","getSwarmStatus","allSwarms","getAllSwarms","version","getVersion","memoryInfo","getMemoryUsage","used","total","limit","getRuntimeFeatures","webassembly","simd","workers","shared_array_buffer","bigint","service","initialized","agentStates","uninitialized","getCapabilities","autonomousLearning","peerCoordination","cognitivePatterns","createAgent","has","cognitivePattern","learningRate","config","wasmModule","wasmAgent","make_decision","originalLoad","loadFromStorage","restored","state","destroyed","destroyAgent","result","adaptAgent","performanceScore","feedback","previousPattern","newPattern","improvement","Array","isArray","insights","getAgentLearningStatus","totalCycles","avgProficiency","domains","adaptationRate","detailedMetrics","getSystemLearningStatus","workflow","createWorkflow","_ref37","apply","arguments","_ref38","steps","executeWorkflow","agentIds","parallel","complete","stepsCompleted","stepResults","shareKnowledge","content","domain","updatedAgents","transferRate","performMetaLearning","sourceDomain","targetDomain","transferMode","knowledgeItems","proficiencyGain","analysis","analyzeCognitivePatterns","patterns","effectiveness","recommendations","optimizationScore","setCognitivePattern","success","expectedImprovement","decision","makeDecision","context","decisionsMade","averageResponseTime","getPerformanceMetrics","category","timeRange","activeAgents","tasksCompleted","avgTaskTime","successRate","states","synchronizeStates","optimizeResources","memoryOptimized","cpuOptimized","optimizationGain","configs","results","batchCreateAgents","every","r","decisions","agentId","batchMakeDecisions","getStatus","workflows","wasm","performance","loader","loadingStrategy","modules","proxies","coreModule","exports","neuralModule","module1","module2","getModuleStatus","core","loaded","loading","placeholder","getTotalMemoryUsage","initialCacheSize","wasmCache","clearCache","optimization","optimizeMemory","cacheSize","expiredEntries","originalBaseDir","baseDir","module","isPlaceholder","originalReadFile","readFile","Uint8Array","_placeholder","memory","imports","_importsFor","env","wasi_snapshot_preview1","neural","log_training_progress","log_forecast","buffer","ArrayBuffer","view","random_get"],"sources":["core-systems-comprehensive.test.js"],"sourcesContent":["/**\n * Core Systems Comprehensive Coverage Test Suite\n * Target: 90%+ coverage for critical core system components\n * Files: index-enhanced.js, daa-service.js, wasm-loader.js, schemas.js, persistence.js, errors.js, mcp-tools-enhanced.js\n */\n\nimport assert from 'assert';\nimport { fileURLToPath } from 'url';\nimport path from 'path';\nimport fs from 'fs/promises';\nimport { EventEmitter } from 'events';\n\n// Test imports\nimport { RuvSwarm, Swarm, Agent, Task, DAAService, daaService } from '../src/index-enhanced.js';\nimport { WasmModuleLoader } from '../src/wasm-loader.js';\nimport { SwarmPersistence } from '../src/persistence.js';\nimport { \n  RuvSwarmError,\n  ValidationError,\n  SwarmError,\n  AgentError,\n  TaskError,\n  NeuralError,\n  WasmError,\n  ConfigurationError,\n  NetworkError,\n  PersistenceError,\n  ResourceError,\n  ConcurrencyError,\n  ErrorFactory,\n  ErrorContext\n} from '../src/errors.js';\nimport { ValidationUtils, MCPSchemas, BaseValidator } from '../src/schemas.js';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\ndescribe('Core Systems Comprehensive Coverage Tests', () => {\n\n  // Test setup and cleanup\n  let testInstances = [];\n\n  beforeEach(() => {\n    testInstances = [];\n    // Reset global state\n    if (global._ruvSwarmInstance) {\n      global._ruvSwarmInstance = null;\n    }\n    if (global._ruvSwarmInitialized) {\n      global._ruvSwarmInitialized = 0;\n    }\n  });\n\n  afterEach(async () => {\n    // Cleanup all test instances\n    for (const instance of testInstances) {\n      if (instance && typeof instance.cleanup === 'function') {\n        try {\n          await instance.cleanup();\n        } catch (error) {\n          console.warn('Cleanup error:', error.message);\n        }\n      }\n    }\n    testInstances = [];\n  });\n\n  describe('RuvSwarm Enhanced Core (index-enhanced.js)', () => {\n\n    describe('Initialization Edge Cases', () => {\n      \n      it('should handle duplicate initialization gracefully', async () => {\n        const instance1 = await RuvSwarm.initialize({ debug: true });\n        const instance2 = await RuvSwarm.initialize({ debug: true });\n        \n        assert.strictEqual(instance1, instance2, 'Should return same instance');\n        assert.strictEqual(global._ruvSwarmInitialized, 2, 'Should track initialization calls');\n        \n        testInstances.push(instance1);\n      });\n\n      it('should handle initialization with minimal options', async () => {\n        const instance = await RuvSwarm.initialize({});\n        \n        assert(instance instanceof RuvSwarm, 'Should create RuvSwarm instance');\n        assert(instance.wasmLoader, 'Should have WASM loader');\n        assert(instance.features, 'Should have features object');\n        \n        testInstances.push(instance);\n      });\n\n      it('should handle initialization failures gracefully', async () => {\n        // Mock WASM loader to fail\n        const originalInit = WasmModuleLoader.prototype.initialize;\n        WasmModuleLoader.prototype.initialize = async () => {\n          throw new Error('WASM initialization failed');\n        };\n\n        try {\n          await assert.rejects(\n            () => RuvSwarm.initialize({ enableNeuralNetworks: true }),\n            /Failed to initialize ruv-swarm/\n          );\n        } finally {\n          WasmModuleLoader.prototype.initialize = originalInit;\n        }\n      });\n\n      it('should handle persistence initialization failures', async () => {\n        const instance = await RuvSwarm.initialize({ enablePersistence: true });\n        \n        // Should continue without persistence on error\n        assert(instance.persistence !== undefined, 'Should handle persistence gracefully');\n        \n        testInstances.push(instance);\n      });\n\n      it('should handle neural network loading failures', async () => {\n        const instance = await RuvSwarm.initialize({ \n          enableNeuralNetworks: true,\n          enableForecasting: true \n        });\n        \n        // Should gracefully degrade features\n        assert(typeof instance.features.neural_networks === 'boolean', 'Should set neural networks feature');\n        assert(typeof instance.features.forecasting === 'boolean', 'Should set forecasting feature');\n        \n        testInstances.push(instance);\n      });\n\n    });\n\n    describe('Feature Detection', () => {\n\n      it('should detect SIMD support correctly', () => {\n        const simdSupported = RuvSwarm.detectSIMDSupport();\n        assert(typeof simdSupported === 'boolean', 'Should return boolean for SIMD support');\n      });\n\n      it('should handle feature detection failures', async () => {\n        const instance = new RuvSwarm();\n        \n        // Mock WASM loader to fail\n        const originalLoadModule = instance.wasmLoader.loadModule;\n        instance.wasmLoader.loadModule = async () => {\n          throw new Error('Module loading failed');\n        };\n\n        try {\n          await instance.detectFeatures(true);\n          // Should not throw, should log warning\n          assert(true, 'Should handle detection failures gracefully');\n        } finally {\n          instance.wasmLoader.loadModule = originalLoadModule;\n        }\n      });\n\n      it('should set appropriate default features', async () => {\n        const instance = await RuvSwarm.initialize();\n        \n        assert(typeof instance.features.neural_networks === 'boolean');\n        assert(typeof instance.features.forecasting === 'boolean');\n        assert(typeof instance.features.cognitive_diversity === 'boolean');\n        assert(typeof instance.features.simd_support === 'boolean');\n        \n        testInstances.push(instance);\n      });\n\n    });\n\n    describe('Swarm Creation and Management', () => {\n\n      it('should create swarm with minimal configuration', async () => {\n        const instance = await RuvSwarm.initialize();\n        const swarm = await instance.createSwarm({});\n        \n        assert(swarm instanceof Swarm, 'Should create Swarm instance');\n        assert(swarm.id, 'Should have unique ID');\n        assert.strictEqual(instance.activeSwarms.size, 1, 'Should track active swarms');\n        \n        testInstances.push(instance);\n      });\n\n      it('should create swarm with existing ID (persistence loading)', async () => {\n        const instance = await RuvSwarm.initialize();\n        const existingId = 'swarm-12345';\n        \n        const swarm = await instance.createSwarm({\n          id: existingId,\n          name: 'test-swarm'\n        });\n        \n        assert.strictEqual(swarm.id, existingId, 'Should use provided ID');\n        \n        testInstances.push(instance);\n      });\n\n      it('should handle WASM swarm creation failures', async () => {\n        const instance = await RuvSwarm.initialize();\n        \n        // Should fallback to JavaScript implementation\n        const swarm = await instance.createSwarm({\n          name: 'fallback-test',\n          topology: 'mesh'\n        });\n        \n        assert(swarm, 'Should create swarm with fallback');\n        assert(swarm.agents instanceof Map, 'Should have agents map');\n        assert(swarm.tasks instanceof Map, 'Should have tasks map');\n        \n        testInstances.push(instance);\n      });\n\n      it('should handle persistence errors during swarm creation', async () => {\n        const instance = await RuvSwarm.initialize({ enablePersistence: true });\n        \n        if (instance.persistence) {\n          // Mock persistence to fail\n          const originalCreate = instance.persistence.createSwarm;\n          instance.persistence.createSwarm = () => {\n            throw new Error('Database error');\n          };\n\n          try {\n            const swarm = await instance.createSwarm({ name: 'error-test' });\n            assert(swarm, 'Should create swarm despite persistence error');\n          } finally {\n            instance.persistence.createSwarm = originalCreate;\n          }\n        }\n        \n        testInstances.push(instance);\n      });\n\n    });\n\n    describe('Agent Spawning and Task Orchestration', () => {\n\n      it('should spawn agent with minimal configuration', async () => {\n        const instance = await RuvSwarm.initialize();\n        const swarm = await instance.createSwarm({});\n        \n        const agent = await swarm.spawn({});\n        \n        assert(agent instanceof Agent, 'Should create Agent instance');\n        assert(agent.id, 'Should have unique ID');\n        assert.strictEqual(swarm.agents.size, 1, 'Should track spawned agents');\n        \n        testInstances.push(instance);\n      });\n\n      it('should spawn agent with existing ID (persistence loading)', async () => {\n        const instance = await RuvSwarm.initialize();\n        const swarm = await instance.createSwarm({});\n        const existingId = 'agent-12345';\n        \n        const agent = await swarm.spawn({\n          id: existingId,\n          type: 'researcher'\n        });\n        \n        assert.strictEqual(agent.id, existingId, 'Should use provided ID');\n        \n        testInstances.push(instance);\n      });\n\n      it('should handle neural network loading for agents', async () => {\n        const instance = await RuvSwarm.initialize({ enableNeuralNetworks: true });\n        const swarm = await instance.createSwarm({});\n        \n        const agent = await swarm.spawn({\n          type: 'researcher',\n          enableNeuralNetwork: true\n        });\n        \n        assert(agent.neuralNetworkId, 'Should have neural network ID when enabled');\n        \n        testInstances.push(instance);\n      });\n\n      it('should orchestrate tasks with no available agents', async () => {\n        const instance = await RuvSwarm.initialize();\n        const swarm = await instance.createSwarm({});\n        \n        await assert.rejects(\n          () => swarm.orchestrate({\n            description: 'Test task',\n            requiredCapabilities: ['testing']\n          }),\n          /No agents available/\n        );\n        \n        testInstances.push(instance);\n      });\n\n      it('should orchestrate tasks with capability filtering', async () => {\n        const instance = await RuvSwarm.initialize();\n        const swarm = await instance.createSwarm({});\n        \n        await swarm.spawn({ type: 'researcher', capabilities: ['research'] });\n        await swarm.spawn({ type: 'coder', capabilities: ['coding'] });\n        \n        const task = await swarm.orchestrate({\n          description: 'Research task',\n          requiredCapabilities: ['research'],\n          maxAgents: 1\n        });\n        \n        assert(task instanceof Task, 'Should create Task instance');\n        assert.strictEqual(task.assignedAgents.length, 1, 'Should assign correct number of agents');\n        \n        testInstances.push(instance);\n      });\n\n      it('should handle agent status updates during task execution', async () => {\n        const instance = await RuvSwarm.initialize();\n        const swarm = await instance.createSwarm({});\n        \n        const agent = await swarm.spawn({ type: 'researcher' });\n        const task = await swarm.orchestrate({\n          description: 'Test task'\n        });\n        \n        // Wait for task execution to start\n        await new Promise(resolve => setTimeout(resolve, 100));\n        \n        assert(['busy', 'idle'].includes(agent.status), 'Agent should have valid status');\n        \n        testInstances.push(instance);\n      });\n\n    });\n\n    describe('Metrics and Monitoring', () => {\n\n      it('should generate comprehensive global metrics', async () => {\n        const instance = await RuvSwarm.initialize();\n        const swarm = await instance.createSwarm({});\n        await swarm.spawn({ type: 'researcher' });\n        \n        const metrics = await instance.getGlobalMetrics();\n        \n        assert(typeof metrics.totalAgents === 'number');\n        assert(typeof metrics.totalTasks === 'number');\n        assert(typeof metrics.totalSwarms === 'number');\n        assert(typeof metrics.memoryUsage === 'number');\n        assert(metrics.features);\n        assert(metrics.wasm_modules);\n        assert(metrics.timestamp);\n        \n        testInstances.push(instance);\n      });\n\n      it('should handle swarm status for non-existent swarm', async () => {\n        const instance = await RuvSwarm.initialize();\n        \n        await assert.rejects(\n          () => instance.getSwarmStatus('non-existent'),\n          /Swarm not found/\n        );\n        \n        testInstances.push(instance);\n      });\n\n      it('should get all swarms status', async () => {\n        const instance = await RuvSwarm.initialize();\n        await instance.createSwarm({ name: 'swarm1' });\n        await instance.createSwarm({ name: 'swarm2' });\n        \n        const allSwarms = await instance.getAllSwarms();\n        \n        assert.strictEqual(allSwarms.length, 2, 'Should return all swarms');\n        assert(allSwarms[0].id, 'Each swarm should have ID');\n        assert(allSwarms[0].status, 'Each swarm should have status');\n        \n        testInstances.push(instance);\n      });\n\n    });\n\n    describe('Static Utility Methods', () => {\n\n      it('should return correct version', () => {\n        const version = RuvSwarm.getVersion();\n        assert.strictEqual(version, '0.2.0');\n      });\n\n      it('should get memory usage information', () => {\n        const memoryInfo = RuvSwarm.getMemoryUsage();\n        \n        if (memoryInfo) {\n          assert(typeof memoryInfo.used === 'number');\n          assert(typeof memoryInfo.total === 'number');\n          assert(typeof memoryInfo.limit === 'number');\n        }\n      });\n\n      it('should get runtime features', () => {\n        const features = RuvSwarm.getRuntimeFeatures();\n        \n        assert(typeof features.webassembly === 'boolean');\n        assert(typeof features.simd === 'boolean');\n        assert(typeof features.workers === 'boolean');\n        assert(typeof features.shared_array_buffer === 'boolean');\n        assert(typeof features.bigint === 'boolean');\n      });\n\n    });\n\n  });\n\n  describe('DAA Service (daa-service.js)', () => {\n\n    describe('Service Initialization', () => {\n\n      it('should initialize service successfully', async () => {\n        const service = new DAAService();\n        await service.initialize();\n        \n        assert(service.initialized, 'Should be marked as initialized');\n        assert(service.wasmLoader, 'Should have WASM loader');\n        assert(service.agents instanceof Map, 'Should have agents map');\n        assert(service.agentStates, 'Should have agent state manager');\n        \n        testInstances.push(service);\n      });\n\n      it('should handle WASM initialization failures gracefully', async () => {\n        const service = new DAAService();\n        \n        // Mock WASM loader to fail\n        const originalInit = service.wasmLoader.initialize;\n        service.wasmLoader.initialize = async () => {\n          throw new Error('WASM failed');\n        };\n\n        try {\n          await service.initialize();\n          assert(service.initialized, 'Should initialize with fallback');\n        } finally {\n          service.wasmLoader.initialize = originalInit;\n        }\n        \n        testInstances.push(service);\n      });\n\n      it('should provide capabilities information', () => {\n        const service = new DAAService();\n        \n        const uninitialized = service.getCapabilities();\n        assert.strictEqual(uninitialized.autonomousLearning, false);\n        assert.strictEqual(uninitialized.peerCoordination, false);\n        \n        service.initialized = true;\n        const initialized = service.getCapabilities();\n        assert.strictEqual(initialized.autonomousLearning, true);\n        assert.strictEqual(initialized.peerCoordination, true);\n        assert.strictEqual(initialized.cognitivePatterns, 6);\n      });\n\n    });\n\n    describe('Agent Lifecycle Management', () => {\n\n      it('should create agent with old signature (id, capabilities)', async () => {\n        const service = new DAAService();\n        await service.initialize();\n        \n        const agent = await service.createAgent('test-agent', ['research', 'analysis']);\n        \n        assert.strictEqual(agent.id, 'test-agent');\n        assert(agent.capabilities.has('research'));\n        assert(agent.capabilities.has('analysis'));\n        \n        testInstances.push(service);\n      });\n\n      it('should create agent with new signature (config object)', async () => {\n        const service = new DAAService();\n        await service.initialize();\n        \n        const agent = await service.createAgent({\n          id: 'test-agent-2',\n          capabilities: ['coding'],\n          cognitivePattern: 'convergent',\n          learningRate: 0.01\n        });\n        \n        assert.strictEqual(agent.id, 'test-agent-2');\n        assert.strictEqual(agent.cognitivePattern, 'convergent');\n        assert.strictEqual(agent.config.learningRate, 0.01);\n        \n        testInstances.push(service);\n      });\n\n      it('should handle WASM agent creation failures', async () => {\n        const service = new DAAService();\n        await service.initialize();\n        service.wasmModule = null; // Force fallback\n        \n        const agent = await service.createAgent('fallback-agent', []);\n        \n        assert(agent, 'Should create agent with fallback');\n        assert(typeof agent.wasmAgent.make_decision === 'function');\n        \n        testInstances.push(service);\n      });\n\n      it('should load persisted agent state', async () => {\n        const service = new DAAService();\n        await service.initialize();\n        \n        // Mock persisted state\n        const originalLoad = service.agentStates.loadFromStorage;\n        service.agentStates.loadFromStorage = async () => ({\n          status: 'restored',\n          metrics: { restored: true }\n        });\n\n        try {\n          const agent = await service.createAgent('restored-agent', []);\n          assert(agent.state, 'Should have restored state');\n        } finally {\n          service.agentStates.loadFromStorage = originalLoad;\n        }\n        \n        testInstances.push(service);\n      });\n\n      it('should destroy agent successfully', async () => {\n        const service = new DAAService();\n        await service.initialize();\n        \n        await service.createAgent('temp-agent', []);\n        assert(service.agents.has('temp-agent'));\n        \n        const destroyed = await service.destroyAgent('temp-agent');\n        assert.strictEqual(destroyed, true);\n        assert(!service.agents.has('temp-agent'));\n        \n        testInstances.push(service);\n      });\n\n      it('should handle destroying non-existent agent', async () => {\n        const service = new DAAService();\n        await service.initialize();\n        \n        const destroyed = await service.destroyAgent('non-existent');\n        assert.strictEqual(destroyed, false);\n        \n        testInstances.push(service);\n      });\n\n    });\n\n    describe('Agent Adaptation and Learning', () => {\n\n      it('should adapt agent based on performance feedback', async () => {\n        const service = new DAAService();\n        await service.initialize();\n        \n        const agent = await service.createAgent('adaptive-agent', []);\n        \n        const result = await service.adaptAgent('adaptive-agent', {\n          performanceScore: 0.2,\n          feedback: 'Poor performance'\n        });\n        \n        assert(result.previousPattern);\n        assert(result.newPattern);\n        assert(typeof result.improvement === 'number');\n        assert(Array.isArray(result.insights));\n        \n        testInstances.push(service);\n      });\n\n      it('should handle adaptation for non-existent agent', async () => {\n        const service = new DAAService();\n        await service.initialize();\n        \n        await assert.rejects(\n          () => service.adaptAgent('non-existent', {}),\n          /Agent non-existent not found/\n        );\n        \n        testInstances.push(service);\n      });\n\n      it('should get agent learning status', async () => {\n        const service = new DAAService();\n        await service.initialize();\n        \n        await service.createAgent('learning-agent', []);\n        \n        const status = await service.getAgentLearningStatus('learning-agent');\n        \n        assert(typeof status.totalCycles === 'number');\n        assert(typeof status.avgProficiency === 'number');\n        assert(Array.isArray(status.domains));\n        assert(typeof status.adaptationRate === 'number');\n        assert(status.detailedMetrics);\n        \n        testInstances.push(service);\n      });\n\n      it('should get system-wide learning status', async () => {\n        const service = new DAAService();\n        await service.initialize();\n        \n        await service.createAgent('agent1', []);\n        await service.createAgent('agent2', []);\n        \n        const status = await service.getSystemLearningStatus();\n        \n        assert(typeof status.totalCycles === 'number');\n        assert(typeof status.avgProficiency === 'number');\n        assert(status.detailedMetrics.totalAgents >= 2);\n        \n        testInstances.push(service);\n      });\n\n    });\n\n    describe('Workflow Orchestration', () => {\n\n      it('should create and execute workflow', async () => {\n        const service = new DAAService();\n        await service.initialize();\n        \n        await service.createAgent('worker1', []);\n        await service.createAgent('worker2', []);\n        \n        const workflow = await service.createWorkflow('test-workflow', [\n          { id: 'step1', task: async () => 'result1' },\n          { id: 'step2', task: async () => 'result2' }\n        ], {});\n        \n        assert.strictEqual(workflow.id, 'test-workflow');\n        assert.strictEqual(workflow.steps.size, 2);\n        \n        const result = await service.executeWorkflow('test-workflow', {\n          agentIds: ['worker1', 'worker2'],\n          parallel: true\n        });\n        \n        assert(result.complete);\n        assert.strictEqual(result.stepsCompleted, 2);\n        assert(Array.isArray(result.stepResults));\n        \n        testInstances.push(service);\n      });\n\n      it('should handle workflow execution with no agents', async () => {\n        const service = new DAAService();\n        await service.initialize();\n        \n        await assert.rejects(\n          () => service.executeWorkflow('non-existent'),\n          /Workflow non-existent not found/\n        );\n        \n        testInstances.push(service);\n      });\n\n    });\n\n    describe('Knowledge Sharing and Meta-Learning', () => {\n\n      it('should share knowledge between agents', async () => {\n        const service = new DAAService();\n        await service.initialize();\n        \n        await service.createAgent('source', []);\n        await service.createAgent('target1', []);\n        await service.createAgent('target2', []);\n        \n        const result = await service.shareKnowledge('source', ['target1', 'target2'], {\n          content: 'shared knowledge',\n          domain: 'research'\n        });\n        \n        assert(Array.isArray(result.updatedAgents));\n        assert.strictEqual(result.updatedAgents.length, 2);\n        assert(typeof result.transferRate === 'number');\n        \n        testInstances.push(service);\n      });\n\n      it('should handle knowledge sharing with non-existent source', async () => {\n        const service = new DAAService();\n        await service.initialize();\n        \n        await assert.rejects(\n          () => service.shareKnowledge('non-existent', ['target'], {}),\n          /Source agent non-existent not found/\n        );\n        \n        testInstances.push(service);\n      });\n\n      it('should perform meta-learning across domains', async () => {\n        const service = new DAAService();\n        await service.initialize();\n        \n        await service.createAgent('learner1', []);\n        await service.createAgent('learner2', []);\n        \n        const result = await service.performMetaLearning({\n          sourceDomain: 'research',\n          targetDomain: 'analysis',\n          transferMode: 'adaptive',\n          agentIds: ['learner1', 'learner2']\n        });\n        \n        assert(typeof result.knowledgeItems === 'number');\n        assert(Array.isArray(result.updatedAgents));\n        assert(typeof result.proficiencyGain === 'number');\n        assert(Array.isArray(result.insights));\n        \n        testInstances.push(service);\n      });\n\n    });\n\n    describe('Cognitive Pattern Management', () => {\n\n      it('should analyze cognitive patterns for specific agent', async () => {\n        const service = new DAAService();\n        await service.initialize();\n        \n        await service.createAgent('pattern-agent', []);\n        \n        const analysis = await service.analyzeCognitivePatterns('pattern-agent');\n        \n        assert(Array.isArray(analysis.patterns));\n        assert(typeof analysis.effectiveness === 'number');\n        assert(Array.isArray(analysis.recommendations));\n        assert(typeof analysis.optimizationScore === 'number');\n        \n        testInstances.push(service);\n      });\n\n      it('should analyze system-wide cognitive patterns', async () => {\n        const service = new DAAService();\n        await service.initialize();\n        \n        await service.createAgent('agent1', []);\n        await service.createAgent('agent2', []);\n        \n        const analysis = await service.analyzeCognitivePatterns();\n        \n        assert(Array.isArray(analysis.patterns));\n        assert(typeof analysis.effectiveness === 'number');\n        \n        testInstances.push(service);\n      });\n\n      it('should set cognitive pattern for agent', async () => {\n        const service = new DAAService();\n        await service.initialize();\n        \n        await service.createAgent('pattern-agent', []);\n        \n        const result = await service.setCognitivePattern('pattern-agent', 'divergent');\n        \n        assert(result.previousPattern);\n        assert.strictEqual(result.success, true);\n        assert(typeof result.expectedImprovement === 'number');\n        \n        testInstances.push(service);\n      });\n\n    });\n\n    describe('Performance and Cross-Boundary Communication', () => {\n\n      it('should make decisions with performance tracking', async () => {\n        const service = new DAAService();\n        await service.initialize();\n        \n        const agent = await service.createAgent('decision-agent', []);\n        \n        const decision = await service.makeDecision('decision-agent', {\n          context: 'test decision context'\n        });\n        \n        assert(decision, 'Should return decision result');\n        assert(agent.metrics.decisionsMade >= 1);\n        assert(typeof agent.metrics.averageResponseTime === 'number');\n        \n        testInstances.push(service);\n      });\n\n      it('should handle decision making errors', async () => {\n        const service = new DAAService();\n        await service.initialize();\n        \n        await assert.rejects(\n          () => service.makeDecision('non-existent', {}),\n          /Agent non-existent not found/\n        );\n        \n        testInstances.push(service);\n      });\n\n      it('should get comprehensive performance metrics', async () => {\n        const service = new DAAService();\n        await service.initialize();\n        \n        await service.createAgent('perf-agent', []);\n        \n        const metrics = await service.getPerformanceMetrics({\n          category: 'all',\n          timeRange: '1h'\n        });\n        \n        assert(typeof metrics.totalAgents === 'number');\n        assert(typeof metrics.activeAgents === 'number');\n        assert(typeof metrics.tasksCompleted === 'number');\n        assert(typeof metrics.avgTaskTime === 'number');\n        assert(typeof metrics.successRate === 'number');\n        \n        testInstances.push(service);\n      });\n\n    });\n\n    describe('State Synchronization and Resource Management', () => {\n\n      it('should synchronize states across agents', async () => {\n        const service = new DAAService();\n        await service.initialize();\n        \n        await service.createAgent('sync1', []);\n        await service.createAgent('sync2', []);\n        \n        const states = await service.synchronizeStates(['sync1', 'sync2']);\n        \n        assert(states instanceof Map);\n        \n        testInstances.push(service);\n      });\n\n      it('should optimize resources', async () => {\n        const service = new DAAService();\n        await service.initialize();\n        \n        const result = await service.optimizeResources();\n        \n        assert(typeof result.memoryOptimized === 'boolean');\n        assert(typeof result.cpuOptimized === 'boolean');\n        assert(typeof result.optimizationGain === 'number');\n        \n        testInstances.push(service);\n      });\n\n      it('should perform batch operations efficiently', async () => {\n        const service = new DAAService();\n        await service.initialize();\n        \n        const configs = [\n          { id: 'batch1', capabilities: ['test1'] },\n          { id: 'batch2', capabilities: ['test2'] },\n          { id: 'batch3', capabilities: ['test3'] }\n        ];\n        \n        const results = await service.batchCreateAgents(configs);\n        \n        assert.strictEqual(results.length, 3);\n        assert(results.every(r => r.success), 'All agents should be created successfully');\n        \n        testInstances.push(service);\n      });\n\n      it('should handle batch decision making', async () => {\n        const service = new DAAService();\n        await service.initialize();\n        \n        await service.createAgent('batch-agent', []);\n        \n        const decisions = [\n          { agentId: 'batch-agent', context: { decision: 1 } },\n          { agentId: 'batch-agent', context: { decision: 2 } }\n        ];\n        \n        const results = await service.batchMakeDecisions(decisions);\n        \n        assert.strictEqual(results.length, 2);\n        assert(results.every(r => r.success), 'All decisions should succeed');\n        \n        testInstances.push(service);\n      });\n\n    });\n\n    describe('Service Status and Cleanup', () => {\n\n      it('should provide detailed service status', async () => {\n        const service = new DAAService();\n        await service.initialize();\n        \n        await service.createAgent('status-agent', []);\n        \n        const status = service.getStatus();\n        \n        assert.strictEqual(status.initialized, true);\n        assert(status.agents);\n        assert(status.workflows);\n        assert(status.wasm);\n        assert(status.performance);\n        \n        testInstances.push(service);\n      });\n\n      it('should cleanup resources properly', async () => {\n        const service = new DAAService();\n        await service.initialize();\n        \n        await service.createAgent('cleanup-agent', []);\n        assert(service.agents.size > 0);\n        \n        await service.cleanup();\n        \n        assert.strictEqual(service.agents.size, 0);\n        \n        testInstances.push(service);\n      });\n\n    });\n\n  });\n\n  describe('WASM Module Loader (wasm-loader.js)', () => {\n\n    describe('Loader Initialization', () => {\n\n      it('should initialize with eager strategy', async () => {\n        const loader = new WasmModuleLoader();\n        await loader.initialize('eager');\n        \n        assert.strictEqual(loader.loadingStrategy, 'eager');\n        \n        testInstances.push(loader);\n      });\n\n      it('should initialize with progressive strategy', async () => {\n        const loader = new WasmModuleLoader();\n        await loader.initialize('progressive');\n        \n        assert.strictEqual(loader.loadingStrategy, 'progressive');\n        assert(loader.modules.has('core'), 'Should load core module');\n        \n        testInstances.push(loader);\n      });\n\n      it('should initialize with on-demand strategy', async () => {\n        const loader = new WasmModuleLoader();\n        const proxies = await loader.initialize('on-demand');\n        \n        assert.strictEqual(loader.loadingStrategy, 'on-demand');\n        assert(typeof proxies === 'object', 'Should return proxy objects');\n        \n        testInstances.push(loader);\n      });\n\n      it('should reject unknown loading strategies', async () => {\n        const loader = new WasmModuleLoader();\n        \n        await assert.rejects(\n          () => loader.initialize('unknown'),\n          /Unknown loading strategy/\n        );\n        \n        testInstances.push(loader);\n      });\n\n    });\n\n    describe('Module Loading and Caching', () => {\n\n      it('should load core module with bindings', async () => {\n        const loader = new WasmModuleLoader();\n        const coreModule = await loader.loadModule('core');\n        \n        assert(coreModule, 'Should load core module');\n        assert(coreModule.exports, 'Should have exports');\n        \n        testInstances.push(loader);\n      });\n\n      it('should handle optional module fallbacks', async () => {\n        const loader = new WasmModuleLoader();\n        \n        // Load optional module that doesn't exist\n        const neuralModule = await loader.loadModule('neural');\n        \n        assert(neuralModule, 'Should return fallback module');\n        \n        testInstances.push(loader);\n      });\n\n      it('should cache loaded modules', async () => {\n        const loader = new WasmModuleLoader();\n        \n        const module1 = await loader.loadModule('core');\n        const module2 = await loader.loadModule('core');\n        \n        assert.strictEqual(module1, module2, 'Should return cached module');\n        \n        testInstances.push(loader);\n      });\n\n      it('should handle dependency loading', async () => {\n        const loader = new WasmModuleLoader();\n        \n        // Neural depends on core\n        await loader.loadModule('neural');\n        \n        assert(loader.modules.has('core'), 'Should load dependencies first');\n        \n        testInstances.push(loader);\n      });\n\n      it('should reject unknown modules', async () => {\n        const loader = new WasmModuleLoader();\n        \n        await assert.rejects(\n          () => loader.loadModule('unknown'),\n          /Unknown module: unknown/\n        );\n        \n        testInstances.push(loader);\n      });\n\n    });\n\n    describe('Module Status and Management', () => {\n\n      it('should provide comprehensive module status', async () => {\n        const loader = new WasmModuleLoader();\n        await loader.loadModule('core');\n        \n        const status = loader.getModuleStatus();\n        \n        assert(status.core, 'Should have core module status');\n        assert(typeof status.core.loaded === 'boolean');\n        assert(typeof status.core.loading === 'boolean');\n        assert(typeof status.core.placeholder === 'boolean');\n        assert(typeof status.core.size === 'number');\n        \n        testInstances.push(loader);\n      });\n\n      it('should calculate total memory usage', async () => {\n        const loader = new WasmModuleLoader();\n        await loader.loadModule('core');\n        \n        const memoryUsage = loader.getTotalMemoryUsage();\n        \n        assert(typeof memoryUsage === 'number');\n        assert(memoryUsage >= 0);\n        \n        testInstances.push(loader);\n      });\n\n      it('should clear module cache', async () => {\n        const loader = new WasmModuleLoader();\n        await loader.loadModule('core');\n        \n        const initialCacheSize = loader.wasmCache.size;\n        loader.clearCache();\n        \n        assert.strictEqual(loader.wasmCache.size, 0);\n        assert(initialCacheSize >= 0);\n        \n        testInstances.push(loader);\n      });\n\n      it('should optimize memory usage', async () => {\n        const loader = new WasmModuleLoader();\n        await loader.loadModule('core');\n        \n        const optimization = loader.optimizeMemory();\n        \n        assert(typeof optimization.cacheSize === 'number');\n        assert(typeof optimization.memoryUsage === 'number');\n        assert(typeof optimization.expiredEntries === 'number');\n        \n        testInstances.push(loader);\n      });\n\n    });\n\n    describe('Error Handling and Fallbacks', () => {\n\n      it('should handle core bindings loading failures', async () => {\n        const loader = new WasmModuleLoader();\n        \n        // Mock bindings path to non-existent file\n        const originalBaseDir = loader.baseDir;\n        loader.baseDir = '/non/existent/path';\n        \n        try {\n          const module = await loader.loadModule('core');\n          assert(module.isPlaceholder, 'Should use placeholder on failure');\n        } finally {\n          loader.baseDir = originalBaseDir;\n        }\n        \n        testInstances.push(loader);\n      });\n\n      it('should handle WASM instantiation failures', async () => {\n        const loader = new WasmModuleLoader();\n        \n        // Mock file system to return invalid WASM\n        const originalReadFile = fs.readFile;\n        fs.readFile = async () => new Uint8Array([0, 1, 2, 3]); // Invalid WASM\n        \n        try {\n          const module = await loader.loadModule('core');\n          assert(module, 'Should handle instantiation failure gracefully');\n        } catch (error) {\n          assert(error.message.includes('placeholder') || error.message.includes('instantiate'));\n        } finally {\n          fs.readFile = originalReadFile;\n        }\n        \n        testInstances.push(loader);\n      });\n\n      it('should create placeholder modules for missing files', async () => {\n        const loader = new WasmModuleLoader();\n        \n        // Force placeholder creation\n        const placeholder = loader._placeholder('test');\n        \n        assert(placeholder.isPlaceholder, 'Should mark as placeholder');\n        assert(placeholder.memory, 'Should have memory');\n        assert(placeholder.exports, 'Should have exports');\n        \n        testInstances.push(loader);\n      });\n\n    });\n\n    describe('WASM Import Configuration', () => {\n\n      it('should configure base imports correctly', async () => {\n        const loader = new WasmModuleLoader();\n        const imports = loader._importsFor('core');\n        \n        assert(imports.env, 'Should have env imports');\n        assert(imports.env.memory, 'Should have memory');\n        assert(imports.wasi_snapshot_preview1, 'Should have WASI imports');\n        \n        testInstances.push(loader);\n      });\n\n      it('should configure neural-specific imports', async () => {\n        const loader = new WasmModuleLoader();\n        const imports = loader._importsFor('neural');\n        \n        assert(imports.neural, 'Should have neural-specific imports');\n        assert(typeof imports.neural.log_training_progress === 'function');\n        \n        testInstances.push(loader);\n      });\n\n      it('should configure forecasting-specific imports', async () => {\n        const loader = new WasmModuleLoader();\n        const imports = loader._importsFor('forecasting');\n        \n        assert(imports.forecasting, 'Should have forecasting-specific imports');\n        assert(typeof imports.forecasting.log_forecast === 'function');\n        \n        testInstances.push(loader);\n      });\n\n      it('should handle random number generation', async () => {\n        const loader = new WasmModuleLoader();\n        const imports = loader._importsFor('core');\n        \n        const buffer = new ArrayBuffer(64);\n        const view = new Uint8Array(buffer);\n        const result = imports.wasi_snapshot_preview1.random_get(0, 64);\n        \n        assert.strictEqual(result, 0, 'Should return success code');\n        \n        testInstances.push(loader);\n      });\n\n    });\n\n  });\n\n});"],"mappings":"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","ignoreList":[]}